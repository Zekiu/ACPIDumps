
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20221020
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000E0D  0x02  "AMD   "  "CPMDFIG2"  0x00000001  "INTL"   0x20120913
 02)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x00000001  "MSFT"   0x00010013
 03)  APIC  0x0000015E  0x05  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00010013
 04)  CRAT  0x00000B68  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 05)  SSDT  0x000001AD  0x02  "ALASKA"  "CPUSSDT "  0x00000001  "AMI "   0x00000001
 06)  TPM2  0x0000004C  0x04  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00000000
 07)  VFCT  0x00015CA0  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x31504F47
 08)  SSDT  0x0000013D  0x02  "AMD   "  "EXTGPP00"  0x00000001  "INTL"   0x20120913
 09)  SSDT  0x00000085  0x02  "AMD Am"  "AmdTable"  0x00000001  "INTL"   0x20120913
 10)  CDIT  0x00000029  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 11)  DSDT  0x0002F9F7  0x02  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20120913
 12)  SSDT  0x00008868  0x02  "AMD   "  "CPMCMN  "  0x00000001  "INTL"   0x20120913
 13)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00010013
 14)  SSDT  0x000000BC  0x02  "AMD   "  "MEMTOOL0"  0x00000002  "INTL"   0x20120913
 15)  SSDT  0x0000250B  0x02  "AMD   "  "CDFAAIG2"  0x00000001  "INTL"   0x20120913
 16)  SSDT  0x000000A7  0x02  "AMD   "  "GPIO    "  0x00000001  "INTL"   0x20120913
 17)  SSDT  0x00003A7E  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 18)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00010013
 19)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x01000013
 20)  SSDT  0x00007B85  0x02  "AMD   "  "Splinter"  0x00000002  "MSFT"   0x05000000
 21)  SSDT  0x00002291  0x02  "AMD   "  "AOD     "  0x00000001  "INTL"   0x20120913
 22)  SSDT  0x00000042  0x02  "AMD   "  "AMDWOV  "  0x00000001  "INTL"   0x20120913
 23)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00000005
 24)  SSDT  0x00000450  0x02  "AMD   "  "CPMDFDG2"  0x00000001  "INTL"   0x20120913
 25)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00010013
 26)  FACS  0x00000040  0x02
 27)  BGRT  0x00000038  0x01  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00010013
 28)  SSDT  0x00000242  0x02  "AMD   "  "USB     "  0x00000001  "INTL"   0x20120913

Found 28 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 0000015E
[008h 0008 001h]                    Revision : 05
[009h 0009 001h]                    Checksum : 29
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 02
[037h 0055 001h]               Local Apic ID : 02
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 04
[03Fh 0063 001h]               Local Apic ID : 04
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 06
[047h 0071 001h]               Local Apic ID : 06
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 00 [Processor Local APIC]
[04Dh 0077 001h]                      Length : 08
[04Eh 0078 001h]                Processor ID : 08
[04Fh 0079 001h]               Local Apic ID : 08
[050h 0080 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084 001h]               Subtable Type : 00 [Processor Local APIC]
[055h 0085 001h]                      Length : 08
[056h 0086 001h]                Processor ID : 0A
[057h 0087 001h]               Local Apic ID : 0A
[058h 0088 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092 001h]               Subtable Type : 00 [Processor Local APIC]
[05Dh 0093 001h]                      Length : 08
[05Eh 0094 001h]                Processor ID : 01
[05Fh 0095 001h]               Local Apic ID : 01
[060h 0096 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100 001h]               Subtable Type : 00 [Processor Local APIC]
[065h 0101 001h]                      Length : 08
[066h 0102 001h]                Processor ID : 03
[067h 0103 001h]               Local Apic ID : 03
[068h 0104 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108 001h]               Subtable Type : 00 [Processor Local APIC]
[06Dh 0109 001h]                      Length : 08
[06Eh 0110 001h]                Processor ID : 05
[06Fh 0111 001h]               Local Apic ID : 05
[070h 0112 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116 001h]               Subtable Type : 00 [Processor Local APIC]
[075h 0117 001h]                      Length : 08
[076h 0118 001h]                Processor ID : 07
[077h 0119 001h]               Local Apic ID : 07
[078h 0120 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124 001h]               Subtable Type : 00 [Processor Local APIC]
[07Dh 0125 001h]                      Length : 08
[07Eh 0126 001h]                Processor ID : 09
[07Fh 0127 001h]               Local Apic ID : 09
[080h 0128 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132 001h]               Subtable Type : 00 [Processor Local APIC]
[085h 0133 001h]                      Length : 08
[086h 0134 001h]                Processor ID : 0B
[087h 0135 001h]               Local Apic ID : 0B
[088h 0136 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140 001h]               Subtable Type : 00 [Processor Local APIC]
[08Dh 0141 001h]                      Length : 08
[08Eh 0142 001h]                Processor ID : 0C
[08Fh 0143 001h]               Local Apic ID : 00
[090h 0144 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148 001h]               Subtable Type : 00 [Processor Local APIC]
[095h 0149 001h]                      Length : 08
[096h 0150 001h]                Processor ID : 0D
[097h 0151 001h]               Local Apic ID : 00
[098h 0152 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156 001h]               Subtable Type : 00 [Processor Local APIC]
[09Dh 0157 001h]                      Length : 08
[09Eh 0158 001h]                Processor ID : 0E
[09Fh 0159 001h]               Local Apic ID : 00
[0A0h 0160 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164 001h]               Subtable Type : 00 [Processor Local APIC]
[0A5h 0165 001h]                      Length : 08
[0A6h 0166 001h]                Processor ID : 0F
[0A7h 0167 001h]               Local Apic ID : 00
[0A8h 0168 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172 001h]               Subtable Type : 00 [Processor Local APIC]
[0ADh 0173 001h]                      Length : 08
[0AEh 0174 001h]                Processor ID : 10
[0AFh 0175 001h]               Local Apic ID : 00
[0B0h 0176 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0B4h 0180 001h]               Subtable Type : 00 [Processor Local APIC]
[0B5h 0181 001h]                      Length : 08
[0B6h 0182 001h]                Processor ID : 11
[0B7h 0183 001h]               Local Apic ID : 00
[0B8h 0184 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0BCh 0188 001h]               Subtable Type : 00 [Processor Local APIC]
[0BDh 0189 001h]                      Length : 08
[0BEh 0190 001h]                Processor ID : 12
[0BFh 0191 001h]               Local Apic ID : 00
[0C0h 0192 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0C4h 0196 001h]               Subtable Type : 00 [Processor Local APIC]
[0C5h 0197 001h]                      Length : 08
[0C6h 0198 001h]                Processor ID : 13
[0C7h 0199 001h]               Local Apic ID : 00
[0C8h 0200 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0CCh 0204 001h]               Subtable Type : 00 [Processor Local APIC]
[0CDh 0205 001h]                      Length : 08
[0CEh 0206 001h]                Processor ID : 14
[0CFh 0207 001h]               Local Apic ID : 00
[0D0h 0208 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212 001h]               Subtable Type : 00 [Processor Local APIC]
[0D5h 0213 001h]                      Length : 08
[0D6h 0214 001h]                Processor ID : 15
[0D7h 0215 001h]               Local Apic ID : 00
[0D8h 0216 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220 001h]               Subtable Type : 00 [Processor Local APIC]
[0DDh 0221 001h]                      Length : 08
[0DEh 0222 001h]                Processor ID : 16
[0DFh 0223 001h]               Local Apic ID : 00
[0E0h 0224 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228 001h]               Subtable Type : 00 [Processor Local APIC]
[0E5h 0229 001h]                      Length : 08
[0E6h 0230 001h]                Processor ID : 17
[0E7h 0231 001h]               Local Apic ID : 00
[0E8h 0232 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236 001h]               Subtable Type : 00 [Processor Local APIC]
[0EDh 0237 001h]                      Length : 08
[0EEh 0238 001h]                Processor ID : 18
[0EFh 0239 001h]               Local Apic ID : 00
[0F0h 0240 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244 001h]               Subtable Type : 00 [Processor Local APIC]
[0F5h 0245 001h]                      Length : 08
[0F6h 0246 001h]                Processor ID : 19
[0F7h 0247 001h]               Local Apic ID : 00
[0F8h 0248 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252 001h]               Subtable Type : 00 [Processor Local APIC]
[0FDh 0253 001h]                      Length : 08
[0FEh 0254 001h]                Processor ID : 1A
[0FFh 0255 001h]               Local Apic ID : 00
[100h 0256 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260 001h]               Subtable Type : 00 [Processor Local APIC]
[105h 0261 001h]                      Length : 08
[106h 0262 001h]                Processor ID : 1B
[107h 0263 001h]               Local Apic ID : 00
[108h 0264 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268 001h]               Subtable Type : 00 [Processor Local APIC]
[10Dh 0269 001h]                      Length : 08
[10Eh 0270 001h]                Processor ID : 1C
[10Fh 0271 001h]               Local Apic ID : 00
[110h 0272 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276 001h]               Subtable Type : 00 [Processor Local APIC]
[115h 0277 001h]                      Length : 08
[116h 0278 001h]                Processor ID : 1D
[117h 0279 001h]               Local Apic ID : 00
[118h 0280 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284 001h]               Subtable Type : 00 [Processor Local APIC]
[11Dh 0285 001h]                      Length : 08
[11Eh 0286 001h]                Processor ID : 1E
[11Fh 0287 001h]               Local Apic ID : 00
[120h 0288 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292 001h]               Subtable Type : 00 [Processor Local APIC]
[125h 0293 001h]                      Length : 08
[126h 0294 001h]                Processor ID : 1F
[127h 0295 001h]               Local Apic ID : 00
[128h 0296 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300 001h]               Subtable Type : 04 [Local APIC NMI]
[12Dh 0301 001h]                      Length : 06
[12Eh 0302 001h]                Processor ID : FF
[12Fh 0303 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305 001h]        Interrupt Input LINT : 01

[132h 0306 001h]               Subtable Type : 01 [I/O APIC]
[133h 0307 001h]                      Length : 0C
[134h 0308 001h]                 I/O Apic ID : 20
[135h 0309 001h]                    Reserved : 00
[136h 0310 004h]                     Address : FEC00000
[13Ah 0314 004h]                   Interrupt : 00000000

[13Eh 0318 001h]               Subtable Type : 01 [I/O APIC]
[13Fh 0319 001h]                      Length : 0C
[140h 0320 001h]                 I/O Apic ID : 21
[141h 0321 001h]                    Reserved : 00
[142h 0322 004h]                     Address : FEC01000
[146h 0326 004h]                   Interrupt : 00000018

[14Ah 0330 001h]               Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331 001h]                      Length : 0A
[14Ch 0332 001h]                         Bus : 00
[14Dh 0333 001h]                      Source : 00
[14Eh 0334 004h]                   Interrupt : 00000002
[152h 0338 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340 001h]               Subtable Type : 02 [Interrupt Source Override]
[155h 0341 001h]                      Length : 0A
[156h 0342 001h]                         Bus : 00
[157h 0343 001h]                      Source : 09
[158h 0344 004h]                   Interrupt : 00000009
[15Ch 0348 002h]       Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 05 29 41 4C 41 53 4B 41  // APIC^....)ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 08 08  // ................
    0050: 01 00 00 00 00 08 0A 0A 01 00 00 00 00 08 01 01  // ................
    0060: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    0070: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 09 09  // ................
    0080: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0C 00  // ................
    0090: 00 00 00 00 00 08 0D 00 00 00 00 00 00 08 0E 00  // ................
    00A0: 00 00 00 00 00 08 0F 00 00 00 00 00 00 08 10 00  // ................
    00B0: 00 00 00 00 00 08 11 00 00 00 00 00 00 08 12 00  // ................
    00C0: 00 00 00 00 00 08 13 00 00 00 00 00 00 08 14 00  // ................
    00D0: 00 00 00 00 00 08 15 00 00 00 00 00 00 08 16 00  // ................
    00E0: 00 00 00 00 00 08 17 00 00 00 00 00 00 08 18 00  // ................
    00F0: 00 00 00 00 00 08 19 00 00 00 00 00 00 08 1A 00  // ................
    0100: 00 00 00 00 00 08 1B 00 00 00 00 00 00 08 1C 00  // ................
    0110: 00 00 00 00 00 08 1D 00 00 00 00 00 00 08 1E 00  // ................
    0120: 00 00 00 00 00 08 1F 00 00 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 20 00 00 00 C0 FE 00 00 00 00 01 0C  // .... ...........
    0140: 21 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // !...............
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : CB
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 00000000685D1018
[030h 0048 004h]               Image OffsetX : 0000042C
[034h 0052 004h]               Image OffsetY : 000001BE

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 CB 41 4C 41 53 4B 41  // BGRT8.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 13 00 01 00 01 00 00 00 18 10 5D 68 00 00 00 00  // ..........]h....
    0030: 2C 04 00 00 BE 01 00 00                          // ,.......


CDIT
----
[000h 0000 004h]                   Signature : "CDIT"    
[004h 0004 004h]                Table Length : 00000029
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : E7
[00Ah 0010 006h]                      Oem ID : "AMD"
[010h 0016 008h]                Oem Table ID : "AmdTable"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 E7 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000 004h]                   Signature : "CRAT"    
[004h 0004 004h]                Table Length : 00000B68
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 87
[00Ah 0010 006h]                      Oem ID : "AMD"
[010h 0016 008h]                Oem Table ID : "AmdTable"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 2920 (0xB68)

    0000: 43 52 41 54 68 0B 00 00 01 87 41 4D 44 00 00 00  // CRATh.....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 2E 00 00 00 01 00 00 00 00 00 00 00  // ................
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 0C 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0090: 01 00 00 00 00 00 00 80 07 00 00 00 40 00 00 00  // ............@...
    00A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    00B0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    00E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    00F0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0120: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0130: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0160: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0170: 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 00 00 00 00 80 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    01A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    01B0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    01E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    01F0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0220: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0230: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0260: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0270: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    02B0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    02C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    02F0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0320: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0330: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0360: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0370: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0390: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    03A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    03B0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03D0: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    03E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    03F0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0410: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0420: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0430: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0450: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0460: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0470: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    04A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    04B0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    04E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    04F0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0510: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0520: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0530: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0560: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0570: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0590: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    05A0: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    05B0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    05C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05D0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    05E0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    05F0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0610: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    0620: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    0630: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0650: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0660: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0670: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0690: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    06A0: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    06B0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    06C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06D0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    06E0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    06F0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0710: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    0720: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    0730: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0750: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0760: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0770: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    07A0: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    07B0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    07C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07D0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    07E0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    07F0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    0820: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    0830: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0850: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0860: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0870: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0890: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    08A0: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    08B0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    08C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08D0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    08E0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    08F0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0910: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    0920: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    0930: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0950: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0960: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0970: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0990: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    09A0: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    09B0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09D0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    09E0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    09F0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A10: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    0A20: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    0A30: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A50: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0A60: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0A70: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A90: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    0AA0: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    0AB0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AD0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0AE0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0AF0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    0B20: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    0B30: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B50: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0B60: 00 00 00 00 00 00 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x00000001)
{
    /*
     * iASL Warning: There were 8 external control methods found during
     * disassembly, but only 0 were resolved (8 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE.SIE3, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.DADR, UnknownObj)
    External (_SB_.PCI0.EBUS, IntObj)
    External (_SB_.PCI0.RPRM, UnknownObj)
    External (_SB_.PCI0.SPCH, IntObj)
    External (AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (APTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (HDVD, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M049, IntObj)
    External (M083, UnknownObj)
    External (M460, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M4F0, IntObj)
    External (M4F1, IntObj)
    External (M600, IntObj)
    External (M601, IntObj)
    External (MPTS, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (MWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Name (ENTK, 0x87)
    Name (EXTK, 0xAA)
    Name (IO1B, 0x0280)
    Name (IO1L, 0x10)
    Name (IO2B, 0x0290)
    Name (IO2L, 0x10)
    Name (IO3B, 0x02A0)
    Name (IO3L, 0x10)
    Name (IO4B, 0x02B0)
    Name (IO4L, 0x10)
    Name (SP1O, 0x2E)
    Name (IOES, Zero)
    Name (PEBL, 0x08000000)
    Name (ACPM, One)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, One)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF0000000)
    Name (PELN, 0x08000000)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, Zero)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, Zero)
    Name (DTPT, Zero)
    Name (TTDP, One)
    Name (TPMB, 0x73654000)
    Name (TPBS, 0x4000)
    Name (TPMC, 0x73658000)
    Name (TPCS, 0x4000)
    Name (TPMM, 0xFD210510)
    Name (FTPM, 0xFD210510)
    Name (PPIM, 0x7767EA18)
    Name (PPIL, 0x1C)
    Name (TPMF, One)
    Name (PPIV, One)
    Name (AMDT, 0x01)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (MBEC, Zero)
    Name (NBTP, 0xFEC03000)
    Name (HSPB, 0xFFFFFFFF)
    Name (HSPS, 0xFFFFFFFF)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
    Field (PMRG, AnyAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0x80), 
        SI3R,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,6,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PG07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PG09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PG0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PG0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PG13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PG17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PD24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PG1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x19
            }
        })
        Name (PG1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AG1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x18
            }
        })
        Name (PG1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AG1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1C
            }
        })
        Name (PG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PG27, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG27, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PD00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKB, 
                Zero
            }
        })
        Name (AR00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x19
            }
        })
        Name (PG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG3D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG3D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG3F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG3F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PG40, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG40, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PG41, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG41, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PG42, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG42, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG43, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG43, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0x80000000)
            Name (MBL, 0x7D000000)
            Name (MAB, 0x0000000880000000)
            Name (MAL, 0x000000F780000000)
            Name (MAM, 0x000000FFFFFFFFFF)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (CRSB, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xBBAABBAA,         // Address Base
                            0x00080000,         // Address Length
                            _Y0F)
                    })
                    Local0 = (PEBS + 0x2000)
                    OperationRegion (PCIF, SystemMemory, Local0, 0x0100)
                    Field (PCIF, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x44), 
                        BAR0,   32
                    }

                    Local1 = BAR0 /* \_SB_.PCI0.IOMA._CRS.BAR0 */
                    Local1 &= 0xFFF80000
                    CreateDWordField (CRSB, \_SB.PCI0.IOMA._CRS._Y0F._BAS, CBAR)  // _BAS: Base Address
                    CBAR = Local1
                    Return (CRSB) /* \_SB_.PCI0.IOMA._CRS.CRSB */
                }
            }

            Device (GNBD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (UMAS, 0x0000000020000000)
                    Name (UMAB, 0x0000000858000000)
                    Name (UMAM, 0x0000000877FFFFFF)
                    Name (CRS, ResourceTemplate ()
                    {
                        QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x0000000000000000, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000000000, // Length
                            ,, _Y10, AddressRangeMemory, TypeStatic)
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._MIN, UMIN)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._MAX, UMAX)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._LEN, ULEN)  // _LEN: Length
                        UMIN = UMAB /* \_SB_.PCI0.GNBD.BROD.UMAB */
                        ULEN = UMAS /* \_SB_.PCI0.GNBD.BROD.UMAS */
                        UMAX = UMAM /* \_SB_.PCI0.GNBD.BROD.UMAM */
                        Return (CRS) /* \_SB_.PCI0.GNBD.BROD.CRS_ */
                    }
                }
            }

            Device (D003)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0F, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG07) /* \_SB_.AG07 */
                    }

                    Return (PG07) /* \_SB_.PG07 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG09) /* \_SB_.AG09 */
                    }

                    Return (PG09) /* \_SB_.PG09 */
                }

                Device (D00A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0B) /* \_SB_.AG0B */
                    }

                    Return (PG0B) /* \_SB_.PG0B */
                }

                Device (D00C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0D) /* \_SB_.AG0D */
                    }

                    Return (PG0D) /* \_SB_.PG0D */
                }

                Device (D00E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D00F)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Device (D012)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG13) /* \_SB_.AG13 */
                    }

                    Return (PG13) /* \_SB_.PG13 */
                }

                Device (D014)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPA)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG15) /* \_SB_.AG15 */
                    }

                    Return (PG15) /* \_SB_.PG15 */
                }

                Device (D016)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPB)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG17) /* \_SB_.AG17 */
                    }

                    Return (PG17) /* \_SB_.PG17 */
                }

                Device (D018)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPC)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR24) /* \_SB_.AR24 */
                    }

                    Return (PD24) /* \_SB_.PD24 */
                }

                Device (D01A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPD)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1B) /* \_SB_.AG1B */
                    }

                    Return (PG1B) /* \_SB_.PG1B */
                }

                Device (D01C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPE)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1D) /* \_SB_.AG1D */
                    }

                    Return (PG1D) /* \_SB_.PG1D */
                }

                Device (D01E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPF)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1F) /* \_SB_.AG1F */
                    }

                    Return (PG1F) /* \_SB_.PG1F */
                }

                Device (D020)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D021)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (GPPG)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG22) /* \_SB_.AG22 */
                    }

                    Return (PG22) /* \_SB_.PG22 */
                }

                Device (D023)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPH)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG24) /* \_SB_.AG24 */
                    }

                    Return (PG24) /* \_SB_.PG24 */
                }

                Device (D025)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D026)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG27) /* \_SB_.AG27 */
                    }

                    Return (PG27) /* \_SB_.PG27 */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (AF7E, 0x80000001)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Scope (\)
                    {
                        Mutex (PXPX, 0x00)
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GP17.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((AF7E == 0x80000001))
                            {
                                Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                                AFN7 (Local0)
                            }
                        }
                    }

                    Device (I2SC)
                    {
                        Name (_HID, "I2SC1002")  // _HID: Hardware ID
                        Name (_CID, "AMD1234")  // _CID: Compatible ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (ACPM)
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                        }
                    }
                }

                Device (D02B)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xFD200000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y11)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y11._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y11._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP17.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP17.APSP.CRS_ */
                    }
                }
            }

            Device (D032)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y14)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y13)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y17)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y18)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y13._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y14._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y14._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y14._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y17._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y17._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y18._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y18._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1B)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1C)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1D)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        If (IO4B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1D._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1D._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1D._LEN, GPL4)  // _LEN: Length
                            GP40 = IO4B /* \IO4B */
                            GP41 = IO4B /* \IO4B */
                            GPL4 = IO4L /* \IO4L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x02, 
                        0x03, 
                        One, 
                        Zero, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = ENTK /* \ENTK */
                        INDX = ENTK /* \ENTK */
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = EXTK /* \EXTK */
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    Method (UHID, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x10)
                        EXFG ()
                        If (Local0)
                        {
                            Return (0x1005D041)
                        }
                        Else
                        {
                            Return (0x0105D041)
                        }
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        SCF7,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2F), 
                        SCFF,   8, 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        Local1 = ((IOAH << 0x08) | IOAL) /* \_SB_.PCI0.SBRG.SIO1.IOAL */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y20)
                        IRQNoFlags (_Y1E)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1F)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1F._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y20._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y20._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y20._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y23)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y24)
                        IRQNoFlags (_Y21)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y22)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y24._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y24._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y24._LEN, LEN3)  // _LEN: Length
                    Name (CRS3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y27)
                        IRQ (Level, ActiveLow, Shared, _Y25)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y26)
                            {}
                    })
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._INT, IRQT)  // _INT: Interrupts
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._HE, IRQS)  // _HE_: High-Edge
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y26._DMA, DMAT)  // _DMA: Direct Memory Access
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y27._MIN, IO41)  // _MIN: Minimum Base Address
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y27._MAX, IO42)  // _MAX: Maximum Base Address
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y27._LEN, LEN4)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DCR3, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO41 = (IOAH << 0x08)
                        IO41 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        IO42 = IO41 /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        LEN4 = 0x08
                        If (INTR)
                        {
                            IRQT = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQT = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAT = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAT = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS3) /* \_SB_.PCI0.SBRG.SIO1.CRS3 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Local2 = Arg1
                            If ((Local2 > Zero))
                            {
                                Local2 -= One
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Method (DSR3, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IO41)
                        CreateWordField (Arg0, 0x09, IRQT)
                        CreateByteField (Arg0, 0x0B, IRQS)
                        CreateByteField (Arg0, 0x0D, DMAT)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO41 & 0xFF)
                        IOAH = (IO41 >> 0x08)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x0A)
                            If ((Arg0 == One))
                            {
                                OPT6 &= 0xCF
                                OPT3 = 0xFF
                                OPT4 = 0xFF
                                OPT2 |= One
                            }

                            If ((Arg0 >= 0x03))
                            {
                                RGE0 &= 0x9F
                                Local0 = RGE3 /* \_SB_.PCI0.SBRG.SIO1.RGE3 */
                                Sleep (0xC8)
                            }

                            If ((Arg0 == 0x03))
                            {
                                LDN = 0x0A
                                OPT0 |= 0x20
                                RGE4 |= 0x10
                                LDN = 0x0B
                                OPT7 = 0x45
                                If ((OPT7 == 0x87))
                                {
                                    OPT7 = 0x45
                                }
                            }

                            If ((Arg0 == 0x03))
                            {
                                LDN = 0x07
                                RGE0 &= 0x7F
                                RGE1 &= 0x7F
                            }

                            If ((Arg0 == 0x04))
                            {
                                LDN = 0x07
                                RGE0 &= 0x7F
                                RGE1 &= 0x7F
                            }

                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x0A)
                        If ((Arg0 == One))
                        {
                            PMFG = OPT3 /* \_SB_.PCI0.SBRG.SIO1.OPT3 */
                            OPT3 = 0xFF
                            OPT6 &= 0xCF
                            OPT2 &= 0xFE
                        }

                        If ((Arg0 >= 0x03))
                        {
                            PMFG = RGE3 /* \_SB_.PCI0.SBRG.SIO1.RGE3 */
                            Local0 = RGE3 /* \_SB_.PCI0.SBRG.SIO1.RGE3 */
                            RGE0 &= 0x9F
                            RGE4 &= 0xFE
                        }

                        LDN = 0x0B
                        If ((OPT7 != Zero))
                        {
                            OPT7 = 0x87
                        }

                        LDN = 0x0F
                        RGE5 &= 0xDF
                        SCFF &= 0xF7
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x0B)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SGPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x09)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (CIRW)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (LDN, 0x0E)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3C) /* \_SB_.AG3C */
                    }

                    Return (PG3C) /* \_SB_.PG3C */
                }

                Device (D02E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP19)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3D) /* \_SB_.AG3D */
                    }

                    Return (PG3D) /* \_SB_.PG3D */
                }

                Device (XHC2)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1A, 0x04))
                    }
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3F) /* \_SB_.AG3F */
                    }

                    Return (PG3F) /* \_SB_.PG3F */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG40) /* \_SB_.AG40 */
                    }

                    Return (PG40) /* \_SB_.PG40 */
                }

                Device (D005)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG41) /* \_SB_.AG41 */
                    }

                    Return (PG41) /* \_SB_.PG41 */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG42) /* \_SB_.AG42 */
                    }

                    Return (PG42) /* \_SB_.PG42 */
                }

                Device (D010)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG43) /* \_SB_.AG43 */
                    }

                    Return (PG43) /* \_SB_.PG43 */
                }

                Device (D011)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP9, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPA, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP8, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L1A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP19.XHC2, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0, SPTS (Arg0), \_SB.PCI0.SBRG.SIO1.SIOS (Arg0), \_SB.PCI0.GPTS (Arg0), \_SB.PCI0.NPTS (Arg0))
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        MWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x04)
    Name (UR2I, 0x03)
    Name (UR3I, 0x04)
    Name (UR4I, 0x0F)
    Name (IC0I, 0x0A)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x04)
    Name (IC3I, 0x06)
    Name (IC4I, 0x0E)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
            I31E,   1, 
            I32E,   1, 
            I33E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
            UT4E,   1, 
            I30E,   1, 
                ,   1, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            HFPE,   1, 
            HD0E,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
            I31D,   1, 
            I32D,   1, 
            I33D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   1, 
            UT4D,   1, 
            I30D,   1, 
                ,   1, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            Offset (0x1C), 
            I30M,   1, 
            I31M,   1, 
            I32M,   1, 
            I33M,   1
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == One))
            {
                If ((WUR0 == Arg0))
                {
                    Return (Zero)
                }
            }

            If ((IER1 == One))
            {
                If ((WUR1 == Arg0))
                {
                    Return (One)
                }
            }

            If ((IER2 == One))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == One))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (HID0)
        {
            Name (_HID, "AMDI0063")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HD0E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC13000,         // Address Base
                        0x00000200,         // Address Length
                        )
                    GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x00AB
                        }
                })
                Return (RBUF) /* \_SB_.HID0._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (PPKG)
        {
            Name (_HID, "AMDI0052")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR0I & 0x0F))
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If ((FUIO (Zero) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT0D && UT0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, 0x03)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR1I & 0x0F))
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If ((FUIO (One) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT1D && UT1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, 0x03)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR2I & 0x0F))
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If ((FUIO (0x02) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT2D && UT2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, 0x03)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR3I & 0x0F))
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If ((FUIO (0x03) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT3D && UT3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, 0x03)
                }
            }
        }

        Device (FUR4)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {15}
                    Memory32Fixed (ReadWrite,
                        0xFEDD1000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDD0000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR4I & 0x0F))
                Return (BUF0) /* \_SB_.FUR4._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT4D && UT4E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, 0x03)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC0D && IC0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, 0x03)
                }
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC1D && IC1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, 0x03)
                }
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, 0x03)
                }
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC3D && IC3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, 0x03)
                }
            }
        }

        Name (I3ID, "AMDI0015")
        Name (I2ID, "AMDI0016")
        Device (I3CA)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I30M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDD2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I3CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I30E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x15, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I30D && I30E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, 0x03)
                }
            }
        }

        Device (I3CB)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I31M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDD3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I3CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I31E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0D, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I31D && I31E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, 0x03)
                }
            }
        }

        Device (I3CC)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I32M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDD4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I3CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I32E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0E, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I32D && I32E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, 0x03)
                }
            }
        }

        Device (I3CD)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I33M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDD6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I3CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I33E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0F, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I33D && I33E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, 0x03)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (Zero) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y28)
                    IRQNoFlags (_Y29)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y28._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y28._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y29._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (Zero)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA0 /* \_SB_.IUA0 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (One) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2A)
                    IRQNoFlags (_Y2B)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y2A._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y2A._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y2B._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (One)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA1 /* \_SB_.IUA1 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x02) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2C)
                    IRQNoFlags (_Y2D)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y2C._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y2C._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y2D._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x02)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA2 /* \_SB_.IUA2 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x03) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2E)
                    IRQNoFlags (_Y2F)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y2E._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y2E._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y2F._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x03)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA3 /* \_SB_.IUA3 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Name (ITRV, 0xFFFFFFFF)
        Name (ILVV, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y30)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y31)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y32)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y33)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y34,
                )
                {   // Pin list
                    0x0000
                }
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0x00000000,         // Address Base
                0x00000000,         // Address Length
                _Y35)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y30._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y30._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y31._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y31._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y32._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y32._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) && (TMRQ != 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y33._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y33._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y34._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    If ((AMDT == 0x02))
                    {
                        CreateDWordField (CRSI, \_SB.TPM._Y35._BAS, HSPF)  // _BAS: Base Address
                        CreateDWordField (CRSI, \_SB.TPM._Y35._LEN, HSPL)  // _LEN: Length
                        HSPF = HSPB /* \HSPB */
                        HSPL = HSPS /* \HSPS */
                        Return (CRSI) /* \_SB_.TPM_.CRSI */
                    }

                    CreateDWordField (CRST, \_SB.TPM._Y31._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                If ((AMDT == 0x02)){}
                Else
                {
                    CreateWordField (Arg0, 0x23, IRQ0)
                    CreateWordField (CREI, 0x23, LIRQ)
                    LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    CreateBitField (Arg0, 0x98, ITRG)
                    CreateBitField (CREI, \_SB.TPM._Y34._MOD, LTRG)  // _MOD: Mode
                    LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    ITRV = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    CreateBitField (Arg0, 0x99, ILVL)
                    CreateBitField (CREI, \_SB.TPM._Y34._POL, LLVL)  // _POL: Polarity
                    LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                    ILVV = ILVL /* \_SB_.TPM_._SRS.ILVL */
                }

                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRV == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVV == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Name (GPB1, 0xFEC30000)
    Name (GPB2, 0x5A5A5A5A)
    Name (IOR1, 0x00001F00)
    Name (IOR2, 0x0003FFE2)
    Name (IOR3, 0x00001F00)
    Name (IOR4, 0x00000000)
    Name (IOR5, 0x5A5A5A5A)
    Name (IOR6, 0x5A5A5A5A)
    Name (IOR7, 0x5A5A5A5A)
    Name (IOR8, 0x5A5A5A5A)
    Scope (\_SB.PCI0.GPP7)
    {
        Name (XHGP, 0x02)
        Method (SREG, 2, NotSerialized)
        {
        }

        Method (SPRW, 1, NotSerialized)
        {
        }

        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x02, 
            0x04
        })
        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Name (DPSA, 0xEE)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GPP7.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x0D))
            {
                Local1 = Zero
                While ((Local1 <= Zero))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* External reference */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            ^^DADR = ^^SPCH /* External reference */
                            0x10
                            Local2
                            If (((One = (^^RPRM & (^^DADR + (Local2 + 0x14)))) == 
                                0x40))
                            {
                                Zero
                                0x40
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                If (((ESTA == Zero) && (XHGP <= 0x03)))
                {
                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                    XHGP = M4F1 /* External reference */
                    Local0
                }

                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                If (((ESTA == Zero) && (XHGP <= 0x03)))
                {
                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                    XHGP = M4F1 /* External reference */
                    Local0
                }

                PWST = 0xD3
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            }

            Return (DSTA) /* \_SB_.PCI0.GPP7.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            ^SREG (Arg0, Arg1)
            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
            }
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
        }

        Method (HPRW, 1, NotSerialized)
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
            ^SPRW (Arg0)
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                }

                Return (PW3S) /* \_SB_.PCI0.GPP7.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    HPRW (One)
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    HPRW (Zero)
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                }
            }
        }

        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
        {
            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
            Package (0x01)
            {
                Package (0x02)
                {
                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                    One
                }
            }
        })
        Device (UP00)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (XHGP, 0x02)
            Method (SPRW, 1, NotSerialized)
            {
                If (CondRefOf (\HDVD))
                {
                    If ((Arg0 == One))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPRW.Arg0 = 0x%X\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        \HDVD (Zero)
                    }
                }
            }

            Method (SREG, 2, NotSerialized)
            {
                Local2 = \GPB1
                If ((Local2 != 0x5A5A5A5A))
                {
                    Local0 = (\_SB.PCI0.GPP7.UP00.DADR + 0x40)
                    OperationRegion (VARM, SystemMemory, Local0, 0x09)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        GPBR,   32, 
                        Offset (0x08), 
                        GPEN,   1, 
                        Offset (0x09)
                    }

                    OperationRegion (VARN, SystemMemory, Local2, 0x10)
                    Field (VARN, AnyAcc, NoLock, Preserve)
                    {
                        IOW1,   32, 
                        IOW2,   32, 
                        IOW3,   32, 
                        IOW4,   32
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SREG (0x%X, 0x%X)  GPBR = 0x%X  GPEN = 0x%X\n", DADR, Arg0, Arg1, GPBR, GPEN, Zero)
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        GPBR = Local2
                        GPEN = One
                        IOW1 = IOR1 /* \IOR1 */
                        IOW2 = IOR2 /* \IOR2 */
                        IOW3 = IOR3 /* \IOR3 */
                        IOW4 = IOR4 /* \IOR4 */
                        M460 ("    Restore GPBR = 0x%X  GPEN = 0x%X  IOW1 = 0x%X  IOW2 = 0x%X  IOW3 = 0x%X  IOW4 = 0x%X\n", GPBR, GPEN, IOW1, IOW2, IOW3, IOW4)
                    }
                }
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x02, 
                0x04
            })
            Name (DADR, 0xEEEEEEEE)
            Name (DSTA, 0xEE)
            Name (DBUS, 0xEEEE)
            Name (PCSA, Zero)
            Name (PWST, 0xD3)
            Name (ESTA, 0xEE)
            Name (EBUS, 0xEEEE)
            Name (PW3S, Zero)
            Name (DPSA, 0xEE)
            Method (RPRM, 2, NotSerialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, AnyAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.RPRM.VARR */
                If ((Arg1 == One))
                {
                    Local1 &= 0xFF
                }
                ElseIf ((Arg1 == 0x02))
                {
                    Local1 &= 0xFFFF
                }
                ElseIf ((Arg1 == 0x03))
                {
                    Local1 &= 0x00FFFFFF
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                Return (Local1)
            }

            Method (WPRM, 3, NotSerialized)
            {
                Local0 = Arg0
                If ((Arg1 == One))
                {
                    OperationRegion (VARA, SystemMemory, Local0, One)
                    Field (VARA, AnyAcc, NoLock, Preserve)
                    {
                        VARE,   8
                    }

                    VARE = Arg2
                }
                ElseIf ((Arg1 == 0x02))
                {
                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                    Field (VARB, AnyAcc, NoLock, Preserve)
                    {
                        VARF,   16
                    }

                    VARF = Arg2
                }
                ElseIf ((Arg1 == 0x03))
                {
                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                    Field (VARC, AnyAcc, NoLock, Preserve)
                    {
                        VARG,   24
                    }

                    VARG = Arg2
                }
                Else
                {
                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                    Field (VARD, AnyAcc, NoLock, Preserve)
                    {
                        VARH,   32
                    }

                    VARH = Arg2
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
            }

            Method (SPDP, 1, NotSerialized)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = Zero
                Local0 = Zero
                While ((Local0 <= 0x0D))
                {
                    Local1 = Zero
                    While ((Local1 <= Zero))
                    {
                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                            0x0F) & 0x000F8000))
                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                        Local4 = RPRM ((M083 + Local3), 0x04)
                        If (((Local4 != Local5) && (Local4 != Zero)))
                        {
                            Local2 |= (One << Local0)
                        }
                        ElseIf ((Local1 == Zero))
                        {
                            Break
                        }

                        Local1++
                    }

                    Local0++
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                Return (Local2)
            }

            Method (SPCH, 2, NotSerialized)
            {
                Local0 = Zero
                Local1 = RPRM ((Arg0 + 0x34), One)
                While ((Local1 != Zero))
                {
                    Local2 = RPRM ((DADR + Local1), One)
                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                    {
                        Break
                    }

                    If ((Local2 == Arg1))
                    {
                        Local0 = Local1
                        Break
                    }

                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                Return (Local0)
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                {
                    If ((DBUS == 0xEEEE))
                    {
                        If (CondRefOf (^^EBUS))
                        {
                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.EBUS */
                        }
                        Else
                        {
                            DBUS = Zero
                        }
                    }

                    If ((DBUS != 0xEEEE))
                    {
                        If ((DADR == 0xEEEEEEEE))
                        {
                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                One) & 0x000F8000))
                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                            DADR = (M083 + Local0)
                        }

                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            DSTA = Zero
                            ESTA = Zero
                            If ((DBUS != Zero))
                            {
                                Local2 = ^^SPCH (^^DADR, 0x10)
                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                    0x40) == 0x40))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                        }
                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                        {
                            EBUS = RPRM ((DADR + 0x19), One)
                            Local2 = SPCH (DADR, 0x10)
                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                One) >> 0x04) & 0x0F) == 0x05))
                            {
                                If ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                ElseIf ((SPDP (EBUS) == Zero))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                One) & 0x40) == Zero))
                            {
                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                    0x40) == Zero))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                            ElseIf ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = Zero
                        }
                    }
                    Else
                    {
                        DSTA = Zero
                        ESTA = 0xEE
                    }
                }

                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                {
                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                    {
                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        XHGP = M4F1 /* External reference */
                        Local0
                    }

                    PWST = 0xD0
                }

                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                {
                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                    {
                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        XHGP = M4F1 /* External reference */
                        Local0
                    }

                    PWST = 0xD3
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                }

                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DSTA */
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                Local0 = 0x7FFFFFFF
                Local0 |= 0x80000000
                Local1 = RPRM ((DADR + Zero), 0x04)
                If (((Local1 == Local0) || (Local1 == Zero)))
                {
                    PCSA = Zero
                    PWST = 0xD3
                    PW3S = Zero
                }
                Else
                {
                    PCSA = One
                    PWST = 0xD0
                    PW3S = One
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            }

            Method (_REG, 2, Serialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                        {
                            PCSA = One
                        }
                    }
                }

                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                {
                    PCSA = Zero
                }

                ^SREG (Arg0, Arg1)
                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
            }

            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            }

            Method (HPRW, 1, NotSerialized)
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                ^SPRW (Arg0)
            }

            PowerResource (PWRS, 0x00, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    }

                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.PW3S */
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    If ((PW3S == Zero))
                    {
                        PW3S = One
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        HPRW (One)
                    }
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    If ((PW3S == One))
                    {
                        PW3S = Zero
                        HPRW (Zero)
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    }
                }
            }

            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWRS
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PWRS
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWRS
            })
            Device (DP00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP00.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP00.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP00.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (NV00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "StorageD3Enable", 
                                One
                            }
                        }
                    })
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP00.NV00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP00.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP00.NV00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP00.NV00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP08)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP08.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP08.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP08.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP08.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP08.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP08.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP08.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP10)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP10.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP10.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP10.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (WN00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP10.WN00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP10.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP10.WN00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP10.WN00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP18)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP18.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP18.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP18.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (LN00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP18.LN00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP18.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP18.LN00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP18.LN00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP20)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP20.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP20.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP20.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (NV00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "StorageD3Enable", 
                                One
                            }
                        }
                    })
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP20.NV00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP20.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP20.NV00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP20.NV00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP28)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP28.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP28.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP28.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP28.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP28.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP28.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP28.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP30)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP30.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP30.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP30.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP30.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP30.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP30.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP30.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP38)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP38.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP38.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP38.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP38.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP38.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP38.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP38.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP40)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (UP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SPRW, 1, NotSerialized)
                    {
                        If (CondRefOf (\HDVD))
                        {
                            If ((Arg0 == One))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPRW.Arg0 = 0x%X\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                \HDVD (One)
                            }
                        }
                    }

                    Method (SREG, 2, NotSerialized)
                    {
                        Local2 = \GPB2
                        If ((Local2 != 0x5A5A5A5A))
                        {
                            Local0 = (\_SB.PCI0.GPP7.UP00.DP40.UP00.DADR + 0x40)
                            OperationRegion (VARM, SystemMemory, Local0, 0x09)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                GPBR,   32, 
                                Offset (0x08), 
                                GPEN,   1, 
                                Offset (0x09)
                            }

                            OperationRegion (VARN, SystemMemory, Local2, 0x10)
                            Field (VARN, AnyAcc, NoLock, Preserve)
                            {
                                IOW1,   32, 
                                IOW2,   32, 
                                IOW3,   32, 
                                IOW4,   32
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SREG (0x%X, 0x%X)  GPBR = 0x%X  GPEN = 0x%X\n", DADR, Arg0, Arg1, GPBR, GPEN, Zero)
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                GPBR = Local2
                                GPEN = One
                                IOW1 = IOR5 /* \IOR5 */
                                IOW2 = IOR6 /* \IOR6 */
                                IOW3 = IOR7 /* \IOR7 */
                                IOW4 = IOR8 /* \IOR8 */
                                M460 ("    Restore GPBR = 0x%X  GPEN = 0x%X  IOW1 = 0x%X  IOW2 = 0x%X  IOW3 = 0x%X  IOW4 = 0x%X\n", GPBR, GPEN, IOW1, IOW2, IOW3, IOW4)
                            }
                        }
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (DP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (NV00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "StorageD3Enable", 
                                        One
                                    }
                                }
                            })
                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.NV00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.NV00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.NV00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP08)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP10)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (WN00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP18)
                    {
                        Name (_ADR, 0x00030000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (LN00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP20)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (NV00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "StorageD3Enable", 
                                        One
                                    }
                                }
                            })
                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.NV00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.NV00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.NV00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP28)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP30)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP38)
                    {
                        Name (_ADR, 0x00070000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP40)
                    {
                        Name (_ADR, 0x00080000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (UP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP48)
                    {
                        Name (_ADR, 0x00090000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP50)
                    {
                        Name (_ADR, 0x000A0000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP58)
                    {
                        Name (_ADR, 0x000B0000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP60)
                    {
                        Name (_ADR, 0x000C0000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (XH00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP68)
                    {
                        Name (_ADR, 0x000D0000)  // _ADR: Address
                        Name (XHGP, 0xFF)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (SA00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0xFF)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "StorageD3Enable", 
                                        One
                                    }
                                }
                            })
                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.SA00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.SA00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.SA00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }
                }
            }

            Device (DP48)
            {
                Name (_ADR, 0x00090000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP48.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP48.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP48.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP48.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP48.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP48.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP48.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP50)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP50.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP50.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP50.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP50.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP50.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP50.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP50.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP58)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP58.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP58.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP58.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP58.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP58.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP58.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP58.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP60)
            {
                Name (_ADR, 0x000C0000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP60.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP60.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP60.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (XH00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP60.XH00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP60.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP60.XH00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP60.XH00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP68)
            {
                Name (_ADR, 0x000D0000)  // _ADR: Address
                Name (XHGP, 0xFF)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP68.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP68.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP68.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (SA00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0xFF)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "StorageD3Enable", 
                                One
                            }
                        }
                    })
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP68.SA00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP68.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP68.SA00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP68.SA00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }
        }
    }

    Scope (\_GPE)
    {
        Name (SPTA, 0x55555555)
        Method (AIE2, 0, NotSerialized)
        {
            If (((\_GPE.SPTA != 0x55555555) && (\_GPE.SPTA != Zero)))
            {
                \_GPE.SIE3 ()
            }
        }

        Method (SP52, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x4C
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x04) == Zero))
            {
                If (((\_SB.PCI0.GPP7.UP00.DP40.UP00.DSTA == 0x0F) && (\_SB.PCI0.GPP7.UP00.DP40.UP00.ESTA == Zero)))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP40.UP00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP40.UP00, 0x02) // Device Wake
                }

                If ((\_SB.PCI0.GPP7.UP00.DP60.XH00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP60.XH00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP60.XH00, 0x02) // Device Wake
                }
            }
        }

        Method (SP72, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x72
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x04) == Zero))
            {
                If ((\_SB.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00, 0x02) // Device Wake
                }

                If ((\_SB.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00, 0x02) // Device Wake
                }
            }
        }

        Method (SP53, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x4C
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x08) == Zero))
            {
                If ((\_SB.PCI0.GPP7.UP00.DP18.LN00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP18.LN00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP18.LN00, 0x02) // Device Wake
                }
            }
        }

        Method (SP73, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x72
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x08) == Zero))
            {
                If ((\_SB.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00, 0x02) // Device Wake
                }
            }
        }

        Method (SP54, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x4C
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x10) == Zero))
            {
                If ((\_SB.PCI0.GPP7.UP00.DP10.WN00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP10.WN00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP10.WN00, 0x02) // Device Wake
                }
            }
        }

        Method (SP74, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x72
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x10) == Zero))
            {
                If ((\_SB.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00, 0x02) // Device Wake
                }
            }
        }
    }

    Scope (\_SB.PCI0.GPP7.UP00.DP60.XH00)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (POT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x0A
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    0x0101
                    One
                    0x25
                    Zero
                }
            }

            Device (POT6)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x0A
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    0x0101
                    One
                    0x25
                    Zero
                }
            }

            Device (POT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x0103
                    One
                    0x25
                    Zero
                }
            }

            Device (POT7)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x0103
                    One
                    0x25
                    Zero
                }
            }

            Device (POT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x0104
                    One
                    0x25
                    Zero
                }
            }

            Device (POT8)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x0104
                    One
                    0x25
                    Zero
                }
            }

            Device (POT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x0105
                    One
                    0x25
                    Zero
                }
            }

            Device (POT9)
            {
                Name (_ADR, 0x09)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x0105
                    One
                    0x25
                    Zero
                }
            }

            Device (POT5)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x0106
                    One
                    0x25
                    Zero
                }
            }

            Device (POTA)
            {
                Name (_ADR, 0x0A)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x0106
                    One
                    0x25
                    Zero
                }
            }

            Device (POTB)
            {
                Name (_ADR, 0x0B)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x0107
                    One
                    0x25
                    Zero
                }
            }

            Device (POTC)
            {
                Name (_ADR, 0x0C)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x0108
                    One
                    0x25
                    Zero
                }
            }

            Device (POTG)
            {
                Name (_ADR, 0x10)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x0102
                    One
                    0x25
                    Zero
                }
            }

            Device (POTD)
            {
                Name (_ADR, 0x0D)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x0109
                    One
                    0x25
                    Zero
                }
            }

            Device (POTE)
            {
                Name (_ADR, 0x0E)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x010A
                    One
                    0x25
                    Zero
                }
            }

            Device (POTF)
            {
                Name (_ADR, 0x0F)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x010B
                    One
                    0x25
                    Zero
                }
            }

            Device (POTH)
            {
                Name (_ADR, 0x11)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x010B
                    One
                    0x25
                    Zero
                }
            }
        }
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 00000114
[008h 0008 001h]                    Revision : 06
[009h 0009 001h]                    Checksum : F4
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]                FACS Address : 77663000
[028h 0040 004h]                DSDT Address : 75607000
[02Ch 0044 001h]                       Model : 00
[02Dh 0045 001h]                  PM Profile : 01 [Desktop]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00000800
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000804
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 000000B4
[04Ch 0076 004h]      PM Timer Block Address : 00000808
[050h 0080 004h]          GPE0 Block Address : 00000820
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 08
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0400
[066h 0102 002h]          Cache Flush Stride : 0010
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120 008h]                     Address : 00000000000000B2

[080h 0128 001h]        Value to cause reset : BE
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 04
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 0000000075607000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 02 [Word Access:16]
[098h 0152 008h]                     Address : 0000000000000800

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 01 [SystemIO]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 02 [Word Access:16]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000804

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 01 [SystemIO]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 02 [Word Access:16]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 00000000000000B4

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000808

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 40
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224 008h]                     Address : 0000000000000820

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 01 [SystemIO]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 00
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248 008h]                     Address : 0000000000000000

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 00 [SystemMemory]
[101h 0257 001h]                   Bit Width : 00
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260 008h]                     Address : 0000000000000000

[10Ch 0268 008h]               Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 F4 41 4C 41 53 4B 41  // FACP......ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 13 00 01 00 00 30 66 77 00 70 60 75 00 01 09 00  // .....0fw.p`u....
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 B4 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 00 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 04 00 00 00 00 00 00 00 00 00 70 60 75  // .............p`u
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 B4 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 55579820
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 20 98 57 55 00 00 00 00  // FACS@... .WU....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000 004h]                   Signature : "FIDT"    
[004h 0004 004h]                Table Length : 0000009C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : B0
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 B0 41 4C 41 53 4B 41  // FIDT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 49 20  // A M I.......AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 41 32 38 37 39  // ....$FID.x.A2879
    0030: 30 32 31 00 96 8E 9C 72 93 EF 7E F8 03 07 53 39  // 021....r..~...S9
    0040: AA 3A AA B7 30 35 00 32 36 00 30 30 00 32 31 00  // .:..05.26.00.21.
    0050: E7 07 05 17 10 12 18 FF FF 41 4C 41 53 4B 41 41  // .........ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000044
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : C7
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 0000000073660000

[034h 0052 002h]               Subtable Type : 0001
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01
[038h 0056 004h]                    Reserved : 00000000
[03Ch 0060 008h]         S3PT Record Address : 000000007367D000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 C7 41 4C 41 53 4B 41  // FPDTD.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 00 66 73  // ..............fs
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 D0 67 73  // ..............gs
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : ED
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00000005

[024h 0036 004h]           Hardware Block ID : 10228201

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 40
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 37EE
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 ED 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 49 20  // A M I.......AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 24
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "MSFT"
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000F0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : 7F
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 24 41 4C 41 53 4B 41  // MCFG<....$ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 4D 53 46 54  // A M I.......MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 7F 00 00 00 00              // ............


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMDFIG2", 0x00000001)
{
    /*
     * iASL Warning: There were 35 external control methods found during
     * disassembly, but only 0 were resolved (35 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, IntObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M049, IntObj)
    External (M087, UnknownObj)
    External (M100, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M105, IntObj)
    External (M106, IntObj)
    External (M113, IntObj)
    External (M133, UnknownObj)
    External (M232, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M233, IntObj)
    External (M235, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M23A, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M378, IntObj)
    External (M379, IntObj)
    External (M380, IntObj)
    External (M381, IntObj)
    External (M382, IntObj)
    External (M383, IntObj)
    External (M384, IntObj)
    External (M385, IntObj)
    External (M386, IntObj)
    External (M387, IntObj)
    External (M388, IntObj)
    External (M389, IntObj)
    External (M390, IntObj)
    External (M391, IntObj)
    External (M392, IntObj)
    External (M444, IntObj)

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M207, Buffer (0xFF){})
        Name (M208, Buffer (0x03){})
        Name (M204, One)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                M000 (0x0D60)
                ATC0 ()
                M000 (0x0D70)
            }

            If ((Arg0 == One))
            {
                M000 (0x0D61)
                ATC1 ()
                M000 (0x0D71)
            }

            If ((Arg0 == 0x02))
            {
                M000 (0x0D62)
                ATC2 (Arg1)
                M000 (0x0D72)
            }

            If ((Arg0 == 0x03))
            {
                M000 (0x0D63)
                ATC3 ()
                M000 (0x0D73)
            }

            If ((Arg0 == 0x04))
            {
                M000 (0x0D64)
                ATC4 (Arg1)
                M000 (0x0D74)
            }

            If ((Arg0 == 0x06))
            {
                M000 (0x0D66)
                ATC6 (Arg1)
                M000 (0x0D76)
            }

            If ((Arg0 == 0x07))
            {
                M000 (0x0D67)
                ATC7 (Arg1)
                M000 (0x0D77)
            }

            If ((Arg0 == 0x08))
            {
                M000 (0x0D68)
                ATC8 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x03]), DerefOf (
                    Arg1 [0x04]), DerefOf (Arg1 [0x05]))
                M000 (0x0D78)
            }

            If ((Arg0 == 0x09))
            {
                M000 (0x0D69)
                ATC9 ()
                M000 (0x0D79)
            }

            If ((Arg0 == 0x0A))
            {
                M000 (0x0D6A)
                ATCA (Arg1)
                M000 (0x0D7A)
            }

            Return (M207) /* \_SB_.PCI0.GP17.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = One
            M207 = M100 (M160,  = \_SB.ALIB /* External reference */)
            M207
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, One, M203)
            M157 = 0x0A
            M161 = One
            0x15 = M100 (M162, M133 = M049 /* External reference */)
            Local0
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & One)
            }
            ElseIf ((Local0 & 0x7F))
            {
                Local0 = M113 /* External reference */
                M204
            }

            M203 = M204 /* \_SB_.PCI0.GP17.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = One
            0x02 = \_SB.ALIB /* External reference */
            Arg0
            M207
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, Zero, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = One
            M197 = 0x03
            M206 = One
            0x03 = \_SB.ALIB /* External reference */
            M208
            M207
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = One
            0x04 = \_SB.ALIB /* External reference */
            Arg0
            M207
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235 (Zero, One))
        }

        Method (ATC8, 4, Serialized)
        {
            Local0 = Buffer (0x05){}
            CreateWordField (Local0, Zero, M157)
            CreateByteField (Local0, 0x02, M425)
            CreateWordField (Local0, 0x03, M426)
            M157 = 0x05
            Local1 = Arg0
            Local2 = Arg1
            M426 = ((Local2 << 0x08) + Local1)
            Local3 = Arg2
            Local4 = Arg3
            If (((Local3 == Zero) && (Local4 == Zero)))
            {
                M425 = One
                \_SB.ALIB
                0xAA
                Local0
            }
            ElseIf (((Local3 == Zero) && (Local4 == One)))
            {
                M425 = Zero
                \_SB.ALIB
                0xAA
                Local0
            }
            ElseIf (((Local3 == 0x03) && (Local4 == One)))
            {
                M425 = 0x03
                \_SB.ALIB
                0xAA
                Local0
            }
        }

        Method (ATC9, 0, Serialized)
        {
            M207 = M444 /* External reference */
        }

        Method (ATCA, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, M157)
            CreateWordField (Arg0, 0x02, M240)
            M232 (M23A (M240, One))
        }

        Method (XTRM, 2, Serialized)
        {
            If ((M105 == Zero))
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Local4 = M105 /* External reference */
            If ((Local4 > 0x00010000))
            {
                Local4 = 0x00010000
            }

            Local5 = Arg0
            Local6 = Arg1
            If ((Local6 > 0x1000))
            {
                Local6 = 0x1000
            }

            If ((Local5 >= Local4))
            {
                Return (Buffer (Local6)
                {
                     0x00                                             // .
                })
            }

            If ((((Local5 & 0x0FFF) + Local6) > 0x1000))
            {
                Local6 = (0x1000 - (Local5 & 0x0FFF))
            }

            Name (M202, Buffer (0x1000)
            {
                 0x00                                             // .
            })
            If (((Local5 & 0xF000) == Zero))
            {
                M202 = M106 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x1000))
            {
                M202 = M378 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x2000))
            {
                M202 = M379 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x3000))
            {
                M202 = M380 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x4000))
            {
                M202 = M381 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x5000))
            {
                M202 = M382 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x6000))
            {
                M202 = M383 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x7000))
            {
                M202 = M384 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x8000))
            {
                M202 = M385 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x9000))
            {
                M202 = M386 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xA000))
            {
                M202 = M387 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xB000))
            {
                M202 = M388 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xC000))
            {
                M202 = M389 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xD000))
            {
                M202 = M390 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xE000))
            {
                M202 = M391 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xF000))
            {
                M202 = M392 /* External reference */
            }

            If (((Local5 + Local6) <= Local4))
            {
                If ((Local6 == 0x1000))
                {
                    Return (M202) /* \_SB_.PCI0.GP17.VGA_.XTRM.M202 */
                }
            }
            Else
            {
                Local6 = (Local4 - Local5)
            }

            Name (M393, Buffer (Local6)
            {
                 0x00                                             // .
            })
            CreateField (M202, ((Local5 & 0x0FFF) * 0x08), (Local6 * 0x08
                ), M394)
            M393 = M394 /* \_SB_.PCI0.GP17.VGA_.XTRM.M394 */
            Return (M393) /* \_SB_.PCI0.GP17.VGA_.XTRM.M393 */
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN0))
            {
                \_SB.PCI0.GP17.VGA.AFN0 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.VGA.AFN0 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0 ()
            }
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN1))
            {
                \_SB.PCI0.GP17.VGA.AFN1 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.VGA.AFN1 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1 (Arg0)
            }
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN2))
            {
                \_SB.PCI0.GP17.VGA.AFN2 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.VGA.AFN2 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
            }
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN3))
            {
                \_SB.PCI0.GP17.VGA.AFN3 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.VGA.AFN3 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
            }
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN4))
            {
                \_SB.PCI0.GP17.VGA.AFN4 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.VGA.AFN4 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4 (Arg0)
            }
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN5))
            {
                \_SB.PCI0.GP17.VGA.AFN5 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.VGA.AFN5 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5 ()
            }
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN6))
            {
                \_SB.PCI0.GP17.VGA.AFN6 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.VGA.AFN6 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6 ()
            }
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN7))
            {
                \_SB.PCI0.GP17.VGA.AFN7 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.VGA.AFN7 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7 (Arg0)
            }
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN8))
            {
                \_SB.PCI0.GP17.VGA.AFN8 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.VGA.AFN8 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8 ()
            }
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFNC))
            {
                \_SB.PCI0.GP17.VGA.AFNC (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.VGA.AFNC (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
            }
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 2, "AMD", "Splinter", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF0000000)
        Name (ADBG, Buffer (0x0100){})
        Mutex (AM00, 0x00)
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x01, 0x00, 0x01, 0x14, 0x17, 0xFF, 0xFF, 0x01,  // ........
            /* 0090 */  0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x18,  // ........
            /* 00A0 */  0x1B, 0xFF, 0xFF, 0x02, 0x00, 0x02, 0x02, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0100 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        OperationRegion (A001, SystemIO, 0x80, 0x04)
        Field (A001, DWordAcc, NoLock, Preserve)
        {
            A002,   32
        }

        OperationRegion (A003, SystemIO, 0x80, 0x02)
        Field (A003, WordAcc, NoLock, Preserve)
        {
            A004,   16
        }

        OperationRegion (A005, SystemIO, 0x80, One)
        Field (A005, ByteAcc, NoLock, Preserve)
        {
            A006,   8
        }

        Method (A007, 1, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x09]) == One))
            {
                A002 = (Arg0 | 0xB0000000)
            }
        }

        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                A007 (0xAA80)
                CreateWordField (Arg1, Zero, A020)
                CreateWordField (Arg1, 0x02, A021)
                CreateDWordField (Arg1, 0x04, A022)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, Zero, A023)
                A023 = A020 /* \_SB_.ALIB.A020 */
                CreateWordField (Local0, 0x02, A024)
                A024 = A021 /* \_SB_.ALIB.A021 */
                CreateDWordField (Local0, 0x04, A025)
                A025 = A022 /* \_SB_.ALIB.A022 */
                A025 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [Zero]) > Zero))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = One
                }

                A025 |= Local1
                A007 (0xAA81)
                Return (Local0)
            }

            If ((Arg0 == One))
            {
                A007 (0xAA82)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A026 (Local0)
                A007 (0xAA83)
                Return (Local1)
            }

            If ((Arg0 == 0x02))
            {
                A007 (0xAA84)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA85)
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                A007 (0xAA86)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA87)
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                A007 (0xAA88)
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Local2 = A029 (Local0, Local1)
                A007 (0xAA89)
                Return (Local2)
            }

            If ((Arg0 == 0x0A))
            {
                A007 (0xAA8A)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A030 (Local0)
                A007 (0xAA8B)
                Return (Local1)
            }

            If ((Arg0 == 0x0B))
            {
                A007 (0xAA8C)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Local5 = A031 (Local0, Local1, Local2, Local3, Local4)
                A007 (0xAA8D)
                Return (Local5)
            }

            If ((Arg0 == 0x0C))
            {
                A007 (0xAA8E)
                Local0 = A032 (Arg1)
                A007 (0xAA8F)
                Return (Local0)
            }

            If ((Arg0 == 0x10))
            {
                A007 (0xAA90)
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, Zero, A033)
                CreateDWordField (Local7, 0x04, A034)
                CreateDWordField (Local7, 0x08, A035)
                CreateDWordField (Local7, 0x0C, A036)
                CreateDWordField (Local7, 0x10, A037)
                CreateDWordField (Local7, 0x14, A038)
                A033 = Zero
                A034 = Zero
                A035 = Zero
                A036 = Zero
                A037 = Zero
                A038 = Zero
                A018 (0x67, Local7)
                A007 (0xAA91)
            }

            If ((Arg0 == 0x11))
            {
                A007 (0xAA92)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A012)
                CreateDWordField (Local6, 0x04, A013)
                CreateDWordField (Local6, 0x08, A014)
                CreateDWordField (Local6, 0x0C, A015)
                CreateDWordField (Local6, 0x10, A016)
                CreateDWordField (Local6, 0x14, A017)
                A012 = Zero
                A013 = Zero
                A014 = Zero
                A015 = Zero
                A016 = Zero
                A017 = Zero
                A018 (0x66, Local6)
                A007 (0xAA93)
            }

            If ((Arg0 == 0x12))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A039)
                CreateDWordField (Local6, 0x04, A040)
                CreateDWordField (Local6, 0x08, A041)
                CreateDWordField (Local6, 0x0C, A042)
                CreateDWordField (Local6, 0x10, A043)
                CreateDWordField (Local6, 0x14, A044)
                A039 = Zero
                A040 = Zero
                A041 = Zero
                A042 = Zero
                A043 = Zero
                A044 = Zero
                Local5 = One
                Acquire (\_SB.AM00, 0xFFFF)
                Local0 = A045 /* \_SB_.A045 */
                Release (\_SB.AM00)
                If ((((Local0 & 0x3F) != 0x1F) && ((
                    Local0 & 0x3F) != Zero)))
                {
                    If (((Local0 & 0x3F) != 0x08))
                    {
                        Local5 = Zero
                    }
                }

                If ((Local5 == One))
                {
                    A040 = 0x02
                    A046 (0x24, Local6)
                }
            }

            If ((Arg0 == 0x13))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A047)
                CreateDWordField (Local6, 0x04, A048)
                CreateDWordField (Local6, 0x08, A049)
                CreateDWordField (Local6, 0x0C, A050)
                CreateDWordField (Local6, 0x10, A051)
                CreateDWordField (Local6, 0x14, A052)
                A047 = Zero
                A048 = Zero
                A049 = Zero
                A050 = Zero
                A051 = Zero
                A052 = Zero
                A048 = One
                A046 (0x24, Local6)
            }

            If ((Arg0 == 0xAA))
            {
                A007 (0xAA98)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A053)
                CreateDWordField (Local6, 0x04, A054)
                CreateDWordField (Local6, 0x08, A055)
                CreateDWordField (Local6, 0x0C, A056)
                CreateDWordField (Local6, 0x10, A057)
                CreateDWordField (Local6, 0x14, A058)
                A053 = Zero
                A054 = Zero
                A055 = Zero
                A056 = Zero
                A057 = Zero
                A058 = Zero
                A059 (Arg1)
                A007 (0xAA99)
            }

            Return (Zero)
        }

        Method (A029, 2, NotSerialized)
        {
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A109 (Local0, Arg1)
                If ((Local1 == One))
                {
                    Local2 = A110 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, Zero, A023)
            CreateByteField (Local7, 0x02, A061)
            CreateByteField (Local7, 0x03, A111)
            A023 = 0x04
            A061 = Zero
            If ((Local2 == Zero))
            {
                A111 = Zero
            }
            Else
            {
                A111 = One
            }

            Return (Local7)
        }

        Method (A109, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A105 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A105 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A105 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A105 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A105 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A105 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A105 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A105 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A105 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A105 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A105 (Arg1))
            }
        }

        Method (A110, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A106 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A106 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A106 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A106 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A106 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A106 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A106 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A106 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A106 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A106 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A106 (Arg1))
            }
        }

        Name (AD00, Zero)
        Name (DK00, Zero)
        Method (A026, 1, NotSerialized)
        {
            AD00 = Arg0
            A011 ()
        }

        Method (A030, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A031, 5, NotSerialized)
        {
        }

        Name (AP01, Zero)
        Name (AP02, Zero)
        Name (AP03, Zero)
        Name (AP05, Zero)
        Name (AP0B, 0xFF)
        Name (AP10, Zero)
        Method (A060, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, Zero, A023)
            A023 = 0x03
            CreateByteField (Local7, 0x02, A061)
            A061 = One
            If ((DerefOf (\_SB.ADAT [Zero]) == One))
            {
                A061 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [Zero]) == Zero))
            {
                A061 = One
                Return (Local7)
            }

            A062 (Arg0)
            If ((AP05 != One))
            {
                Return (Local7)
            }

            A063 ()
            A061 = 0x02
            Return (Local7)
        }

        Method (A064, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [Zero]) <= One))
            {
                Return (Zero)
            }

            If ((AP05 != One))
            {
                Return (Zero)
            }

            A063 ()
        }

        Method (A065, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = Zero
            }
        }

        Method (A066, 1, NotSerialized)
        {
            AP10 = One
        }

        Method (A067, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [Zero]) <= One))
            {
                Return (Zero)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == Zero))
            {
                Local0 = Zero
                While ((Local0 < 0x0B))
                {
                    A068 (Local0)
                    Local0++
                }

                AP0B = Zero
            }

            A063 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [Zero] = 0x03
            Local7 [One] = Zero
            Local7 [0x02] = Zero
            Return (Local7)
        }

        Method (A069, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A062, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                If ((A070 (Local0, AP06) == One))
                {
                    If (((AP07 & AP08) == One))
                    {
                        Local1 = A071 (Local0)
                        A072 (Local0, Local1)
                    }
                    Else
                    {
                        A072 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A073, 0, NotSerialized)
        {
            AP02 = One
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A074 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A075, 0, NotSerialized)
        {
            AP03 = Zero
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A076 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A063, 0, NotSerialized)
        {
            A075 ()
            A073 ()
            If ((AP02 != AP01))
            {
                A019 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A074 (Local0)
                Local2 = A077 (Local0)
                If ((Local1 != Local2))
                {
                    A078 (Local0, Local1)
                }
                ElseIf ((AP10 == One))
                {
                    A078 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == One))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = Zero
        }

        Method (A078, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A079 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A079 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A079 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A079 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A079 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A079 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A079 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A079 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A079 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A079 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A079 (Arg1))
            }
        }

        Method (A077, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A080 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A080 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A080 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A080 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A080 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A080 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A080 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A080 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A080 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A080 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A080 ())
            }
        }

        Method (A074, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A081 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A081 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A081 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A081 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A081 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A081 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A081 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A081 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A081 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A081 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A081 ())
            }
        }

        Method (A076, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A082 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A082 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A082 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A082 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A082 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A082 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A082 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A082 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A082 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A082 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A082 ())
            }
        }

        Method (A071, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A083 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A083 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A083 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A083 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A083 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A083 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A083 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A083 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A083 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A083 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A083 ())
            }
        }

        Method (A072, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A084 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A084 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A084 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A084 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A084 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A084 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A084 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A084 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A084 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A084 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A084 (Arg1))
            }
        }

        Method (A070, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A085 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A085 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A085 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A085 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A085 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A085 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A085 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A085 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A085 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A085 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A085 (Arg1))
            }
        }

        Method (A068, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A086 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A086 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A086 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A086 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A086 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A086 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A086 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A086 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A086 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A086 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A086 ())
            }
        }

        OperationRegion (A154, SystemMemory, AGRB, 0x1000)
        Field (A154, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A155,   32
        }

        BankField (A154, A155, 0x03B10530, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A139,   32
        }

        BankField (A154, A155, 0x03B1057C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A132,   32
        }

        BankField (A154, A155, 0x03B109C4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A133,   32
        }

        BankField (A154, A155, 0x03B109C8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A134,   32
        }

        BankField (A154, A155, 0x03B109CC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A135,   32
        }

        BankField (A154, A155, 0x03B109D0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A136,   32
        }

        BankField (A154, A155, 0x03B109D4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A137,   32
        }

        BankField (A154, A155, 0x03B109D8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A138,   32
        }

        BankField (A154, A155, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A114,   32
        }

        BankField (A154, A155, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A115,   32
        }

        BankField (A154, A155, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A116,   32
        }

        BankField (A154, A155, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A117,   32
        }

        BankField (A154, A155, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A118,   32
        }

        BankField (A154, A155, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A119,   32
        }

        BankField (A154, A155, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A120,   32
        }

        BankField (A154, A155, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A121,   32
        }

        BankField (A154, A155, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A122,   32
        }

        BankField (A154, A155, 0x11144280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A123,   32
        }

        BankField (A154, A155, 0x11145280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A124,   32
        }

        BankField (A154, A155, 0x11146280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A125,   32
        }

        BankField (A154, A155, 0x0C910554, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A153,   32
        }

        BankField (A154, A155, 0x0C9109C8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A146,   32
        }

        BankField (A154, A155, 0x0C9109CC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A147,   32
        }

        BankField (A154, A155, 0x0C9109D0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A148,   32
        }

        BankField (A154, A155, 0x0C9109D4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A149,   32
        }

        BankField (A154, A155, 0x0C9109D8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A150,   32
        }

        BankField (A154, A155, 0x0C9109DC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A151,   32
        }

        BankField (A154, A155, 0x0C9109E0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A152,   32
        }

        BankField (A154, A155, 0x11140294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A045,   32
        }

        BankField (A154, A155, 0x11141294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A161,   32
        }

        BankField (A154, A155, 0x11142294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A162,   32
        }

        BankField (A154, A155, 0x11143294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A163,   32
        }

        Method (A112, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A094 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A094 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A094 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A094 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A094 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A094 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A094 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A094 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A094 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A094 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A094 (Arg1))
            }
        }

        Method (A113, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            If ((Arg1 == One))
            {
                If ((Arg0 == Zero))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == One))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x07))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x08))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x09))
                {
                    Local0 = 0x000B0300
                }

                If ((Arg0 == 0x0A))
                {
                    Local0 = 0x000C0300
                }

                Local1 = A114 /* \_SB_.A114 */
                Local1 &= 0xFF00FCFF
                A114 = (Local0 | Local1)
                Local1 = A114 /* \_SB_.A114 */
                A114 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == Zero))
            {
                If ((Arg0 == Zero))
                {
                    Local1 = A115 /* \_SB_.A115 */
                    A115 = (0x00400000 | Local1)
                    Local1 = A115 /* \_SB_.A115 */
                    A115 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == One))
                {
                    Local1 = A116 /* \_SB_.A116 */
                    A116 = (0x00400000 | Local1)
                    Local1 = A116 /* \_SB_.A116 */
                    A116 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A117 /* \_SB_.A117 */
                    A117 = (0x00400000 | Local1)
                    Local1 = A117 /* \_SB_.A117 */
                    A117 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A118 /* \_SB_.A118 */
                    A118 = (0x00400000 | Local1)
                    Local1 = A118 /* \_SB_.A118 */
                    A118 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A119 /* \_SB_.A119 */
                    A119 = (0x00400000 | Local1)
                    Local1 = A119 /* \_SB_.A119 */
                    A119 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A120 /* \_SB_.A120 */
                    A120 = (0x00400000 | Local1)
                    Local1 = A120 /* \_SB_.A120 */
                    A120 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A121 /* \_SB_.A121 */
                    A121 = (0x00400000 | Local1)
                    Local1 = A121 /* \_SB_.A121 */
                    A121 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A122 /* \_SB_.A122 */
                    A122 = (0x00400000 | Local1)
                    Local1 = A122 /* \_SB_.A122 */
                    A122 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A123 /* \_SB_.A123 */
                    A123 = (0x00400000 | Local1)
                    Local1 = A123 /* \_SB_.A123 */
                    A123 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A124 /* \_SB_.A124 */
                    A124 = (0x00400000 | Local1)
                    Local1 = A124 /* \_SB_.A124 */
                    A124 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x0A))
                {
                    Local1 = A125 /* \_SB_.A125 */
                    A125 = (0x00400000 | Local1)
                    Local1 = A125 /* \_SB_.A125 */
                    A125 = (0xFFBFFFFF & Local1)
                }
            }

            Release (\_SB.AM00)
        }

        Method (A010, 2, NotSerialized)
        {
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A112 (Local0, Arg1)
                If ((Local1 == One))
                {
                    A113 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A018, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, Zero, A126)
            CreateDWordField (Arg1, 0x04, A127)
            CreateDWordField (Arg1, 0x08, A128)
            CreateDWordField (Arg1, 0x0C, A129)
            CreateDWordField (Arg1, 0x10, A130)
            CreateDWordField (Arg1, 0x14, A131)
            A132 = Zero
            While ((A132 != Zero)){}
            A133 = A126 /* \_SB_.A018.A126 */
            A134 = A127 /* \_SB_.A018.A127 */
            A135 = A128 /* \_SB_.A018.A128 */
            A136 = A129 /* \_SB_.A018.A129 */
            A137 = A130 /* \_SB_.A018.A130 */
            A138 = A131 /* \_SB_.A018.A131 */
            A139 = Arg0
            While ((A132 == Zero)){}
            Release (\_SB.AM00)
        }

        Method (A046, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, Zero, A140)
            CreateDWordField (Arg1, 0x04, A141)
            CreateDWordField (Arg1, 0x08, A142)
            CreateDWordField (Arg1, 0x0C, A143)
            CreateDWordField (Arg1, 0x10, A144)
            CreateDWordField (Arg1, 0x14, A145)
            Local0 = (0x80000000 & A146) /* \_SB_.A146 */
            While ((Local0 == Zero))
            {
                Local0 = (0x80000000 & A146) /* \_SB_.A146 */
            }

            A147 = A140 /* \_SB_.A046.A140 */
            A148 = A141 /* \_SB_.A046.A141 */
            A149 = A142 /* \_SB_.A046.A142 */
            A150 = A143 /* \_SB_.A046.A143 */
            A151 = A144 /* \_SB_.A046.A144 */
            A152 = A145 /* \_SB_.A046.A145 */
            Local1 = (Arg0 & 0xFF)
            Local1 <<= 0x08
            A146 = Local1
            A153 = 0xFFFFFFFF
            Local0 = (0x80000000 & A146) /* \_SB_.A146 */
            While ((Local0 == Zero))
            {
                Local0 = (0x80000000 & A146) /* \_SB_.A146 */
            }

            Release (\_SB.AM00)
        }

        Method (AMNR, 1, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A154, A155, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xBC), 
                A156,   32
            }

            Release (\_SB.AM00)
            Return (A156) /* \_SB_.AMNR.A156 */
        }

        Method (AMNW, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A154, A155, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xBC), 
                A157,   32
            }

            A157 = Arg1
            Release (\_SB.AM00)
        }

        Method (A032, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, A158)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            While ((Local0 < A158))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A012 = Zero
                A013 = Zero
                A014 = Zero
                A015 = Zero
                A016 = Zero
                A017 = Zero
                If ((Local1 == One))
                {
                    A012 = Local2
                    A018 (0x4E, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A012 = Local2
                    A018 (0x3F, Local7)
                }

                If ((Local1 == 0x04))
                {
                    A012 = Local2
                    A018 (0x3E, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A012 = Local2
                    A018 (0x4F, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A012 = Local2
                    A018 (0x3E, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A012 = Local2
                    A018 (0x5F, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A012 = Local2
                    A018 (0x61, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A012 = Local2
                    A018 (0x3C, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A012 = Local2
                    A018 (0x3D, Local7)
                }

                If ((Local1 == 0x10))
                {
                    A012 = Local2
                    A018 (0x3F, Local7)
                }

                If ((Local1 == 0x11))
                {
                    A012 = Local2
                    A018 (0x2F, Local7)
                }

                If ((Local1 == 0x13))
                {
                    A012 = Local2
                    A018 (0x60, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A012 = Local2
                    A018 (0x50, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A012 = Local2
                    A018 (0x51, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A012 = Local2
                    A018 (0x52, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A012 = Local2
                    A018 (0x53, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A012 = Local2
                    A018 (0x54, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A012 = Local2
                    A018 (0x55, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A012 = Local2
                    A018 (0x56, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A012 = Local2
                    A018 (0x57, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A012 = Local2
                    A018 (0x58, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A012 = Local2
                    A018 (0x59, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A012 = Local2
                    A018 (0x5A, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A012 = Local2
                    A018 (0x5B, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A012 = Local2
                    A018 (0x5C, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A012 = Local2
                    A018 (0x5D, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A012 = Local2
                    A018 (0x5E, Local7)
                }

                If ((Local1 == 0x30))
                {
                    A012 = Local2
                    A018 (0x6B, Local7)
                    Local3 = Buffer (0x08){}
                    CreateDWordField (Local3, Zero, A159)
                    CreateDWordField (Local3, 0x04, A160)
                    A159 = A133 /* \_SB_.A133 */
                    A160 = A134 /* \_SB_.A134 */
                    Return (Local3)
                }

                If ((Local1 == 0x31))
                {
                    A012 = Local2
                    A018 (0x6C, Local7)
                }

                If ((Local1 == 0x32))
                {
                    A012 = Local2
                    A018 (0x6D, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x8B)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR0.ABR0.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR0.ABR0.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR0.ABR1.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR0.ABR1.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR0.ABR2.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR0.ABR2.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR0.ABR3.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR0.ABR3.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x8C)  // _UID: Unique ID
            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR4.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR4.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR4.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR4.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR4.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR4.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR4.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR1.ABR4.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR1.ABR4.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR5.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR5.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR5.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR1.ABR5.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR1.ABR5.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR6.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR6.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR6.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR1.ABR6.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR1.ABR6.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR7.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR7.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR7.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR1.ABR7.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR1.ABR7.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR1.ABR8.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR1.ABR8.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR1.ABR9.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR1.ABR9.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR1.ABRA.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR1.ABRA.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A164, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == One))
            {
                Local0 = Zero
                While ((Local0 < 0x0B))
                {
                    A165 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A097, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Arg1
            A013 = Arg2
            A018 (Arg0, Local7)
        }

        Method (A165, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A095 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A095 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A095 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A095 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A095 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A095 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A095 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A095 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A095 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A095 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A095 (Arg1))
            }
        }

        Method (A059, 1, Serialized)
        {
            Local0 = Zero
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A012 = Zero
            A013 = Zero
            A014 = Zero
            A015 = Zero
            A016 = Zero
            A017 = Zero
            If ((Local1 == Zero))
            {
                A012 = Local2
                A164 (Zero)
            }

            If ((Local1 == One))
            {
                A012 = Local2
                A164 (One)
            }

            If ((Local1 == 0x02))
            {
                A012 = Local2
                A018 (0x66, Local7)
            }

            If ((Local1 == 0x03))
            {
                A012 = Local2
                A018 (0x67, Local7)
            }
        }

        Name (A008, One)
        Name (A009, Zero)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A010 (Local0, Local1)
        }

        Method (A011, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Zero
            A013 = Zero
            A014 = Zero
            A015 = Zero
            A016 = Zero
            A017 = Zero
            If ((AD00 == Zero))
            {
                A018 (0x68, Local7)
            }
            Else
            {
                A018 (0x69, Local7)
            }
        }

        Method (A019, 2, NotSerialized)
        {
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 2, "AMD", "AOD     ", 0x00000001)
{
    Name (OBID, Package (0xC1)
    {
        0x40, 
        0x00040001, 
        0x00040002, 
        0x00020027, 
        0x00020026, 
        0x00020001, 
        0x00020002, 
        0x00020006, 
        0x00020005, 
        0x00020009, 
        0x00020010, 
        0x0002000B, 
        0x00020015, 
        0x0002000F, 
        0x0002000E, 
        0x0002000D, 
        0x00020012, 
        0x00020011, 
        0x00020017, 
        0x00020016, 
        0x00020018, 
        0x00020019, 
        0x0002001B, 
        0x0002001A, 
        0x0002001C, 
        0x0002001D, 
        0x0002001F, 
        0x0002001E, 
        0x0002002D, 
        0x00020007, 
        0x00020023, 
        0x00020024, 
        0x00020025, 
        0x00020036, 
        0x00020033, 
        0x00020035, 
        0x00030001, 
        0x00020031, 
        0x00020032, 
        0x00020030, 
        0x00020038, 
        0x0002003A, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        Zero, 
        One, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Command Buffer Start", 
        "Command Buffer End", 
        "Software Downcore Config", 
        "Set SMTEn", 
        "Set Mem Clock", 
        "Set Tcl", 
        "Set Trp", 
        "Set Tras", 
        "Set Trc", 
        "Set Twr", 
        "Set Trfc2", 
        "Set Trtp", 
        "Set TrrdL", 
        "Set TrrdS", 
        "Set Tfaw", 
        "Set TwtrL", 
        "Set TwtrS", 
        "Set TrdrdScL", 
        "Set TrdrdSc", 
        "Set TrdrdSd", 
        "Set TrdrdDd", 
        "Set TwrwrScL", 
        "Set TwrwrSc", 
        "Set TwrwrSd", 
        "Set TwrwrDd", 
        "Set Twrrd", 
        "Set Trdwr", 
        "Set CadBusAddrCmdDrvStren", 
        "Set ProcODT", 
        "Set RttWr", 
        "Set RttPark", 
        "Set PowerDwonEn", 
        "Set CCLK Fmax", 
        "Set FCLK OC Mode", 
        "Set FCLK Frequency", 
        "Set VDDIO", 
        "Set Interleave Mode", 
        "Set Interleave Size", 
        "Set CLDO_VDDP", 
        "Set CLDO VDDG", 
        "Set ECO Mode", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIE, Package (0xC1)
    {
        0x40, 
        0x00010003, 
        0x00010004, 
        0x00010005, 
        0x00010006, 
        0x00010007, 
        0x00010008, 
        0x0005000A, 
        0x00050010, 
        0x0002003B, 
        0x0002003C, 
        0x0002003D, 
        0x00020041, 
        0x00020042, 
        0x0002003E, 
        0x0002003F, 
        0x00020040, 
        0x00050001, 
        0x00050002, 
        0x00050003, 
        0x00050004, 
        0x00030007, 
        0x00030003, 
        0x00030004, 
        0x00020043, 
        0x00030006, 
        0x0005000B, 
        0x00020044, 
        0x00020048, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Get OC Disable", 
        "Get OC Voltage Max", 
        "Get OC Frequency Max", 
        "Get GFX OC Voltage Max", 
        "Get GFX OC Frequency Max", 
        "Get Interlevaing Cap", 
        "Set Curve Optimizer", 
        "Set GFX Curve Optimizer", 
        "Set Trcd", 
        "Set Trfc1", 
        "Set TrfcSb", 
        "Set ProcDataDriveStrength", 
        "Set DRAMDataDriveStrength", 
        "Set RttNomWr", 
        "Set RttNomRd", 
        "Set RttParkDqs", 
        "Set PPT Limit", 
        "Set TDC Limit", 
        "Set EDC Limit", 
        "Set Scalar", 
        "Set DIMM VDDQ", 
        "Set VPP", 
        "Set APU VDDIO", 
        "Set LCLK Freq", 
        "Set VDD_MISC", 
        "Set VDDG IOD", 
        "Set UCLK DIV1", 
        "Reset Mem Para", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIT, Package (0x44)
    {
        0x43, 
        Package (0x04)
        {
            0x0002003A, 
            Zero, 
            0x44, 
            Buffer (0x019C)
            {
                /* 0000 */  0x3A, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // :.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020048, 
            Zero, 
            0x43, 
            Buffer (0x019C)
            {
                /* 0000 */  0x48, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // H.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020044, 
            Zero, 
            0x42, 
            Buffer (0x019C)
            {
                /* 0000 */  0x44, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // D.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000B, 
            One, 
            0x41, 
            Buffer (0x14)
            {
                /* 0000 */  0x0B, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x8A, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020038, 
            One, 
            0x40, 
            Buffer (0x14)
            {
                /* 0000 */  0x38, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                /* 0008 */  0x8A, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030006, 
            One, 
            0x3F, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x4C, 0x04, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // L...r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020043, 
            One, 
            0x3E, 
            Buffer (0x14)
            {
                /* 0000 */  0x43, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // C.......
                /* 0008 */  0x05, 0x04, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020030, 
            One, 
            0x3D, 
            Buffer (0x14)
            {
                /* 0000 */  0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x05, 0x00, 0x00,  // ........
                /* 0010 */  0x05, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020032, 
            One, 
            0x3C, 
            Buffer (0x14)
            {
                /* 0000 */  0x32, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 2.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020031, 
            Zero, 
            0x3B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x31, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 1.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00030004, 
            One, 
            0x3A, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0xBC, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030003, 
            One, 
            0x39, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x03, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0008 */  0xDC, 0x05, 0x00, 0x00, 0x52, 0x08, 0x00, 0x00,  // ....R...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030007, 
            One, 
            0x38, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x03, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x96, 0x05, 0x00, 0x00,  //  .......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030001, 
            One, 
            0x37, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x03, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x96, 0x05, 0x00, 0x00,  //  .......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020035, 
            Zero, 
            0x36, 
            Buffer (0x019C)
            {
                /* 0000 */  0x35, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 5.......
                /* 0008 */  0x34, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // 4...d...
                /* 0010 */  0xC8, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00,  // ........
                /* 0018 */  0xF4, 0x01, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,  // .... ...
                /* 0020 */  0xA5, 0x03, 0x00, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0028 */  0x60, 0x04, 0x00, 0x00, 0x77, 0x04, 0x00, 0x00,  // `...w...
                /* 0030 */  0xB0, 0x04, 0x00, 0x00, 0xE2, 0x04, 0x00, 0x00,  // ........
                /* 0038 */  0xE9, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                /* 0040 */  0x14, 0x05, 0x00, 0x00, 0x28, 0x05, 0x00, 0x00,  // ....(...
                /* 0048 */  0x35, 0x05, 0x00, 0x00, 0x5B, 0x05, 0x00, 0x00,  // 5...[...
                /* 0050 */  0x78, 0x05, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00,  // x.......
                /* 0058 */  0xBB, 0x05, 0x00, 0x00, 0xCD, 0x05, 0x00, 0x00,  // ........
                /* 0060 */  0xDC, 0x05, 0x00, 0x00, 0x18, 0x06, 0x00, 0x00,  // ........
                /* 0068 */  0x40, 0x06, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // @...r...
                /* 0070 */  0x90, 0x06, 0x00, 0x00, 0xC5, 0x06, 0x00, 0x00,  // ........
                /* 0078 */  0xD6, 0x06, 0x00, 0x00, 0xE0, 0x06, 0x00, 0x00,  // ........
                /* 0080 */  0x08, 0x07, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00,  // ........
                /* 0088 */  0xF1, 0x07, 0x00, 0x00, 0x13, 0x08, 0x00, 0x00,  // ........
                /* 0090 */  0x34, 0x08, 0x00, 0x00, 0x55, 0x08, 0x00, 0x00,  // 4...U...
                /* 0098 */  0x77, 0x08, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  // w.......
                /* 00A0 */  0xB9, 0x08, 0x00, 0x00, 0xDB, 0x08, 0x00, 0x00,  // ........
                /* 00A8 */  0x60, 0x09, 0x00, 0x00, 0x81, 0x09, 0x00, 0x00,  // `.......
                /* 00B0 */  0xA3, 0x09, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // ........
                /* 00B8 */  0xF6, 0x09, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 00C0 */  0x8C, 0x0A, 0x00, 0x00, 0xBE, 0x0A, 0x00, 0x00,  // ........
                /* 00C8 */  0xF0, 0x0A, 0x00, 0x00, 0x22, 0x0B, 0x00, 0x00,  // ...."...
                /* 00D0 */  0x54, 0x0B, 0x00, 0x00, 0x86, 0x0B, 0x00, 0x00,  // T.......
                /* 00D8 */  0xB8, 0x0B, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020033, 
            Zero, 
            0x35, 
            Buffer (0x019C)
            {
                /* 0000 */  0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 3.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020036, 
            One, 
            0x34, 
            Buffer (0x14)
            {
                /* 0000 */  0x36, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 6.......
                /* 0008 */  0x36, 0x10, 0x00, 0x00, 0xE6, 0x14, 0x00, 0x00,  // 6.......
                /* 0010 */  0x19, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050004, 
            One, 
            0x33, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,  // ........
                /* 0010 */  0x64, 0x00, 0x00, 0x00                           // d...
            }
        }, 

        Package (0x04)
        {
            0x00050003, 
            One, 
            0x32, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x90, 0xD0, 0x03, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050002, 
            One, 
            0x31, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x20, 0xBF, 0x02, 0x00,  // .... ...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050001, 
            One, 
            0x30, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x40, 0x42, 0x0F, 0x00,  // ....@B..
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020025, 
            Zero, 
            0x2F, 
            Buffer (0x019C)
            {
                /* 0000 */  0x25, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // %.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020040, 
            One, 
            0x2E, 
            Buffer (0x14)
            {
                /* 0000 */  0x40, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,  // @.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020024, 
            One, 
            0x2D, 
            Buffer (0x14)
            {
                /* 0000 */  0x24, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // $.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020023, 
            One, 
            0x2C, 
            Buffer (0x14)
            {
                /* 0000 */  0x23, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // #.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003F, 
            One, 
            0x2B, 
            Buffer (0x14)
            {
                /* 0000 */  0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ?.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003E, 
            One, 
            0x2A, 
            Buffer (0x14)
            {
                /* 0000 */  0x3E, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // >.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020042, 
            Zero, 
            0x29, 
            Buffer (0x019C)
            {
                /* 0000 */  0x42, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // B.......
                /* 0008 */  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020007, 
            Zero, 
            0x28, 
            Buffer (0x019C)
            {
                /* 0000 */  0x07, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x07, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0030 */  0x0D, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x0F, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,  // ........
                /* 0040 */  0x1D, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0048 */  0x1F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,  // ....<...
                /* 0050 */  0x3D, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // =...>...
                /* 0058 */  0x3F, 0x00, 0x00, 0x00                           // ?...
            }
        }, 

        Package (0x04)
        {
            0x00020041, 
            Zero, 
            0x27, 
            Buffer (0x019C)
            {
                /* 0000 */  0x41, 0x00, 0x02, 0x00, 0x1C, 0x00, 0x00, 0x00,  // A.......
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x06, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x0E, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x1E, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002002D, 
            Zero, 
            0x26, 
            Buffer (0x019C)
            {
                /* 0000 */  0x2D, 0x00, 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00,  // -.......
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,  // (...<...
                /* 0018 */  0x78, 0x00, 0x00, 0x00                           // x...
            }
        }, 

        Package (0x04)
        {
            0x0002001E, 
            One, 
            0x25, 
            Buffer (0x14)
            {
                /* 0000 */  0x1E, 0x00, 0x02, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001F, 
            One, 
            0x24, 
            Buffer (0x14)
            {
                /* 0000 */  0x1F, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001D, 
            One, 
            0x23, 
            Buffer (0x14)
            {
                /* 0000 */  0x1D, 0x00, 0x02, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001C, 
            One, 
            0x22, 
            Buffer (0x14)
            {
                /* 0000 */  0x1C, 0x00, 0x02, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001A, 
            One, 
            0x21, 
            Buffer (0x14)
            {
                /* 0000 */  0x1A, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001B, 
            One, 
            0x20, 
            Buffer (0x14)
            {
                /* 0000 */  0x1B, 0x00, 0x02, 0x00, 0x11, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,  // ....?...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020019, 
            One, 
            0x1F, 
            Buffer (0x14)
            {
                /* 0000 */  0x19, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020018, 
            One, 
            0x1E, 
            Buffer (0x14)
            {
                /* 0000 */  0x18, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020016, 
            One, 
            0x1D, 
            Buffer (0x14)
            {
                /* 0000 */  0x16, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020017, 
            One, 
            0x1C, 
            Buffer (0x14)
            {
                /* 0000 */  0x17, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020011, 
            One, 
            0x1B, 
            Buffer (0x14)
            {
                /* 0000 */  0x11, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020012, 
            One, 
            0x1A, 
            Buffer (0x14)
            {
                /* 0000 */  0x12, 0x00, 0x02, 0x00, 0x18, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,  // ....0...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000D, 
            One, 
            0x19, 
            Buffer (0x14)
            {
                /* 0000 */  0x0D, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00,  // .... ...
                /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,  // ....P...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000E, 
            One, 
            0x18, 
            Buffer (0x14)
            {
                /* 0000 */  0x0E, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000F, 
            One, 
            0x17, 
            Buffer (0x14)
            {
                /* 0000 */  0x0F, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,  // .... ...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020015, 
            One, 
            0x16, 
            Buffer (0x14)
            {
                /* 0000 */  0x15, 0x00, 0x02, 0x00, 0x12, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003D, 
            One, 
            0x15, 
            Buffer (0x14)
            {
                /* 0000 */  0x3D, 0x00, 0x02, 0x00, 0x38, 0x01, 0x00, 0x00,  // =...8...
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000B, 
            One, 
            0x14, 
            Buffer (0x14)
            {
                /* 0000 */  0x0B, 0x00, 0x02, 0x00, 0x80, 0x01, 0x00, 0x00,  // ........
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003C, 
            One, 
            0x13, 
            Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x00, 0x02, 0x00, 0xC4, 0x02, 0x00, 0x00,  // <.......
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020010, 
            One, 
            0x12, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x02, 0x00, 0x48, 0x00, 0x00, 0x00,  // ....H...
                /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,  // 0...`...
                /* 0010 */  0x06, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020009, 
            One, 
            0x11, 
            Buffer (0x14)
            {
                /* 0000 */  0x09, 0x00, 0x02, 0x00, 0x75, 0x00, 0x00, 0x00,  // ....u...
                /* 0008 */  0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,  //  .......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020005, 
            One, 
            0x10, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x02, 0x00, 0x4D, 0x00, 0x00, 0x00,  // ....M...
                /* 0008 */  0x1E, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00,  // ....~...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020006, 
            One, 
            0x0F, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(...
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003B, 
            One, 
            0x0E, 
            Buffer (0x14)
            {
                /* 0000 */  0x3B, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00,  // ;...(...
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020002, 
            One, 
            0x0D, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(...
                /* 0008 */  0x16, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,  // ....@...
                /* 0010 */  0x02, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020001, 
            Zero, 
            0x0C, 
            Buffer (0x019C)
            {
                /* 0000 */  0x01, 0x00, 0x02, 0x00, 0x60, 0x09, 0x00, 0x00,  // ....`...
                /* 0008 */  0x2F, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,  // /.......
                /* 0010 */  0xB0, 0x04, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00,  // ....@...
                /* 0018 */  0xA4, 0x06, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0020 */  0x6C, 0x07, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00,  // l.......
                /* 0028 */  0x34, 0x08, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  // 4.......
                /* 0030 */  0xFC, 0x08, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00,  // ....`...
                /* 0038 */  0xC4, 0x09, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 0040 */  0x8C, 0x0A, 0x00, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0048 */  0x54, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00,  // T.......
                /* 0050 */  0x1C, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00,  // ........
                /* 0058 */  0xE4, 0x0C, 0x00, 0x00, 0x48, 0x0D, 0x00, 0x00,  // ....H...
                /* 0060 */  0xAC, 0x0D, 0x00, 0x00, 0x10, 0x0E, 0x00, 0x00,  // ........
                /* 0068 */  0x74, 0x0E, 0x00, 0x00, 0xD8, 0x0E, 0x00, 0x00,  // t.......
                /* 0070 */  0x3C, 0x0F, 0x00, 0x00, 0xA0, 0x0F, 0x00, 0x00,  // <.......
                /* 0078 */  0x04, 0x10, 0x00, 0x00, 0x68, 0x10, 0x00, 0x00,  // ....h...
                /* 0080 */  0xCC, 0x10, 0x00, 0x00, 0x30, 0x11, 0x00, 0x00,  // ....0...
                /* 0088 */  0x94, 0x11, 0x00, 0x00, 0xF8, 0x11, 0x00, 0x00,  // ........
                /* 0090 */  0x5C, 0x12, 0x00, 0x00, 0xC0, 0x12, 0x00, 0x00,  // \.......
                /* 0098 */  0x24, 0x13, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00,  // $.......
                /* 00A0 */  0xEC, 0x13, 0x00, 0x00, 0x50, 0x14, 0x00, 0x00,  // ....P...
                /* 00A8 */  0xB4, 0x14, 0x00, 0x00, 0x18, 0x15, 0x00, 0x00,  // ........
                /* 00B0 */  0x7C, 0x15, 0x00, 0x00, 0xE0, 0x15, 0x00, 0x00,  // |.......
                /* 00B8 */  0x44, 0x16, 0x00, 0x00, 0xA8, 0x16, 0x00, 0x00,  // D.......
                /* 00C0 */  0x0C, 0x17, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00   // ....p...
            }
        }, 

        Package (0x04)
        {
            0x00020026, 
            Zero, 
            0x0B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x26, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // &.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050010, 
            One, 
            0x0A, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000A, 
            One, 
            0x09, 
            Buffer (0x14)
            {
                /* 0000 */  0x0A, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,  // ....2...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020027, 
            One, 
            0x08, 
            Buffer (0x14)
            {
                /* 0000 */  0x27, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // '.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010008, 
            One, 
            0x07, 
            Buffer (0x14)
            {
                /* 0000 */  0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010007, 
            One, 
            0x06, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010006, 
            One, 
            0x05, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010005, 
            One, 
            0x04, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010004, 
            One, 
            0x03, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010003, 
            One, 
            0x02, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }
    })
    Scope (\)
    {
        Name (GF01, Zero)
        Name (ASMI, 0x00B2)
        Name (DSMI, 0xB9)
        Name (AODV, 0x06)
        OperationRegion (AODE, SystemMemory, 0x77022018, 0x24AC)
        Field (AODE, AnyAcc, NoLock, Preserve)
        {
            OUTB,   1600, 
            SCMI,   32, 
            SCMD,   32, 
            DSPD,   68128, 
            RESV,   96, 
            RMPD,   1120, 
            WCNS,   4096
        }

        Device (AOD)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Method (AM01, 0, NotSerialized)
            {
                Return (\AODV)
            }

            Method (AM02, 0, NotSerialized)
            {
                If ((GF01 == Zero))
                {
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (\OBID)
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x019C)
                {
                     0x00                                             // .
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == Zero)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM04.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            OperationRegion (PSMI, SystemIO, ASMI, 0x02)
            Field (PSMI, AnyAcc, NoLock, Preserve)
            {
                ASMO,   8
            }

            Mutex (SMLO, 0x00)
            Method (AM05, 1, NotSerialized)
            {
                Name (LODT, Buffer (0xC8)
                {
                     0x00                                             // .
                })
                CreateDWordField (Arg0, Zero, DCMI)
                CreateDWordField (Arg0, 0x04, DCMD)
                SCMI = DCMI /* \AOD_.AM05.DCMI */
                SCMD = DCMD /* \AOD_.AM05.DCMD */
                ASMO = DSMI /* \DSMI */
                LODT = OUTB /* \OUTB */
                Return (LODT) /* \AOD_.AM05.LODT */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == One)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM06.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM06.LODT */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (\OBIE)
            }

            Method (AM09, 0, NotSerialized)
            {
                Name (TEMP, Buffer (0x8C){})
                TEMP = RMPD /* \RMPD */
                Return (TEMP) /* \AOD_.AM09.TEMP */
            }

            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    ElseIf ((Arg1 == 0x09))
                    {
                        Return (AM09 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Name (WQBA, Buffer (0x0C80)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x70, 0x0C, 0x00, 0x00, 0x6C, 0x45, 0x00, 0x00,  // p...lE..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD4, 0xA1, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x11, 0x10, 0x22, 0x21, 0x30, 0x34, 0x32,  // ..."!042
                /* 0028 */  0x0B, 0x03, 0x63, 0x04, 0x8A, 0x0B, 0x21, 0x07,  // ..c...!.
                /* 0030 */  0x10, 0x12, 0x07, 0x85, 0x12, 0x02, 0xA1, 0xFE,  // ........
                /* 0038 */  0x04, 0xF2, 0x2B, 0x00, 0xE1, 0x16, 0xCA, 0x14,  // ..+.....
                /* 0040 */  0x60, 0x50, 0x80, 0x53, 0x04, 0x11, 0xF4, 0x2A,  // `P.S...*
                /* 0048 */  0xC0, 0xA6, 0x00, 0x93, 0x02, 0x2C, 0x0A, 0xD0,  // .....,..
                /* 0050 */  0x2E, 0xC0, 0xB2, 0x00, 0xDD, 0x02, 0xA4, 0xC3,  // ........
                /* 0058 */  0x12, 0x91, 0xE0, 0x28, 0x31, 0xE0, 0x28, 0x9D,  // ...(1.(.
                /* 0060 */  0xD8, 0xC2, 0x0D, 0x1B, 0xBC, 0x50, 0x14, 0xCD,  // .....P..
                /* 0068 */  0x20, 0x4A, 0x82, 0xCA, 0x05, 0xF8, 0x46, 0x10,  //  J....F.
                /* 0070 */  0x78, 0xB9, 0x02, 0x24, 0x4F, 0x40, 0x9A, 0x05,  // x..$O@..
                /* 0078 */  0x18, 0x16, 0x60, 0x5D, 0x80, 0xEC, 0x21, 0x50,  // ..`]..!P
                /* 0080 */  0xA9, 0x43, 0x40, 0xC9, 0x19, 0x02, 0x6A, 0x00,  // .C@...j.
                /* 0088 */  0xAD, 0x4E, 0x40, 0xF8, 0x95, 0x4E, 0x09, 0x49,  // .N@..N.I
                /* 0090 */  0x10, 0xCE, 0x58, 0xC5, 0xE3, 0x6B, 0x16, 0x4D,  // ..X..k.M
                /* 0098 */  0xCF, 0x49, 0xCE, 0x31, 0xE4, 0x78, 0x5C, 0xE8,  // .I.1.x\.
                /* 00A0 */  0x41, 0xF0, 0x50, 0x1A, 0x40, 0x98, 0xFC, 0x21,  // A.P.@..!
                /* 00A8 */  0x2B, 0x06, 0x0C, 0x4A, 0xC2, 0x58, 0xA8, 0x8B,  // +..J.X..
                /* 00B0 */  0x51, 0xA3, 0x46, 0xCA, 0x06, 0x64, 0x88, 0xD2,  // Q.F..d..
                /* 00B8 */  0x46, 0x8D, 0x1E, 0xD0, 0xF9, 0x1D, 0xC9, 0xD9,  // F.......
                /* 00C0 */  0x1D, 0xDD, 0x91, 0x24, 0x30, 0xEA, 0x31, 0x1D,  // ...$0.1.
                /* 00C8 */  0x63, 0x61, 0x33, 0x12, 0x6A, 0x8C, 0xE6, 0xA0,  // ca3.j...
                /* 00D0 */  0x48, 0xB8, 0x41, 0xA3, 0x25, 0xC2, 0x6A, 0x5C,  // H.A.%.j\
                /* 00D8 */  0xB1, 0xCF, 0xCC, 0xC2, 0x87, 0x25, 0x8C, 0x23,  // .....%.#
                /* 00E0 */  0x38, 0xB0, 0x83, 0xB5, 0x68, 0x18, 0xA1, 0x15,  // 8...h...
                /* 00E8 */  0x04, 0xA7, 0x41, 0x1C, 0x45, 0x94, 0x30, 0x0C,  // ..A.E.0.
                /* 00F0 */  0xCF, 0x98, 0x81, 0x8E, 0x92, 0x21, 0x85, 0x09,  // .....!..
                /* 00F8 */  0x7A, 0x02, 0x41, 0x4E, 0x9E, 0x61, 0x19, 0xE2,  // z.AN.a..
                /* 0100 */  0x0C, 0x38, 0x56, 0x8C, 0x50, 0x21, 0x31, 0x03,  // .8V.P!1.
                /* 0108 */  0x09, 0xFE, 0xFF, 0x3F, 0x81, 0xAE, 0x31, 0xE4,  // ...?..1.
                /* 0110 */  0x19, 0x88, 0xDC, 0x03, 0x4E, 0x20, 0x48, 0xF4,  // ....N H.
                /* 0118 */  0x28, 0xC1, 0x8D, 0x6B, 0x54, 0x36, 0xA6, 0xB3,  // (..kT6..
                /* 0120 */  0xC1, 0x0D, 0xCC, 0x04, 0x71, 0x0E, 0x0F, 0x23,  // ....q..#
                /* 0128 */  0x03, 0x42, 0x13, 0x88, 0x1F, 0x3B, 0x7C, 0x02,  // .B...;|.
                /* 0130 */  0xBB, 0x3F, 0x0E, 0x48, 0x21, 0x82, 0x2E, 0x04,  // .?.H!...
                /* 0138 */  0x67, 0x5A, 0xA3, 0x00, 0x6B, 0x67, 0x07, 0xD9,  // gZ..kg..
                /* 0140 */  0x82, 0xD0, 0x59, 0x20, 0x56, 0x63, 0x28, 0x82,  // ..Y Vc(.
                /* 0148 */  0x88, 0x10, 0x34, 0x8A, 0xF1, 0x22, 0x84, 0x0A,  // ..4.."..
                /* 0150 */  0x11, 0x25, 0xEA, 0x39, 0x07, 0xA9, 0x4D, 0x80,  // .%.9..M.
                /* 0158 */  0x32, 0x10, 0xA1, 0x05, 0x33, 0x02, 0xB3, 0x7F,  // 2...3...
                /* 0160 */  0x06, 0x60, 0x16, 0x20, 0xFE, 0x08, 0x2C, 0xE1,  // .`. ..,.
                /* 0168 */  0x44, 0x20, 0x23, 0xA3, 0xA1, 0x87, 0x05, 0x9F,  // D #.....
                /* 0170 */  0x04, 0xD8, 0x01, 0xC1, 0xF3, 0x39, 0x35, 0x13,  // .....95.
                /* 0178 */  0x38, 0x30, 0x84, 0x78, 0x25, 0x40, 0xD4, 0xD1,  // 80.x%@..
                /* 0180 */  0x82, 0x12, 0x58, 0xCA, 0xD1, 0x80, 0xD8, 0x1E,  // ..X.....
                /* 0188 */  0x98, 0xEE, 0x01, 0x47, 0x78, 0xEE, 0xBE, 0x1C,  // ...Gx...
                /* 0190 */  0x9C, 0x9A, 0x7F, 0x1A, 0x9E, 0xE6, 0x43, 0x02,  // ......C.
                /* 0198 */  0x66, 0x88, 0x1E, 0xEB, 0x41, 0x04, 0x3C, 0x44,  // f...A.<D
                /* 01A0 */  0x76, 0x4A, 0x30, 0x20, 0xDE, 0xFB, 0xB5, 0x80,  // vJ0 ....
                /* 01A8 */  0x8C, 0xE0, 0x25, 0xC1, 0x80, 0x9E, 0xC4, 0x03,  // ..%.....
                /* 01B0 */  0x02, 0x58, 0x0E, 0x1A, 0x07, 0x7E, 0x42, 0x15,  // .X...~B.
                /* 01B8 */  0xDF, 0x01, 0xE8, 0x91, 0x80, 0xCD, 0x28, 0xBE,  // ......(.
                /* 01C0 */  0x09, 0xCA, 0x3A, 0x3E, 0xA0, 0xE7, 0x1C, 0xED,  // ..:>....
                /* 01C8 */  0xD9, 0xE1, 0x65, 0xA1, 0xD9, 0x2B, 0x06, 0x21,  // ..e..+.!
                /* 01D0 */  0x78, 0x0D, 0xF0, 0x4D, 0xC1, 0xA7, 0x11, 0x8B,  // x..M....
                /* 01D8 */  0x5A, 0x9D, 0x9C, 0xAC, 0xCA, 0x23, 0xA6, 0xE0,  // Z....#..
                /* 01E0 */  0x1E, 0x02, 0x97, 0x01, 0xA7, 0xA1, 0x7B, 0xBC,  // ......{.
                /* 01E8 */  0xE0, 0x50, 0x30, 0x5E, 0xFA, 0xFF, 0x1F, 0x2F,  // .P0^.../
                /* 01F0 */  0xB8, 0xE7, 0x75, 0xBC, 0x60, 0x39, 0x26, 0x3C,  // ..u.`9&<
                /* 01F8 */  0x6C, 0x54, 0x05, 0xA1, 0x41, 0x1C, 0x70, 0xF3,  // lT..A.p.
                /* 0200 */  0x03, 0x20, 0x57, 0x0B, 0x8F, 0x98, 0xCD, 0xE5,  // . W.....
                /* 0208 */  0xAC, 0xD8, 0x11, 0x85, 0x0F, 0x8F, 0x0F, 0xC3,  // ........
                /* 0210 */  0x23, 0x7E, 0x6F, 0x28, 0x16, 0x44, 0x02, 0x21,  // #~o(.D.!
                /* 0218 */  0x74, 0x66, 0x38, 0x72, 0xB0, 0x38, 0x3B, 0x41,  // tf8r.8;A
                /* 0220 */  0x88, 0xC0, 0xD2, 0x86, 0x8E, 0x1E, 0xB2, 0x47,  // .......G
                /* 0228 */  0xF5, 0x12, 0x63, 0x8C, 0x27, 0x02, 0xA3, 0x9E,  // ..c.'...
                /* 0230 */  0xD2, 0xD1, 0x83, 0x0F, 0xD0, 0xA3, 0x07, 0x7C,  // .......|
                /* 0238 */  0xFE, 0xFF, 0x47, 0x8F, 0x93, 0x34, 0x66, 0x89,  // ..G..4f.
                /* 0240 */  0x18, 0x3D, 0xFA, 0x1C, 0xE1, 0xE9, 0xBC, 0xFD,  // .=......
                /* 0248 */  0xF0, 0xA3, 0x48, 0x02, 0xC7, 0x87, 0xD0, 0xE8,  // ..H.....
                /* 0250 */  0xC1, 0x73, 0xFA, 0xF1, 0xE8, 0xC1, 0x3F, 0x46,  // .s....?F
                /* 0258 */  0x8F, 0x1E, 0x3C, 0x63, 0x38, 0x37, 0xDC, 0xD5,  // ..<c87..
                /* 0260 */  0xC6, 0x23, 0x07, 0xFB, 0x78, 0xF1, 0xF2, 0x8E,  // .#..x...
                /* 0268 */  0x5B, 0xA0, 0xF0, 0x39, 0x7B, 0x32, 0x80, 0xF7,  // [..9{2..
                /* 0270 */  0x20, 0xDC, 0x79, 0x0B, 0xB8, 0x8C, 0x80, 0xCB,  //  .y.....
                /* 0278 */  0x3D, 0x57, 0xA1, 0x04, 0x1E, 0xAD, 0x40, 0xFB,  // =W....@.
                /* 0280 */  0xFF, 0x3F, 0x5A, 0x01, 0x4C, 0xB8, 0x3F, 0xBC,  // .?Z.L.?.
                /* 0288 */  0x5A, 0x3D, 0x5A, 0x81, 0x3D, 0xE2, 0x73, 0x40,  // Z=Z.=.s@
                /* 0290 */  0x3F, 0x02, 0xC7, 0x86, 0x90, 0x93, 0xA3, 0x15,  // ?.......
                /* 0298 */  0xEA, 0x64, 0x84, 0x0B, 0x7A, 0xB0, 0x02, 0xBA,  // .d..z...
                /* 02A0 */  0x07, 0x0D, 0xDC, 0xF1, 0x00, 0xCE, 0xFF, 0xFF,  // ........
                /* 02A8 */  0x78, 0xC0, 0x07, 0xC6, 0x4F, 0x2F, 0xE0, 0x3B,  // x...O/.;
                /* 02B0 */  0xB3, 0x78, 0xAC, 0x38, 0x68, 0x86, 0x79, 0x20,  // .x.8h.y 
                /* 02B8 */  0xA7, 0xE6, 0x6B, 0x20, 0x0B, 0x3B, 0x5A, 0x50,  // ..k .;ZP
                /* 02C0 */  0x1D, 0xAB, 0x80, 0xC3, 0xB9, 0x12, 0x37, 0x5A,  // ......7Z
                /* 02C8 */  0xB8, 0x43, 0xC3, 0x8F, 0x17, 0x7C, 0x22, 0x4E,  // .C...|"N
                /* 02D0 */  0x52, 0x3E, 0xD4, 0x41, 0x3F, 0x80, 0x7A, 0xBC,  // R>.A?.z.
                /* 02D8 */  0xE0, 0x39, 0x48, 0x01, 0x87, 0x43, 0x1D, 0xF8,  // .9H..C..
                /* 02E0 */  0xFE, 0xFF, 0x87, 0x3A, 0x38, 0x43, 0x06, 0x9F,  // ...:8C..
                /* 02E8 */  0xBC, 0xB3, 0x18, 0xFA, 0x3C, 0xE3, 0x29, 0xD4,  // ....<.).
                /* 02F0 */  0x7A, 0x89, 0x21, 0xB0, 0x07, 0xE4, 0x93, 0x48,  // z.!....H
                /* 02F8 */  0x90, 0x13, 0x89, 0x70, 0x2E, 0x3E, 0x8D, 0x81,  // ...p.>..
                /* 0300 */  0xED, 0x00, 0x05, 0x1C, 0x4E, 0x63, 0xE0, 0xB9,  // ....Nc..
                /* 0308 */  0xA4, 0xB0, 0xDB, 0x18, 0x18, 0x0E, 0x51, 0xF0,  // ......Q.
                /* 0310 */  0x26, 0xE5, 0xF1, 0x83, 0xEF, 0xD4, 0x84, 0x3B,  // &......;
                /* 0318 */  0x44, 0xC1, 0xF3, 0x38, 0x24, 0x21, 0x9F, 0xC7,  // D..8$!..
                /* 0320 */  0x4B, 0x00, 0xEE, 0x1E, 0x85, 0x3F, 0x47, 0x81,  // K....?G.
                /* 0328 */  0xF7, 0xFF, 0x7F, 0x8E, 0x82, 0x27, 0x6B, 0xA1,  // .....'k.
                /* 0330 */  0xF4, 0x10, 0x65, 0x21, 0x30, 0xA8, 0x73, 0x14,  // ..e!0.s.
                /* 0338 */  0xC0, 0x14, 0x6F, 0xB7, 0x0D, 0xDD, 0xA2, 0x7C,  // ..o....|
                /* 0340 */  0x1B, 0x78, 0x1A, 0x78, 0x8D, 0x88, 0xF2, 0x1C,  // .x.x....
                /* 0348 */  0xE5, 0x8B, 0xD4, 0x0B, 0x41, 0x84, 0x28, 0xC7,  // ....A.(.
                /* 0350 */  0x7B, 0x02, 0x11, 0x1E, 0xA6, 0x3C, 0xE1, 0x30,  // {....<.0
                /* 0358 */  0xE1, 0x4E, 0x36, 0xCA, 0x4B, 0x43, 0x18, 0x43,  // .N6.KC.C
                /* 0360 */  0xC7, 0x0A, 0x14, 0x39, 0x7E, 0x08, 0x5F, 0x2A,  // ...9~._*
                /* 0368 */  0x7C, 0x8E, 0x62, 0x51, 0xCE, 0x03, 0xFA, 0x11,  // |.bQ....
                /* 0370 */  0xF8, 0xFC, 0x61, 0x23, 0x67, 0x11, 0xD4, 0x49,  // ..a#g..I
                /* 0378 */  0xC0, 0x87, 0x0E, 0x0F, 0xEA, 0x09, 0x01, 0x13,  // ........
                /* 0380 */  0xFA, 0x60, 0x08, 0xAA, 0xFF, 0xFF, 0x49, 0x0A,  // .`....I.
                /* 0388 */  0x38, 0x1F, 0x40, 0xE0, 0x85, 0x3C, 0xF3, 0x82,  // 8.@..<..
                /* 0390 */  0xEE, 0x44, 0x0F, 0x8E, 0x33, 0x61, 0xE4, 0xB8,  // .D..3a..
                /* 0398 */  0x0F, 0x34, 0xD8, 0xB3, 0x07, 0xF0, 0x91, 0x76,  // .4.....v
                /* 03A0 */  0xF0, 0x40, 0x89, 0x39, 0x7B, 0x00, 0xBA, 0xFE,  // .@.9{...
                /* 03A8 */  0xFF, 0x67, 0x0F, 0xC0, 0xC2, 0x65, 0xE3, 0xDD,  // .g...e..
                /* 03B0 */  0xC3, 0x97, 0x9E, 0x33, 0x7D, 0xF6, 0xF0, 0x5C,  // ...3}..\
                /* 03B8 */  0xDF, 0x39, 0x7C, 0x2A, 0x34, 0x8A, 0x21, 0xDE,  // .9|*4.!.
                /* 03C0 */  0x3F, 0x7C, 0x28, 0x88, 0x12, 0xF1, 0x5C, 0xA3,  // ?|(...\.
                /* 03C8 */  0x1C, 0x72, 0x94, 0xB8, 0x11, 0xC2, 0x3C, 0x1E,  // .r....<.
                /* 03D0 */  0x1A, 0x27, 0x46, 0xA8, 0x08, 0x0C, 0xF4, 0xD9,  // .'F.....
                /* 03D8 */  0x83, 0xC5, 0x39, 0x7B, 0x40, 0xC5, 0x3E, 0x9B,  // ..9{@.>.
                /* 03E0 */  0x37, 0x8E, 0x08, 0xAF, 0x01, 0xE7, 0x78, 0x3E,  // 7.....x>
                /* 03E8 */  0x3E, 0x7B, 0x00, 0xDE, 0xA4, 0x3C, 0xFD, 0x74,  // >{...<.t
                /* 03F0 */  0xF6, 0x00, 0xD7, 0x09, 0x18, 0x77, 0xF6, 0xC0,  // .....w..
                /* 03F8 */  0xFD, 0xFF, 0xCF, 0x1E, 0xB8, 0x71, 0x63, 0x4F,  // .....qcO
                /* 0400 */  0x1F, 0xC0, 0x4E, 0x84, 0x87, 0xA3, 0x07, 0x26,  // ..N....&
                /* 0408 */  0xF6, 0xF9, 0x16, 0xA0, 0xD0, 0xE1, 0xE3, 0xF9,  // ........
                /* 0410 */  0x16, 0xAC, 0xFF, 0xFF, 0x83, 0x14, 0x17, 0xFE,  // ........
                /* 0418 */  0xB2, 0xD4, 0xA7, 0xC0, 0xC1, 0x0F, 0xA9, 0xE8,  // ........
                /* 0420 */  0xE1, 0xF8, 0x38, 0x87, 0x39, 0xE0, 0x02, 0x6C,  // ..8.9..l
                /* 0428 */  0x3E, 0x5A, 0xFB, 0xFF, 0x7F, 0xB4, 0xC6, 0x03,  // >Z......
                /* 0430 */  0x87, 0xF4, 0x51, 0x01, 0x6C, 0xC7, 0x5B, 0xE0,  // ..Q.l.[.
                /* 0438 */  0x70, 0x54, 0x00, 0xCF, 0xC0, 0xF8, 0x58, 0x81,  // pT....X.
                /* 0440 */  0xC5, 0xC4, 0x1E, 0x5D, 0x8E, 0x15, 0x6C, 0x87,  // ...]..l.
                /* 0448 */  0x5A, 0xE0, 0x30, 0x56, 0x30, 0x0D, 0x8C, 0x8D,  // Z.0V0...
                /* 0450 */  0x15, 0x7C, 0x12, 0x8E, 0xD5, 0xE8, 0x31, 0xFA,  // .|....1.
                /* 0458 */  0xD6, 0x73, 0x40, 0x9E, 0x47, 0x84, 0xB0, 0xBE,  // .s@.G...
                /* 0460 */  0xC2, 0x24, 0x70, 0x5C, 0x08, 0xFD, 0xFF, 0x87,  // .$p\....
                /* 0468 */  0x0B, 0x1E, 0x50, 0x0F, 0x17, 0xFC, 0xF2, 0x86,  // ..P.....
                /* 0470 */  0x0B, 0x9A, 0xB1, 0xC1, 0x19, 0x31, 0xF8, 0x4E,  // .....1.N
                /* 0478 */  0x5E, 0x3E, 0x06, 0x83, 0xE5, 0x12, 0xC1, 0xCE,  // ^>......
                /* 0480 */  0x02, 0x6C, 0x3A, 0xF8, 0x9B, 0x30, 0xFE, 0xC8,  // .l:..0..
                /* 0488 */  0x05, 0x8C, 0x02, 0x98, 0x00, 0x61, 0x32, 0x4F,  // .....a2O
                /* 0490 */  0x07, 0x92, 0x0C, 0x83, 0x3A, 0x72, 0x01, 0xA7,  // ....:r..
                /* 0498 */  0x10, 0x07, 0x02, 0x28, 0xFF, 0xFF, 0x23, 0x17,  // ...(..#.
                /* 04A0 */  0xF0, 0x53, 0x3A, 0x25, 0x4D, 0xFA, 0xFD, 0x1B,  // .S:%M...
                /* 04A8 */  0x77, 0xCC, 0x02, 0x1B, 0xC2, 0x63, 0x16, 0xBF,  // w....c..
                /* 04B0 */  0x30, 0xFA, 0x98, 0x05, 0x46, 0x31, 0x4B, 0xD1,  // 0...F1K.
                /* 04B8 */  0x58, 0x2C, 0xE7, 0xCC, 0xE8, 0x53, 0x07, 0xEA,  // X,...S..
                /* 04C0 */  0x6C, 0xE1, 0x33, 0xC0, 0x19, 0x1E, 0xD8, 0xB3,  // l.3.....
                /* 04C8 */  0xC6, 0xF1, 0x9E, 0x42, 0xED, 0xC3, 0x24, 0x73,  // ...B..$s
                /* 04D0 */  0xF5, 0x75, 0xFD, 0x09, 0x80, 0x9F, 0x1B, 0x7D,  // .u.....}
                /* 04D8 */  0xD6, 0x02, 0xAE, 0x27, 0x84, 0x67, 0x2D, 0xF0,  // ...'.g-.
                /* 04E0 */  0xDC, 0x07, 0x7C, 0x0D, 0xE0, 0x13, 0x39, 0x3E,  // ..|...9>
                /* 04E8 */  0x38, 0xE7, 0x46, 0xF0, 0xFC, 0xFF, 0xCF, 0x52,  // 8.F....R
                /* 04F0 */  0x96, 0x35, 0x6E, 0xB4, 0x24, 0x10, 0x1D, 0x32,  // .5n.$..2
                /* 04F8 */  0x22, 0x9E, 0xE9, 0x41, 0xBC, 0xD6, 0xF9, 0x04,  // "..A....
                /* 0500 */  0xFC, 0x8A, 0x10, 0xFB, 0x1D, 0xC3, 0x37, 0x05,  // ......7.
                /* 0508 */  0x4F, 0xC4, 0xF7, 0x3A, 0x13, 0x8C, 0x7E, 0xEC,  // O..:..~.
                /* 0510 */  0x02, 0xBA, 0xA7, 0x14, 0xDC, 0xC0, 0xE1, 0x8E,  // ........
                /* 0518 */  0x0F, 0x77, 0xA4, 0xC0, 0x0F, 0x11, 0xCE, 0xD8,  // .w......
                /* 0520 */  0xC1, 0x25, 0xFC, 0x14, 0x8B, 0x3E, 0x42, 0xF0,  // .%...>B.
                /* 0528 */  0x61, 0x60, 0xB1, 0x03, 0xBF, 0x13, 0x60, 0xE4,  // a`....`.
                /* 0530 */  0x41, 0xEB, 0x24, 0x0B, 0x9E, 0x33, 0x18, 0x70,  // A.$..3.p
                /* 0538 */  0x88, 0x30, 0x74, 0xD0, 0xDC, 0x44, 0xCE, 0xE2,  // .0t..D..
                /* 0540 */  0xFF, 0x1F, 0x2C, 0x4E, 0xB4, 0x93, 0x38, 0x9F,  // ..,N..8.
                /* 0548 */  0x48, 0xE7, 0x17, 0x2C, 0x4A, 0x75, 0x33, 0x87,  // H..,Ju3.
                /* 0550 */  0x00, 0x74, 0x90, 0x38, 0x9C, 0x37, 0x1F, 0x8F,  // .t.8.7..
                /* 0558 */  0xCE, 0x30, 0xBE, 0x61, 0xB2, 0x7B, 0x00, 0xBF,  // .0.a.{..
                /* 0560 */  0xEF, 0x78, 0x2E, 0x07, 0xE6, 0xE3, 0x2D, 0xBC,  // .x....-.
                /* 0568 */  0x23, 0x83, 0x0F, 0x03, 0xE0, 0x12, 0x3D, 0x7E,  // #.....=~
                /* 0570 */  0x29, 0x39, 0x0C, 0xA0, 0x06, 0x69, 0xD8, 0xD3,  // )9...i..
                /* 0578 */  0x39, 0xFD, 0x03, 0x3B, 0xB2, 0xE6, 0xE1, 0x35,  // 9..;...5
                /* 0580 */  0xAA, 0xD7, 0x1D, 0x9F, 0x8C, 0x1E, 0x05, 0xC0,  // ........
                /* 0588 */  0x76, 0x44, 0x03, 0x0E, 0x01, 0x8E, 0x02, 0x40,  // vD.....@
                /* 0590 */  0x68, 0x9A, 0x38, 0x9C, 0xE3, 0xC4, 0x1C, 0x5F,  // h.8...._
                /* 0598 */  0x7D, 0x0F, 0x62, 0xD7, 0x15, 0x63, 0xBE, 0x51,  // }.b..c.Q
                /* 05A0 */  0x55, 0x7F, 0x12, 0x80, 0x7E, 0xF8, 0x02, 0xCF,  // U...~...
                /* 05A8 */  0xFF, 0xFF, 0xF2, 0xF3, 0xFA, 0x93, 0xC0, 0x42,  // .......B
                /* 05B0 */  0x8F, 0x02, 0x50, 0xA0, 0x5F, 0xBD, 0x7C, 0xAB,  // ..P._.|.
                /* 05B8 */  0x79, 0x56, 0x60, 0xB8, 0xA7, 0x74, 0x56, 0x09,  // yV`..tV.
                /* 05C0 */  0x2C, 0xE9, 0x28, 0x00, 0xAA, 0xE3, 0x1B, 0x70,  // ,.(....p
                /* 05C8 */  0xB8, 0x49, 0x3D, 0x0A, 0x80, 0x7F, 0x8A, 0x0C,  // .I=.....
                /* 05D0 */  0xE4, 0x18, 0xB1, 0xF7, 0x0B, 0x7E, 0x6A, 0xB3,  // .....~j.
                /* 05D8 */  0xCB, 0x43, 0x00, 0xD0, 0x39, 0x4C, 0x91, 0x43,  // .C..9L.C
                /* 05E0 */  0x00, 0x6A, 0x98, 0x9E, 0x36, 0x3F, 0xCE, 0xF2,  // .j..6?..
                /* 05E8 */  0x13, 0x00, 0x78, 0x40, 0x7D, 0x02, 0x00, 0xFF,  // ..x@}...
                /* 05F0 */  0xBD, 0xD7, 0x27, 0x00, 0x38, 0xFF, 0xFF, 0x13,  // ..'.8...
                /* 05F8 */  0x00, 0xFE, 0x8A, 0x82, 0x1F, 0x1D, 0x6E, 0xE0,  // ......n.
                /* 0600 */  0xF0, 0x8E, 0x1C, 0x3E, 0xA5, 0x80, 0xEB, 0xC8,  // ...>....
                /* 0608 */  0x88, 0x3B, 0x17, 0xC2, 0x1B, 0x12, 0x3B, 0x10,  // .;....;.
                /* 0610 */  0x02, 0xC3, 0xA0, 0x7A, 0x8E, 0x84, 0xF4, 0x70,  // ...z...p
                /* 0618 */  0x20, 0x51, 0xEB, 0xA4, 0x30, 0x3E, 0x0D, 0xF8,  //  Q..0>..
                /* 0620 */  0x40, 0x08, 0xF7, 0xE4, 0x65, 0x38, 0x3E, 0x42,  // @...e8>B
                /* 0628 */  0x0F, 0xFD, 0x21, 0xE2, 0xC9, 0xC7, 0xF7, 0x03,  // ..!.....
                /* 0630 */  0x4F, 0xEE, 0xC9, 0x10, 0xC6, 0x39, 0xC1, 0x77,  // O....9.w
                /* 0638 */  0x15, 0x76, 0x37, 0x7B, 0xD6, 0xF3, 0xB9, 0xCA,  // .v7{....
                /* 0640 */  0x04, 0x3E, 0x2C, 0x30, 0x34, 0x7E, 0x4C, 0x04,  // .>,04~L.
                /* 0648 */  0xEB, 0x8D, 0xC1, 0x87, 0x67, 0xB0, 0xDC, 0x11,  // ....g...
                /* 0650 */  0x31, 0x58, 0xCF, 0x1D, 0x36, 0x2A, 0xE0, 0xFF,  // 1X..6*..
                /* 0658 */  0x7F, 0x4B, 0xF7, 0x5D, 0xC6, 0xBE, 0x86, 0xA1,  // .K.]....
                /* 0660 */  0x3B, 0xA7, 0x0F, 0x71, 0xBE, 0x74, 0xF0, 0xE3,  // ;..q.t..
                /* 0668 */  0x3A, 0xEE, 0x74, 0x08, 0x2E, 0xEC, 0x67, 0x7A,  // :.t...gz
                /* 0670 */  0xB0, 0x87, 0x3A, 0x70, 0xD2, 0x48, 0xA3, 0x41,  // ..:p.H.A
                /* 0678 */  0x1D, 0x15, 0x7C, 0x28, 0xF0, 0x31, 0xC5, 0x03,  // ..|(.1..
                /* 0680 */  0x7C, 0xA9, 0xF0, 0x09, 0xC5, 0xD3, 0x7A, 0x5C,  // |.....z\
                /* 0688 */  0x78, 0x1A, 0xF0, 0xB8, 0xD9, 0x35, 0xC1, 0x1F,  // x....5..
                /* 0690 */  0x04, 0x1F, 0x0F, 0xF0, 0x07, 0x88, 0x80, 0xAF,  // ........
                /* 0698 */  0x37, 0x3E, 0x7A, 0xC0, 0x39, 0x82, 0xE0, 0x8F,  // 7>z.9...
                /* 06A0 */  0x2A, 0xF0, 0xC7, 0xE3, 0x63, 0x80, 0x8F, 0xB5,  // *...c...
                /* 06A8 */  0x5C, 0xFE, 0x20, 0x50, 0x07, 0x78, 0x3E, 0xD2,  // \. P.x>.
                /* 06B0 */  0xD3, 0x7A, 0x1B, 0xF0, 0x21, 0xE1, 0xB0, 0xD8,  // .z..!...
                /* 06B8 */  0x09, 0x86, 0x8F, 0x07, 0xFC, 0x07, 0xB2, 0x87,  // ........
                /* 06C0 */  0x0C, 0x5F, 0x19, 0x3C, 0x5F, 0x1F, 0xDD, 0xB1,  // ._.<_...
                /* 06C8 */  0x47, 0x10, 0x78, 0xB7, 0x0E, 0x1F, 0x1A, 0x42,  // G.x....B
                /* 06D0 */  0x3D, 0x75, 0x78, 0x06, 0xEF, 0x17, 0x3E, 0x81,  // =ux...>.
                /* 06D8 */  0x60, 0xFF, 0xFF, 0x27, 0x10, 0x70, 0x47, 0x71,  // `..'.pGq
                /* 06E0 */  0x03, 0xF1, 0x73, 0x6B, 0xA1, 0xEB, 0x94, 0x8D,  // ..sk....
                /* 06E8 */  0xB3, 0x0E, 0x3D, 0x0F, 0x58, 0xEE, 0x01, 0x41,  // ..=.X..A
                /* 06F0 */  0xD7, 0x08, 0xCC, 0x0D, 0x22, 0x88, 0x8F, 0x45,  // ...."..E
                /* 06F8 */  0xBE, 0x51, 0x30, 0x82, 0x02, 0x01, 0x75, 0xF8,  // .Q0...u.
                /* 0700 */  0x34, 0x84, 0xA5, 0x51, 0x48, 0x18, 0x84, 0x46,  // 4..QH..F
                /* 0708 */  0xE4, 0xA3, 0x07, 0x81, 0xA3, 0x20, 0x1E, 0xBD,  // ..... ..
                /* 0710 */  0x63, 0x1E, 0xCF, 0xD1, 0x43, 0xF5, 0x31, 0xC0,  // c...C.1.
                /* 0718 */  0x93, 0xC0, 0x85, 0x3A, 0xA4, 0xD1, 0xE3, 0x02,  // ...:....
                /* 0720 */  0x1E, 0xEF, 0x88, 0x4E, 0xCD, 0xD3, 0xF0, 0xD8,  // ...N....
                /* 0728 */  0x71, 0x27, 0x0F, 0xB8, 0xE3, 0xC0, 0x9F, 0x76,  // q'.....v
                /* 0730 */  0xF0, 0x17, 0x80, 0x57, 0x20, 0x13, 0xB0, 0x53,  // ...W ..S
                /* 0738 */  0x35, 0xF8, 0x04, 0x1E, 0x0E, 0x40, 0x01, 0xE4,  // 5....@..
                /* 0740 */  0xFB, 0x80, 0x0F, 0x3C, 0xCF, 0x04, 0x6C, 0x0E,  // ...<..l.
                /* 0748 */  0x21, 0xC2, 0x44, 0x33, 0x3C, 0x26, 0xF0, 0x31,  // !.D3<&.1
                /* 0750 */  0x8C, 0x9E, 0x86, 0x3C, 0x2E, 0x3E, 0x4A, 0x9F,  // ...<.>J.
                /* 0758 */  0x61, 0xD8, 0x09, 0xCE, 0xD7, 0x62, 0x0F, 0xF0,  // a....b..
                /* 0760 */  0xE5, 0xE0, 0xB9, 0x16, 0x03, 0xEB, 0x71, 0x73,  // ......qs
                /* 0768 */  0x58, 0xA3, 0x3D, 0xEE, 0xFA, 0x8A, 0xF0, 0xFF,  // X.=.....
                /* 0770 */  0x7F, 0x98, 0xF3, 0xA1, 0xCB, 0x57, 0x27, 0xC3,  // .....W'.
                /* 0778 */  0xFA, 0xE4, 0x01, 0x8E, 0xB3, 0x14, 0xFC, 0xA1,  // ........
                /* 0780 */  0xE2, 0xCE, 0x02, 0x70, 0x0F, 0xE4, 0x6C, 0x0E,  // ...p..l.
                /* 0788 */  0x4F, 0x03, 0x78, 0x99, 0x87, 0x08, 0xD4, 0x40,  // O.x....@
                /* 0790 */  0x2C, 0x72, 0x81, 0x3A, 0xAE, 0x78, 0x24, 0x26,  // ,r.:.x$&
                /* 0798 */  0xF0, 0x51, 0xD1, 0x07, 0x08, 0x7E, 0x7E, 0xF0,  // .Q...~~.
                /* 07A0 */  0x01, 0xD7, 0x07, 0x08, 0x2E, 0x04, 0x8E, 0x82,  // ........
                /* 07A8 */  0xF8, 0x00, 0xE1, 0x90, 0x10, 0x3A, 0xE7, 0xE2,  // .....:..
                /* 07B0 */  0x8E, 0x03, 0x3E, 0xC0, 0x30, 0x88, 0x07, 0x83,  // ..>.0...
                /* 07B8 */  0x07, 0x56, 0x76, 0x94, 0xF1, 0x01, 0x02, 0x78,  // .Vv....x
                /* 07C0 */  0x8C, 0x03, 0x7F, 0x80, 0x80, 0x7B, 0xFA, 0x02,  // .....{..
                /* 07C8 */  0xD7, 0xF9, 0x01, 0x78, 0x04, 0x3F, 0x3F, 0xA0,  // ...x.??.
                /* 07D0 */  0xFF, 0xFF, 0xE7, 0x07, 0xF8, 0x87, 0x53, 0x7E,  // ......S~
                /* 07D8 */  0x7E, 0x00, 0x9E, 0x03, 0x7C, 0x14, 0x00, 0xCB,  // ~...|...
                /* 07E0 */  0x99, 0x8C, 0xCD, 0xE1, 0xA5, 0xE6, 0xB5, 0xD3,  // ........
                /* 07E8 */  0x87, 0x21, 0x76, 0x9C, 0x67, 0x47, 0x7A, 0xAE,  // .!v.gGz.
                /* 07F0 */  0x6B, 0x04, 0x24, 0xE2, 0x19, 0x02, 0x35, 0x08,  // k.$...5.
                /* 07F8 */  0xC7, 0x39, 0x36, 0xE8, 0x38, 0xC1, 0x6E, 0xD9,  // .96.8.n.
                /* 0800 */  0x0F, 0x41, 0x55, 0xA3, 0x08, 0xDE, 0xB7, 0x02,  // .AU.....
                /* 0808 */  0x16, 0xE1, 0x18, 0x81, 0x12, 0x4F, 0x21, 0xE9,  // .....O!.
                /* 0810 */  0xC7, 0x08, 0x94, 0x58, 0x38, 0x0A, 0xE2, 0x51,  // ...X8..Q
                /* 0818 */  0xFB, 0x20, 0x61, 0x1B, 0xC7, 0x08, 0xD4, 0x18,  // . a.....
                /* 0820 */  0x3D, 0xB0, 0x77, 0x3B, 0x76, 0x14, 0xE0, 0xA7,  // =.w;v...
                /* 0828 */  0x08, 0xF8, 0xA7, 0x30, 0xDC, 0xD1, 0x03, 0x1C,  // ...0....
                /* 0830 */  0x17, 0xB1, 0x43, 0x3B, 0xBB, 0x47, 0x4C, 0x63,  // ..C;.GLc
                /* 0838 */  0x9E, 0x41, 0xC4, 0x08, 0xAF, 0xAE, 0x46, 0xF3,  // .A....F.
                /* 0840 */  0x18, 0x71, 0xE7, 0x4D, 0x5F, 0x0F, 0x7D, 0xA4,  // .q.M_.}.
                /* 0848 */  0xF0, 0xA1, 0x1D, 0x73, 0xA4, 0x80, 0xF7, 0xFF,  // ...s....
                /* 0850 */  0x27, 0xF0, 0xB9, 0x11, 0x77, 0xA4, 0x80, 0x33,  // '...w..3
                /* 0858 */  0x93, 0xF3, 0xC0, 0xDC, 0x41, 0x8F, 0x25, 0xBC,  // ....A.%.
                /* 0860 */  0xAF, 0x85, 0xF8, 0x83, 0x05, 0xF0, 0x38, 0x2E,  // ......8.
                /* 0868 */  0xF9, 0x60, 0x01, 0x2E, 0x48, 0x1F, 0x2C, 0x80,  // .`..H.,.
                /* 0870 */  0xEB, 0xF9, 0xC0, 0xA7, 0x03, 0xB0, 0x5E, 0xC8,  // ......^.
                /* 0878 */  0xF8, 0xFD, 0x00, 0xC6, 0x09, 0x03, 0xC6, 0xF9,  // ........
                /* 0880 */  0x00, 0x73, 0xC3, 0x70, 0xAC, 0x95, 0xEA, 0x84,  // .s.p....
                /* 0888 */  0x81, 0x8B, 0xF5, 0xA0, 0xD0, 0x40, 0xD8, 0xF0,  // .....@..
                /* 0890 */  0x9E, 0x7F, 0x9E, 0x0C, 0xF9, 0x61, 0x86, 0x45,  // .....a.E
                /* 0898 */  0x81, 0xD3, 0xD1, 0xC2, 0x27, 0x0B, 0x87, 0xA0,  // ....'...
                /* 08A0 */  0xD0, 0x41, 0xCC, 0x27, 0x0C, 0x2E, 0xE6, 0x84,  // .A.'....
                /* 08A8 */  0x41, 0x41, 0x0C, 0xE8, 0xA4, 0x10, 0xFA, 0xFF,  // AA......
                /* 08B0 */  0x9F, 0xC3, 0x70, 0xA7, 0x4D, 0x1F, 0x1B, 0x58,  // ..p.M..X
                /* 08B8 */  0xB8, 0xFB, 0x05, 0x9D, 0x8B, 0xE7, 0xCC, 0xF1,  // ........
                /* 08C0 */  0x7C, 0x0E, 0x31, 0xAC, 0x6F, 0x26, 0xE0, 0xB9,  // |.1.o&..
                /* 08C8 */  0x52, 0xB0, 0x33, 0x8F, 0x2F, 0x04, 0xBE, 0x4D,  // R.3./..M
                /* 08D0 */  0xF2, 0x03, 0x27, 0x3B, 0x16, 0x18, 0xE5, 0x78,  // ..';...x
                /* 08D8 */  0x5F, 0x0B, 0xAD, 0xE6, 0xAE, 0x80, 0x9A, 0x11,  // _.......
                /* 08E0 */  0x86, 0xC0, 0x03, 0xF6, 0x49, 0x0C, 0x4C, 0xFA,  // ....I.L.
                /* 08E8 */  0x6E, 0x14, 0x20, 0x47, 0xE7, 0x67, 0x6E, 0x8F,  // n. G.gn.
                /* 08F0 */  0x9E, 0x1F, 0x00, 0x7C, 0xB4, 0xE3, 0xA3, 0x77,  // ...|...w
                /* 08F8 */  0x6C, 0x08, 0x1D, 0x57, 0xE0, 0x1E, 0xEE, 0x7C,  // l..W...|
                /* 0900 */  0x86, 0x02, 0xBE, 0x03, 0xF3, 0x0C, 0x9F, 0x50,  // .......P
                /* 0908 */  0xC0, 0x75, 0x7F, 0xE0, 0xE7, 0xC2, 0xFF, 0xFF,  // .u......
                /* 0910 */  0xFB, 0x03, 0xE6, 0x2C, 0x0C, 0xE3, 0x94, 0x02,  // ...,....
                /* 0918 */  0x3C, 0x46, 0xEF, 0x53, 0x0A, 0xB8, 0x0E, 0x00,  // <F.S....
                /* 0920 */  0x3E, 0xA5, 0x00, 0xD7, 0x39, 0x3E, 0xC8, 0x83,  // >...9>..
                /* 0928 */  0x07, 0xC5, 0xF7, 0x5F, 0x4F, 0xC4, 0xC6, 0x87,  // ..._O...
                /* 0930 */  0x4F, 0x2F, 0x28, 0x1E, 0xCB, 0x9B, 0x37, 0x0F,  // O/(...7.
                /* 0938 */  0x75, 0x36, 0x41, 0x47, 0x7B, 0x3D, 0x68, 0xD0,  // u6AG{=h.
                /* 0940 */  0x0F, 0x2A, 0x9E, 0x7D, 0xF8, 0xE3, 0x8B, 0xF0,  // .*.}....
                /* 0948 */  0x7C, 0xEA, 0x71, 0xB1, 0x38, 0x67, 0x13, 0x54,  // |.q.8g.T
                /* 0950 */  0x10, 0x0A, 0x1D, 0x3B, 0x7D, 0x9C, 0xE0, 0x92,  // ...;}...
                /* 0958 */  0x8E, 0x13, 0x14, 0xC4, 0x80, 0xCE, 0x7B, 0xC4,  // ......{.
                /* 0960 */  0xF3, 0x21, 0x1E, 0x7D, 0xEA, 0xF3, 0x2D, 0xE1,  // .!.}..-.
                /* 0968 */  0x38, 0x9E, 0x40, 0x12, 0xCC, 0x77, 0x12, 0xA0,  // 8.@..w..
                /* 0970 */  0x97, 0x13, 0x78, 0xA7, 0x71, 0xDC, 0x48, 0x71,  // ..x.q.Hq
                /* 0978 */  0xFF, 0xFF, 0xCB, 0x09, 0x8C, 0x03, 0x8D, 0x67,  // .......g
                /* 0980 */  0xC1, 0x10, 0xDE, 0xAC, 0xD9, 0x71, 0x1D, 0x1E,  // .....q..
                /* 0988 */  0x8C, 0xAF, 0x27, 0x30, 0xEF, 0x79, 0xE0, 0x3A,  // ..'0.y.:
                /* 0990 */  0x9E, 0x00, 0x0B, 0x99, 0x07, 0x00, 0xD4, 0xB1,  // ........
                /* 0998 */  0xD1, 0x07, 0x47, 0x7E, 0x00, 0x70, 0xE8, 0xE3,  // ..G~.p..
                /* 09A0 */  0x09, 0x7A, 0x26, 0x3E, 0x16, 0x3D, 0x95, 0xF8,  // .z&>.=..
                /* 09A8 */  0x02, 0xC0, 0xCF, 0x6E, 0x3A, 0x9F, 0x80, 0xE2,  // ...n:...
                /* 09B0 */  0x9C, 0x09, 0x9E, 0x71, 0xB0, 0x2B, 0x00, 0xFE,  // ...q.+..
                /* 09B8 */  0x84, 0x02, 0xFB, 0x48, 0x06, 0xBE, 0x89, 0xF8,  // ...H....
                /* 09C0 */  0x54, 0x71, 0x20, 0xD8, 0xD3, 0x09, 0xF8, 0xFE,  // Tq .....
                /* 09C8 */  0xFF, 0x27, 0x59, 0xE0, 0x01, 0xCB, 0x4F, 0xB2,  // .'Y...O.
                /* 09D0 */  0x80, 0x8F, 0xDB, 0x08, 0x76, 0x16, 0xCF, 0x24,  // ....v..$
                /* 09D8 */  0x8C, 0x60, 0xE4, 0xA3, 0x09, 0xEA, 0x88, 0xEC,  // .`......
                /* 09E0 */  0xA0, 0xA7, 0x30, 0xC4, 0x38, 0x1F, 0x2B, 0x8C,  // ..0.8.+.
                /* 09E8 */  0x11, 0xB9, 0xF8, 0x51, 0x6B, 0x32, 0x3E, 0x9B,  // ...Qk2>.
                /* 09F0 */  0xF9, 0xB2, 0xCE, 0x0E, 0x3F, 0x38, 0x82, 0x81,  // ....?8..
                /* 09F8 */  0x0E, 0x28, 0xA8, 0xE3, 0x98, 0xCF, 0x62, 0x80,  // .(....b.
                /* 0A00 */  0xB3, 0xFF, 0xFF, 0x59, 0x0C, 0xF8, 0x9F, 0xDD,  // ...Y....
                /* 0A08 */  0x3D, 0x7A, 0x7E, 0x6C, 0xE7, 0x20, 0x1E, 0xBD,  // =z~l. ..
                /* 0A10 */  0xC3, 0x9F, 0xC5, 0xA0, 0x87, 0x3D, 0x8B, 0x01,  // .....=..
                /* 0A18 */  0x6D, 0xC1, 0x67, 0x31, 0x50, 0xDE, 0x22, 0xE0,  // m.g1P.".
                /* 0A20 */  0x9E, 0x41, 0x81, 0xD7, 0xDA, 0x7C, 0x42, 0x81,  // .A...|B.
                /* 0A28 */  0xFF, 0xFF, 0x3F, 0xA1, 0xE0, 0xEE, 0x0C, 0x3E,  // ..?....>
                /* 0A30 */  0xA1, 0x00, 0xD7, 0x23, 0x00, 0xEE, 0x0C, 0x0A,  // ...#....
                /* 0A38 */  0x8E, 0x13, 0x00, 0xF3, 0x75, 0x03, 0xA0, 0x20,  // ....u.. 
                /* 0A40 */  0x8F, 0x00, 0xF8, 0x2B, 0xBC, 0x0F, 0x26, 0xB8,  // ...+..&.
                /* 0A48 */  0x78, 0x27, 0x15, 0x14, 0x87, 0xE3, 0x9D, 0x54,  // x'.....T
                /* 0A50 */  0x10, 0x53, 0x89, 0xFC, 0xD6, 0xE2, 0x09, 0x84,  // .S......
                /* 0A58 */  0x3F, 0xB8, 0x38, 0xEF, 0x67, 0xFC, 0x54, 0x06,  // ?.8.g.T.
                /* 0A60 */  0x43, 0xD4, 0xC1, 0x02, 0x25, 0xE3, 0x60, 0x41,  // C...%.`A
                /* 0A68 */  0x41, 0x0C, 0xE8, 0x8C, 0xA7, 0x14, 0xF4, 0xA9,  // A.......
                /* 0A70 */  0x8C, 0x5F, 0x46, 0x3C, 0xB0, 0x04, 0x33, 0x5D,  // ._F<..3]
                /* 0A78 */  0x53, 0xA0, 0x5F, 0x40, 0x70, 0x03, 0x86, 0x0B,  // S._@p...
                /* 0A80 */  0xF6, 0x20, 0x61, 0x84, 0xD7, 0x64, 0xCF, 0x03,  // . a..d..
                /* 0A88 */  0x73, 0x44, 0x01, 0x16, 0xFF, 0xFF, 0x23, 0x0A,  // sD....#.
                /* 0A90 */  0xF0, 0x90, 0x3C, 0x74, 0x94, 0xC8, 0xA1, 0x53,  // ..<t...S
                /* 0A98 */  0x10, 0x0F, 0xDD, 0x34, 0x3E, 0xA2, 0xE0, 0xC6,  // ...4>...
                /* 0AA0 */  0xCA, 0x2E, 0x04, 0xB0, 0xA2, 0x9E, 0x52, 0x40,  // ......R@
                /* 0AA8 */  0x21, 0x72, 0xF8, 0xA0, 0x19, 0xC7, 0xD1, 0x3D,  // !r.....=
                /* 0AB0 */  0xF5, 0x78, 0x1E, 0xFC, 0x4E, 0xEC, 0x63, 0x1E,  // .x..N.c.
                /* 0AB8 */  0xDC, 0x93, 0x0A, 0xEE, 0xD4, 0x88, 0x3B, 0xA9,  // ......;.
                /* 0AC0 */  0x80, 0x61, 0x8E, 0xD8, 0x53, 0x19, 0xF0, 0x3A,  // .a..S..:
                /* 0AC8 */  0x82, 0x82, 0xCF, 0xC3, 0x21, 0x05, 0x14, 0xFF,  // ....!...
                /* 0AD0 */  0xFF, 0x23, 0x28, 0x70, 0x3E, 0xA4, 0xF0, 0x63,  // .#(p>..c
                /* 0AD8 */  0x06, 0xE6, 0x6A, 0xC0, 0x8F, 0xA0, 0x98, 0x98,  // ..j.....
                /* 0AE0 */  0xCF, 0x07, 0x9D, 0x4F, 0xF8, 0xD1, 0xC0, 0x81,  // ...O....
                /* 0AE8 */  0x5E, 0x05, 0x02, 0x67, 0x67, 0x7D, 0xDC, 0xE5,  // ^..gg}..
                /* 0AF0 */  0xC0, 0x27, 0x0C, 0x13, 0x8C, 0x70, 0x9A, 0xA0,  // .'...p..
                /* 0AF8 */  0x10, 0x16, 0x4F, 0x21, 0xE9, 0x87, 0x0A, 0x94,  // ..O!....
                /* 0B00 */  0x58, 0x38, 0x0A, 0xE2, 0x43, 0x85, 0x85, 0x1C,  // X8..C...
                /* 0B08 */  0x2A, 0xD0, 0xC7, 0x28, 0x7C, 0xF0, 0x13, 0x05,  // *..(|...
                /* 0B10 */  0x28, 0x2E, 0x00, 0x8F, 0xEC, 0xE0, 0xBD, 0xAF,  // (.......
                /* 0B18 */  0xE3, 0x07, 0x89, 0xBB, 0xA8, 0x78, 0xC8, 0x3E,  // .....x.>
                /* 0B20 */  0xB0, 0x63, 0xE6, 0xE9, 0xA3, 0x05, 0x3C, 0x02,  // .c....<.
                /* 0B28 */  0x9F, 0x1E, 0xC1, 0x07, 0xEF, 0xC3, 0x14, 0xEE,  // ........
                /* 0B30 */  0xFF, 0x7F, 0x98, 0x02, 0x2E, 0x67, 0x3D, 0x1F,  // .....g=.
                /* 0B38 */  0x2C, 0xC0, 0x05, 0xEE, 0x83, 0x05, 0x70, 0xBD,  // ,.....p.
                /* 0B40 */  0xFD, 0xF8, 0x74, 0x00, 0xD6, 0xD1, 0x1E, 0xF3,  // ..t.....
                /* 0B48 */  0xF9, 0xC6, 0x79, 0x3F, 0x80, 0x71, 0x53, 0x79,  // ..y?.qSy
                /* 0B50 */  0x88, 0xF4, 0x3D, 0xC0, 0xF8, 0xEC, 0x7C, 0x80,  // ..=...|.
                /* 0B58 */  0xBD, 0x12, 0xF9, 0xEC, 0xA0, 0x33, 0x06, 0x6A,  // .....3.j
                /* 0B60 */  0x38, 0x3E, 0x57, 0x78, 0x24, 0xEC, 0x02, 0x70,  // 8>Wx$..p
                /* 0B68 */  0xAE, 0x3E, 0x50, 0xE1, 0x0E, 0x7D, 0x3E, 0x62,  // .>P..}>b
                /* 0B70 */  0xF0, 0x23, 0xBD, 0x4F, 0xB9, 0xE0, 0x3A, 0x62,  // .#.O..:b
                /* 0B78 */  0xE0, 0x43, 0x1E, 0x31, 0x40, 0xF1, 0xFF, 0x3F,  // .C.1@..?
                /* 0B80 */  0x40, 0xE0, 0x46, 0x0D, 0x8E, 0xC9, 0x3D, 0x22,  // @.F...="
                /* 0B88 */  0x9C, 0xF2, 0x99, 0xE2, 0x0E, 0x16, 0xC0, 0x65,  // .......e
                /* 0B90 */  0x1E, 0xEC, 0x60, 0x01, 0xBC, 0x22, 0x1F, 0x80,  // ..`.."..
                /* 0B98 */  0x40, 0x67, 0xE2, 0x60, 0x01, 0x74, 0xCF, 0x04,  // @g.`.t..
                /* 0BA0 */  0xC0, 0x41, 0xA1, 0x4D, 0x9F, 0x1A, 0x8D, 0x5A,  // .A.M...Z
                /* 0BA8 */  0x35, 0x28, 0x53, 0xA3, 0x4C, 0x83, 0x5A, 0x7D,  // 5(S.L.Z}
                /* 0BB0 */  0x2A, 0x35, 0x46, 0xF0, 0xDC, 0xE3, 0xB5, 0x6A,  // *5F....j
                /* 0BB8 */  0xB0, 0x0E, 0xF5, 0x66, 0x10, 0x88, 0xE3, 0xAE,  // ...f....
                /* 0BC0 */  0x58, 0x03, 0x26, 0x0F, 0x27, 0xFD, 0xFF, 0x41,  // X.&.'..A
                /* 0BC8 */  0x2C, 0x44, 0x05, 0x08, 0x93, 0xB1, 0x2E, 0x81,  // ,D......
                /* 0BD0 */  0x58, 0xCA, 0xBA, 0x04, 0x62, 0xA1, 0xEF, 0x08,  // X...b...
                /* 0BD8 */  0x81, 0x38, 0xC8, 0x6B, 0x40, 0x20, 0x8E, 0xF7,  // .8.k@ ..
                /* 0BE0 */  0xD6, 0x13, 0x88, 0x83, 0x6A, 0x01, 0x61, 0x31,  // ....j.a1
                /* 0BE8 */  0xBD, 0x80, 0xB0, 0x70, 0x6B, 0x13, 0x88, 0x23,  // ...pk..#
                /* 0BF0 */  0x99, 0x19, 0x0A, 0xFD, 0xD6, 0x09, 0xC4, 0x61,  // .......a
                /* 0BF8 */  0xED, 0x80, 0x30, 0x09, 0x7E, 0x40, 0x98, 0xF4,  // ..0.~@..
                /* 0C00 */  0x05, 0x0B, 0x8C, 0x18, 0x02, 0x61, 0xA2, 0x1C,  // .....a..
                /* 0C08 */  0x81, 0x30, 0x91, 0x92, 0x86, 0x44, 0x3D, 0x81,  // .0...D=.
                /* 0C10 */  0xB0, 0x18, 0x20, 0x54, 0x90, 0xA9, 0xD3, 0xBE,  // .. T....
                /* 0C18 */  0x40, 0x24, 0x0F, 0x44, 0x40, 0x16, 0xEC, 0x0A,  // @$.D@...
                /* 0C20 */  0x88, 0xC9, 0x07, 0x11, 0x90, 0x43, 0xDB, 0x02,  // .....C..
                /* 0C28 */  0x62, 0x12, 0x7E, 0x22, 0x02, 0x72, 0x86, 0x27,  // b.~".r.'
                /* 0C30 */  0xB2, 0x80, 0x1C, 0x08, 0x44, 0x40, 0x8E, 0xB5,  // ....D@..
                /* 0C38 */  0x5E, 0x01, 0x39, 0x24, 0x88, 0x80, 0x2C, 0x50,  // ^.9$..,P
                /* 0C40 */  0x1A, 0x10, 0x53, 0x0B, 0x22, 0x20, 0x0B, 0xB7,  // ..S." ..
                /* 0C48 */  0x06, 0xC4, 0x62, 0x80, 0x08, 0xC8, 0xC9, 0xBD,  // ..b.....
                /* 0C50 */  0x01, 0x31, 0x19, 0xAF, 0x57, 0x01, 0x59, 0x8C,  // .1..W.Y.
                /* 0C58 */  0x39, 0x20, 0x26, 0x0D, 0x44, 0x40, 0x4E, 0xE7,  // 9 &.D@N.
                /* 0C60 */  0x0E, 0x88, 0x45, 0x05, 0x11, 0x90, 0xE3, 0xCB,  // ..E.....
                /* 0C68 */  0x03, 0x62, 0x62, 0xEC, 0x0D, 0x98, 0xFA, 0x03,  // .bb.....
                /* 0C70 */  0x62, 0x01, 0x41, 0x04, 0x64, 0x89, 0x0F, 0x98,  // b.A.d...
                /* 0C78 */  0x40, 0x44, 0x30, 0x88, 0x80, 0xFC, 0xFF, 0x07   // @D0.....
            })
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "AMD", "AMDWOV", 0x00000001)
{
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_WOV, 0, NotSerialized)
        {
            Return (One)
        }
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMDFDG2", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP0.M241, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.M434, UnknownObj)
    External (M049, UnknownObj)
    External (M097, UnknownObj)
    External (M128, UnknownObj)

    Scope (\_SB.PCI0.GPP0)
    {
        PowerResource (M237, 0x00, 0x0000)
        {
            Name (M239, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (M239) /* \_SB_.PCI0.GPP0.M237.M239 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((M239 == Zero))
                {
                    If (CondRefOf (\_SB.PCI0.GPP0.M241))
                    {
                        \_SB.PCI0.GPP0.M241 (One)
                    }
                }

                M239 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((M239 == One))
                {
                    If (CondRefOf (\_SB.PCI0.GPP0.M241))
                    {
                        \_SB.PCI0.GPP0.M241 (Zero)
                    }
                }

                M239 = Zero
            }
        }

        Name (XPR0, Package (0x01)
        {
            M237
        })
        Name (XPR2, Package (0x01)
        {
            M237
        })
        Name (XPR3, Package (0x01)
        {
            M237
        })
        Name (XS0W, 0x04)
        Device (SWUS)
        {
            PowerResource (M237, 0x00, 0x0000)
            {
                Name (M239, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (M239) /* \_SB_.PCI0.GPP0.SWUS.M237.M239 */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    M239 = One
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    M239 = Zero
                }
            }

            Name (XPR0, Package (0x01)
            {
                M237
            })
            Name (XPR2, Package (0x01)
            {
                M237
            })
            Name (XPR3, Package (0x01)
            {
                M237
            })
            Name (XS0W, 0x04)
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Name (DDPM, Package (0x02)
            {
                0x08, 
                0x04
            })
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (DDPM) /* \_SB_.PCI0.GPP0.SWUS.DDPM */
            }

            Device (SWDS)
            {
                PowerResource (M237, 0x00, 0x0000)
                {
                    Name (M239, One)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (M239) /* \_SB_.PCI0.GPP0.SWUS.SWDS.M237.M239 */
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        M239 = One
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        M239 = Zero
                    }
                }

                Name (XPR0, Package (0x01)
                {
                    M237
                })
                Name (XPR2, Package (0x01)
                {
                    M237
                })
                Name (XPR3, Package (0x01)
                {
                    M237
                })
                Name (XS0W, 0x04)
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Name (DDPM, Package (0x02)
                {
                    0x08, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (DDPM) /* \_SB_.PCI0.GPP0.SWUS.SWDS.DDPM */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((M097 != Zero))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }
                }

                Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00){}
                    })
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Name (M432, Zero)
                    Name (M433, Zero)
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (M435, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (M435, Zero, M436)
                                CreateBitField (M435, 0x05, M445)
                                CreateBitField (M435, 0x0A, M437)
                                CreateBitField (M435, 0x0B, M438)
                                If ((Arg1 >= 0x04))
                                {
                                    M436 = One
                                    M445 = One
                                    ((0x66 = (M049 >> M128)) /* External reference */ & 0x04)
                                    One
                                    M432
                                    ((0x66 = (M049 >> M128)) /* External reference */ & 0x05)
                                    One
                                    M433
                                    If ((M432 == One))
                                    {
                                        M437 = One
                                    }

                                    If ((M433 == One))
                                    {
                                        M438 = One
                                    }
                                }
                                Else
                                {
                                    M436 = One
                                    M445 = One
                                }

                                Return (M435) /* \_SB_.PCI0.GPP0.SWUS.SWDS._DSM.M435 */
                            }
                            Case (0x05)
                            {
                                Return (Zero)
                            }
                            Case (0x0A)
                            {
                                Return (One)
                            }
                            Case (0x0B)
                            {
                                Local0 = ToInteger (Arg3)
                                If ((Local0 <= 0x2710))
                                {
                                    \_SB.PCI0.GPP0.M434 = 0x2710
                                }
                                Else
                                {
                                    Local0 = 0x2710
                                }

                                Return (Local0)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }
        }

        Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x04)
            {
                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "HotPlugSupportInD3", 
                        One
                    }
                }, 

                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }
    }
}



SSDT14
------
DefinitionBlock ("", "SSDT", 2, "AMD", "USB     ", 0x00000001)
{
    External (_SB_.PCI0.GP17.XHC0, DeviceObj)
    External (_SB_.PCI0.GP17.XHC1, DeviceObj)
    External (_SB_.PCI0.GP19.XHC2, DeviceObj)
    External (M600, IntObj)
    External (M601, IntObj)

    Scope (\_SB.PCI0.GP17.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x09
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    One
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x09
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    One
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x09
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    0x02
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x09
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    0x02
                    One
                    0x15
                    Zero
                }
            }
        }
    }

    Scope (\_SB.PCI0.GP17.XHC1)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x09
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    0x03
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x09
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    0x03
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x03
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x05
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x03
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x05
                    One
                    0x15
                    Zero
                }
            }
        }
    }

    Scope (\_SB.PCI0.GP19.XHC2)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x04
                    One
                    0x15
                    Zero
                }
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "CPUSSDT", 0x00000001)
{
    Scope (\_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "EXTGPP00", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP2, DeviceObj)
    External (M460, MethodObj)    // Warning: Unknown method, guessing 7 arguments

    Scope (\_SB.PCI0.GPP0)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x08, 
            0x04
        })
    }

    Scope (\_SB.PCI0.GPP2)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x08, 
            0x04
        })
    }

    Scope (\_GPE)
    {
        Name (NGP0, 0x01)
        Name (NGP2, 0x01)
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  OEM-ASL-\\_GPE._L08\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((\_GPE.NGP0 != 0x55))
            {
                M460 ("    Notify (\\_SB.PCI0.GPP0, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            }

            If ((\_GPE.NGP2 != 0x55))
            {
                M460 ("    Notify (\\_SB.PCI0.GPP2, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    Scope (\_SB)
    {
        Device (PTIO)
        {
            Name (_HID, "AMDIF031")  // _HID: Hardware ID
            Name (_CID, "AMDIF031")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC30000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PTIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMCMN", 0x00000001)
{
    /*
     * iASL Warning: There were 96 external control methods found during
     * disassembly, but only 0 were resolved (96 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE.AIE0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.AIE1, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.AIE2, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.AIE3, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.BIE0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.BIE1, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.BIE2, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.BIE3, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.PTS0, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.PTS1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.PTS2, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.PTS3, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.SP00, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP01, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP02, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP03, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP04, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP05, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP06, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP07, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP10, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP11, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP12, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP13, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP14, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP15, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP16, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP17, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP20, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP21, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP22, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP23, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP24, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP25, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP26, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP27, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP30, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP31, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP32, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP33, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP34, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP35, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP36, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP37, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP40, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP41, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP42, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP43, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP44, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP45, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP46, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP47, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP50, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP51, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP52, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP53, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP54, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP55, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP56, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP57, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP60, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP61, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP62, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP63, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP64, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP65, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP66, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP67, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP70, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP71, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP72, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP73, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP74, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP75, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP76, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP77, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.WAK0, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.WAK1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.WAK2, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.WAK3, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.ALIB, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.AM00, UnknownObj)
    External (_SB_.BPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.BWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.M263, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M264, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M284, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.OPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.OWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M038, IntObj)
    External (M039, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (MOEM, IntObj)
    External (NFPC, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    OperationRegion (CPNV, SystemMemory, 0x77668018, 0x0001010F)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72, 
        M453,   32, 
        M454,   16, 
        M455,   8, 
        M456,   8, 
        M457,   8, 
        M449,   72, 
        M4C0,   32, 
        M23A,   8, 
        M31C,   32, 
        M4F0,   32, 
        M610,   32, 
        M620,   32, 
        M29A,   128
    }

    Name (CTMR, Zero)
    Name (M285, Buffer (0x04)
    {
         0x01, 0x03, 0x80, 0x00                           // ....
    })
    Method (M000, 1, Serialized)
    {
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, Zero, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If ((ToInteger (M286) == One))
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == One))
        {
            Local2 = ToInteger (M452)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }

        OperationRegion (VARP, SystemMemory, 0xFED80808, 0x04)
        Field (VARP, DWordAcc, NoLock, Preserve)
        {
            VARU,   32
        }

        Local1 = VARU /* \M000.VARU */
        If ((Local1 >= CTMR))
        {
            Local2 = (Local1 - CTMR) /* \CTMR */
        }
        Else
        {
            Local2 = (Local1 + ((0xFFFFFFFE - CTMR) + One))
        }

        Divide (Local2, 0x19, Local3, Local2)
        Divide ((Local2 * 0x07), 0x03E8, Local3, Local2)
        If ((Local3 >= 0x64))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        ElseIf ((Local3 >= 0x0A))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.0%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        Else
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.00%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }

        CTMR = Local1
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDevicePower (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DD8)
                                }
                                Else
                                {
                                    M000 (0x0DDB)
                                }
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DD9)
                                }
                                Else
                                {
                                    M000 (0x0DDC)
                                }
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DDA)
                                }
                                Else
                                {
                                    M000 (0x0DDD)
                                }
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M470, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If (((Local3 == Zero) && (Local4 != Zero)))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDevicePowerState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 ((Local5 & 0xFF00FFFF), Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceClock (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Local3 = Zero
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                Local3 = One
                                            }
                                        }
                                        ElseIf ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    Local3 = 0x03
                                }
                                Else
                                {
                                    Local3 = 0x0F
                                }

                                If ((M085 >= 0x04))
                                {
                                    If ((M085 == 0x08))
                                    {
                                        If (((Local7 & 0x0FF00000) > Zero))
                                        {
                                            Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << One)))
                                            Local6 |= (Local3 << (Local2 << One))
                                            M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                                0x03) << One), 0x02, Local3)
                                        }
                                    }
                                    ElseIf (((Local7 >> 0x1C) == 0x02))
                                    {
                                        M012 ((M084 + 0x1300), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << One), 0x02, Local3)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << One), 0x02, Local3)
                                    }
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 >> One), ((Local2 & 
                                        One) << 0x02), 0x04, Local3)
                                }

                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DE0)
                                }

                                If ((Arg1 == One))
                                {
                                    M000 (0x0DE1)
                                }

                                If ((Arg1 == 0x02))
                                {
                                    M000 (0x0DE2)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceReset (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                Local7 = M009 ((Local5 & 0xFF00FFFF))
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 ((Local5 & 0xFF00FFFF))
                                }
                            }

                            If ((Local3 == Zero))
                            {
                                M000 (0x0DD5)
                            }

                            If ((Local3 == One))
                            {
                                M000 (0x0DD6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                            M000 (0x0DD7)
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDeviceResetState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0E
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Name (M046, 0xAA)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M046 == 0xAA))
        {
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2021"))
                {
                    M046 = 0x0B
                    M460 ("  KER-ASL-_OSI = Windows 11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2020"))
                {
                    M046 = 0x0A
                    M460 ("  KER-ASL-_OSI = Windows 10, version 2004\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2019"))
                {
                    M046 = 0x09
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1903\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018.2"))
                {
                    M046 = 0x08
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1809\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018"))
                {
                    M046 = 0x07
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1803\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017.2"))
                {
                    M046 = 0x06
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1709\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017"))
                {
                    M046 = 0x05
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1703\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2016"))
                {
                    M046 = 0x04
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1607\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2015"))
                {
                    M046 = 0x03
                    M460 ("  KER-ASL-_OSI = Windows 10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2013"))
                {
                    M046 = 0x02
                    M460 ("  KER-ASL-_OSI = Windows 8.1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2012"))
                {
                    M046 = One
                    M460 ("  KER-ASL-_OSI = Windows 8, Win Server 2012\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
            }
        }

        If ((M046 >= One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M22A, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmTriggerSci (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        OperationRegion (VARP, SystemMemory, 0xFED8020C, 0x14)
        Field (VARP, DWordAcc, NoLock, Preserve)
        {
            VA0C,   32, 
            Offset (0x0C), 
            VA18,   32, 
            VA1C,   32
        }

        Local0 = (One << Arg0)
        Local1 = 0x7FFFFFFF
        Local1 |= 0x80000000
        Local1 ^= Local0
        VA0C &= Local1
        VA18 = ((VA18 & Local1) | Local0)
        VA1C = ((VA1C & Local1) | Local0)
        Sleep (One)
        VA1C &= Local1
        VA18 &= Local1
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        M460 ("  KER-ASL-CpmTriggerSmi (0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM) /* External reference */
            Arg0
            Arg1
            Arg2
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M458, 1, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                THRM,   8, 
                Offset (0x14), 
                LSRM,   8, 
                Offset (0x18), 
                MSRM,   8
            }

            Local1 = 0x001E8480
            While (((Local1 > Zero) && ((LSRM & 0x60) != 0x60)))
            {
                Local1 -= One
            }

            If ((M457 != Zero))
            {
                Local2 = 0x001E8480
                While (((Local2 > Zero) && ((MSRM & 0x10) != 0x10)))
                {
                    Local2 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRM = Arg0
                Return (Zero)
            }
        }
        ElseIf ((Local0 > Zero))
        {
            CreateWordField (M285, 0x02, M288)
            OperationRegion (VARN, SystemIO, Local0, 0x08)
            Field (VARN, ByteAcc, NoLock, Preserve)
            {
                THRI,   8, 
                Offset (0x05), 
                LSRI,   8
            }

            Local1 = 0x001E8480
            If ((ToInteger (M288) != Local0))
            {
                While (((Local1 > Zero) && ((LSRI & 0xE0) != 0x60)))
                {
                    If ((LSRI == 0xFF))
                    {
                        M453 = Zero
                        Local1 = One
                    }

                    Local1 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRI = Arg0
                Return (Zero)
            }
        }

        Return (0xFF)
    }

    Method (M459, 2, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }

        Local0 = SizeOf (Arg0)
        ToInteger (Arg1, Local1)
        Local2 = Zero
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local2 = M458 (DerefOf (Local3 [Local1]))
                Local1 += One
            }
        }

        Return (Local2)
    }

    Method (M460, 7, Serialized)
    {
        CreateWordField (M285, 0x02, M288)
        ToInteger (M453, Local7)
        If ((Local7 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local7 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local7, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }
        ElseIf ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARS, SystemIO, Local7, 0x04)
            Field (VARS, DWordAcc, NoLock, Preserve)
            {
                VART,   32
            }

            VART = 0x5F535452
        }

        Local0 = SizeOf (Arg0)
        Local1 = Zero
        Local2 = Zero
        Local5 = One
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local4 = DerefOf (Local3 [Local1])
                If (((Local4 == 0x25) && (0x07 > Local5)))
                {
                    If ((Local5 == One))
                    {
                        Local6 = Arg1
                    }
                    ElseIf ((Local5 == 0x02))
                    {
                        Local6 = Arg2
                    }
                    ElseIf ((Local5 == 0x03))
                    {
                        Local6 = Arg3
                    }
                    ElseIf ((Local5 == 0x04))
                    {
                        Local6 = Arg4
                    }
                    ElseIf ((Local5 == 0x05))
                    {
                        Local6 = Arg5
                    }
                    ElseIf ((Local5 == 0x06))
                    {
                        Local6 = Arg6
                    }

                    Local5 += One
                    Local1 += One
                    Local4 = DerefOf (Local3 [Local1])
                    If (((Local4 == 0x58) || (Local4 == 0x78)))
                    {
                        Local2 = M459 (ToHexString (Local6), 0x02)
                    }
                    ElseIf (((Local4 == 0x44) || (Local4 == 0x64)))
                    {
                        Local2 = M459 (ToDecimalString (Local6), Zero)
                    }
                    ElseIf (((Local4 == 0x53) || (Local4 == 0x73)))
                    {
                        Local2 = M459 (Local6, Zero)
                    }
                    Else
                    {
                        Local2 = M458 (0x25)
                        Local5 -= One
                        Local1 -= One
                    }
                }
                ElseIf ((Local4 == 0x0A))
                {
                    Local2 = M458 (0x0D)
                    Local2 = M458 (0x0A)
                }
                Else
                {
                    Local2 = M458 (Local4)
                }

                Local1 += One
            }
        }

        If ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARU, SystemIO, Local7, 0x04)
            Field (VARU, DWordAcc, NoLock, Preserve)
            {
                VARV,   32
            }

            VARV = 0x5F454E44
        }

        Return (Local2)
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 >>= Local1
                    Local0 &= 0x03
                }
                Else
                {
                    Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                        Local1 & 0x07), 0x02)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                Local0 = M011 ((M084 + 0x1300), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 >> One), (
                (Arg4 & One) << 0x02), 0x04)
        }

        M460 ("  KER-ASL-CpmReadClkReq  (%d, %d, %d, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Arg4, Local0)
        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteClkReq (%d, %d, %d, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 &= (0xFFFFFFFF ^ (0x03 << Local1))
                    Local0 |= (Arg5 << Local1)
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
                Else
                {
                    M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                        ), 0x02, Arg5)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                M012 ((M084 + 0x1300), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 >> One), ((Arg4 & 
                One) << 0x02), 0x04, Arg5)
        }
    }

    Method (M600, 2, Serialized)
    {
        Name (TEMP, Package (0x04)
        {
            0xFF, 
            0x09, 
            Zero, 
            Zero
        })
        If ((Arg0 == Zero))
        {
            TEMP [Zero] = Zero
        }

        If ((Arg1 != 0x09))
        {
            TEMP [One] = Arg1
        }

        Local0 = DerefOf (TEMP [Zero])
        Local1 = DerefOf (TEMP [One])
        Local2 = DerefOf (TEMP [0x02])
        Local3 = DerefOf (TEMP [0x03])
        M460 ("  KER-ASL-CpmGenerateUPC () Return Package (4) {0x%X, 0x%X, 0x%X, 0x%X}\n", Local0, Local1, Local2, Local3, Zero, Zero)
        Return (TEMP) /* \M600.TEMP */
    }

    Method (M601, 6, Serialized)
    {
        Name (TEMP, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
            }
        })
        CreateField (DerefOf (TEMP [Zero]), 0x20, 0x10, WIDH)
        CreateField (DerefOf (TEMP [Zero]), 0x30, 0x10, HIGT)
        CreateField (DerefOf (TEMP [Zero]), 0x40, One, VISI)
        CreateField (DerefOf (TEMP [Zero]), 0x42, One, FLID)
        CreateField (DerefOf (TEMP [Zero]), 0x43, 0x03, PANE)
        CreateField (DerefOf (TEMP [Zero]), 0x46, 0x02, VTPS)
        CreateField (DerefOf (TEMP [Zero]), 0x48, 0x02, HZPS)
        CreateField (DerefOf (TEMP [Zero]), 0x4A, 0x04, SHAP)
        CreateField (DerefOf (TEMP [Zero]), 0x4F, 0x08, GPTN)
        CreateField (DerefOf (TEMP [Zero]), 0x57, 0x08, GPPS)
        CreateField (DerefOf (TEMP [Zero]), 0x60, 0x02, EJTB)
        CreateField (DerefOf (TEMP [Zero]), 0x73, 0x04, ROTN)
        CreateField (DerefOf (TEMP [Zero]), 0x80, 0x20, OFST)
        If (((Arg0 == Zero) || (Arg0 == 0x02)))
        {
            SHAP = 0x03
            WIDH = 0x08
            HIGT = 0x0E
        }
        ElseIf (((Arg0 == One) || (Arg0 == 0x03)))
        {
            SHAP = One
            WIDH = 0x03
            HIGT = 0x08
        }
        ElseIf ((Arg0 == 0x02))
        {
            SHAP = 0x02
            WIDH = 0x08
            HIGT = 0x08
            FLID = One
        }

        If (((Arg0 == 0x02) || (Arg0 == 0x03)))
        {
            ROTN = 0x02
        }

        VISI = Arg1
        GPTN = ((Arg2 >> 0x08) & 0xFF)
        GPPS = (Arg2 & 0xFF)
        EJTB = Arg3
        PANE = (Arg4 & 0x07)
        VTPS = ((Arg4 >> 0x04) & 0x03)
        HZPS = ((Arg4 >> 0x08) & 0x03)
        If ((Arg5 != Zero))
        {
            OFST = Arg5
        }

        CreateDWordField (DerefOf (TEMP [Zero]), Zero, DW00)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x04, DW01)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x08, DW02)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x0C, DW03)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x10, DW04)
        M460 ("  KER-ASL-CpmGeneratePLD () Return 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", DW00, DW01, DW02, DW03, DW04, Zero)
        Return (TEMP) /* \M601.TEMP */
    }

    Method (MPTS, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE7)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_PTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.IPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.BPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BPTS (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.PTS0))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS0 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS1))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS1 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS2))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS2 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS3))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OPTS))
        {
            M460 ("    KER-ASL-Call \\_SB.OPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OPTS (Arg0)
        }

        M000 (0x0DE8)
    }

    Method (MWAK, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE9)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmLowPowerEthernet_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.IWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.BWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BWAK (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.WAK0))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK0 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK1))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK1 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK2))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK2 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK3))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OWAK))
        {
            M460 ("    KER-ASL-Call \\_SB.OWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OWAK (Arg0)
        }

        M000 (0x0DEA)
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        M460 ("  KER-ASL-CpmReadPcieRegister  (0x%X, 0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local0, Zero)
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWritePcieRegister (0x%X, 0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFFFFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0xFF
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M011 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        M460 ("  KER-ASL-CpmGetPcieAspm (0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Local0, Zero, Zero)
        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        M460 ("  KER-ASL-CpmSetPcieAspm (0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06)
                    M115
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06)
                    M115
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 3, Serialized)
    {
        Local0 = (M430 (Arg0, Arg1, Arg2) & 0x0F)
        If (((Local0 == 0x0F) || (Local0 == Zero)))
        {
            Return (0xFF)
        }

        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local3 = (0x06 - Arg0)
            }
            Else
            {
                Local3 = 0x06
            }
        }
        Else
        {
            Local3 = 0x03
        }

        Local3 = (0x14001000 + (Local3 << 0x14))
        Local0 = (Arg1 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg2 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x09
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x16
        }
        ElseIf ((M085 == 0x0D))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x0E))
        {
            Local2 = 0x0A
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x10
        }
        ElseIf ((M085 == 0x10))
        {
            Local2 = 0x15
        }
        ElseIf ((M085 == 0x12))
        {
            Local2 = 0x14
        }
        ElseIf ((M085 == 0x13))
        {
            Local2 = 0x0D
        }
        Else
        {
            Local2 = 0x12
        }

        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M471, 3, Serialized)
    {
        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local5 = (0x04 - Arg0)
            }
            Else
            {
                Local5 = 0x04
            }
        }
        Else
        {
            Local5 = (Arg0 + One)
        }

        ToInteger (Arg1, Local4)
        If (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            If ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x0F))
        {
            If ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x03
            }
            ElseIf ((Local4 == 0x0B))
            {
                Local4 -= 0x0B
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x12))
        {
            If ((Local4 >= 0x10))
            {
                Local4 -= 0x10
                Local5 += 0x03
            }
            ElseIf ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x06))
            {
                Local4 -= 0x06
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x10))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x13))
        {
            If ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((Local4 >= 0x08))
        {
            Local4 -= 0x08
            If (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                Local5 += 0x04
            }
            Else
            {
                Local5 += One
            }
        }

        Local6 = (0x11000000 + (Local5 << 0x14))
        Local6 += (Arg2 << 0x10)
        If (((Arg2 == Zero) || (Arg2 == 0x04)))
        {
            Local6 += (Local4 << 0x0C)
        }

        Return (Local6)
    }

    Method (M402, 3, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local7 = (M471 (Arg0, Local4, 0x08) + 0x0188)
                Local0 = M249 (Zero, Zero, Zero, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg1 << 0x13) | (Arg2 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                }
            }

            Local6 = (M471 (Arg0, Local4, 0x04) + 0x0294)
            Local3 = M249 (Zero, Zero, Zero, Local6)
            Local5 = 0x4EEA
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                Local3 = M249 (Zero, Zero, Zero, Local6)
            }

            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, Local7, Local0)
            }
        }
    }

    Method (M403, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local2 = (M471 (Arg0, Local4, 0x04) + 0x0280)
            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg3
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Method (M472, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local7 = (M471 (Arg0, Local4, 0x08) + 0x0428)
            If (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x12))
            {
                If ((Local4 >= 0x06))
                {
                    Local4 -= 0x06
                }
            }
            ElseIf ((M085 == 0x13))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x10))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local4 -= 0x08
            }

            Local0 = M249 (Zero, Zero, Zero, Local7)
            Local1 = (One << Local4)
            Local2 = (Arg3 << Local4)
            If (((Local0 & Local1) != Local2))
            {
                Local3 = (Local0 & (0xFFFFFFFF ^ Local1))
                M250 (Zero, Zero, Zero, Local7, (Local3 | Local2))
            }
        }
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        M460 ("  KER-ASL-CpmReadBxbSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            M460 ("  KER-ASL-CpmWriteBxbSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == 0xFFFFFFFF))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        If (CondRefOf (\_SB.AM00))
        {
            Acquire (\_SB.AM00, 0xFFFF)
        }
        Else
        {
            Acquire (M253, 0xFFFF)
        }

        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        If (CondRefOf (\_SB.AM00))
        {
            Release (\_SB.AM00)
        }
        Else
        {
            Release (M253)
        }

        M460 ("  KER-ASL-CpmReadSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != 0xFFFFFFFF))
        {
            M460 ("  KER-ASL-CpmWriteSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            If (CondRefOf (\_SB.AM00))
            {
                Acquire (\_SB.AM00, 0xFFFF)
            }
            Else
            {
                Acquire (M253, 0xFFFF)
            }

            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            If (CondRefOf (\_SB.AM00))
            {
                Release (\_SB.AM00)
            }
            Else
            {
                Release (M253)
            }
        }
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem32  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem32 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem8  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem8 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x05
                }
            }
        }

        Return (0xFFFFFFFF)
    }

    Method (M624, 1, Serialized)
    {
        Local0 = Zero
        If ((M251 != Zero))
        {
            Local1 = (0x10 + (Arg0 * 0x05))
            Local0 = M049 (M251, Local1)
            If ((Local0 == 0xFF))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            Local0 = VARR /* \M049.VARR */
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            Local0 = VARR /* \M04A.VARR */
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local0 = VARR /* \M04B.VARR */
        }

        Return (Local0)
    }

    Method (M04C, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            VARR = Arg2
        }
    }

    Method (M04D, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            VARR = Arg2
        }
    }

    Method (M04E, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            VARR = Arg2
        }
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M4E3, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M410 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M4E4, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M4E2 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M43A, 1, Serialized)
    {
        Local0 = Zero
        Local1 = M04B (M128, 0x33)
        Local2 = M04B (M128, 0x72)
        If (((Local1 == Zero) || (Local2 == Zero)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local1 = 0x%X  Local2 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local1, Local2, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M011 (Local2, 0x19, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 1\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local2 = (Local1 + (Local3 << 0x14))
        Local3 = M013 (Local2, 0x08, 0x08, 0x18)
        If ((Local3 != 0x00060400))
        {
            If ((Arg0 >= 0x08))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d >= 8)  Not PROM21  ERROR ERROR ERROR\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local3 = 0x02
            Local2 += (Local3 << 0x0C)
        }
        ElseIf ((Arg0 >= 0x18))
        {
            Local4 = M049 (M128, 0x93)
            If ((Local4 == Zero))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local4 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local4, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
            Else
            {
                Local4 &= 0x1F
            }

            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 2\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
            Local2 += (Local4 << 0x0F)
            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 3\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
        }

        Local3 = M011 (Local2, 0x04, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 4\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        If (((Local3 & 0x02) != 0x02))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 5\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M013 (Local2, 0x40, Zero, 0x20)
        Local3 &= 0xFFFFFFFB
        If (((Local3 == Zero) || (Local3 == 0xFFFFFFFB)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 6\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }
        Else
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local3)
        }
    }

    Method (M440, 1, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Local0, Local0, Zero, Zero, Zero)
            Return (Local0)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 == One))
        {
            M014 (Local0, Zero, Local1, One, Zero)
        }

        Local2 = M013 (Local0, 0x04, Local1, One)
        M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X\n", Arg0, Local2, Local0, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M441, 2, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
            Return (Local0)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 != One))
        {
            M014 (Local0, Zero, Local1, One, One)
        }

        M014 (Local0, 0x08, Local1, One, Arg1)
        M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                (Local1 + 0x08) = M038 /* External reference */
                Local2
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Arg0)
        }
        ElseIf ((Local0 == 0x07))
        {
            Local2 = M4E3 (Arg0)
        }

        M460 ("  KER-ASL-CpmReadGpio  (0x%X) = 0x%X\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        M460 ("  KER-ASL-CpmWriteGpio (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Arg0, Arg1)
        }
        ElseIf ((Local0 == 0x07))
        {
            M4E4 (Arg0, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x12))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x13))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M477, 2, Serialized)
    {
        If ((Arg1 == Zero))
        {
            Return (Zero)
        }

        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            SMB8 |= 0x40
            If ((Local0 < 0x00FFFFFF))
            {
                If ((Local0 > 0x05))
                {
                    Local0 = (Local0 - 0x05)
                }
                Else
                {
                    Local0 = Zero
                }
            }

            Stall (0x05)
            Local1 = SMB8 /* \M477.SMB8 */
            If (((Local1 & 0x50) == 0x40))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Method (M478, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        SMB8 |= 0x80
    }

    Method (M479, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x03)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB0 = 0x1F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M479.SMB0 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB2 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB0 & One) != Zero))
        {
            Return (One)
        }

        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB1 = 0x3F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB1 /* \M479.SMB1 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB1 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB1 & One) != Zero))
        {
            Return (One)
        }

        Return (Zero)
    }

    Mutex (M408, 0x00)
    Method (M47A, 6, Serialized)
    {
        Local0 = Buffer (0x22){}
        CreateByteField (Local0, Zero, STAT)
        CreateByteField (Local0, One, LEN)
        CreateByteField (Local0, 0x02, DATB)
        CreateWordField (Local0, 0x02, DATW)
        CreateField (Local0, 0x10, 0x0100, DTBF)
        STAT = 0xFF
        LEN = Zero
        DTBF = Zero
        M000 (0x0DE5)
        M460 ("  KER-ASL-CpmSmbusExecutor (Port%d, isRead %d, Potcl %d, DevAddr 0x%X, Cmd 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        If (((Arg0 != Zero) && (Arg0 != One)))
        {
            STAT = 0x80
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x80\n", Zero)
            Return (Local0)
        }

        If (((Arg1 != Zero) && (Arg1 != One)))
        {
            STAT = 0x81
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x81\n", Zero)
            Return (Local0)
        }

        Name (VALP, Package (0x05)
        {
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x05
        })
        If ((Match (VALP, MEQ, Arg2, MTR, Zero, Zero) == Ones))
        {
            STAT = 0x82
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x82\n", Zero)
            Return (Local0)
        }

        If (((Arg1 == Zero) && (Arg2 == 0x05)))
        {
            Local7 = Arg5
            Local2 = DerefOf (Local7 [Zero])
            If (((Local2 < One) || (Local2 > 0x20)))
            {
                STAT = 0x83
                M460 ("  KER-ASL-CpmSmbusExecutor return 0x83, Length %d\n", Local2, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
        }

        Acquire (M408, 0xFFFF)
        Local4 = (M414 + (Arg0 << 0x05))
        If ((Local4 == Zero))
        {
            Release (M408)
            STAT = 0x84
            M460 ("  KER-ASL-CpmSmbusExecutor return 0x84, Local4 %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        OperationRegion (VARM, SystemIO, Local4, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M47A.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        If (M477 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            STAT = 0x85
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x85\n", Zero)
            Return (Local0)
        }

        If (M479 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            M478 (Local4)
            Release (M408)
            STAT = 0x86
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x86\n", Zero)
            Return (Local0)
        }

        Local7 = Arg5
        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg3 << One) | Arg1)
            SMB3 = Arg4
            SMB2 = (Arg2 << 0x02)
            Local1 = SMB2 /* \M47A.SMB2 */
            If ((Arg1 == Zero))
            {
                If (((Arg2 == One) || (Arg2 == 0x02)))
                {
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x03))
                {
                    SMB6 = DerefOf (Local7 [0x02])
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x05))
                {
                    Local2 = DerefOf (Local7 [Zero])
                    SMB5 = Local2
                    Local1 = One
                    While ((Local1 <= Local2))
                    {
                        SMB7 = DerefOf (Local7 [Local1])
                        Local1++
                    }
                }
            }
            ElseIf ((Arg2 == 0x05))
            {
                Local2 = DerefOf (Local7 [Zero])
                SMB5 = Local2
            }

            SMB2 = ((Arg2 << 0x02) | 0x40)
            If ((Arg2 == 0x05))
            {
                Local1 = 0x1B58
            }
            Else
            {
                Local1 = 0x03E8
            }

            Local2 = One
            While (((Local1 > Zero) && ((Local2 & 0x0E) == Zero)))
            {
                If (((Local2 & One) == Zero))
                {
                    Break
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M47A.SMB0 */
            }

            If (((Local1 == Zero) && ((Local2 & One) != Zero)))
            {
                SMB2 = 0x02
                If ((Arg0 == One))
                {
                    SMB2 = Local6
                }

                If (((Local5 & One) == Zero))
                {
                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                }

                M478 (Local4)
                Release (M408)
                STAT = 0x87
                M459 ("  KER-ASL-CpmSmbusExecutor return 0x87\n", Zero)
                Return (Local0)
            }

            If (((Local2 & 0x04) != Zero))
            {
                Local3 = Zero
            }
            ElseIf (((Local2 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3--
            }
            Else
            {
                Local3 = Zero
                STAT = Zero
                If ((Arg1 != Zero))
                {
                    If (((Arg2 == One) || (Arg2 == 0x02)))
                    {
                        DATB = SMB5 /* \M47A.SMB5 */
                        LEN = One
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 [0x03] = SMB6 /* \M47A.SMB6 */
                        Local0 [0x02] = SMB5 /* \M47A.SMB5 */
                        LEN = 0x02
                    }

                    If ((Arg2 == 0x05))
                    {
                        Local2 = SMB2 /* \M47A.SMB2 */
                        Local2 = SMB5 /* \M47A.SMB5 */
                        If ((Local2 > 0x20))
                        {
                            Local2 = 0x20
                        }

                        LEN = Local2
                        Local1 = 0x02
                        Local2 += 0x02
                        While ((Local1 < Local2))
                        {
                            Local0 [Local1] = 0xCC
                            Local0 [Local1] = SMB7 /* \M47A.SMB7 */
                            Local1++
                        }
                    }
                }
            }
        }

        Local1 = (SMB0 & 0x1D)
        STAT = Local1
        SMB0 = 0x1F
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        M478 (Local4)
        Release (M408)
        M460 ("  KER-ASL-CpmSmbusExecutor return St: 0x%X, Len %d, Data: 0x%X, 0x%X, 0x%X, 0x%X ...\n", STAT, LEN, DerefOf (Local0 [0x02]), DerefOf (Local0 [
            0x03]), DerefOf (Local0 [0x04]), DerefOf (Local0 [0x05]))
        M000 (0x0DE6)
        Return (Local0)
    }

    Method (M47B, 3, Serialized)
    {
        Local0 = M47A (Arg0, Arg1, Zero, Arg2, Zero, Zero)
        Return (DerefOf (Local0 [Zero]))
    }

    Method (M47C, 4, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg3
        Local1 = M47A (Arg0, Arg1, One, Arg2, Zero, Local0)
        Return (Local1)
    }

    Method (M47D, 5, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg4
        Local1 = M47A (Arg0, Arg1, 0x02, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47E, 5, Serialized)
    {
        Local0 = Buffer (0x03){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATL)
        CreateByteField (Local0, 0x02, DATH)
        LEN = 0x02
        DATL = (Arg4 & 0xFF)
        DATH = ((Arg4 >> 0x08) & 0xFF)
        Local1 = M47A (Arg0, Arg1, 0x03, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47F, 5, Serialized)
    {
        Local1 = M47A (Arg0, Arg1, 0x05, Arg2, Arg3, Arg4)
        Return (Local1)
    }

    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0x%X Success\n", Arg0, Arg1, Arg2, Local4, Zero, Zero)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) Success\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Return (Local4)
    }

    Method (M4F1, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) Start\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        Local5 = Zero
        If (((Arg0 >= Zero) && (Arg0 <= 0x03)))
        {
            Local0 = M4F0 /* \M4F0 */
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += (Arg0 * 0x26)
                If ((M049 (Local0, Zero) == Arg0))
                {
                    Local1 = M049 (Local0, 0x15)
                    Local2 = M049 (Local0, 0x16)
                    Local3 = M049 (Local0, 0x1E)
                    Local4 = M409 (Local1, Local2, Zero)
                    M04C (Local0, 0x1E, Local4)
                    Local4 ^= Local3
                    Local4 &= M049 (Local0, 0x1C)
                    Local4 |= M049 (Local0, 0x1D)
                    If ((M049 (Local0, 0x17) >= One))
                    {
                        Local3 = M049 (Local0, 0x25)
                        Local5 = M409 (Local1, Local2, One)
                        M04C (Local0, 0x25, Local5)
                        Local5 ^= Local3
                        Local5 &= M049 (Local0, 0x23)
                        Local5 |= M049 (Local0, 0x24)
                        Local5 <<= 0x08
                    }

                    Local5 |= Local4
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) = 0x%X End\n", Arg0, Local5, Zero, Zero, Zero, Zero)
        Return (Local5)
    }

    Mutex (M4E5, 0x00)
    Name (M4E7, 0x5A)
    Name (M4E8, 0x5A)
    Name (M4E9, 0x5A)
    Name (M4EA, 0x5A5A5A5A)
    Name (M4EB, 0x5A5A5A5A)
    Name (M4EC, Package (0x06)
    {
        0x05, 
        Package (0x05)
        {
            0x0F, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x13, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x10, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x07)
        {
            0x11, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                One, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                One, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x95, 
                0x96, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x97, 
                0x98, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }, 

            Package (0x06)
            {
                "I2C4", 
                0x0D, 
                0x0E, 
                Zero, 
                0xFED81E52, 
                0xFEDC6000
            }, 

            Package (0x06)
            {
                "I2C5", 
                0x13, 
                0x14, 
                Zero, 
                0xFED81E54, 
                0xFEDCB000
            }
        }, 

        Package (0x05)
        {
            0x12, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }
    })
    Method (M4E6, 1, Serialized)
    {
        Local0 = M085 /* \M085 */
        Local1 = DerefOf (M4EC [Zero])
        Local2 = One
        While ((Local2 <= Local1))
        {
            Local3 = DerefOf (M4EC [Local2])
            Local4 = DerefOf (Local3 [Zero])
            If ((Local4 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        Local2 = One
        Local1 = SizeOf (Local3)
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = "I2C0"
            }
            Case (One)
            {
                Local0 = "I2C1"
            }
            Case (0x02)
            {
                Local0 = "I2C2"
            }
            Case (0x03)
            {
                Local0 = "I2C3"
            }
            Case (0x04)
            {
                Local0 = "I2C4"
            }
            Case (0x05)
            {
                Local0 = "I2C5"
            }

        }

        While ((Local2 <= Local1))
        {
            Local4 = DerefOf (Local3 [Local2])
            Local5 = DerefOf (Local4 [Zero])
            If ((Local5 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        M4E7 = DerefOf (Local4 [One])
        M4E8 = DerefOf (Local4 [0x02])
        M4E9 = DerefOf (Local4 [0x03])
        M4EA = DerefOf (Local4 [0x04])
        M4EB = DerefOf (Local4 [0x05])
        Return (One)
    }

    Method (M4E0, 5, Serialized)
    {
        Local0 = M4E6 (Arg0)
        If ((Local0 == Zero))
        {
            Return (0xFF00)
        }

        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Local0 = M4EA /* \M4EA */
        Local1 = M4EB /* \M4EB */
        OperationRegion (VAR0, SystemMemory, Local0, 0x02)
        Field (VAR0, ByteAcc, NoLock, Preserve)
        {
            ADTD,   2, 
            ADPS,   1, 
            ADPD,   1, 
            ADSO,   1, 
            ADSC,   1, 
            ADSR,   1, 
            ADIS,   1, 
            ADDS,   3
        }

        OperationRegion (VAR1, SystemMemory, Local1, 0x0100)
        Field (VAR1, DWordAcc, NoLock, Preserve)
        {
            IC00,   32, 
            IC04,   32, 
            Offset (0x10), 
            IC10,   32, 
            IC14,   32, 
            IC18,   32, 
            IC1C,   32, 
            IC20,   32, 
            Offset (0x30), 
            IC30,   32, 
            IC34,   32, 
            IC38,   32, 
            IC3C,   32, 
            IC40,   32, 
            IC44,   32, 
            IC48,   32, 
            Offset (0x54), 
            IC54,   32, 
            Offset (0x6C), 
            IC6C,   32, 
            IC70,   32, 
            IC74,   32, 
            IC78,   32, 
            IC7C,   32, 
            IC80,   32, 
            Offset (0x9C), 
            IC9C,   32, 
            Offset (0xF4), 
            ICF4,   32
        }

        Name (BUFF, Buffer (0x03)
        {
             0x00, 0x00, 0x00                                 // ...
        })
        CreateByteField (BUFF, Zero, AOAC)
        CreateByteField (BUFF, One, ISCL)
        CreateByteField (BUFF, 0x02, ISDA)
        Acquire (M4E5, 0xFFFF)
        Local1 = 0x000186A0
        Local0 = Zero
        AOAC = ADTD /* \M4E0.ADTD */
        ISCL = M011 (0xFED80D00, M4E7, Zero, 0x08)
        ISDA = M011 (0xFED80D00, M4E8, Zero, 0x08)
        M012 (0xFED80D00, M4E7, Zero, 0x08, M4E9)
        M012 (0xFED80D00, M4E8, Zero, 0x08, M4E9)
        Local2 = AOAC /* \M4E0.AOAC */
        If ((Local2 == 0x03))
        {
            ADTD = Zero
            ADPD = One
            Local3 = ADDS /* \M4E0.ADDS */
            While ((Local3 != 0x07))
            {
                Local1--
                Stall (0x0A)
                Local3 = ADDS /* \M4E0.ADDS */
                If ((Local1 == Zero))
                {
                    Local0 = 0xFF01
                    Break
                }
            }
        }

        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF02
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF03
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC00 = 0x63
            IC04 = Arg1
            IC14 = 0x0285
            IC18 = 0x0357
            IC7C = 0x00400040
            IC38 = Zero
            IC34 = Zero
            IC30 = Zero
            Local2 = IC40 /* \M4E0.IC40 */
            Local2 = IC54 /* \M4E0.IC54 */
        }

        If ((Local0 == Zero))
        {
            IC6C = One
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero == (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for I2cEnable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF04
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            Local3 = Arg3
            Local4 = Arg2
            Local5 = Zero
            Local6 = Zero
            Local7 = 0x02
            While (((Local3 + Local4) > Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for TxRx: (0x%X, 0x%X)\n", Local3, Local4, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF06
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                If (((Local2 & 0x08) != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                Local2 = IC74 /* \M4E0.IC74 */
                If ((Local2 != Zero))
                {
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                If ((Local3 > One))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 != Zero)))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 == Zero)))
                {
                    IC10 = ((ToInteger (DerefOf (Arg4 [Local5])) & 0xFF
                        ) | 0x0200)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == Zero) && (Local4 > One)))
                {
                    IC10 = 0x0100
                    Local6 = One
                    Local4--
                }
                ElseIf (((Local3 == Zero) && (Local4 == One)))
                {
                    IC10 = 0x0300
                    Local6 = One
                    Local4--
                }

                Local1--
                Stall (0x0A)
                Local2 = IC34 /* \M4E0.IC34 */
                If ((Zero != (Local2 & 0x40)))
                {
                    Local7 = IC54 /* \M4E0.IC54 */
                    Local2 = IC80 /* \M4E0.IC80 */
                    M460 ("  I2cTX Abrt Source: (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF05
                    Break
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC70 /* \M4E0.IC70 */
                    While (((Local2 & 0x08) != 0x08))
                    {
                        Local2 = IC70 /* \M4E0.IC70 */
                        If ((Local1 == Zero))
                        {
                            M460 ("  I2cTimeout for Rx : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                            Local0 = 0xFF07
                            Break
                        }

                        Local1--
                        Stall (0x0A)
                    }
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    RTFF [Local7] = Local2
                    Local1--
                    Stall (0x14)
                    Local6 = Zero
                }
            }
        }

        Release (M4E5)
        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE2 : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF08
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If (((Local0 > 0xFF04) && (Local0 < 0xFF08)))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF09
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        Local3 = AOAC /* \M4E0.AOAC */
        If ((Local3 == 0x03))
        {
            ADPD = Zero
            Local2 = ADDS /* \M4E0.ADDS */
            While ((Local2 != Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for AOAC Off : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF10
                    Break
                }

                Local1--
                Stall (0x0A)
                Local2 = ADDS /* \M4E0.ADDS */
            }

            ADTD = 0x03
        }

        M012 (0xFED80D00, M4E7, Zero, 0x08, ISCL)
        M012 (0xFED80D00, M4E8, Zero, 0x08, ISDA)
        CreateWordField (RTFF, Zero, STAT)
        STAT = Local0
        Return (RTFF) /* \M4E0.RTFF */
    }

    Method (M4E1, 3, Serialized)
    {
        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Name (WRFF, Buffer (One)
        {
             0x00                                             // .
        })
        CreateByteField (WRFF, Zero, WDAT)
        WDAT = Arg2
        RTFF = M4E0 (Arg0, Arg1, One, One, WRFF)
        CreateWordField (RTFF, Zero, STAT)
        CreateByteField (RTFF, 0x02, RDAT)
        Local0 = STAT /* \M4E1.STAT */
        Local1 = RDAT /* \M4E1.RDAT */
        M460 ("  Read I2C Byte (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
        If ((Local0 == Zero))
        {
            Return ((RDAT & 0xFF))
        }

        Return (Zero)
    }

    Method (M4E2, 4, Serialized)
    {
        Name (WRFF, Buffer (0x02)
        {
             0x00, 0x00                                       // ..
        })
        CreateByteField (WRFF, Zero, WDA1)
        CreateByteField (WRFF, One, WDA2)
        WDA1 = Arg2
        WDA2 = (Arg3 & 0xFF)
        Local0 = M4E0 (Arg0, Arg1, Zero, 0x02, WRFF)
        CreateWordField (Local0, Zero, STAT)
        Local1 = STAT /* \M4E2.STAT */
        M460 ("  Write I2C Byte(0x%X)\n", Local1, Zero, Zero, Zero, Zero, Zero)
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            M460 ("  KER-ASL-\\_SB.GPIO._INI Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((M4F0 != Zero))
            {
                Local0 = M4F1 (Zero)
                Local0 = M4F1 (One)
                Local0 = M4F1 (0x02)
                Local0 = M4F1 (0x03)
            }

            M460 ("  KER-ASL-\\_SB.GPIO._INI End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }
    }

    Scope (\_GPE)
    {
        Method (SIE0, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE0 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE0 ()
            }

            Local0 = M4F1 (Zero)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP00\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP00 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP01\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP01 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP02\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP02 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP03\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP03 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP04\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP04 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP05\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP05 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP06\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP06 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP07\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP07 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP10))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP10 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP11))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP11 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP12))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP12\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP12 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP13))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP13\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP13 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP14))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP14\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP14 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP15))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP15\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP15 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP16))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP16\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP16 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP17))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP17\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP17 ()
                }
            }

            If (CondRefOf (\_GPE.AIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE0 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE0 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE1, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE1 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE1 ()
            }

            Local0 = M4F1 (One)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP20))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP20\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP20 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP21))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP21\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP21 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP22))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP22\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP22 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP23))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP23\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP23 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP24))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP24\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP24 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP25))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP25\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP25 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP26))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP26\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP26 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP27))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP27\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP27 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP30))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP30\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP30 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP31))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP31\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP31 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP32))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP32\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP32 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP33))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP33\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP33 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP34))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP34\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP34 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP35))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP35\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP35 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP36))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP36\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP36 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP37))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP37\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP37 ()
                }
            }

            If (CondRefOf (\_GPE.AIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE1 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE1 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE2, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE2 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE2 ()
            }

            Local0 = M4F1 (0x02)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP40))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP40\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP40 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP41))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP41\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP41 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP42))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP42\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP42 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP43))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP43\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP43 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP44))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP44\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP44 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP45))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP45\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP45 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP46))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP46\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP46 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP47))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP47\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP47 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP50))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP50\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP50 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP51))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP51\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP51 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP52))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP52\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP52 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP53))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP53\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP53 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP54))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP54\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP54 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP55))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP55\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP55 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP56))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP56\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP56 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP57))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP57\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP57 ()
                }
            }

            If (CondRefOf (\_GPE.AIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE2 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE2 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE3, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE3 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE3 ()
            }

            Local0 = M4F1 (0x03)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP60))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP60\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP60 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP61))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP61\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP61 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP62))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP62\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP62 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP63))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP63\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP63 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP64))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP64\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP64 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP65))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP65\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP65 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP66))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP66\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP66 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP67))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP67\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP67 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP70))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP70\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP70 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP71))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP71\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP71 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP72))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP72\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP72 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP73))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP73\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP73 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP74))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP74\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP74 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP75))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP75\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP75 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP76))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP76\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP76 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP77))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP77\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP77 ()
                }
            }

            If (CondRefOf (\_GPE.AIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE3 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE3 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (M4D2, Buffer (0x08){})
        Method (_L1B, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Local3 = Buffer (0x08){}
            CreateWordField (Local3, Zero, M254)
            CreateByteField (Local3, 0x02, M255)
            CreateDWordField (Local3, 0x03, M256)
            M256 = Zero
            M254 = 0x07
            M255 = 0x30
            If (CondRefOf (\_SB.ALIB))
            {
                M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                Local3 = \_SB.ALIB (0x0C)
                Local4
                M4D2 = Local4
                CreateDWordField (M4D2, Zero, M4D0)
                CreateDWordField (M4D2, 0x04, M4D1)
                ToInteger (M4D0, Local0)
                ToInteger (M4D1, Local1)
                M460 ("  KER-ASL-ALIB Return Data (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
                If ((Local0 == Zero))
                {
                    If (CondRefOf (\_SB.APAD))
                    {
                        \_SB.APAD.M446 [One] = Local1
                        M460 ("  KER-ASL-Notify \\_SB.APAD 0x80\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                }
                ElseIf ((Local0 == One))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x84\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Local0 == 0x02))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x85\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (NFPC))
                    {
                        NFPC ()
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0xF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (0x0F)
                    }
                    Else
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }
                }
                Else
                {
                    M460 ("  KER-ASL-1-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M460 ("  KER-ASL-\\_SB.APAD._INI\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = M04A (M128, 0x91)
                If ((((Local0 & 0xC0) == 0xC0) && ((Local0 & 
                    0xFF00) != 0xFF00)))
                {
                    Local3 = Buffer (0x08){}
                    CreateWordField (Local3, Zero, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                        \_SB.ALIB (0x0C)
                        Local3
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                ToInteger (DerefOf (M446 [Zero]), Local0)
                ToInteger (DerefOf (M446 [One]), Local1)
                M460 ("  KER-ASL-\\_SB.APAD._PUR Return Package (2) (0x%X, 0x%X) to OSPM\n", Local0, Local1, Zero, Zero, Zero, Zero)
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "MEMTOOL0", 0x00000002)
{
    /*
     * iASL Warning: There were 4 external control methods found during
     * disassembly, but only 0 were resolved (4 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (M049, IntObj)
    External (M04E, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M232, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M460, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M610, MethodObj)    // Warning: Unknown method, guessing 6 arguments

    Method (MGRT, 1, NotSerialized)
    {
        CreateDWordField (Arg0, Zero, MEMI)
        CreateDWordField (Arg0, 0x04, MEMD)
        M460 ("  FEA-ASL-Memory Margin Tool Cmd:0x%X Value:0x%X\n", MEMI, MEMD, Zero, Zero, Zero, Zero)
        If ((M610 (Zero, M610 (0x10, Local2, Local3 = MEMI /* \MGRT.MEMI */, 
            Local4 = MEMD /* \MGRT.MEMD */, M04E (M610 (0x11, Local3, M04E (M610 (0x15, Local4, M232 (Local2, 
            Zero, Zero)))))) = M049 /* External reference */) != )){}
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CDFAAIG2", 0x00000001)
{
    /*
     * iASL Warning: There were 22 external control methods found during
     * disassembly, but only 0 were resolved (22 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, IntObj)
    External (_SB_.LID_._LID, IntObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M012, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M019, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M020, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M021, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M023, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M024, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M025, UnknownObj)
    External (M026, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M043, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M049, IntObj)
    External (M04A, IntObj)
    External (M04B, IntObj)
    External (M084, UnknownObj)
    External (M090, IntObj)
    External (M091, IntObj)
    External (M093, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M094, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M095, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M097, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M098, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M099, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M101, IntObj)
    External (M102, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M103, UnknownObj)
    External (M104, IntObj)
    External (M111, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M112, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M113, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M131, IntObj)
    External (M133, MethodObj)    // Warning: Unk

SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "GPIO    ", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.UBTC, UnknownObj)
    External (M31D, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    Scope (\_SB.GPIO)
    {
        Method (_AEI, 0, NotSerialized)  // _AEI: ACPI Event Interrupts
        {
            Name (BUFF, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x01F4,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x000A
                    }
            })
            Return (BUFF) /* \_SB_.GPIO._AEI.BUFF */
        }

        Method (_EVT, 1, Serialized)  // _EVT: Event
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x0A)
                {
                    If (CondRefOf (M31D))
                    {
                        M31D ()
                        Notify (\_SB.UBTC, 0x80) // Status Change
                    }
                }

            }
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C008.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C009.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x0000128E, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Method (NFPC, 0, NotSerialized)
    {
        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
    }
}



TPM2
----
[000h 0000 004h]                   Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004 004h]                Table Length : 0000004C
[008h 0008 001h]                    Revision : 04
[009h 0009 001h]                    Checksum : 6F
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 002h]              Platform Class : 0000
[026h 0038 002h]                    Reserved : 0000
[028h 0040 008h]             Control Address : 00000000FD210510
[030h 0048 004h]                Start Method : 02 [ACPI Start Method]

[034h 0052 00Ch]           Method Parameters : 00 00 00 00 00 00 00 00 00 00 00 00
[040h 0064 004h]          Minimum Log Length : 00010000
[044h 0068 008h]                 Log Address : 0000000077653000

Raw Table Data: Length 76 (0x4C)

    0000: 54 50 4D 32 4C 00 00 00 04 6F 41 4C 41 53 4B 41  // TPM2L....oALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 00 00 00 00 00 00 00 00 10 05 21 FD 00 00 00 00  // ..........!.....
    0030: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 01 00 00 30 65 77 00 00 00 00              // .....0ew....


VFCT
----
[000h 0000 004h]                   Signature : "VFCT"    
[004h 0004 004h]                Table Length : 00015CA0
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : DD
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD"
[020h 0032 004h]       Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 89248 (0x15CA0)

    0000: 56 46 43 54 A0 5C 01 00 01 DD 41 4C 41 53 4B 41  // VFCT.\....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 00  // A M I ......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 DF 73 00 00 00 00  // ...........s....
    0060: 01 00 00 00 00 AE 00 00 55 AA 57 E9 BE 27 00 00  // ........U.W..'..
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 74 03 00 00 00 00 49 42 4D 89 14 A3 00 00 00 00  // t.....IBM.......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 46 03 00 00 00 00 00 00 31 30 2F 32 32 2F 32 31  // F.......10/22/21
    00C0: 20 30 35 3A 32 35 00 00 30 00 00 00 E9 B1 28 00  //  05:25..0.....(.
    00D0: E9 BB 28 00 00 00 10 02 09 00 00 00 01 02 40 00  // ..(...........@.
    00E0: 00 C5 DF 73 00 00 00 00 6E 00 69 00 BA 00 00 00  // ...s....n.i.....
    00F0: 5F 00 A4 06 E4 0C E4 0C 7C 99 05 00 00 00 00 00  // _.......|.......
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0160: 00 00 00 00 16 00 34 03 0F FC 40 01 00 00 00 00  // ......4...@.....
    0170: 08 00 08 00 08 80 41 CC F3 28 42 CD A3 10 80 E8  // ......A..(B.....
    0180: 0D 7E E3 78 CE FF FF 00 00 00 00 00 00 20 7E C5  // .~.x......... ~.
    0190: FF 01 00 00 00 80 05 10 00 90 F5 3D 87 B2 6A 3C  // ...........=..j<
    01A0: 47 3C C7 00 50 00 00 33 00 CE 73 53 05 80 0F 08  // G<..P..3..sS....
    01B0: 21 04 FF 3C 00 C0 22 02 02 A2 88 1C 65 D5 78 0E  // !..<..".....e.x.
    01C0: 00 E0 81 0A 00 1E 90 08 F0 3E A7 68 24 DA 21 00  // .........>.h$.!.
    01D0: 21 00 21 00 01 00 C0 02 50 02 91 01 02 00 18 80  // !.!.....P.......
    01E0: 01 40 06 06 1E 11 07 52 80 18 0C 0E 12 00 00 00  // .@.....R........
    01F0: 0E F0 02 00 00 00 08 00 80 01 06 00 08 40 18 10  // .............@..
    0200: 70 01 00 00 20 00 00 00 04 00 00 00 1C 04 00 00  // p... ...........
    0210: C8 00 00 00 30 00 00 00 00 00 F8 08 40 00 00 00  // ....0.......@...
    0220: 00 00 00 04 00 00 00 00 1C 32 00 88 76 14 91 03  // .........2..v...
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E4  // ................
    0240: 27 09 40 10 18 00 64 00 00 00 00 C0 98 07 00 00  // '.@...d.........
    0250: 40 FA 01 A0 00 24 00 00 00 80 10 90 01 18 00 00  // @....$..........
    0260: 08 00 80 81 47 01 00 F0 A0 1F 11 30 00 00 00 00  // ....G......0....
    0270: 02 7C CF 41 11 B9 00 04 31 31 33 2D 44 35 31 32  // .|.A....113-D512
    0280: 32 32 30 30 2D 53 30 35 00 4E 41 56 49 32 32 00  // 2200-S05.NAVI22.
    0290: 50 43 49 5F 45 58 50 52 45 53 53 00 47 44 44 52  // PCI_EXPRESS.GDDR
    02A0: 36 00 0D 0A 4E 41 56 49 32 32 20 58 54 4C 48 20  // 6...NAVI22 XTLH 
    02B0: 41 49 42 20 44 35 31 32 32 31 20 47 44 44 52 36  // AIB D51221 GDDR6
    02C0: 20 31 32 47 42 20 20 20 20 20 20 20 20 20 20 20  //  12GB           
    02D0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    02E0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    02F0: 0D 0A 00 0D 0A 20 0D 0A 00 28 43 29 20 31 39 38  // ..... ...(C) 198
    0300: 38 2D 32 30 32 30 2C 20 41 64 76 61 6E 63 65 64  // 8-2020, Advanced
    0310: 20 4D 69 63 72 6F 20 44 65 76 69 63 65 73 2C 20  //  Micro Devices, 
    0320: 49 6E 63 2E 00 41 54 4F 4D 42 49 4F 53 42 4B 2D  // Inc..ATOMBIOSBK-
    0330: 41 4D 44 20 56 45 52 30 32 30 2E 30 30 32 2E 30  // AMD VER020.002.0
    0340: 30 30 2E 30 31 39 2E 30 30 30 30 30 30 00 34 34  // 00.019.000000.44
    0350: 35 48 30 36 30 37 2E 53 30 35 00 32 33 37 30 31  // 5H0607.S05.23701
    0360: 34 32 20 00 35 39 31 32 34 34 20 20 00 20 20 20  // 42 .591244  .   
    0370: 20 20 20 20 20 00 53 41 50 50 48 49 52 45 5F 4E  //      .SAPPHIRE_N
    0380: 41 56 49 32 32 5F 45 34 34 35 5F 58 54 4C 48 5F  // AVI22_E445_XTLH_
    0390: 47 44 44 52 36 5F 31 32 47 42 5F 53 41 4D 53 55  // GDDR6_12GB_SAMSU
    03A0: 4E 47 5C 63 6F 6E 66 69 67 2E 68 00 00 00 2C 00  // NG\config.h...,.
    03B0: 02 03 41 54 4F 4D 00 C0 C3 28 E6 02 99 03 3A 02  // ..ATOM...(....:.
    03C0: F6 28 00 00 00 00 A2 1D 45 E4 74 03 60 A6 CC 03  // .(......E.t.`...
    03D0: 00 00 10 0B 00 00 00 00 03 00 00 00 50 43 49 52  // ............PCIR
    03E0: 02 10 DF 73 00 00 18 00 00 00 00 03 57 00 02 14  // ...s........W...
    03F0: 00 00 00 00 41 4D 44 20 41 54 4F 4D 42 49 4F 53  // ....AMD ATOMBIOS
    0400: 00 7E 11 A8 67 00 00 00 00 00 00 00 00 00 00 00  // .~..g...........
    0410: 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00  // ................
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 4A 00 02 01 00 00 00 00 E0 08 9C 1C  // ....J...........
    0440: 74 08 64 1D 18 04 74 04 08 0A FC 0A 00 00 F0 0C  // t.d...t.........
    0450: AC 06 98 1D FC 0C 20 1E 00 00 0C 1E 54 0D 00 00  // ...... .....T...
    0460: 74 0D 88 0D EC 07 94 1C 94 0D 00 00 00 00 18 07  // t...............
    0470: E4 0D 00 00 00 00 00 00 E8 1B 00 00 00 00 00 00  // ................
    0480: 5C 00 02 01 00 00 00 00 00 00 00 00 00 00 00 00  // \...............
    0490: 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00  // ................
    04A0: C8 00 00 00 00 00 34 21 00 00 B8 0B 00 00 00 00  // ......4!........
    04B0: 7D 00 00 01 00 00 00 00 00 FF FF 00 00 00 00 00  // }...............
    04C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 00 00 00 00 00 00 00 00 38 02 05 04  // ............8...
    04E0: 10 00 38 00 7C 00 90 01 D8 01 48 00 30 75 00 00  // ..8.|.....H.0u..
    04F0: 0C 00 3F 05 3E 00 00 00 40 9C 00 00 0C 00 3F 05  // ..?.>...@.....?.
    0500: 3E 00 00 00 FF FF FF 00 0C 00 3F 05 77 21 00 00  // >.........?.w!..
    0510: 00 00 00 00 FF FF FF 00 0C 00 3F 04 3E 00 00 00  // ..........?.>...
    0520: 00 00 00 00 0A 8B 02 00 0C 00 3F 04 3E 00 00 00  // ..........?.>...
    0530: 15 16 05 00 0C 00 3F 04 3E 00 00 00 1C C8 06 00  // ......?.>.......
    0540: 0C 00 3F 04 3E 00 00 00 23 7A 08 00 0C 00 3F 04  // ..?.>...#z....?.
    0550: 3E 00 00 00 00 00 00 00 48 3F 00 00 3F 00 44 00  // >.......H?..?.D.
    0560: 00 16 00 00 00 04 01 1F 00 00 00 04 02 2C 00 00  // .............,..
    0570: 00 04 03 3E 00 00 00 04 08 1B 50 00 00 04 09 25  // ...>......P....%
    0580: 60 00 00 04 0A 35 90 00 00 04 10 21 B0 00 00 04  // `....5.....!....
    0590: 11 2F F0 00 00 04 18 2A 40 01 00 04 78 69 00 00  // ./.....*@...xi..
    05A0: 3F 00 44 00 00 16 00 00 00 04 01 1F 00 00 00 04  // ?.D.............
    05B0: 02 2C 00 00 00 04 03 3E 00 00 00 04 08 1B 50 00  // .,.....>......P.
    05C0: 00 04 09 25 60 00 00 04 0A 35 90 00 00 04 10 21  // ...%`....5.....!
    05D0: B0 00 00 04 11 2F F0 00 00 04 18 2A 40 01 00 04  // ...../.....*@...
    05E0: F0 D2 00 00 3F 00 44 00 00 1D 00 00 00 04 01 26  // ....?.D........&
    05F0: 00 00 00 04 02 30 00 00 00 04 03 3E 00 00 00 04  // .....0.....>....
    0600: 08 22 40 00 00 04 09 2C 60 00 00 04 0A 37 70 00  // ."@....,`....7p.
    0610: 00 04 10 27 90 00 00 04 11 32 C0 00 00 04 18 2E  // ...'.....2......
    0620: 00 01 00 04 68 3C 01 00 3F 00 44 00 00 1D 00 00  // ....h<..?.D.....
    0630: 00 04 01 26 00 00 00 04 02 30 00 00 00 04 03 3E  // ...&.....0.....>
    0640: 00 00 00 04 08 22 40 00 00 04 09 2C 60 00 00 04  // ....."@....,`...
    0650: 0A 37 70 00 00 04 10 27 90 00 00 04 11 32 C0 00  // .7p....'.....2..
    0660: 00 04 18 2E 00 01 00 04 00 00 00 00 00 01 02 03  // ................
    0670: 02 03 00 01 00 07 05 00 00 01 02 03 02 03 00 01  // ................
    0680: 00 07 05 00 00 01 02 03 02 03 00 01 00 07 05 00  // ................
    0690: 00 01 02 03 02 03 00 01 00 07 05 00 00 01 02 03  // ................
    06A0: 02 03 00 01 00 07 05 00 00 01 02 03 02 03 00 01  // ................
    06B0: 00 07 05 00 08 30 00 00 9B 00 00 00 07 30 00 00  // .....0.......0..
    06C0: 46 25 00 00 08 31 00 00 9B 00 00 00 07 31 00 00  // F%...1.......1..
    06D0: 46 25 00 00 08 32 00 00 9B 00 00 00 07 32 00 00  // F%...2.......2..
    06E0: 46 25 00 00 08 33 00 00 9B 00 00 00 07 33 00 00  // F%...3.......3..
    06F0: 46 25 00 00 56 00 00 00 05 00 00 00 46 00 00 00  // F%..V.......F...
    0700: 30 00 00 00 50 00 00 00 30 00 00 00 FF FF FF FF  // 0...P...0.......
    0710: 00 00 00 00 6C 00 02 01 B5 5D 00 00 00 00 01 00  // ....l....]......
    0720: B5 5D 00 00 08 08 02 00 B5 5D 00 00 10 10 03 00  // .].......]......
    0730: B5 5D 00 00 18 14 04 00 B5 5D 00 00 1A 18 05 00  // .].......]......
    0740: B5 5D 00 00 1C 1C 06 00 91 5D 00 00 08 08 90 00  // .].......]......
    0750: 95 5D 00 00 08 08 91 00 99 5D 00 00 08 08 92 00  // .].......]......
    0760: 9D 5D 00 00 08 08 93 00 A1 5D 00 00 08 08 94 00  // .].......]......
    0770: A5 5D 00 00 08 08 95 00 A9 5D 00 00 08 08 97 00  // .].......]......
    0780: D4 00 04 04 00 00 00 00 24 F4 00 00 10 27 88 13  // ........$....'..
    0790: 00 00 00 00 00 00 00 00 5E 01 4E 0C 01 01 00 00  // ........^.N.....
    07A0: 55 00 00 00 10 27 DF 73 00 03 06 01 00 06 06 00  // U....'.s........
    07B0: C8 91 05 00 80 EA 82 2B 00 00 00 00 00 00 00 00  // .......+........
    07C0: 00 00 00 00 54 00 01 00 00 00 00 00 00 00 00 00  // ....T...........
    07D0: 00 00 00 00 10 11 3D 10 4D 1C 02 00 00 45 00 00  // ......=.M....E..
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 AA 0A  // ................
    07F0: 22 22 22 00 AA FA 03 00 00 00 00 00 00 00 00 00  // """.............
    0800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0850: 00 00 00 00 88 00 01 04 88 06 04 00 13 31 48 00  // .............1H.
    0860: 20 22 00 00 6C 00 00 00 08 00 00 00 13 32 51 00  //  "..l........2Q.
    0870: 20 21 00 00 73 00 00 00 80 00 00 00 13 33 5A 00  //  !..s........3Z.
    0880: 21 21 00 00 7A 00 00 00 00 02 00 00 0C 31 63 00  // !!..z........1c.
    0890: 1E 21 00 00 81 00 00 00 00 04 00 00 01 04 90 00  // .!..............
    08A0: 02 04 01 00 FF 01 04 91 00 02 04 02 00 FF 01 04  // ................
    08B0: 95 00 02 04 06 00 FF 01 04 93 00 02 04 04 00 FF  // ................
    08C0: 14 06 0F 0E 00 00 FF 14 06 0F 0E 00 00 FF 14 06  // ................
    08D0: 0F 0E 00 00 FF 14 06 0F 0E 00 00 FF 6C 00 03 04  // ............l...
    08E0: 13 00 02 14 50 C3 00 00 A0 86 01 00 01 44 14 00  // ....P........D..
    08F0: 00 00 00 00 4C 00 00 00 84 03 20 03 46 05 9D 03  // ....L..... .F...
    0900: 02 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00  // ................
    0910: 00 00 00 00 00 00 00 00 00 00 00 00 DC 05 00 00  // ................
    0920: 84 03 84 03 46 05 84 03 06 09 00 00 00 00 00 00  // ....F...........
    0930: 00 0C 00 00 61 60 01 00 00 00 00 80 80 8D 5B 00  // ....a`........[.
    0940: 00 00 00 00 00 00 00 00 28 01 04 09 01 01 E0 00  // ........(.......
    0950: 00 01 01 00 01 01 E0 00 01 02 01 00 00 01 00 00  // ................
    0960: 02 03 01 00 00 01 00 00 03 04 01 00 00 01 00 00  // ................
    0970: 04 05 00 00 00 01 00 00 05 06 00 00 00 00 00 00  // ................
    0980: 06 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 00 00 00 00 00 00 00 00 00 00 FF FF 00 00  // ................
    09D0: 00 02 01 03 03 0C C0 30 30 02 00 00 7F 00 00 00  // .......00.......
    09E0: 30 00 00 00 2C 00 00 00 00 80 01 00 FF 00 05 00  // 0...,...........
    09F0: 05 00 FF 00 FF FF FF 00 FF FF 00 00 00 00 1F 00  // ................
    0A00: 00 00 1F 00 01 10 21 00 00 00 1F 00 FF 0F 00 00  // ......!.........
    0A10: 10 00 00 00 BA 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A20: E2 04 E2 04 E2 04 E2 04 A0 0F A0 0F A0 0F A0 0F  // ................
    0A30: 01 00 00 00 10 10 10 10 10 10 10 10 10 10 10 10  // ................
    0A40: 10 10 10 10 10 27 00 00 00 00 00 00 00 00 00 00  // .....'..........
    0A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: F4 00 03 05 01 0B 00 00 00 00 4E 0C 00 00 4E 0C  // ..........N...N.
    0A80: 10 27 00 00 C8 91 05 00 10 7A 07 00 04 00 00 00  // .'.......z......
    0A90: 00 53 07 00 30 75 00 00 0C A3 00 00 50 81 00 00  // .S..0u......P...
    0AA0: 54 CC 00 00 7B F1 00 00 0C A3 00 00 00 00 00 00  // T...{...........
    0AB0: 20 30 05 00 00 00 00 00 A8 F1 01 00 D4 30 00 00  //  0...........0..
    0AC0: 12 00 00 00 00 00 00 00 28 1D 01 00 A0 09 01 00  // ........(.......
    0AD0: 00 00 00 00 33 33 81 01 7D 1A 09 96 30 14 C9 02  // ....33..}...0...
    0AE0: 03 00 03 00 48 08 19 00 28 1D 01 00 88 13 00 00  // ....H...(.......
    0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 00 00 00 00 01 80 00 00 7D 1F 1E 96  // ............}...
    0B10: 05 80 00 00 FF FF 0F 00 71 00 FF 2F 4D 00 00 A5  // ........q../M...
    0B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B60: 00 00 00 00 F4 01 02 06 00 00 00 00 00 00 00 00  // ................
    0B70: 00 00 00 00 EC 01 00 00 24 50 53 50 CB F2 2F D2  // ........$PSP../.
    0B80: 1B 00 00 00 00 00 00 00 00 00 00 00 40 04 00 00  // ............@...
    0B90: 00 00 03 00 00 00 00 00 01 00 00 00 00 30 00 00  // .............0..
    0BA0: 00 00 05 00 00 00 00 00 03 00 00 00 00 30 00 00  // .............0..
    0BB0: 00 30 05 00 00 00 00 00 04 00 00 00 00 AE 00 00  // .0..............
    0BC0: 00 00 00 00 00 00 00 00 05 00 00 00 00 01 00 00  // ................
    0BD0: 00 0A 03 00 00 00 00 00 06 00 00 00 00 B0 00 00  // ................
    0BE0: 00 80 09 00 00 00 00 00 07 00 00 00 40 04 00 00  // ............@...
    0BF0: C0 0B 03 00 00 00 00 00 09 00 00 00 08 00 00 00  // ................
    0C00: D0 0C 00 00 00 00 00 00 11 00 00 00 00 82 00 00  // ................
    0C10: 00 20 06 00 00 00 00 00 12 00 00 00 00 50 00 00  // . ...........P..
    0C20: 00 30 07 00 00 00 00 00 14 00 00 00 00 30 00 00  // .0...........0..
    0C30: 00 10 03 00 00 00 00 00 21 00 00 00 C0 00 00 00  // ........!.......
    0C40: 00 0B 03 00 00 00 00 00 23 00 00 00 00 50 00 00  // ........#....P..
    0C50: 00 70 0A 00 00 00 00 00 2D 00 00 00 00 A0 00 00  // .p......-.......
    0C60: 00 40 03 00 00 00 00 00 2E 00 00 00 00 C0 00 00  // .@..............
    0C70: 00 60 05 00 00 00 00 00 33 00 00 00 00 60 00 00  // .`......3....`..
    0C80: 00 E0 03 00 00 00 00 00 35 00 00 00 10 00 00 00  // ........5.......
    0C90: D8 0C 00 00 00 00 00 00 36 00 00 00 00 40 00 00  // ........6....@..
    0CA0: 00 80 07 00 00 00 00 00 37 00 00 00 00 10 00 00  // ........7.......
    0CB0: 00 C0 07 00 00 00 00 00 38 00 00 00 40 04 00 00  // ........8...@...
    0CC0: 00 05 03 00 00 00 00 00 3D 00 00 00 00 20 00 00  // ........=.... ..
    0CD0: 00 50 09 00 00 00 00 00 40 00 00 00 00 30 00 00  // .P......@....0..
    0CE0: 00 30 0A 00 00 00 00 00 42 00 00 00 00 10 00 00  // .0......B.......
    0CF0: 00 70 09 00 00 00 00 00 49 00 00 00 00 C0 00 00  // .p......I.......
    0D00: 00 40 04 00 00 00 00 00 4A 00 00 00 00 8E 00 00  // .@......J.......
    0D10: 00 A2 06 00 00 00 00 00 4C 00 00 00 00 10 00 00  // ........L.......
    0D20: 00 60 0A 00 00 00 00 00 71 00 00 00 00 80 01 00  // .`......q.......
    0D30: 00 D0 07 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    0D40: 03 01 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0D50: 58 54 4C 48 00 00 00 00 0C 00 02 01 00 00 00 00  // XTLH............
    0D60: 00 00 00 00 58 00 02 06 03 0A 02 00 0A 02 04 02  // ....X...........
    0D70: 64 C0 00 00 65 C0 00 00 66 C0 00 00 67 C0 00 00  // d...e...f...g...
    0D80: E8 C0 00 00 A0 21 00 00 03 6B 01 00 10 27 00 00  // .....!...k...'..
    0D90: 0A 04 02 00 00 00 00 00 9F 30 00 00 00 00 00 00  // .........0......
    0DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DB0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 02 02  // ............ ...
    0DC0: 00 00 00 00 00 00 00 00 08 00 00 00 04 00 00 00  // ................
    0DD0: 00 00 00 00 00 00 00 00 00 00 00 00 14 00 02 02  // ................
    0DE0: 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00  // ................
    0DF0: 0C 00 02 02 08 00 00 00 00 00 00 00 50 00 03 03  // ............P...
    0E00: 00 00 00 00 00 20 06 00 00 82 00 00 00 00 00 00  // ..... ..........
    0E10: 64 00 E4 0C 07 08 70 00 10 27 00 00 A0 86 01 00  // d.....p..'......
    0E20: 10 08 01 00 84 B2 00 00 E4 25 00 00 00 00 00 00  // .........%......
    0E30: 2B F0 0A 00 00 00 00 00 00 00 00 00 00 00 00 00  // +...............
    0E40: 00 00 00 00 00 00 00 00 00 00 00 00 04 0E 02 05  // ................
    0E50: B5 00 A9 01 AD 07 81 08 A5 0C 00 00 00 00 00 00  // ................
    0E60: 03 07 08 06 00 30 00 00 FF 0F 00 00 00 00 2D 00  // .....0........-.
    0E70: 00 70 0C 04 72 00 00 00 00 00 00 00 00 00 00 08  // .p..r...........
    0E80: 00 00 00 04 00 00 04 00 00 00 0A 08 00 00 40 00  // ..............@.
    0E90: 00 00 30 00 00 FF 0F 00 00 00 00 37 00 00 70 0C  // ..0........7..p.
    0EA0: 04 72 00 00 00 00 00 00 00 00 00 81 08 00 00 00  // .r..............
    0EB0: 04 00 00 04 00 C0 00 0A 08 00 00 40 00 4B 34 5A  // ...........@.K4Z
    0EC0: 41 46 33 32 35 42 4D 00 00 30 00 00 FF 0F 00 00  // AF325BM..0......
    0ED0: 00 00 39 00 00 70 0C 04 72 01 00 00 00 00 00 00  // ..9..p..r.......
    0EE0: 00 00 1F 08 00 00 00 04 00 00 0D 00 C0 00 0A 08  // ................
    0EF0: 00 00 40 00 4D 54 36 31 4B 35 31 32 4D 33 32 43  // ..@.MT61K512M32C
    0F00: 00 13 00 00 00 50 50 01 00 52 50 01 00 5E 50 01  // .....PP..RP..^P.
    0F10: 00 60 50 01 00 72 50 01 00 00 FE 00 01 04 FE 00  // .`P..rP.........
    0F20: 01 08 FE 00 01 10 FE 00 01 44 FE 00 01 48 FE 00  // .........D...H..
    0F30: 01 4C FE 00 01 50 FE 00 01 54 FE 00 01 58 FE 00  // .L...P...T...X..
    0F40: 01 78 FE 00 01 7C FE 00 01 80 FE 00 01 88 FE 00  // .x...|..........
    0F50: 01 FF FF FF 00 05 00 00 00 00 00 08 08 00 00 13  // ................
    0F60: 00 00 00 00 00 08 00 17 00 06 00 07 00 00 00 03  // ................
    0F70: 04 00 00 03 05 9C 00 B4 02 00 00 00 00 38 38 2A  // .............88*
    0F80: 43 07 07 10 6B BB 00 00 1B 2A FA 07 00 00 00 00  // C...k....*......
    0F90: 00 02 E1 38 84 E1 49 8C 40 00 00 01 80 00 00 01  // ...8..I.@.......
    0FA0: 01 FF FF FF 01 0D 00 00 00 00 00 06 06 08 00 13  // ................
    0FB0: 00 FC 09 14 00 08 01 17 00 06 00 85 00 00 00 81  // ................
    0FC0: 04 00 00 81 05 9C 0C B4 02 02 03 00 00 38 38 2E  // .............88.
    0FD0: 4A 08 08 10 6C AA 00 00 1B 2A CC 08 00 4A 49 00  // J...l....*...JI.
    0FE0: 20 C2 D0 2C 84 E1 49 8C 60 00 00 04 70 00 00 04  //  ..,..I.`...p...
    0FF0: 01 00 00 00 00 A8 61 00 01 09 05 09 0D DB 01 1E  // ......a.........
    1000: 0F 03 05 03 05 02 02 05 03 05 08 02 03 01 0A 0A  // ................
    1010: 0A 0A 02 04 0A 0A 1E 03 1E 48 E8 01 00 03 0C 0A  // .........H......
    1020: 02 02 04 0A 10 15 01 02 09 04 04 01 00 00 00 00  // ................
    1030: 00 00 00 00 00 50 C3 00 01 0A 05 0F 17 B6 03 3C  // .....P.........<
    1040: 1E 04 08 05 08 02 02 08 04 06 08 02 03 01 0A 0A  // ................
    1050: 0A 0A 02 04 0A 0A 3C 05 3C 90 D0 03 00 05 0C 0A  // ......<.<.......
    1060: 02 02 04 0A 11 1B 01 02 09 04 07 01 00 00 00 00  // ................
    1070: 00 00 00 00 00 CC 55 01 01 0F 05 1B 29 7F 06 69  // ......U.....)..i
    1080: 35 07 0E 08 0E 04 04 0E 06 08 10 02 03 02 0B 0A  // 5...............
    1090: 0A 0A 02 04 0A 0A 69 09 69 FC AC 06 00 09 0C 0A  // ......i.i.......
    10A0: 02 02 04 0A 17 28 01 02 0A 04 0C 01 00 00 00 00  // .....(..........
    10B0: 00 00 00 00 00 A0 86 01 01 10 05 1E 2D 6C 07 78  // ............-l.x
    10C0: 3C 08 0F 09 0F 04 04 10 06 08 10 02 03 02 0C 0A  // <...............
    10D0: 0A 0A 02 04 0A 0A 78 0A 78 20 A1 07 00 0A 0C 0A  // ......x.x ......
    10E0: 02 02 04 0A 18 2B 01 02 0A 04 0D 01 00 00 00 00  // .....+..........
    10F0: 00 00 00 00 00 48 E8 01 01 14 06 26 39 47 09 96  // .....H.....&9G..
    1100: 4B 0A 13 0C 13 05 05 14 07 09 14 02 03 03 0D 0D  // K...............
    1110: 0A 0A 02 04 0D 0D 96 0D 96 68 89 09 00 0D 0C 0A  // .........h......
    1120: 02 02 05 0D 1D 33 01 02 0A 04 10 01 00 00 00 00  // .....3..........
    1130: 00 00 00 00 00 40 13 02 01 15 07 2D 44 18 0A B4  // .....@.....-D...
    1140: 5A 0C 17 0E 17 06 06 18 08 0A 18 02 03 03 0E 0F  // Z...............
    1150: 0A 0A 02 04 0F 0F B4 0F B4 B0 71 0B 00 0F 0C 0A  // ..........q.....
    1160: 02 02 06 0F 1F 3C 01 02 0B 04 13 01 00 00 00 00  // .....<..........
    1170: 00 00 00 00 00 78 5D 02 01 16 07 2D 44 81 0B B4  // .....x]....-D...
    1180: 5A 0C 17 0E 17 06 06 18 08 0A 18 02 03 03 0E 0F  // Z...............
    1190: 0A 0A 02 04 0F 0F B4 0F B4 B0 71 0B 00 0F 0C 0A  // ..........q.....
    11A0: 02 02 06 0F 1F 3C 01 02 0B 04 13 01 00 00 00 00  // .....<..........
    11B0: 00 00 00 00 00 20 BF 02 01 18 07 34 4E 5C 0D D2  // ..... .....4N\..
    11C0: 69 0E 1A 10 1A 08 08 1C 09 0B 20 02 03 03 0F 12  // i......... .....
    11D0: 0A 0A 02 04 12 12 D2 12 D2 F8 59 0D 00 12 0C 0A  // ..........Y.....
    11E0: 02 02 07 12 21 43 01 02 0B 04 16 01 00 00 00 00  // ....!C..........
    11F0: 00 00 00 00 00 B0 24 03 01 1A 08 3C 5A 4A 0F F0  // ......$....<ZJ..
    1200: 78 10 1E 12 1E 08 08 1F 0A 0C 20 02 03 03 10 14  // x......... .....
    1210: 0A 0A 02 04 14 14 F0 14 F0 40 42 0F 00 14 0C 0A  // .........@B.....
    1220: 02 02 08 14 23 4C 01 02 0C 04 19 01 00 00 00 00  // ....#L..........
    1230: 00 00 00 00 00 58 86 03 01 1C 08 44 66 25 11 0E  // .....X.....Df%..
    1240: 87 12 24 15 22 09 09 22 0C 0E 24 02 03 03 11 17  // ..$.".."..$.....
    1250: 0A 0A 02 04 17 17 0E 17 0E 88 2A 11 00 17 0C 0A  // ..........*.....
    1260: 02 02 09 17 26 54 01 02 0C 04 1C 01 01 01 01 00  // ....&T..........
    1270: 00 00 00 00 00 20 A0 03 01 1D 08 48 6C A2 11 1D  // ..... .....Hl...
    1280: 8E 13 24 16 24 09 09 24 0D 0F 24 02 04 03 11 18  // ..$.$..$..$.....
    1290: 0B 0B 02 04 18 18 1D 18 1D 9D 1A 12 00 18 0D 0B  // ................
    12A0: 02 02 09 18 28 59 02 02 0D 04 1E 01 01 01 01 00  // ....(Y..........
    12B0: 00 00 00 00 00 58 B8 03 01 1E 08 4A 70 18 12 25  // .....X.....Jp..%
    12C0: 93 14 26 17 26 0A 0A 26 0D 10 28 02 04 03 11 1A  // ..&.&..&..(.....
    12D0: 0B 0B 02 04 1A 1A 25 1A 25 F5 94 12 00 1A 0D 0B  // ......%.%.......
    12E0: 02 02 0A 1A 29 5B 02 02 0D 04 1F 01 01 01 01 00  // ....)[..........
    12F0: 00 00 00 00 00 D4 30 00 02 09 05 04 06 EE 00 14  // ......0.........
    1300: 08 04 03 01 02 02 02 04 03 04 08 02 03 02 0A 14  // ................
    1310: 0A 0A 02 03 0A 12 14 02 0F 20 A1 07 00 0A 0A 04  // ......... ......
    1320: 01 01 01 0A 0B 0D 01 02 03 04 03 0F 00 00 00 00  // ................
    1330: 00 00 00 00 00 20 4E 00 02 09 05 05 09 7C 01 20  // ..... N......|. 
    1340: 0A 04 04 01 04 02 02 04 03 04 08 02 03 02 0A 14  // ................
    1350: 0A 0A 02 03 0A 12 20 02 18 20 A1 07 00 0A 0A 04  // ...... .. ......
    1360: 01 01 01 0A 0B 0F 01 02 03 04 03 0F 00 00 00 00  // ................
    1370: 00 00 00 00 00 A8 61 00 02 0A 05 07 0B DB 01 28  // ......a........(
    1380: 0E 04 04 01 04 02 02 04 03 04 08 02 03 02 0A 14  // ................
    1390: 04 04 02 03 0A 12 28 03 1E 20 A1 07 00 0A 0A 04  // ......(.. ......
    13A0: 01 01 01 0A 0C 11 01 02 02 04 04 0F 00 00 00 00  // ................
    13B0: 00 00 00 00 00 50 C3 00 02 0B 05 0D 15 B6 03 50  // .....P.........P
    13C0: 1A 05 08 02 08 02 02 08 04 05 08 02 03 02 0A 14  // ................
    13D0: 04 04 02 03 0A 12 50 05 3C 20 A1 07 00 0A 0A 04  // ......P.< ......
    13E0: 01 01 01 0A 0F 17 01 02 02 04 06 0F 00 00 00 00  // ................
    13F0: 00 00 00 00 00 F8 24 01 02 0D 05 13 1F 91 05 78  // ......$........x
    1400: 26 08 0C 06 0C 02 03 0C 05 06 08 02 03 02 0A 14  // &...............
    1410: 04 04 02 03 0A 12 78 08 5A 20 A1 07 00 0A 0A 04  // ......x.Z ......
    1420: 01 01 01 0A 11 1F 01 02 02 04 09 0F 00 00 00 00  // ................
    1430: 00 00 00 00 00 CC 55 01 02 0F 05 16 24 7F 06 8C  // ......U.....$...
    1440: 2C 09 0E 08 0E 02 04 0E 06 07 08 02 03 02 0A 14  // ,...............
    1450: 04 04 02 03 0A 12 8C 09 69 20 A1 07 00 0A 0A 04  // ........i ......
    1460: 01 01 01 0A 13 23 01 02 02 04 0A 0F 00 00 00 00  // .....#..........
    1470: 00 00 00 00 00 A0 86 01 02 10 05 19 28 6C 07 A0  // ............(l..
    1480: 32 0A 10 0A 0F 02 04 10 06 07 08 02 03 02 0B 14  // 2...............
    1490: 04 04 02 03 0A 12 A0 0A 78 20 A1 07 00 0A 0A 04  // ........x ......
    14A0: 01 01 01 0A 14 26 01 02 02 04 0B 0F 00 00 00 00  // .....&..........
    14B0: 00 00 00 00 00 48 E8 01 02 12 05 20 33 47 09 C8  // .....H..... 3G..
    14C0: 40 0D 14 0E 13 03 05 14 07 08 0C 02 03 02 0C 14  // @...............
    14D0: 04 04 02 03 0A 12 C8 0D 96 20 A1 07 00 0A 0A 04  // ......... ......
    14E0: 01 01 01 0A 16 2E 01 02 02 04 0E 0F 00 00 00 00  // ................
    14F0: 00 00 00 00 00 F0 49 02 02 15 05 26 3D 22 0B F0  // ......I....&="..
    1500: 4C 0F 18 12 17 03 06 18 08 09 0C 02 03 03 0C 14  // L...............
    1510: 04 04 02 03 0A 12 F0 0F B4 20 A1 07 00 0A 0A 04  // ......... ......
    1520: 01 01 01 0A 1A 36 01 02 02 04 10 0F 00 00 00 00  // .....6..........
    1530: 00 00 00 00 00 20 BF 02 02 17 05 2C 47 5C 0D 18  // ..... .....,G\..
    1540: 58 12 1C 16 1B 04 07 1C 09 0A 10 02 03 03 0D 14  // X...............
    1550: 04 04 02 03 0A 12 18 12 D2 20 A1 07 00 0A 0A 04  // ......... ......
    1560: 01 01 01 0A 1C 3E 01 02 02 04 13 0F 01 01 00 00  // .....>..........
    1570: 00 00 00 00 00 6C DC 02 02 18 07 2F 4C EB 0D 2C  // .....l...../L..,
    1580: 5E 13 1E 16 1D 04 08 1E 0A 0B 10 02 03 03 0E 14  // ^...............
    1590: 04 04 02 03 0A 12 2C 13 E1 20 A1 07 00 0A 0A 04  // ......,.. ......
    15A0: 01 01 01 0A 1D 44 01 02 02 04 14 0F 01 01 00 00  // .....D..........
    15B0: 00 00 00 00 00 40 0D 03 02 18 07 32 50 D8 0E 40  // .....@.....2P..@
    15C0: 64 14 20 18 1E 04 08 20 0A 0B 10 02 03 03 0E 14  // d. .... ........
    15D0: 04 04 02 03 0A 12 40 14 F0 20 A1 07 00 0A 0A 04  // ......@.. ......
    15E0: 01 01 01 0A 1D 47 01 02 02 04 15 0F 01 01 00 00  // .....G..........
    15F0: 00 00 00 00 00 00 00 00 00 03 00 00 00 55 50 01  // .............UP.
    1600: 00 A0 FE 00 01 A4 FE 00 01 FF FF FF 00 00 28 00  // ..............(.
    1610: 00 00 00 00 00 00 01 00 01 FF FF FF 01 00 28 00  // ..............(.
    1620: 00 00 00 00 00 00 01 00 01 FF FF FF 02 00 28 00  // ..............(.
    1630: 00 00 00 00 00 00 01 00 01 FF FF FF 03 00 28 00  // ..............(.
    1640: 00 00 00 00 00 00 01 00 01 FF FF FF 04 00 28 00  // ..............(.
    1650: 00 00 00 00 00 00 01 00 01 FF FF FF 05 00 28 00  // ..............(.
    1660: 00 00 00 00 00 00 01 00 01 FF FF FF 06 00 28 00  // ..............(.
    1670: 00 00 00 00 00 00 02 00 02 FF FF FF 07 00 28 00  // ..............(.
    1680: 00 00 00 00 00 00 02 00 02 FF FF FF 08 00 28 00  // ..............(.
    1690: 00 00 00 00 00 00 02 00 02 FF FF FF 09 00 28 00  // ..............(.
    16A0: 00 00 00 00 00 00 02 00 02 FF FF FF 0A 00 28 00  // ..............(.
    16B0: 00 00 00 00 00 00 02 00 02 FF FF FF 0B 00 28 00  // ..............(.
    16C0: 00 00 00 00 00 00 02 00 02 00 00 00 00 83 00 00  // ................
    16D0: 00 4F 50 01 00 51 50 01 00 53 50 01 00 54 50 01  // .OP..QP..SP..TP.
    16E0: 00 56 50 01 00 57 50 01 00 58 50 01 00 73 50 01  // .VP..WP..XP..sP.
    16F0: 00 76 50 01 00 5D 50 01 00 64 50 01 00 6B 50 01  // .vP..]P..dP..kP.
    1700: 00 78 50 01 00 0C FE 00 01 14 FE 00 01 18 FE 00  // .xP.............
    1710: 01 1C FE 00 01 20 FE 00 01 24 FE 00 01 28 FE 00  // ..... ...$...(..
    1720: 01 2C FE 00 01 30 FE 00 01 34 FE 00 01 38 FE 00  // .,...0...4...8..
    1730: 01 3C FE 00 01 40 FE 00 01 5C FE 00 01 60 FE 00  // .<...@...\...`..
    1740: 01 64 FE 00 01 68 FE 00 01 6C FE 00 01 70 FE 00  // .d...h...l...p..
    1750: 01 74 FE 00 01 84 FE 00 01 8C FE 00 01 90 FE 00  // .t..............
    1760: 01 94 FE 00 01 98 FE 00 01 9C FE 00 01 A8 FE 00  // ................
    1770: 01 AC FE 00 01 B0 FE 00 01 B4 FE 00 01 B8 FE 00  // ................
    1780: 01 BC FE 00 01 C0 FE 00 01 C4 FE 00 01 C8 FE 00  // ................
    1790: 01 CC FE 00 01 D0 FE 00 01 D4 FE 00 01 D8 FE 00  // ................
    17A0: 01 DC FE 00 01 E0 FE 00 01 E4 FE 00 01 E8 FE 00  // ................
    17B0: 01 EC FE 00 01 F0 FE 00 01 F4 FE 00 01 F8 FE 00  // ................
    17C0: 01 FC FE 00 01 00 FF 00 01 04 FF 00 01 08 FF 00  // ................
    17D0: 01 0C FF 00 01 10 FF 00 01 14 FF 00 01 18 FF 00  // ................
    17E0: 01 1C FF 00 01 20 FF 00 01 24 FF 00 01 28 FF 00  // ..... ...$...(..
    17F0: 01 2C FF 00 01 30 FF 00 01 34 FF 00 01 38 FF 00  // .,...0...4...8..
    1800: 01 3C FF 00 01 40 FF 00 01 44 FF 00 01 48 FF 00  // .<...@...D...H..
    1810: 01 4C FF 00 01 50 FF 00 01 54 FF 00 01 58 FF 00  // .L...P...T...X..
    1820: 01 5C FF 00 01 60 FF 00 01 64 FF 00 01 68 FF 00  // .\...`...d...h..
    1830: 01 6C FF 00 01 70 FF 00 01 74 FF 00 01 78 FF 00  // .l...p...t...x..
    1840: 01 7C FF 00 01 80 FF 00 01 84 FF 00 01 88 FF 00  // .|..............
    1850: 01 8C FF 00 01 90 FF 00 01 94 FF 00 01 98 FF 00  // ................
    1860: 01 9C FF 00 01 A0 FF 00 01 A4 FF 00 01 A8 FF 00  // ................
    1870: 01 AC FF 00 01 B0 FF 00 01 B4 FF 00 01 B8 FF 00  // ................
    1880: 01 BC FF 00 01 C0 FF 00 01 C4 FF 00 01 C8 FF 00  // ................
    1890: 01 CC FF 00 01 D0 FF 00 01 D4 FF 00 01 D8 FF 00  // ................
    18A0: 01 DC FF 00 01 E0 FF 00 01 E4 FF 00 01 E8 FF 00  // ................
    18B0: 01 EC FF 00 01 F0 FF 00 01 F4 FF 00 01 F8 FF 00  // ................
    18C0: 01 FC FF 00 01 02 1D 00 03 03 1D 00 03 8C 1C 00  // ................
    18D0: 03 A1 04 00 05 18 04 00 05 55 02 00 05 FF FF FF  // .........U......
    18E0: 00 1A 27 20 00 00 00 2A 00 00 04 00 00 F4 29 E5  // ..' ...*......).
    18F0: 0F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 13  // ................
    1900: 00 40 00 18 00 00 00 17 00 00 00 17 00 00 00 17  // .@..............
    1910: 00 04 20 00 F0 00 00 00 00 46 04 48 44 00 00 08  // .. ......F.HD...
    1920: 00 00 00 08 00 17 10 80 00 13 30 80 00 2E CA 4C  // ..........0....L
    1930: 50 30 83 01 00 1C 0F DE 00 20 40 04 70 00 00 F0  // P0....... @.p...
    1940: 01 01 10 06 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1960: 00 00 00 00 00 C0 04 00 00 00 00 00 00 03 00 00  // ................
    1970: 00 00 00 00 00 00 16 20 20 1E 1E 1E 1E 00 00 00  // .......  .......
    1980: 00 00 00 00 00 00 00 00 00 08 00 C0 02 00 08 00  // ................
    1990: 00 4A E5 E9 04 00 00 00 00 18 00 05 50 00 00 00  // .J..........P...
    19A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A50: 00 00 00 00 00 00 00 00 00 1C 03 8E 03 AA 02 8E  // ................
    1A60: 03 E3 00 AA 02 E3 00 71 00 E3 00 71 00 55 01 71  // .......q...q.U.q
    1A70: 00 1C 03 55 01 1C 03 8E 03 CF 00 30 FF FF 0C 00  // ...U.......0....
    1A80: F3 00 80 01 90 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AC0: 00 00 08 80 01 05 00 00 00 0E 10 00 40 3F FF 3F  // ............@?.?
    1AD0: 0F 00 00 00 00 2A 00 00 00 2A 00 00 00 10 00 00  // .....*...*......
    1AE0: 00 10 00 00 00 00 00 00 00 16 00 00 00 00 00 00  // ................
    1AF0: 00 5C 01 00 00 00 00 00 00 00 00 00 00 01 00 00  // .\..............
    1B00: 00 67 54 13 02 20 31 45 76 88 00 00 00 38 10 72  // .gT.. 1Ev....8.r
    1B10: 56 94 0A 00 00 00 00 00 00 01 00 00 00 01 23 57  // V.............#W
    1B20: 46 64 57 32 10 88 00 00 00 19 30 54 67 82 0A 00  // FdW2......0Tg...
    1B30: 00 00 00 00 00 01 00 00 00 67 54 13 02 20 31 45  // .........gT.. 1E
    1B40: 76 88 00 00 00 19 60 74 53 82 0A 00 00 00 00 00  // v.....`tS.......
    1B50: 00 01 00 00 00 01 23 57 64 74 56 23 01 88 00 00  // ......#WdtV#....
    1B60: 00 10 39 72 56 84 0A 00 00 00 00 00 00 04 00 00  // ..9rV...........
    1B70: 00 67 54 13 02 10 32 45 76 88 00 00 00 19 60 74  // .gT...2Ev.....`t
    1B80: 53 82 0A 00 00 00 00 00 00 04 00 00 00 10 32 65  // S.............2e
    1B90: 47 46 75 32 10 88 00 00 00 10 39 72 56 84 0A 00  // GFu2......9rV...
    1BA0: 00 00 00 00 00 04 00 00 00 67 54 13 02 20 31 45  // .........gT.. 1E
    1BB0: 76 88 00 00 00 38 10 72 56 94 0A 00 00 00 00 00  // v....8.rV.......
    1BC0: 00 04 00 00 00 01 23 75 46 64 75 32 10 88 00 00  // ......#uFdu2....
    1BD0: 00 19 30 54 67 82 0A 00 00 00 00 00 00 04 00 00  // ..0Tg...........
    1BE0: 00 67 54 13 02 20 31 45 76 88 00 00 00 10 39 72  // .gT.. 1Ev.....9r
    1BF0: 56 84 0A 00 00 00 06 00 00 04 00 00 00 10 32 57  // V.............2W
    1C00: 46 64 57 12 03 88 00 00 00 69 32 14 57 08 0A 00  // FdW......i2.W...
    1C10: 00 00 00 00 00 01 00 00 00 67 54 13 02 20 31 45  // .........gT.. 1E
    1C20: 76 88 00 00 00 10 39 72 56 84 0A 00 00 00 06 00  // v.....9rV.......
    1C30: 00 01 00 00 00 30 21 75 46 64 75 23 01 88 00 00  // .....0!uFdu#....
    1C40: 00 69 32 14 57 08 0A 00 00 00 00 00 00 00 00 00  // .i2.W...........
    1C50: AC 00 04 02 05 03 2E 00 1A 06 60 00 00 00 00 00  // ..........`.....
    1C60: 3B 00 54 00 74 00 BB 00 7A 00 3C 00 49 00 FE 00  // ;.T.t...z.<.I...
    1C70: 36 00 E8 00 6A 00 48 00 70 00 03 00 94 00 4F 00  // 6...j.H.p.....O.
    1C80: FF 00 05 07 0C 00 16 00 00 00 00 00 00 00 01 03  // ................
    1C90: 2E 00 1A 06 60 00 00 00 00 00 3B 00 54 00 74 00  // ....`.....;.T.t.
    1CA0: BB 00 7A 00 3C 00 49 00 FE 00 36 00 E8 00 6A 00  // ..z.<.I...6...j.
    1CB0: 48 00 70 00 03 00 94 00 4F 00 FF 00 01 07 0C 00  // H.p.....O.......
    1CC0: 0C 00 00 02 00 00 00 00 04 03 0E 00 10 06 44 00  // ..............D.
    1CD0: 00 00 00 00 FF 00 04 07 0C 00 0E 00 00 03 00 00  // ................
    1CE0: 00 00 02 03 0E 00 10 06 44 00 00 00 00 00 FF 00  // ........D.......
    1CF0: 02 07 0C 00 0E 00 00 01 00 00 00 00 08 00 01 01  // ................
    1D00: 00 00 00 00 C8 00 02 01 D6 09 80 02 A0 00 E0 01  // ................
    1D10: 2D 00 10 00 60 00 0A 00 02 00 00 00 00 00 08 08  // -...`...........
    1D20: 06 00 12 3C A0 0F 20 03 00 01 58 02 1C 00 28 00  // ...<.. ...X...(.
    1D30: 80 00 01 00 04 00 00 00 00 00 00 00 00 00 6A 3C  // ..............j<
    1D40: 64 19 00 04 40 01 00 03 26 00 18 00 88 00 03 00  // d...@...&.......
    1D50: 06 00 00 00 00 00 00 00 06 00 55 3C 30 2A 00 05  // ..........U<0*..
    1D60: 08 02 C0 03 28 00 60 00 70 00 01 00 03 00 00 00  // ....(.`.p.......
    1D70: 00 00 00 00 00 00 E9 3C 30 2A 00 05 98 01 00 04  // .......<0*......
    1D80: 2A 00 30 00 70 00 01 00 03 00 00 00 00 00 00 00  // *.0.p...........
    1D90: 00 00 EA 3C 8F 2F 78 05 D0 01 1A 04 27 00 58 00  // ...<./x.....'.X.
    1DA0: 90 00 03 00 04 00 00 00 00 00 00 00 02 00 EB 3C  // ...............<
    1DB0: 48 3F 40 06 30 02 B0 04 32 00 40 00 C0 00 01 00  // H?@.0...2.@.....
    1DC0: 03 00 00 00 00 00 00 00 00 00 EC 3C 34 00 02 01  // ...........<4...
    1DD0: 00 00 00 00 00 2A 00 2A 00 00 2A 2A 2A 00 00 2A  // .....*.*..***..*
    1DE0: 00 2A 2A 15 00 2A 2A 2A 15 15 15 15 15 3F 15 3F  // .**..***.....?.?
    1DF0: 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F 15 3F 3F 3F  // ..???..?.???.???
    1E00: 74 00 01 01 10 01 06 12 11 01 16 12 13 01 06 6A  // t..............j
    1E10: 14 01 16 6A 16 01 06 55 17 01 16 55 19 01 06 EA  // ...j...U...U....
    1E20: 1A 01 16 EA 65 01 16 E9 66 01 0A E9 21 01 0A 12  // ....e...f...!...
    1E30: 22 01 0A 6A 23 01 0A 55 24 01 0A EA 45 01 16 EB  // "..j#..U$...E...
    1E40: 46 01 0A EB 75 01 16 EC 76 01 0A EC D2 01 16 70  // F...u...v......p
    1E50: D4 01 0A 70 D8 01 16 71 D9 01 0A 71 E2 01 16 72  // ...p...q...q...r
    1E60: E4 01 0A 72 E8 01 16 73 E9 01 0A 73 F5 01 16 74  // ...r...s...s...t
    1E70: F6 01 0A 74 14 00 02 01 02 00 08 00 80 00 00 02  // ...t............
    1E80: 00 04 00 08 40 00 FF FF A6 09 10 00 02 22 03 CF  // ....@........"..
    1E90: 09 00 00 44 42 00 00 81 00 08 00 00 00 1C 00 00  // ...DB...........
    1EA0: 00 00 00 00 76 00 00 00 00 00 00 00 00 00 00 00  // ....v...........
    1EB0: 00 00 01 00 00 00 01 00 00 00 0D 00 00 00 A5 0A  // ................
    1EC0: 00 00 B0 04 00 00 E8 03 00 00 94 07 00 00 C9 04  // ................
    1ED0: 00 00 78 05 00 00 C9 04 00 00 78 05 00 00 B0 04  // ..x.......x.....
    1EE0: 00 00 C1 04 00 00 C1 04 00 00 2A 03 00 00 C1 04  // ..........*.....
    1EF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F4 01  // ................
    1F00: 00 00 E0 01 00 00 61 00 00 00 F4 01 00 00 3D 01  // ......a.......=.
    1F10: 00 00 6B 01 00 00 3D 01 00 00 6B 01 00 00 A2 01  // ..k...=...k.....
    1F20: 00 00 E7 01 00 00 E7 01 00 00 2C 01 00 00 E7 01  // ..........,.....
    1F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 81 00  // ................
    1F40: 00 00 10 00 00 00 1E 00 00 00 01 01 01 01 01 01  // ................
    1F50: 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00  // ................
    1F60: 00 00 00 00 00 00 00 00 00 00 F0 0A 00 00 F0 0A  // ................
    1F70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 0A  // ................
    1F80: 00 00 33 04 00 00 33 04 00 00 0F 00 00 00 E4 0C  // ..3...3.........
    1F90: 00 00 E4 0C 00 00 64 00 00 00 6E 00 00 00 01 00  // ......d...n.....
    1FA0: 00 00 01 00 00 00 01 00 00 00 01 00 00 00 01 00  // ................
    1FB0: 00 00 64 00 00 00 64 00 00 00 64 00 00 00 64 00  // ..d...d...d...d.
    1FC0: 00 00 64 00 00 00 64 00 00 00 64 00 00 00 64 00  // ..d...d...d...d.
    1FD0: 00 00 64 00 00 00 64 00 00 00 00 00 00 00 00 00  // ..d...d.........
    1FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2060: 00 00 00 00 00 00 00 00 00 00 F4 01 00 00 F4 01  // ................
    2070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F4 01  // ................
    2080: 00 00 A2 02 00 00 A2 02 00 00 06 00 00 00 FA 00  // ................
    2090: 00 00 E8 03 00 00 19 00 00 00 32 00 00 00 00 00  // ..........2.....
    20A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    20B0: 00 00 19 00 00 00 0A 00 00 00 19 00 00 00 0A 00  // ................
    20C0: 00 00 19 00 00 00 0A 00 00 00 19 00 00 00 0A 00  // ................
    20D0: 00 00 19 00 00 00 0A 00 00 00 00 00 00 00 00 00  // ................
    20E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    20F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2160: 00 00 00 00 00 00 00 00 00 00 06 00 00 00 06 00  // ................
    2170: 06 00 5F 00 5F 00 5F 00 5F 00 78 05 A4 06 D6 06  // .._._._._.x.....
    2180: A4 06 F6 09 B8 0B CA 08 F6 09 00 00 00 00 00 00  // ................
    2190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21A0: 00 00 00 00 00 00 00 00 00 00 06 00 00 00 FF FD  // ................
    21B0: 7F A3 63 37 00 00 BA 00 00 00 00 00 00 00 00 00  // ..c7............
    21C0: 00 00 00 00 00 00 BA 00 00 00 00 00 00 00 00 00  // ................
    21D0: 00 00 00 00 00 00 A5 00 23 00 00 00 00 00 6E 00  // ........#.....n.
    21E0: 6E 00 69 00 73 00 73 00 73 00 73 00 00 00 00 00  // n.i.s.s.s.s.....
    21F0: 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00  // ................
    2200: 00 00 00 00 00 00 00 00 00 00 B8 0B D8 0E 30 11  // ..............0.
    2210: F8 11 C0 12 00 00 FE 38 04 00 FB 2F 00 00 64 00  // .......8.../..d.
    2220: 64 00 2F 0D 80 0C 4E 0C 96 00 00 00 00 00 DE 0D  // d./...N.........
    2230: E4 0C C0 12 F8 11 B3 00 00 01 00 00 00 00 00 00  // ................
    2240: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    2250: 80 3F 00 00 00 00 E7 1D 67 3E F7 06 FF BE D0 D5  // .?......g>......
    2260: 76 3F 4F 04 00 00 00 00 02 00 19 04 86 3F 68 91  // v?O..........?h.
    2270: 6D 3E F7 E4 C1 3E 8F C2 75 BE B6 84 3C 3F 3D 01  // m>...>..u...<?=.
    2280: 00 00 00 01 04 00 98 6E 82 3F 87 16 99 3E 07 CE  // .......n.?...>..
    2290: 29 3F EC C0 29 BF 32 E6 5E 3F F3 01 00 00 00 00  // )?..).2.^?......
    22A0: 02 00 00 00 80 3F 00 00 00 00 C5 FE B2 3E EE 5A  // .....?.......>.Z
    22B0: E2 BE A2 45 66 3F 78 02 00 00 00 00 02 00 37 89  // ...Ef?x.......7.
    22C0: B1 3F 0A D7 A3 BD 56 9F EB 3E 6E 34 E0 BE C8 98  // .?....V..>n4....
    22D0: 4B 3F DB 01 00 00 00 00 02 00 0E 2D 82 3F A8 C6  // K?.........-.?..
    22E0: 4B 3E 36 CD 9B 3E 75 02 9A BE DD B5 44 3F EF 01  // K>6..>u.....D?..
    22F0: 00 00 00 00 02 00 37 89 B1 3F 0A D7 A3 BD 56 9F  // ......7..?....V.
    2300: EB 3E 6E 34 E0 BE C8 98 4B 3F DB 01 00 00 00 00  // .>n4....K?......
    2310: 02 00 0E 2D 82 3F A8 C6 4B 3E 36 CD 9B 3E 75 02  // ...-.?..K>6..>u.
    2320: 9A BE DD B5 44 3F EF 01 00 00 00 00 02 00 DB F9  // ....D?..........
    2330: 8E 3F 81 95 43 3E 8E 75 B1 3E 52 27 A0 BE 09 8A  // .?..C>.u.>R'....
    2340: 3F 3F C4 01 00 00 00 00 02 00 1B 2F 3D 3F 08 AC  // ??........./=?..
    2350: DC 3E D6 C5 2D 3E 10 E9 37 BD BF 0E 1C 3F 85 00  // .>..->..7....?..
    2360: 00 00 00 00 02 00 1B 2F 3D 3F 08 AC DC 3E D6 C5  // ......./=?...>..
    2370: 2D 3E 10 E9 37 BD BF 0E 1C 3F 85 00 00 00 00 00  // ->..7....?......
    2380: 02 00 B3 EA 13 3F 6F 9E 2A 3F 00 00 00 00 30 4C  // .....?o.*?....0L
    2390: 26 3E AD FA 0C 3F 00 00 00 00 00 00 02 00 1B 2F  // &>...?........./
    23A0: 3D 3F 08 AC DC 3E D6 C5 2D 3E 10 E9 37 BD BF 0E  // =?...>..->..7...
    23B0: 1C 3F 85 00 00 00 F4 01 A5 0A 00 00 00 00 00 00  // .?..............
    23C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23D0: 00 00 00 00 00 00 6B 01 78 05 00 00 00 00 00 00  // ......k.x.......
    23E0: 00 00 00 00 00 00 3D 01 C9 04 00 00 00 00 00 00  // ......=.........
    23F0: 00 00 00 00 00 00 E0 01 B0 04 00 00 00 00 00 00  // ................
    2400: 00 00 00 00 00 00 61 00 C9 01 A4 02 E8 03 A2 01  // ......a.........
    2410: B0 04 00 00 00 00 00 00 00 00 00 00 00 00 E7 01  // ................
    2420: C1 04 00 00 00 00 00 00 00 00 00 00 00 00 E7 01  // ................
    2430: C1 04 00 00 00 00 00 00 00 00 00 00 00 00 2C 01  // ..............,.
    2440: 2A 03 00 00 00 00 00 00 00 00 00 00 00 00 E7 01  // *...............
    2450: C1 04 00 00 00 00 00 00 00 00 00 00 00 00 F4 01  // ................
    2460: 94 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2470: 00 00 6E A3 59 3F C3 D3 AB 3D CD CC CC 3C 6E A3  // ..n.Y?...=...<n.
    2480: 59 3F C3 D3 AB 3D CD CC CC 3C 1C 99 57 3F F9 14  // Y?...=...<..W?..
    2490: 00 3E 67 0A 1D BD 24 9C 46 3F 03 3E FF 3D CD CC  // .>g...$.F?.>.=..
    24A0: 4C 3D B0 03 3F 3F FB 57 16 3E CD CC 4C 3D A5 0A  // L=..??.W.>..L=..
    24B0: 00 00 B0 04 00 00 E8 03 00 00 94 07 00 00 C9 04  // ................
    24C0: 00 00 78 05 00 00 C9 04 00 00 78 05 00 00 B0 04  // ..x.......x.....
    24D0: 00 00 C1 04 00 00 C1 04 00 00 2A 03 00 00 C1 04  // ..........*.....
    24E0: 00 00 00 02 03 03 08 07 00 00 4C 01 FA 01 F0 0A  // ..........L.....
    24F0: 80 0C 8C 0A 80 0C 48 0D 48 0D 88 13 18 15 18 15  // ......H.H.......
    2500: 18 15 F4 01 20 03 F4 01 01 00 01 02 5D 00 01 00  // .... .......]...
    2510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2520: 00 00 00 00 00 00 00 00 00 00 06 00 64 00 00 00  // ............d...
    2530: 00 00 28 00 64 00 00 00 00 00 00 00 00 00 00 00  // ..(.d...........
    2540: 00 00 00 00 00 00 00 00 00 00 23 0F FA 0E CF 0E  // ..........#.....
    2550: A6 0E 7D 0E 51 0E 28 0E 00 0E D4 0D AB 0D 82 0D  // ..}.Q.(.........
    2560: 57 0D E3 0C 70 0C FD 0B 8A 0B 00 00 00 00 03 02  // W...p...........
    2570: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03  // ................
    2580: 01 06 36 01 6B 02 32 00 3C 00 90 01 90 01 90 01  // ..6.k.2.<.......
    2590: 90 01 90 01 90 01 90 01 90 01 90 01 90 01 0F 00  // ................
    25A0: A4 06 E4 0C E4 0C 00 00 5F 00 F4 01 00 00 01 00  // ........_.......
    25B0: 01 02 00 00 00 00 00 00 00 00 00 00 03 00 00 00  // ................
    25C0: 00 00 00 00 00 00 E3 A5 9B 3C 00 00 00 00 00 00  // .........<......
    25D0: 00 00 8F C2 75 3C FC 1D 8A 3D 5E 4B 48 3E B8 E4  // ....u<...=^KH>..
    25E0: 38 BE 00 00 00 00 00 00 00 00 00 00 00 00 E1 7F  // 8...............
    25F0: 2B 3D E6 3F 24 3E 6C 5B D4 BD 00 00 00 00 00 00  // +=.?$>l[........
    2600: 00 00 00 00 00 00 00 00 00 00 00 00 00 3F 66 66  // .............?ff
    2610: E6 3F 9A 99 19 40 1F 85 2B 40 33 33 33 40 09 1B  // .?...@..+@333@..
    2620: 1E 3D 21 1F 74 3D AE D8 DF 3D F9 31 26 3E CC 7F  // .=!.t=...=.1&>..
    2630: 48 3E 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // H>..............
    2640: 00 00 00 00 00 00 00 00 00 00 8C 00 90 00 01 01  // ................
    2650: 00 00 00 00 00 00 8C 00 90 00 19 00 19 00 00 00  // ................
    2660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2690: 00 00 00 00 00 00 00 01 54 0D 3F 00 00 00 24 97  // ........T.?...$.
    26A0: 7F 3B 29 CB 90 3E 58 39 B4 3B 80 B7 00 3F 00 00  // .;)..>X9.;...?..
    26B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2820: 00 00 00 00 00 00 00 00 00 00 00 00 1E 06 66 50  // ..............fP
    2830: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F A3 14  // fQfRfSfUfVfW....
    2840: 00 8C 0E 08 00 B2 20 E8 20 1C 0B C0 75 14 A2 02  // ...... . ...u...
    2850: 00 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    2860: 1F CB E8 3A 1D E8 0C 1B 32 D2 8D 3E 46 03 89 55  // ...:....2..>F..U
    2870: 16 E8 C3 0C E8 86 0C E8 1C 1A 75 19 E8 D1 0D E8  // ..........u.....
    2880: B0 02 E8 09 18 0B C0 74 0C E8 39 00 E8 3B 43 E8  // .......t..9..;C.
    2890: 7D 0C E8 90 43 E8 A9 00 B4 80 E8 01 1B 8A C7 66  // }...C..........f
    28A0: C1 E0 10 8A E3 B0 20 66 A3 14 A3 E8 B0 02 E8 90  // ...... f........
    28B0: 0C E8 2E 1D 66 5F 66 5E 66 5D 66 5B 66 5A 66 59  // ....f_f^f]f[fZfY
    28C0: 66 58 07 1F CB 2E 8B 1E 08 00 83 3E D5 28 00 75  // fX.........>.(.u
    28D0: 04 89 1E D3 28 1E 2E 8E 1E CB 28 9C FA 66 C7 06  // ....(.....(..f..
    28E0: 08 01 65 F0 00 F0 C7 06 40 00 F6 28 89 1E 42 00  // ..e.....@..(..B.
    28F0: C7 06 B4 01 F6 28 89 1E B6 01 C7 06 7C 00 F6 70  // .....(......|..p
    2900: 89 1E 7E 00 C7 06 0C 01 09 75 89 1E 0E 01 C7 06  // ..~......u......
    2910: A8 04 28 6B 89 1E AA 04 2E 8E 1E D3 28 8B C3 A3  // ..(k........(...
    2920: 2A 6B A3 3A 6B A3 4C 6B 9D 1F C3 50 4D 49 44 F6  // *k.:k.Lk...PMID.
    2930: 28 5A 5B 00 00 00 A0 00 B0 00 B8 00 C0 00 00 00  // (Z[.............
    2940: 00 BB 00 00 E8 E3 0B 66 C1 E8 10 A3 7A 03 BB 0B  // .......f....z...
    2950: 00 E8 D6 0B 8D 3E 46 03 66 89 45 18 C3 00 E8 5C  // .....>F.f.E....\
    2960: 1C 80 FC A0 75 05 E8 3D 00 EB 11 80 FC 4F 75 05  // ....u..=.....Ou.
    2970: E8 75 31 EB 07 E8 CA 36 EB 02 B4 01 E8 63 1C CF  // .u1....6.....c..
    2980: E8 3A 1C E8 20 00 EB 02 B4 01 E8 55 1C CB E8 2C  // .:.. ......U...,
    2990: 1C 80 FC 4F 75 05 E8 4F 31 EB 07 E8 A4 36 EB 02  // ...Ou..O1....6..
    29A0: B4 01 E8 3D 1C CB 1E 06 66 50 66 51 66 52 66 53  // ...=....fPfQfRfS
    29B0: 66 55 66 56 66 57 0E 1F 3C 04 75 29 2E A1 1A 00  // fUfVfW..<.u)....
    29C0: 66 C1 E0 10 2E A1 18 00 8D 36 37 02 8A 3C 80 EF  // f........67..<..
    29D0: 30 B3 02 8B EC 89 5E 0C 89 46 04 66 C1 E8 10 89  // 0.....^..F.f....
    29E0: 46 00 E9 2B 01 3C 05 75 18 E8 B2 19 E8 85 19 2E  // F..+.<.u........
    29F0: A1 08 00 8B EC 89 56 10 89 46 00 89 5E 04 E9 0F  // ......V..F..^...
    2A00: 01 3C 06 75 32 E8 0A 0B 66 D1 E0 8B EC 89 46 14  // .<.u2...f.....F.
    2A10: BB 02 00 E8 14 0B 88 46 18 E8 FE 0A 66 89 46 0C  // .......F....f.F.
    2A20: BB 09 00 E8 04 0B 33 C0 66 89 46 00 2E 8B 16 7A  // ......3.f.F....z
    2A30: 03 89 56 10 E9 D9 00 3C 0B 75 24 0A DB 75 11 B9  // ..V....<.u$..u..
    2A40: 80 00 BB 02 00 8B EC 89 5E 0C 89 4E 14 E9 C0 00  // ........^..N....
    2A50: 8A C7 E8 D3 00 E8 38 01 0F 84 AC 00 E9 B1 00 3C  // ......8........<
    2A60: 17 75 1D E8 91 0D 74 06 E8 83 09 E8 87 12 E8 13  // .u....t.........
    2A70: 07 E8 78 0A 33 C9 8B C8 8B EC 89 4E 14 E9 90 00  // ..x.3......N....
    2A80: 3C 18 75 45 0A FF 75 10 E8 18 0D 8B EC 89 46 0C  // <.uE..u.......F.
    2A90: E8 4F 07 89 4E 10 EB 78 E8 5C 0D 75 6B BB 00 4C  // .O..N..x.\.uk..L
    2AA0: E8 B8 1A 66 0B C0 74 60 23 C9 74 5C E8 30 0D BE  // ...f..t`#.t\.0..
    2AB0: 00 4C E8 A2 0A 74 51 BE 00 4C B0 40 E8 F1 0A E8  // .L...tQ..L.@....
    2AC0: E1 0C 8B EC 89 46 0C EB 47 3C 82 75 1A 80 FB 05  // .....F..G<.u....
    2AD0: 75 15 0A FF 75 0A E8 26 0C 8B EC 89 46 14 EB 30  // u...u..&....F..0
    2AE0: E8 03 0C 74 1B EB 29 3C 8E 75 15 80 FF 01 74 08  // ...t..)<.u....t.
    2AF0: 80 FF 02 75 0B 80 C1 02 80 C1 02 E8 4D 0C EB 10  // ...u........M...
    2B00: 8B EC C6 46 19 02 EB 0F 8B EC C6 46 19 01 EB 07  // ...F.......F....
    2B10: 32 E4 8B EC 88 66 19 66 5F 66 5E 66 5D 66 5B 66  // 2....f.f_f^f]f[f
    2B20: 5A 66 59 66 58 07 1F C3 51 8A C8 B8 01 00 D3 E0  // ZfYfX...Q.......
    2B30: 59 C3 E8 D3 1A C3 0C 01 C3 00 50 51 B0 B6 E6 43  // Y.........PQ...C
    2B40: B0 33 E6 42 B0 05 E6 42 E4 61 8A E0 0C 03 E6 61  // .3.B...B.a.....a
    2B50: 8A C4 B9 C8 00 E8 C7 16 E6 61 59 58 C3 00 1E 56  // .........aYX...V
    2B60: 0E 1F 80 3E 02 00 80 76 05 C6 06 02 00 80 8A 0E  // ...>...v........
    2B70: 02 00 C1 E1 09 FC C6 06 21 00 00 33 F6 32 E4 AC  // ........!..3.2..
    2B80: 02 E0 E2 FB F6 D4 FE C4 88 26 21 00 5E 1F C3 00  // .........&!.^...
    2B90: 57 0B C0 75 0F E8 1E 08 74 25 E8 24 00 F6 C3 04  // W..u....t%.$....
    2BA0: 74 F3 EB 11 8B C8 E8 E5 14 23 C1 74 12 E8 11 00  // t........#.t....
    2BB0: F6 C3 04 74 0A 5F 8D 5C 28 E8 91 05 0B F6 C3 5F  // ...t._.\(......_
    2BC0: C3 50 E8 D3 07 E8 37 14 0A C9 74 11 E8 C2 11 3C  // .P....7...t....<
    2BD0: 00 75 1F E8 CB 01 8A EB F6 C5 04 74 15 8D 9C A6  // .u.........t....
    2BE0: 00 E8 77 19 0A C0 74 0A E8 88 04 74 05 33 C9 E8  // ..w...t....t.3..
    2BF0: 51 05 E8 AC 01 58 C3 51 B9 5F 00 E8 D0 15 59 C3  // Q....X.Q._....Y.
    2C00: 51 E8 1A 00 75 14 E8 69 01 3C 01 75 0D B9 20 00  // Q...u..i.<.u.. .
    2C10: E8 27 00 75 05 80 C9 01 EB 02 33 C9 59 C3 53 E8  // .'.u......3.Y.S.
    2C20: 39 19 66 3D 00 FF FF FF 75 0E 83 C3 04 E8 2B 19  // 9.f=....u.....+.
    2C30: 66 3D FF FF FF 00 75 00 5B C3 50 52 32 D2 E8 1A  // f=....u.[.PR2...
    2C40: 19 02 D0 02 D4 66 C1 E8 10 02 D0 02 D4 83 C3 04  // .....f..........
    2C50: E2 EC 0A D2 5A 58 C3 E8 3E 07 8D 9C A4 01 E8 E9  // ....ZX..>.......
    2C60: 00 A9 DD 0F 74 52 E8 38 01 F6 C3 08 74 0C 8D 5C  // ....tR.8....t..\
    2C70: 28 E8 DD 00 75 04 E8 62 00 C3 B5 02 E8 FC 00 E8  // (...u..b........
    2C80: 1F 01 F6 C3 04 74 21 8D 5C 28 E8 22 01 E8 6D 03  // .....t!.\(."..m.
    2C90: 74 05 B5 03 E8 E4 00 E8 41 04 E8 FA 00 80 FD 00  // t.......A.......
    2CA0: 75 38 B5 02 E8 E6 00 C3 8D 9C C0 01 B8 00 55 E8  // u8............U.
    2CB0: 5C 0D B5 02 E8 D6 00 C3 A9 02 00 74 1D B5 04 E8  // \..........t....
    2CC0: B9 00 E8 DC 00 8D 5C 28 E8 E4 00 E8 2A 16 E8 BC  // ......\(....*...
    2CD0: 00 8D 5C 28 E8 D8 00 E8 01 04 C3 B5 01 E8 9B 00  // ..\(............
    2CE0: B5 02 E8 A8 00 E8 B9 00 F6 C3 04 75 10 8D 9C C0  // ...........u....
    2CF0: 01 B8 00 55 E8 17 0D B5 02 E8 17 00 C3 E8 AF 00  // ...U............
    2D00: B5 02 8D 5C 28 E8 57 00 75 02 B5 01 E8 04 00 E8  // ...\(.W.u.......
    2D10: C9 03 C3 8D 9C AC 02 B1 02 E8 E3 17 B5 02 E8 6C  // ...............l
    2D20: 00 C3 8D 9C A4 01 E8 21 00 E8 75 00 F6 C3 04 74  // .......!..u....t
    2D30: 12 8D 5C 28 E8 78 00 E8 5D 00 E8 59 07 8D 5C 28  // ..\(.x..]..Y..\(
    2D40: E8 BE 15 B8 02 00 E8 0E FF C3 B9 48 00 E8 7E 14  // ...........H..~.
    2D50: C3 53 81 C3 05 01 E8 02 18 24 06 3C 02 5B C3 E8  // .S.......$.<.[..
    2D60: 10 00 3D 01 04 75 0A 53 83 C3 18 E8 ED 17 5B A8  // ..=..u.S......[.
    2D70: 01 C3 53 83 C3 12 E8 E2 17 5B C3 8D 9C AC 02 32  // ..S......[.....2
    2D80: C9 E8 7B 17 C3 8D 9C AC 02 E8 CF 17 C3 8D 9C AC  // ..{.............
    2D90: 02 B1 01 E8 69 17 C3 8D 9C AC 02 B1 01 E8 77 17  // ....i.........w.
    2DA0: C3 66 50 8D 9C A0 01 E8 B1 17 8A D8 66 58 C3 55  // .fP.........fX.U
    2DB0: 57 51 B9 08 00 BD 00 00 BB 08 00 2B D9 D1 E3 8D  // WQ.........+....
    2DC0: 58 4E E8 96 17 E8 E3 01 E2 EE 8D 5C 4B E8 8B 17  // XN.........\K...
    2DD0: B9 03 00 8B D0 BF 27 2E 85 55 06 74 17 66 8B 05  // ......'..U.t.f..
    2DE0: 8D 9A 4C 02 E8 D4 16 8B 45 04 8D 9A 50 02 E8 E2  // ..L.....E...P...
    2DF0: 16 83 C5 08 83 C7 08 E2 DF 8D 7C 5E B9 04 00 33  // ..........|^...3
    2E00: ED 8B DF E8 55 17 0B C0 74 09 E8 5D 01 E8 97 00  // ....U...t..]....
    2E10: 83 C5 1C 83 C7 12 E2 E9 55 32 ED E8 6F FF 8D 5C  // ........U2..o..\
    2E20: 28 E8 4E FF 3D 01 04 75 10 83 C3 14 E8 2C 17 24  // (.N.=..u.....,.$
    2E30: 70 C0 E8 04 8A E8 E8 54 FF 5D 8D 9C A6 00 E8 1A  // p......T.]......
    2E40: 17 0A C0 74 46 8D 9C A8 00 E8 0F 17 3C 02 75 3B  // ...tF.......<.u;
    2E50: 66 C1 E8 10 3C 04 72 33 8D 9C A8 00 32 E4 03 D8  // f...<.r3....2...
    2E60: 8B FB B9 04 00 8B DF E8 F1 16 0B C0 74 15 E8 F9  // ............t...
    2E70: 00 A9 80 00 75 0D E8 2E 00 83 C5 1C 55 58 83 F8  // ....u.......UX..
    2E80: 70 73 08 83 C7 12 49 0B C9 75 DA 59 5F 5D C3 20  // ps....I..u.Y_]. 
    2E90: 03 58 02 3C 00 01 00 00 04 00 03 3C 00 00 08 80  // .X.<.......<....
    2EA0: 02 E0 01 3C 00 20 00 51 8D 1D E8 AE 16 8D 9A C0  // ...<. .Q........
    2EB0: 01 E8 1F 16 8D 5D 02 E8 A1 16 8D 9A C2 01 E8 89  // .....]..........
    2EC0: 00 8D 5D 05 E8 94 16 8D 9A C6 01 E8 7C 00 8D 5D  // ..].........|..]
    2ED0: 08 E8 87 16 8B C8 8A DC 66 C1 C8 10 8A D0 80 E2  // ........f.......
    2EE0: 0F 8A F0 C0 EE 04 8A EC C0 ED 06 8A FC C0 EF 04  // ................
    2EF0: 80 E7 03 80 E4 0F C0 E4 04 0A D4 80 E2 3F 80 E4  // .............?..
    2F00: C0 C0 EC 02 0A F4 8B C3 8D 9A CC 01 E8 C4 15 8D  // ................
    2F10: 9A CA 01 8B C1 E8 BB 15 8D 9A CE 01 33 C0 8A C6  // ............3...
    2F20: E8 B0 15 8D 9A D0 01 33 C0 8A C2 E8 A5 15 8D 5D  // .......3.......]
    2F30: 0C E8 27 16 8D 9A D2 01 E8 0F 00 8D 5D 0F E8 1A  // ..'.........]...
    2F40: 16 8D 9A D6 01 E8 8B 15 59 C3 8B C8 8A D4 66 C1  // ........Y.....f.
    2F50: C8 10 8A F0 80 E6 0F 8A E8 C0 ED 04 8B C1 E8 72  // ...............r
    2F60: 15 83 C3 02 8B C2 E8 6A 15 C3 8D 5D 11 E8 EB 15  // .......j...]....
    2F70: 8A E0 BA 06 00 C0 E8 07 74 03 80 CA 80 8A C4 C0  // ........t.......
    2F80: E8 03 24 03 3C 02 75 03 80 CA 40 3C 03 75 12 8A  // ..$.<.u...@<.u..
    2F90: C4 D0 E8 A8 01 74 03 80 E2 FD A8 02 74 03 80 E2  // .....t......t...
    2FA0: FB 8B C2 8D 9A D8 01 E8 29 15 C3 3C 01 74 3D 8B  // ........)..<.t=.
    2FB0: D0 0F B6 C6 24 3F 04 3C 8D 9A 50 02 E8 14 15 0F  // ....$?.<..P.....
    2FC0: B6 C2 83 C0 1F C1 E0 03 8D 9A 4C 02 E8 04 15 0F  // ..........L.....
    2FD0: B6 DE C1 EB 06 C1 E3 02 2E F7 A7 87 2F 2E F7 B7  // ............/...
    2FE0: 85 2F 8D 9A 4E 02 E8 EA 14 83 C5 08 C3 10 00 0A  // ./..N...........
    2FF0: 00 04 00 03 00 05 00 04 00 10 00 09 00 8D 9C A6  // ................
    3000: 00 E8 57 15 0A C0 74 1F 8D 9C A8 00 51 B1 03 E8  // ..W...t.....Q...
    3010: 18 00 59 0B DB 74 10 E8 41 15 32 C0 66 3D 00 03  // ..Y..t..A.2.f=..
    3020: 0C 00 75 03 0B DB C3 33 DB C3 66 50 52 E8 2B 15  // ..u....3..fPR.+.
    3030: 3C 02 75 39 80 FC 03 72 34 66 C1 E8 10 32 E4 3C  // <.u9...r4f...2.<
    3040: 04 76 2A 03 C3 8B D0 83 C3 04 3B DA 73 1F E8 0A  // .v*.......;.s...
    3050: 15 8A E0 80 E4 E0 C0 EC 05 24 1F 38 CC 74 08 32  // .........$.8.t.2
    3060: E4 FE C0 03 D8 EB E3 0B DB 5A 66 58 C3 33 DB 5A  // .........ZfX.3.Z
    3070: 66 58 C3 51 8D 9C A6 00 E8 E0 14 0A C0 74 1B 8D  // fX.Q.........t..
    3080: 9C A8 00 B1 12 E8 18 00 74 10 E8 CE 14 66 C1 E8  // ........t....f..
    3090: 10 80 E4 07 75 04 B0 01 EB 02 32 C0 0A C0 59 C3  // ....u.....2...Y.
    30A0: 66 50 52 E8 B5 14 3C 70 75 2B 66 C1 E8 10 32 E4  // fPR...<pu+f...2.
    30B0: 83 C3 05 03 C3 8B D0 3B DA 73 1A E8 9D 14 38 C8  // .......;.s....8.
    30C0: 74 0D 66 C1 E8 10 32 E4 83 C0 03 03 D8 EB E8 0B  // t.f...2.........
    30D0: DB 5A 66 58 C3 33 DB 5A 66 58 C3 57 66 51 8D 9C  // .ZfX.3.ZfX.WfQ..
    30E0: C0 01 8B FB 8B DF E8 3D 00 0B C9 74 0B 66 8B D1  // .......=...t.f..
    30F0: E8 C9 0B 83 C7 1C EB EC 66 59 5F C3 50 53 51 B9  // ........fY_.PSQ.
    3100: 07 00 53 8B DA E8 53 14 83 F8 00 5B 74 09 66 C1  // ..S...S....[t.f.
    3110: E3 10 8B DA E8 CC 10 59 5B 58 C3 51 53 B9 07 00  // .......Y[X.QS...
    3120: E8 D9 10 5B 59 C3 66 50 53 83 C3 06 E8 2C 14 5B  // ...[Y.fPS....,.[
    3130: 8B C8 66 C1 E1 10 53 83 C3 02 E8 1E 14 8B C8 5B  // ..f...S........[
    3140: 66 58 C3 8D 9C A0 01 32 C9 E8 B3 13 C3 57 B9 20  // fX.....2.....W. 
    3150: 00 E8 B4 10 5F C3 53 51 E8 19 00 32 E4 8A C5 C1  // ...._.SQ...2....
    3160: E0 02 59 8D 9C 78 01 03 D8 E8 EF 13 5B C3 B1 02  // ..Y..x......[...
    3170: E8 07 00 C3 B1 01 E8 01 00 C3 53 8D 9C 98 01 E8  // ..........S.....
    3180: 95 13 5B C3 33 C9 E8 0D 11 75 3C 66 BA 22 F0 FF  // ..[.3....u<f."..
    3190: FF 66 33 C0 E8 3C 03 33 C0 E8 1A 02 74 1C A9 DD  // .f3..<.3....t...
    31A0: 0F 74 F6 E8 1B FA F6 C3 04 75 05 F6 C3 18 74 E9  // .t.......u....t.
    31B0: E8 1F 00 50 E8 A0 FA 58 EB DF E8 0B 00 75 08 E8  // ...P...X.....u..
    31C0: 20 00 8B C1 E8 90 FA C3 66 50 E8 1F 03 8B C8 66  //  .......fP.....f
    31D0: 58 C3 66 52 66 BA FF FF FF FF 33 D0 E8 F4 02 66  // X.fRf.....3....f
    31E0: 5A C3 50 53 52 E8 E0 FF 75 09 33 C0 E8 C7 01 8B  // Z.PSR...u.3.....
    31F0: C8 EB 10 83 F9 02 74 0B E8 7B 06 80 FB 01 75 03  // ......t..{....u.
    3200: 83 E1 FD 5A 5B 58 C3 56 66 33 C0 66 BA 00 F0 FF  // ...Z[X.Vf3.f....
    3210: FF E8 9E 05 66 C1 E6 10 E8 A8 01 0B C0 74 03 E8  // ....f........t..
    3220: 05 00 E8 7E 05 5E C3 50 51 E8 6C 01 50 32 C0 E8  // ...~.^.PQ.l.P2..
    3230: 90 02 E8 CC 00 E8 7F 00 8D 9C 08 03 E8 1C 13 38  // ...............8
    3240: E8 74 0A 8A C5 E8 73 12 B0 02 E8 75 02 58 E8 79  // .t....s....u.X.y
    3250: 00 66 51 8D 9C A4 01 E8 01 13 66 8B C8 8B D3 8D  // .fQ.......f.....
    3260: 9C D0 02 E8 F5 12 66 3B C1 75 16 53 8D 9C AA 01  // ......f;.u.S....
    3270: E8 E8 12 8B C8 8D 9C D6 02 E8 DF 12 3B C1 5B 74  // ............;.[t
    3280: 05 B0 02 E8 3C 02 66 59 E8 71 FE E8 FF 01 66 25  // ....<.fY.q....f%
    3290: FF 0F 00 00 59 58 66 BA FF FF FF FF 33 D0 E8 11  // ....YXf.....3...
    32A0: 05 33 D2 C3 53 66 50 8D 9C C8 02 E8 AD 12 8A C4  // .3..SfP.........
    32B0: E8 08 12 66 58 5B C3 53 66 50 8D 9C C8 02 E8 9A  // ...fX[.SfP......
    32C0: 12 8A E0 E8 F5 11 66 58 5B C3 8D 9C C8 02 E8 8A  // ......fX[.......
    32D0: 12 32 C0 E8 E5 11 C3 66 52 52 32 ED 83 C1 02 B8  // .2.....fRR2.....
    32E0: 06 00 F7 E1 66 33 C9 8B C8 5A 51 66 8B C2 8A CF  // ....f3...ZQf....
    32F0: 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66 8B C8 66 5A  // f..f...Yf..f..fZ
    3300: C3 53 E8 48 01 66 C1 E2 10 E8 36 01 8D 9C 98 01  // .S.H.f....6.....
    3310: E8 48 12 8A E8 8D 9C AC 02 E8 3F 12 8A C8 E8 8E  // .H........?.....
    3320: 0B 8A EB 5B C3 57 53 53 E8 D6 FF E8 14 01 5B E8  // ...[.WSS......[.
    3330: A0 0B 74 61 80 FD 00 75 29 53 E8 19 FE 66 8B D0  // ..ta...u)S...f..
    3340: E8 54 FA 8A CD 51 E8 25 FE 8A FD 59 E8 88 FF 5B  // .T...Q.%...Y...[
    3350: E8 08 12 66 25 FF FF 00 00 66 3B C8 73 34 32 DB  // ...f%....f;.s42.
    3360: EB 33 80 FD 02 75 11 E8 2C 01 8D 1F E8 EC 11 3D  // .3...u..,......=
    3370: 74 40 76 1E 32 DB EB 1D 80 FD 03 75 15 53 E8 C1  // t@v.2......u.S..
    3380: 00 B3 03 E8 08 0B 5B E8 D1 11 3B C2 76 04 32 DB  // ......[...;.v.2.
    3390: EB 03 80 CB 01 5B 5F C3 53 8B F0 E8 F0 0C 23 F0  // .....[_.S.....#.
    33A0: 74 09 8B C6 E8 74 0B 8B F3 0B DB 5B C3 51 E8 31  // t....t.....[.Q.1
    33B0: FE E8 0F 00 59 C3 51 50 E8 D3 0C 8B C8 58 E8 02  // ....Y.QP.....X..
    33C0: 00 59 C3 57 53 E8 04 0D 0B C0 74 09 8B 1D 83 C7  // .Y.WS.....t.....
    33D0: 02 3B C3 75 F7 8B 1D 83 FB FF 74 0B 83 C7 02 85  // .;.u......t.....
    33E0: D9 74 F2 8B C3 EB 02 33 C0 0B C0 5B 5F C3 33 C0  // .t.....3...[_.3.
    33F0: E8 C3 FF 74 13 E8 A0 FF 8B DE B9 00 01 E8 CE 0D  // ...t............
    3400: 83 C6 08 E8 38 0C EB E8 BB F0 46 B8 5A A5 E8 C2  // ....8.....F.Z...
    3410: 10 C3 53 66 50 8D 9C 08 03 E8 3F 11 8A E8 66 58  // ..SfP.....?...fX
    3420: 5B C3 53 66 50 8D 9C C8 02 E8 2F 11 8A C8 66 58  // [.SfP...../...fX
    3430: 5B C3 53 66 50 8D 9C C9 02 E8 1F 11 8A C8 66 58  // [.SfP.........fX
    3440: 5B C3 53 8D 5C 14 E8 12 11 8B D0 5B C3 53 66 50  // [.S.\......[.SfP
    3450: 8D 5C 16 E8 05 11 8B D0 66 58 5B C3 53 66 50 8D  // .\......fX[.SfP.
    3460: 9C 18 03 E8 F5 10 66 8B D0 66 58 5B C3 53 66 50  // ......f..fX[.SfP
    3470: 8D 9C 1C 03 E8 E4 10 66 8B D0 66 58 5B C3 53 66  // .......f..fX[.Sf
    3480: 50 8D 5C 10 E8 D4 10 8B C8 66 58 5B C3 53 8D 5C  // P.\......fX[.S.\
    3490: 08 E8 C7 10 5B C3 53 66 50 8D 5C 0C E8 BC 10 8B  // ....[.SfP.\.....
    34A0: D0 66 58 5B C3 8D 5C 04 E8 B0 10 C3 51 8D 5C 04  // .fX[..\.....Q.\.
    34B0: 32 C9 E8 4A 10 59 C3 8D 9C 18 03 66 8B C2 E8 FA  // 2..J.Y.....f....
    34C0: 0F C3 53 51 8A E8 E8 DC FF 24 FD 0A E8 E8 DC FF  // ..SQ.....$......
    34D0: 59 5B C3 53 66 50 51 66 8B C8 BB 00 00 E8 1C 0A  // Y[.SfPQf........
    34E0: 23 C2 0B C1 E8 1E 0A 59 66 58 5B C3 BB 00 00 E8  // #......YfX[.....
    34F0: 0A 0A 66 25 DF 0F 00 00 C3 80 FA 14 C3 E8 AC 0C  // ..f%............
    3500: E8 3A 0C E8 18 0C 75 06 E8 95 0B E8 1C 0C C3 B0  // .:....u.........
    3510: 01 C3 55 B3 01 E8 02 0E 5D C3 66 53 66 BB 04 00  // ..U.....].fSf...
    3520: 00 00 E8 05 00 33 C0 66 5B C3 55 66 C1 E3 10 BB  // .....3.f[.Uf....
    3530: 00 00 E8 E5 0D 5D C3 E8 3A 0D BB 0A 00 E8 C5 09  // .....]..:.......
    3540: C3 BB 0A 00 E8 B5 09 66 8B C8 E8 27 0D BB 0A 00  // .......f...'....
    3550: 66 2B C1 E8 AF 09 C3 E8 29 00 0B C9 74 22 E8 A6  // f+......)...t"..
    3560: FC E8 1D 07 66 51 66 8B C8 BB 07 00 E8 8D 09 66  // ....fQf........f
    3570: 25 00 FE 00 00 66 0B C1 E8 8A 09 66 59 0C 01 C3  // %....f.....fY...
    3580: 32 C0 C3 E8 49 02 0B C9 75 06 E8 55 FC E8 4F 02  // 2...I...u..U..O.
    3590: 51 E8 4E FC 66 C1 E6 10 33 C0 E8 10 FE 74 09 E8  // Q.N.f...3....t..
    35A0: E7 02 75 F6 33 C8 EB F2 58 23 C8 66 C1 EE 10 C3  // ..u.3...X#.f....
    35B0: A8 10 75 63 E8 DC 06 66 C1 E6 10 33 C0 E8 F6 FD  // ..uc...f...3....
    35C0: 74 35 E8 D3 FD 50 51 8B C8 E8 D7 01 85 C1 59 58  // t5...PQ.......YX
    35D0: 74 0D 50 E8 CF FE 24 03 3C 03 58 75 E0 EB 0C 50  // t.P...$.<.Xu...P
    35E0: E8 C2 FE A8 01 58 74 D5 E8 CC FC 50 E8 83 07 58  // .....Xt....P...X
    35F0: B5 00 E8 B7 FE EB C6 E8 A9 01 E8 9B FD E8 13 01  // ................
    3600: B1 00 E8 3D 07 66 C1 EE 10 E8 80 06 A8 20 75 3B  // ...=.f....... u;
    3610: A8 40 75 03 E8 0F 08 E8 67 06 0A C0 75 00 E8 82  // .@u.....g...u...
    3620: 01 E8 74 FD E8 6F FE E8 CF FE 75 14 E8 47 02 0A  // ..t..o....u..G..
    3630: DB 74 0D E8 81 FC E8 39 07 B5 00 E8 6E FE EB 08  // .t.....9....n...
    3640: E8 20 07 B5 01 E8 64 FE E8 CE 00 C3 E8 3F 0A C3  // . ....d......?..
    3650: E8 9B FD E8 9F 06 33 C9 E8 84 01 66 33 D2 66 33  // ......3....f3.f3
    3660: C0 E8 6F FE E8 73 07 E8 52 00 B1 FF E8 77 00 33  // ..o..s..R....w.3
    3670: C0 E8 42 FD 74 0A E8 1F FD 50 E8 13 07 58 EB F1  // ..B.t....P...X..
    3680: 32 C9 E8 A6 01 E8 06 0A 0B C0 C3 E8 60 FD E8 64  // 2...........`..d
    3690: 06 66 33 C0 66 BA 00 F0 FF FF E8 15 01 51 B1 01  // .f3.f........Q..
    36A0: E8 6E 01 59 E8 46 07 33 C0 E8 0A FD 74 0A E8 E7  // .n.Y.F.3....t...
    36B0: FC 50 E8 CC 06 58 EB F1 E8 F2 06 C3 B8 02 00 E8  // .P...X..........
    36C0: D6 FC 74 21 B8 02 00 E8 F7 F4 F6 C3 04 75 0A E8  // ..t!.........u..
    36D0: BC 09 83 E0 FD E8 BF 09 C3 66 B8 02 00 00 00 E8  // .........f......
    36E0: F1 FD E8 3D F6 C3 E8 25 08 74 13 BB 02 00 E8 0B  // ...=...%.t......
    36F0: 08 8A E1 E8 0F 08 E8 CC 06 0C 01 C3 0C 01 C3 51  // ...............Q
    3700: E8 0B 08 74 0C 8A CC BB 02 00 E8 EF 07 8A C4 8A  // ...t............
    3710: E1 59 C3 B0 01 E8 08 06 C3 B0 00 E8 02 06 C3 E8  // .Y..............
    3720: 74 0B 75 18 E8 7C 00 E8 6E FC 80 F9 01 75 0E 51  // t.u..|..n....u.Q
    3730: E8 30 06 B5 01 E8 74 FD 59 E8 DD FF C3 E8 D3 FF  // .0....t.Y.......
    3740: 51 E8 3D 06 B5 00 E8 63 FD 59 C3 B8 02 00 E8 47  // Q.=....c.Y.....G
    3750: FC 74 03 E8 61 06 C3 E8 C6 04 3B C1 7C 35 8B C1  // .t..a.....;.|5..
    3760: E8 06 05 E8 19 07 8B C8 51 E8 36 05 E8 FA 04 59  // ........Q.6....Y
    3770: E8 0C 07 3B C8 72 02 8B C1 8D 5C 04 E8 54 0D 32  // ...;.r....\..T.2
    3780: C9 E8 41 0A FE C1 38 C1 72 F7 8D 5C 04 E8 CB 0D  // ..A...8.r..\....
    3790: 0B C0 C3 33 C0 C3 BB 00 48 33 C0 8A C2 C1 E0 02  // ...3....H3......
    37A0: 03 D8 C3 53 BB 03 00 E8 52 07 66 25 FF 0F 00 00  // ...S....R.f%....
    37B0: 5B C3 53 66 50 66 51 66 8B C8 BB 03 00 E8 3C 07  // [.SfPfQf......<.
    37C0: 66 23 C2 66 0B C1 E8 3C 07 66 59 66 58 5B C3 66  // f#.f...<.fYfX[.f
    37D0: 50 BB 05 00 E8 25 07 25 FF 0F 8B C8 66 58 C3 E8  // P....%.%....fX..
    37E0: AC 08 23 C8 66 50 BB 05 00 E8 10 07 25 00 F0 0B  // ..#.fP......%...
    37F0: C1 E8 11 07 66 58 C3 66 50 53 BB 06 00 E8 FC 06  // ....fX.fPS......
    3800: A8 10 75 09 BB F0 46 E8 51 0D 3D 5A A5 5B 66 58  // ..u...F.Q.=Z.[fX
    3810: C3 66 50 53 BB 06 00 E8 E2 06 80 F1 01 C0 E1 04  // .fPS............
    3820: 24 EF 0A C1 E8 DE 06 5B 66 58 C3 53 66 50 BB F8  // $......[fX.SfP..
    3830: 46 E8 27 0D 8A C1 E8 82 0C 66 58 5B C3 53 BB F8  // F.'......fX[.S..
    3840: 46 E8 17 0D 83 E0 01 5B C3 53 66 50 BB 07 00 E8  // F......[.SfP....
    3850: AA 06 F6 C4 01 66 58 B0 06 74 02 B0 08 5B C3 53  // .....fX..t...[.S
    3860: BB 07 00 E8 96 06 80 E4 FE 80 FD 06 74 03 80 CC  // ............t...
    3870: 01 E8 91 06 5B C3 66 50 BB 06 00 E8 7E 06 24 40  // ....[.fP....~.$@
    3880: C0 E8 06 8A D8 66 58 C3 C3 50 66 51 E8 09 FB 83  // .....fX..PfQ....
    3890: EC 04 8B EC 66 33 C0 66 89 46 00 33 D2 8D BC C0  // ....f3.f.F.3....
    38A0: 01 8D 1D E8 B5 0C 0B C0 74 3D 8B DF B0 00 E8 2D  // ........t=.....-
    38B0: 01 74 2F 8B DF E8 6E F8 66 8B 46 00 3B C8 7F 10  // .t/...n.f.F.;...
    38C0: 72 20 66 C1 C8 10 66 C1 C9 10 3B C8 7F 0E EB 12  // r f...f...;.....
    38D0: 66 C1 C8 10 66 C1 C9 10 3B C8 72 06 8B D7 66 89  // f...f...;.r...f.
    38E0: 4E 00 83 C7 1C EB BA 0B D2 74 0A 8D 9C A4 01 E8  // N........t......
    38F0: 0A F8 E9 88 00 66 33 C0 66 89 46 00 8D BC 4C 02  // .....f3.f.F...L.
    3900: 33 D2 8D 1D E8 54 0C 0B C0 74 58 66 50 E8 75 F4  // 3....T...tXfP.u.
    3910: 3C 01 66 58 74 05 3D 40 06 73 43 66 52 66 8B D0  // <.fXt.=@.sCfRf..
    3920: 8D 5D 04 E8 35 0C E8 5D 00 8B CA 66 5A 74 2F 56  // .]..5..]...fZt/V
    3930: 8D 9C A4 01 8B F1 E8 E2 F7 5E B0 00 E8 9F 00 74  // .........^.....t
    3940: 1D 8D 1D E8 15 0C 8B D9 8B 47 06 66 C1 E0 10 8B  // .........G.f....
    3950: 47 02 66 3B 46 00 72 06 8B D1 66 89 46 00 83 C7  // G.f;F.r...f.F...
    3960: 08 EB 9F 0B D2 74 16 56 8D 9C A4 01 8B F2 E8 AA  // .....t.V........
    3970: F7 5E 53 8D 9C BA 01 33 C0 E8 57 0B 5B 83 C4 04  // .^S....3..W.[...
    3980: 0B D2 66 59 58 C3 57 53 51 E8 5E 07 3B 55 02 75  // ..fYX.WSQ.^.;U.u
    3990: 18 66 C1 CA 10 8B DA 66 C1 CA 10 3B 5D 06 75 09  // .f.....f...;].u.
    39A0: 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 DE 33 D2  // ..t.:E.t......3.
    39B0: EB 02 8B D7 0B D2 59 5B 5F C3 51 66 52 E8 2A 07  // ......Y[_.QfR.*.
    39C0: 3A 65 1A 75 09 0A C0 74 0E 3A 45 1B 74 09 83 C7  // :e.u...t.:E.t...
    39D0: 1C E2 ED 33 FF EB 00 0B FF 66 5A 59 C3 C3 66 51  // ...3.....fZY..fQ
    39E0: 66 52 53 53 66 C1 CE 10 8B DE 66 C1 CE 10 E8 6A  // fRSSf.....f....j
    39F0: 0B 5B 66 8B D0 E8 2E F7 3B CA 72 0A 66 3B CA 72  // .[f.....;.r.f;.r
    3A00: 05 E8 21 F9 75 02 32 C0 5B 66 5A 66 59 C3 56 57  // ..!.u.2.[fZfY.VW
    3A10: E8 A7 FF 8B F7 E8 03 F7 5F 5E C3 66 50 53 66 51  // ........_^.fPSfQ
    3A20: 52 57 56 51 8B DE B9 08 00 E8 A2 07 59 8D 5C 08  // RWVQ........Y.\.
    3A30: 8B C1 66 C1 E0 10 8A C2 E8 80 0A F6 C2 03 75 24  // ..f...........u$
    3A40: 8B C1 24 7F BF FE 3A 80 3D FF 0F 84 0F 01 3A 05  // ..$...:.=.....:.
    3A50: 75 0D 66 8B 45 01 66 B9 00 05 02 00 E9 96 00 83  // u.f.E.f.........
    3A60: C7 05 EB E3 F6 C2 01 74 25 8B C1 E8 70 01 0F 84  // .......t%...p...
    3A70: EB 00 33 C9 8A CC 8A D0 0A C0 75 12 8D 5C 08 66  // ..3.......u..\.f
    3A80: 25 FF FF 00 00 66 C1 E0 08 E8 2F 0A EB B2 8A E1  // %....f..../.....
    3A90: 8A CA 80 E1 0C C0 E9 02 80 E2 F0 C0 EA 04 8A EA  // ................
    3AA0: 80 FC 70 72 2A 80 FC 75 73 25 80 EC 70 8A C4 32  // ..pr*..us%..p..2
    3AB0: E4 50 E8 30 02 8B D8 58 38 D8 72 05 33 C0 E9 9C  // .P.0...X8.r.3...
    3AC0: 00 E8 28 02 E8 94 0A 0B C0 0F 84 90 00 EB 1B 32  // ..(............2
    3AD0: C0 E8 E6 FE 0F 84 85 00 8D 5C 16 8B 05 E8 F3 09  // .........\......
    3AE0: 8B 45 06 66 C1 E0 10 8B 45 02 50 E8 91 03 66 C1  // .E.f....E.P...f.
    3AF0: E1 10 8B C8 58 8D 1C E8 C1 09 66 50 8D 5C 04 66  // ....X.....fP.\.f
    3B00: 8B C1 E8 B6 09 66 58 66 C1 E8 10 66 81 E1 FF FF  // .....fXf...f....
    3B10: 00 00 66 F7 E1 66 50 8D 5C 06 E8 3E 0A 8B C8 66  // ..f..fP.\..>...f
    3B20: 58 66 D3 E0 66 C1 E8 10 40 8D 5C 14 E8 A4 09 BF  // Xf..f...@.\.....
    3B30: 5E 3B 83 F9 01 74 11 BF 66 3B 81 F9 01 01 74 08  // ^;...t..f;....t.
    3B40: BF 6E 3B 83 F9 02 75 15 8D 5C 0C 66 8B 05 E8 6A  // .n;...u..\.f...j
    3B50: 09 8D 5C 10 66 8B 45 04 E8 60 09 0B DB 5E 5F 5A  // ..\.f.E..`...^_Z
    3B60: 66 59 5B 66 58 C3 00 40 01 90 01 01 40 01 90 01  // fY[fX..@....@...
    3B70: 02 80 02 90 01 03 80 02 90 01 04 40 01 90 01 05  // ...........@....
    3B80: 40 01 90 01 06 80 02 90 01 07 D0 02 5E 01 0D 40  // @...........^..@
    3B90: 01 90 01 0E 80 02 90 01 0F 80 02 5E 01 10 80 02  // ...........^....
    3BA0: 5E 01 11 80 02 E0 01 12 80 02 E0 01 13 80 02 90  // ^...............
    3BB0: 01 23 20 04 90 01 32 20 04 B0 02 33 20 04 C0 02  // .# ...2 ...3 ...
    3BC0: 62 80 02 E0 01 FF 05 0A 05 05 05 00 00 00 05 0B  // b...............
    3BD0: 06 05 05 00 00 00 08 10 08 08 08 00 00 00 56 E8  // ..............V.
    3BE0: 07 07 80 E4 01 3B 04 74 09 83 C6 04 E2 F7 33 C0  // .....;.t......3.
    3BF0: EB 05 8B 44 02 0B C0 5E C3 57 53 50 E8 EA 06 83  // ...D...^.WSP....
    3C00: E9 0A E8 E0 00 83 F8 05 76 03 B8 05 00 D1 E0 03  // ........v.......
    3C10: C8 FB A5 83 C6 02 E2 FA B8 FF FF AB 58 5B 5F C3  // ............X[_.
    3C20: 66 53 51 66 52 E8 41 00 E8 77 00 66 C1 E8 10 66  // fSQfR.A..w.f...f
    3C30: 0F B7 D8 66 B8 00 00 00 03 66 D3 E8 66 33 D2 66  // ...f.....f..f3.f
    3C40: F7 F3 E8 3A 02 66 5A 59 66 5B C3 53 66 50 BB 07  // ...:.fZYf[.SfP..
    3C50: 00 E8 A8 02 0A C0 66 58 5B C3 53 66 50 BB 07 00  // ......fX[.SfP...
    3C60: E8 99 02 A8 01 66 58 5B C3 53 66 50 8D 5C 06 E8  // .....fX[.SfP.\..
    3C70: E9 08 8A C8 66 58 5B C3 51 B9 08 00 E8 64 05 59  // ....fX[.Q....d.Y
    3C80: C3 53 8D 5C 08 E8 D3 08 24 03 5B C3 8D 5C 09 E8  // .S.\....$.[..\..
    3C90: C9 08 C3 51 53 B1 01 8A E8 8D 5C 08 E8 60 08 5B  // ...QS.....\..`.[
    3CA0: 59 C3 53 8D 1C E8 B3 08 5B C3 53 8D 5C 04 E8 AA  // Y.S.....[.S.\...
    3CB0: 08 5B C3 53 8D 5C 16 E8 A1 08 5B C3 53 66 52 33  // .[.S.\....[.SfR3
    3CC0: C0 E8 C2 FC 66 5A 75 1B E8 34 00 74 16 E8 15 00  // ....fZu..4.t....
    3CD0: 40 83 F8 05 73 0D E8 E2 07 48 E8 0F 00 66 8B C2  // @...s....H...f..
    3CE0: E8 D8 07 5B C3 BB 00 4E E8 70 08 C3 BB 08 4E C1  // ...[...N.p....N.
    3CF0: E0 03 03 D8 C3 BB 00 4E B9 32 00 E8 D0 04 C3 51  // .......N.2.....Q
    3D00: E8 E2 FF 0B C0 74 12 8B C8 BB 08 4E E8 4C 08 66  // .....t.....N.L.f
    3D10: 3B C2 74 07 83 C3 08 E2 F3 0B DB 59 C3 C3 C3 00  // ;.t........Y....
    3D20: 8A E8 BB 20 DF 3C 01 74 02 32 DB E8 19 28 E8 F1  // ... .<.t.2...(..
    3D30: F6 66 B8 80 06 00 08 66 33 DB 8A D9 8A CD E8 B6  // .f.....f3.......
    3D40: 00 C3 66 51 66 52 66 57 66 B8 80 05 00 08 66 BB  // ..fQfRfWf.....f.
    3D50: 00 4C 00 00 66 33 C9 8B CE E8 9B 00 66 5F 66 5A  // .L..f3......f_fZ
    3D60: 66 59 C3 66 B8 80 07 00 04 66 33 DB 8B DE E8 86  // fY.f.....f3.....
    3D70: 00 C3 66 B8 80 08 00 04 66 33 DB 8B DE E8 77 00  // ..f.....f3....w.
    3D80: C3 66 B8 80 09 00 04 66 33 DB 8B DE E8 68 00 C3  // .f.....f3....h..
    3D90: C3 66 B8 80 0A 00 04 66 33 DB 8B DE E8 58 00 E8  // .f.....f3....X..
    3DA0: FF EF F6 C3 02 74 03 B0 00 C3 B0 01 C3 66 B8 80  // .....t.......f..
    3DB0: 0D 00 00 E8 41 00 C3 66 B8 80 0F 00 04 66 33 DB  // ....A..f.....f3.
    3DC0: 8A D9 E8 32 00 66 B8 80 0F 00 04 66 33 DB 56 E8  // ...2.f.....f3.V.
    3DD0: F1 02 8B 5C 20 5E E8 1E 00 C3 66 B8 00 00 00 00  // ...\ ^....f.....
    3DE0: E8 14 00 66 B8 80 0C 00 04 E8 0B 00 C3 66 B8 00  // ...f.........f..
    3DF0: 01 00 00 E8 01 00 C3 83 EC 1C 8B EC 66 89 46 00  // ............f.F.
    3E00: 66 89 5E 04 66 89 4E 08 66 89 56 0C 66 89 7E 10  // f.^.f.N.f.V.f.~.
    3E10: 66 89 76 14 8C D0 66 C1 E0 10 8B C4 BB 42 00 E8  // f.v...f......B..
    3E20: DB 02 83 C4 1C C3 51 8D 5C 14 E8 2E 07 66 C1 E0  // ......Q.\....f..
    3E30: 10 E8 02 00 59 C3 83 EC 10 8B EC 66 3D F0 FF FF  // ....Y......f=...
    3E40: 03 76 06 66 B8 F0 FF FF 03 66 8B C8 66 33 C0 66  // .v.f.....f..f3.f
    3E50: 89 46 04 66 89 46 00 66 89 46 08 B0 01 88 46 09  // .F.f.F.f.F....F.
    3E60: 66 B8 00 00 00 D0 66 0B C1 66 89 46 0C 8C D0 66  // f.....f..f.F...f
    3E70: C1 E0 10 8B C4 BB 35 00 E8 82 02 83 C4 10 C3 3D  // ......5........=
    3E80: C0 7F 76 04 B8 C0 7F C3 83 C0 3F 24 C0 C3 53 51  // ..v.......?$..SQ
    3E90: 66 50 B9 68 74 80 FB 03 74 0B B9 A0 8C 80 FB 00  // fP.ht...t.......
    3EA0: 75 03 B9 78 69 66 33 D2 8B D1 66 58 59 5B C3 66  // u..xif3...fXY[.f
    3EB0: 52 B3 00 66 F7 C2 00 00 FF FF 75 13 80 FD 13 74  // R..f......u....t
    3EC0: 0E 80 FD 14 74 09 B3 03 80 F9 03 74 02 B3 02 66  // ....t......t...f
    3ED0: 5A C3 E8 86 06 66 C1 E8 10 0B C0 74 1C 53 83 C3  // Z....f.....t.S..
    3EE0: 06 E8 77 06 5B 3D E0 01 72 0F 53 83 C3 18 E8 6A  // ..w.[=..r.S....j
    3EF0: 06 5B A8 80 75 03 0C 01 C3 32 C0 C3 53 83 C3 4C  // .[..u....2..S..L
    3F00: E8 26 06 5B C3 53 83 C3 4C E8 78 05 5B C3 56 E8  // .&.[.S..L.x.[.V.
    3F10: B1 01 8B 44 38 83 7C 20 00 5E C3 BB 00 50 83 F8  // ...D8.| .^...P..
    3F20: 02 74 32 BB 00 54 83 F8 08 74 2A BB 00 58 3D 80  // .t2..T...t*..X=.
    3F30: 00 74 22 BB 00 5C 3D 00 02 74 1A BB 00 60 3D 00  // .t"..\=..t...`=.
    3F40: 04 74 12 BB 00 64 3D 00 08 74 0A BB 00 68 83 F8  // .t...d=..t...h..
    3F50: 40 74 02 33 DB C3 57 E8 56 00 74 0A 8B 5D 02 E8  // @t.3..W.V.t..]..
    3F60: 08 00 0B DB 5F C3 33 DB 5F C3 52 51 0B DB 74 1B  // ...._.3._.RQ..t.
    3F70: 56 E8 36 01 03 DE 5E 33 C9 8A 4F 01 80 3F FF 74  // V.6...^3..O..?.t
    3F80: 08 3A 07 74 06 03 D9 EB F0 33 DB 0B DB 59 5A C3  // .:.t.....3...YZ.
    3F90: 56 51 E8 15 01 32 C9 8D 7C 08 3B 5D 04 74 0C 83  // VQ...2..|.;].t..
    3FA0: C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3  // ....:L.r.3...Y^.
    3FB0: 56 51 E8 F5 00 32 C9 8D 7C 08 3B 1D 74 0C 83 C7  // VQ...2..|.;.t...
    3FC0: 10 FE C1 3A 4C 06 72 F2 33 FF 0B FF 59 5E C3 56  // ...:L.r.3...Y^.V
    3FD0: 51 E8 D6 00 32 C9 8D 7C 08 3B 45 0C 74 0C 83 C7  // Q...2..|.;E.t...
    3FE0: 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3 57  // ...:L.r.3...Y^.W
    3FF0: 50 E8 DB FF 8A C3 8B 5D 02 E8 6E FF 58 5F C3 53  // P......]..n.X_.S
    4000: 32 C9 B3 01 E8 E8 FF 74 03 8A 4F 02 0A C9 5B C3  // 2......t..O...[.
    4010: 53 32 ED B3 02 E8 D7 FF 74 03 8A 6F 02 0A ED 5B  // S2......t..o...[
    4020: C3 50 57 8B DA E8 68 FF 75 04 33 DB EB 0D B0 14  // .PW...h.u.3.....
    4030: 8B 5D 08 E8 34 FF 74 F2 8B 5F 02 5F 58 C3 66 50  // .]..4.t.._._X.fP
    4040: 53 51 57 8D 1C 66 25 FF FF 00 00 E8 6D 04 8B D8  // SQW..f%.....m...
    4050: E8 3B 00 23 C3 74 31 E8 75 FF 0B FF 74 2A 66 50  // .;.#.t1.u...t*fP
    4060: 66 8B 45 04 8D 5C 0C E8 51 04 66 33 C0 8B 05 8D  // f.E..\..Q.f3....
    4070: 5C 04 E8 46 04 66 58 E8 85 FF E8 93 FF 8D 5C 08  // \..F.fX.......\.
    4080: 66 33 C0 8B C1 E8 33 04 5F 59 5B 66 58 C3 56 E8  // f3....3._Y[fX.V.
    4090: 18 00 8B 44 04 5E C3 56 E8 0F 00 89 44 04 5E C3  // ...D.^.V....D.^.
    40A0: C3 BF 66 03 8B 3D 8B 7D 0C C3 BE 66 03 8B 34 8B  // ..f..=.}...f..4.
    40B0: 74 30 C3 1E 0E 1F BF 66 03 8B 3D 8B 7D 0E 83 C7  // t0.....f..=.}...
    40C0: 04 1F C3 BE 66 03 8B 34 8B 74 10 C3 BF 66 03 8B  // ....f..4.t...f..
    40D0: 3D 8B 7D 26 83 C7 04 C3 BE 66 03 8B 34 8B 74 1A  // =.}&.....f..4.t.
    40E0: C3 BE 66 03 8B 34 8B 74 3A C3 BF 66 03 8B 3D 8B  // ..f..4.t:..f..=.
    40F0: 7D 0A 83 C7 04 B9 07 00 C3 E8 01 00 CB 83 EC 06  // }...............
    4100: 8B EC 89 46 00 66 33 C0 C6 46 04 00 89 46 02 06  // ...F.f3..F...F..
    4110: 52 8A D3 8B C5 E8 B1 16 5A 07 83 C4 06 C3 E8 80  // R.......Z.......
    4120: FF 66 F7 45 10 01 00 00 00 C3 50 E8 73 FF B8 01  // .f.E......P.s...
    4130: 00 09 45 10 58 C3 E8 68 FF 88 45 10 C3 66 53 83  // ..E.X..h..E..fS.
    4140: EC 48 8B EC 66 89 5E 00 66 89 4E 04 8C D0 66 C1  // .H..f.^.f.N...f.
    4150: E0 10 8B C4 BB 00 00 E8 A3 FF 83 C4 48 66 5B E8  // ............Hf[.
    4160: 49 01 E8 83 01 E8 0E 00 BB 04 00 E8 8E FD 66 C1  // I.............f.
    4170: E8 10 E8 C1 FF C3 83 EC 0C 8B EC 8C D0 66 C1 E0  // .............f..
    4180: 10 8B C4 BB 16 00 E8 74 FF 66 BB 00 00 00 00 83  // .......t.f......
    4190: C4 0C E8 0C FF 66 8B C3 66 C1 E8 08 66 89 45 28  // .....f..f...f.E(
    41A0: 66 8B C3 66 C1 E0 18 66 89 45 2C C3 E8 F2 FE 66  // f..f...f.E,....f
    41B0: 8B 5D 08 66 8B 4D 0C C3 56 E8 25 FF 66 8B 44 08  // .].f.M..V.%.f.D.
    41C0: 5E C3 B0 06 C3 B0 01 C3 B0 06 C3 B0 08 C3 53 66  // ^.............Sf
    41D0: 50 66 33 C0 E8 E4 02 83 C3 04 E2 F8 66 58 5B C3  // Pf3.........fX[.
    41E0: 32 C0 C3 FC E8 74 03 66 C1 CB 10 E8 CD 02 66 C1  // 2....t.f......f.
    41F0: CB 10 66 81 C3 04 00 04 00 E2 E9 C3 FC 66 AD E8  // ..f..........f..
    4200: B9 02 83 C3 04 E2 F6 C3 FC E8 4F 03 66 AB 83 C3  // ..........O.f...
    4210: 04 E2 F6 C3 66 50 B8 64 00 E8 10 00 66 58 C3 66  // ....fP.d....fX.f
    4220: 50 B8 50 C3 D1 E1 E8 03 00 66 58 C3 52 F7 E1 8B  // P.P......fX.R...
    4230: CA E8 40 01 66 53 8B D9 66 C1 E3 10 8B D8 66 B8  // ..@.fS..f.....f.
    4240: 0C AC 05 00 B2 00 66 EF B2 04 66 ED 33 C9 66 03  // ......f...f.3.f.
    4250: D8 73 0A 66 ED 66 A9 00 00 00 80 75 F6 66 ED 66  // .s.f.f.....u.f.f
    4260: 3B C3 73 0C 66 C1 E8 10 3B C1 72 04 8B C8 EB ED  // ;.s.f...;.r.....
    4270: 66 5B 5A C3 66 52 E8 FB 00 66 B8 0C AC 05 00 B2  // f[Z.fR...f......
    4280: 00 66 EF B2 04 66 ED 66 33 D2 66 BB 64 00 00 00  // .f...f.f3.f.d...
    4290: 66 F7 F3 66 5A C3 66 50 53 BB 07 00 E8 5D FC 25  // f..fZ.fPS....].%
    42A0: 00 02 35 00 02 0B C0 5B 66 58 C3 66 51 B3 01 E8  // ..5....[fX.fQ...
    42B0: 68 00 E8 23 FE 66 33 C9 8B 4C 08 66 C1 E0 0A 0B  // h..#.f3..L.f....
    42C0: C9 75 03 B9 00 0C 66 2B C1 E8 0C FE 66 89 44 04  // .u....f+....f.D.
    42D0: 89 4C 08 66 59 C3 56 1E 0E 1F E8 FB FD 66 8B 44  // .L.fY.V......f.D
    42E0: 04 66 C1 E0 0A 1F 5E C3 C3 BE 66 03 8B 34 8B 74  // .f....^...f..4.t
    42F0: 1E 83 C6 04 B9 1C 00 C3 56 E8 C7 FD 8A 6C 33 5E  // ........V....l3^
    4300: C3 56 E8 BE FD 8A 44 24 80 FD 00 74 05 88 6C 33  // .V....D$...t..l3
    4310: 0C 02 88 44 24 5E C3 32 C0 C3 66 53 83 EC 04 8B  // ...D$^.2..fS....
    4320: EC 8C D0 66 C1 E0 10 8B C4 66 89 5E 00 BB 06 00  // ...f.....f.^....
    4330: E8 CA FD 8B EC 66 8B 46 00 83 C4 04 66 5B C3 83  // .....f.F....f[..
    4340: EC 0C 8B EC 8C D0 66 C1 E0 10 8B C4 BB 16 00 E8  // ......f.........
    4350: AB FD 8B EC 66 8B 5E 00 66 8B 4E 00 66 8B 56 08  // ....f.^.f.N.f.V.
    4360: 83 C4 0C C3 66 B8 C8 91 05 00 C3 BF 66 03 8B 3D  // ....f.......f..=
    4370: 8B 7D 12 C3 66 50 8C C8 3D 00 C0 75 0C BA C3 03  // .}..fP..=..u....
    4380: EC 8A F0 0A F6 74 02 EB 0E 53 2E 8B 1E 14 00 B2  // .....t...S......
    4390: 20 E8 D6 00 8A F4 5B 32 D2 66 ED 66 58 C3 2E 8B  //  .....[2.f.fX...
    43A0: 1E 14 00 C3 0B C9 75 1A 4B 74 16 43 3B DA 77 09  // ......u.Kt.C;.w.
    43B0: 8B C8 8B C2 2B D2 F7 F3 91 F7 F3 8B DA 8B D1 2B  // ....+..........+
    43C0: C9 C3 3B CA 72 1A 75 10 3B D8 77 0C 2B C3 8B D8  // ..;.r.u.;.w.+...
    43D0: 2B C9 2B D2 B8 01 00 C3 2B C9 2B DB 93 87 CA C3  // +.+.....+.+.....
    43E0: 55 56 2B F6 8B EE 03 DB 13 C9 72 11 45 3B CA 72  // UV+.......r.E;.r
    43F0: F5 77 04 3B D8 76 EF F8 13 F6 4D 78 20 D1 D9 D1  // .w.;.v....Mx ...
    4400: DB 2B C3 1B D1 F5 72 F0 03 F6 4D 78 0C D1 E9 D1  // .+....r...Mx....
    4410: DB 03 C3 13 D1 73 F1 EB DF 03 C3 13 D1 8B D8 8B  // .....s..........
    4420: CA 8B C6 33 D2 5E 5D C3 93 50 92 0B C0 74 02 F7  // ...3.^]..P...t..
    4430: E2 91 0B C0 74 04 F7 E3 03 C8 58 F7 E3 03 D1 C3  // ....t.....X.....
    4440: 52 66 50 B4 80 8A C7 66 C1 E0 10 8A E3 8A C2 24  // RfP....f.......$
    4450: FC BA F8 0C 66 EF 66 58 5A C3 52 BA FC 0C 66 ED  // ....f.fXZ.R...f.
    4460: 5A C3 52 BA FC 0C 66 EF 5A C3 E8 31 FF 9C FA E8  // Z.R...f.Z..1....
    4470: CE FF E8 E5 FF 9D C3 E8 24 FF 9C FA E8 C1 FF E8  // ........$.......
    4480: E0 FF 9D C3 52 66 53 66 50 E8 06 00 66 58 66 5B  // ....RfSfP...fXf[
    4490: 5A C3 66 C1 E3 10 66 C1 EB 0E E8 D7 FE E8 BF 01  // Z.f...f.........
    44A0: C3 66 50 66 C1 E3 10 66 C1 EB 10 E8 28 FE 66 03  // .fPf...f....(.f.
    44B0: D8 66 81 CB 00 00 00 80 66 58 C3 52 66 53 E8 04  // .f......fX.RfS..
    44C0: 00 66 5B 5A C3 66 50 E8 AA FE E8 D4 FF E8 8F 01  // .f[Z.fP.........
    44D0: 66 58 C3 52 51 66 53 66 50 8A CB 80 E3 FC 80 E1  // fX.RQfSfP.......
    44E0: 03 C0 E1 03 E8 8D FE E8 B7 FF E8 59 01 66 D3 C8  // ...........Y.f..
    44F0: 58 50 66 D3 C0 E8 67 01 66 58 66 5B 59 5A C3 66  // XPf...g.fXf[YZ.f
    4500: 50 51 C0 E1 03 E8 53 00 66 D3 C8 8A C5 66 D3 C0  // PQ....S.f....f..
    4510: E8 A8 FF 59 66 58 C3 66 50 51 C0 E1 03 E8 3B 00  // ...YfX.fPQ....;.
    4520: 66 D3 C8 59 8A E8 66 58 C3 E8 5F 00 C3 E8 44 FE  // f..Y..fX.._...D.
    4530: 66 C1 E3 10 66 C1 EB 0E E8 0B 01 C3 E8 35 FE 66  // f...f........5.f
    4540: C1 E3 02 E8 00 01 C3 52 66 53 E8 04 00 66 5B 5A  // .......RfS...f[Z
    4550: C3 E8 20 FE E8 4A FF E8 EC 00 C3 51 66 52 8A EB  // .. ..J.....QfR..
    4560: 8A CB 80 E1 03 C0 E1 03 80 E3 FC E8 D9 FF 80 F9  // ................
    4570: 00 74 14 66 8B D0 83 C3 04 E8 CB FF 83 EB 04 66  // .t.f...........f
    4580: 92 66 0F AD D0 8A DD 66 5A 59 C3 52 66 53 E8 9C  // .f.....fZY.RfS..
    4590: FF 66 5B 5A C3 52 66 53 E8 A1 FF 66 5B 5A C3 66  // .f[Z.RfS...f[Z.f
    45A0: 50 55 52 66 50 8B EC 8B 56 0C 89 56 08 E8 C4 FD  // PURfP...V..V....
    45B0: B2 00 66 ED 66 89 46 0A 66 58 5A 5D C3 66 50 55  // ..f.f.F.fXZ].fPU
    45C0: 52 66 50 8B EC 8B 56 0C 89 56 08 E8 A6 FD 2E A1  // RfP...V..V......
    45D0: B9 03 B2 18 EF B2 00 66 ED 66 89 46 0A 66 58 5A  // .......f.f.F.fXZ
    45E0: 5D C3 66 50 55 52 8B EC E8 89 FD B2 00 66 8B 46  // ].fPUR.......f.F
    45F0: 0A 66 EF 8B 56 08 89 56 0C 66 8B 46 04 66 89 46  // .f..V..V.f.F.f.F
    4600: 08 5A 5D 66 58 66 58 C3 66 50 52 E8 66 FD B2 18  // .Z]fXfX.fPR.f...
    4610: 66 ED 2E A3 B9 03 5A 66 58 C3 66 52 66 53 E8 53  // f.....ZfX.fRfS.S
    4620: FD 66 81 CB 00 00 00 80 E8 1B 00 66 5B 66 5A C3  // .f.........f[fZ.
    4630: 66 52 66 53 E8 3D FD 66 81 CB 00 00 00 80 E8 1E  // fRfS.=.f........
    4640: 00 66 5B 66 5A C3 66 81 FB FF 00 00 00 77 04 8A  // .f[fZ.f......w..
    4650: D3 EB 09 66 8B C3 B2 00 66 EF B2 04 66 ED C3 66  // ...f....f...f..f
    4660: 81 FB FF 00 00 00 77 04 8A D3 EB 0A 66 93 B2 00  // ......w.....f...
    4670: 66 EF 66 93 B2 04 66 EF C3 C3 C3 55 8B EC 53 51  // f.f...f....U..SQ
    4680: 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28 00 8D 66 FC  // ..&.\.&.L..(..f.
    4690: 59 5B 5D C3 53 51 8B F0 26 8B 5C 24 33 C9 E8 14  // Y[].SQ..&.\$3...
    46A0: 00 59 5B C3 55 8B EC 53 51 8B F0 26 8B 5C 08 26  // .Y[.U..SQ..&.\.&
    46B0: 8B 4C 0A EB D5 52 56 57 C8 06 00 00 8B F0 89 4E  // .L...RVW.......N
    46C0: FE 8C D0 8E C0 26 8B 7C 26 8A 45 01 32 E4 B9 20  // .....&.|&.E.2.. 
    46D0: 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA  // .+..............
    46E0: 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1 D7 E2 FA F7  // .M.2............
    46F0: D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C D0 8E C0 26  // ...&!D.&!|.....&
    4700: 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B C1 8B C8 66  // .|&.M.2.. .+...f
    4710: C7 46 FA FF FF FF FF E3 08 D1 6E FC D1 5E FA E2  // .F........n..^..
    4720: F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3 06 D1 EA D1  // ..M.2....V......
    4730: D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03 32 ED E3 06  // ...#F.#V..M.2...
    4740: D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09 54 1E C9 5F  // ......&.D.&.T.._
    4750: 5E 5A C3 55 8B EC 53 51 52 57 50 8B D8 26 8B 7F  // ^Z.U..SQRWP..&..
    4760: 26 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0  // &.E.2.. .+......
    4770: E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88 4E F6 C6 46  // .........M..N..F
    4780: F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7 E2 FA 26  // .....N.........&
    4790: 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A E9 F1 FE 53  // .G.&....f._Z...S
    47A0: 51 52 57 8B D8 8C D0 8E C0 26 8B 77 26 8A 4C 01  // QRW......&.w&.L.
    47B0: 32 ED B8 20 00 2B C1 8B C8 BE FF FF 8B D6 E3 06  // 2.. .+..........
    47C0: D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D 02 32 ED 8B  // ......&..&.M.2..
    47D0: C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47  // .............&!G
    47E0: 1C 26 21 57 1E 5F E9 CC 05 53 56 8B D8 8C D2 8E  // .&!W._...SV.....
    47F0: C2 26 8B 77 26 80 3C 00 74 73 80 3C 01 75 58 8A  // .&.w&.<.ts.<.uX.
    4800: 44 01 32 E4 26 83 7F 1E 00 75 4C 26 3B 47 1C 75  // D.2.&....uL&;G.u
    4810: 46 8A 04 6B F0 03 8A 84 48 A4 26 01 47 26 8C D0  // F..k....H.&.G&..
    4820: 8E C0 26 8B 77 26 80 3C 09 74 17 8A 04 32 E4 6B  // ..&.w&.<.t...2.k
    4830: F0 03 8B C3 FF 94 46 A4 26 8B 77 26 8A 04 32 E4  // ......F.&.w&..2.
    4840: EB D1 8B 44 01 26 29 47 26 26 FF 47 26 26 8B 47  // ...D.&)G&&.G&&.G
    4850: 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A 04 32 E4 6B  // .&.w...&.w&..2.k
    4860: F0 03 8A 84 48 A4 26 01 47 26 E9 80 FF 33 C0 33  // ....H.&.G&...3.3
    4870: F6 8B D6 5E 5B C3 53 51 52 56 8B D8 8D 77 35 26  // ...^[.SQRV...w5&
    4880: 8B 54 02 26 89 57 14 26 C7 47 16 00 00 8B F0 26  // .T.&.W.&.G.....&
    4890: 8B 47 20 33 D2 26 01 47 14 26 11 54 16 8C D1 8E  // .G 3.&.G.&.T....
    48A0: C1 26 F6 47 2F 06 0F 85 0A 05 26 80 7F 34 00 75  // .&.G/.....&..4.u
    48B0: 22 26 8B 77 16 26 0B 77 14 75 10 26 D1 67 08 26  // "&.w.&.w.u.&.g.&
    48C0: D1 57 0A 26 D1 67 08 26 D1 57 0A 8B C3 E8 79 11  // .W.&.g.&.W....y.
    48D0: E9 E1 04 26 8A 47 34 32 E4 05 80 00 99 26 89 47  // ...&.G42.....&.G
    48E0: 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7 04 53 56 8B  // .&.W.........SV.
    48F0: D8 8D 77 35 26 8A 44 02 32 E4 C1 E0 02 26 8B 37  // ..w5&.D.2....&.7
    4900: 26 8B 34 03 F0 26 8B 47 08 26 8B 5F 0A 26 89 04  // &.4..&.G.&._.&..
    4910: 26 89 5C 02 5E 5B C3 53 52 56 8B D8 8C D0 8D 77  // &.\.^[.SRV.....w
    4920: 35 8E C0 26 8A 54 02 80 FA 40 73 21 26 8B 77 02  // 5..&.T...@s!&.w.
    4930: 32 F6 C1 E2 02 26 8B 74 04 03 F2 26 8B 57 08 26  // 2....&.t...&.W.&
    4940: 8B 47 0A 26 89 14 26 89 44 02 E9 7F 00 80 FA 41  // .G.&..&.D......A
    4950: 75 12 26 8B 47 08 26 8B 57 0A 26 89 47 10 26 89  // u.&.G.&.W.&.G.&.
    4960: 57 12 EB 68 80 FA 40 75 12 26 8B 47 08 26 8B 57  // W..h..@u.&.G.&.W
    4970: 0A 26 89 47 0C 26 89 57 0E EB 51 80 FA 42 75 0A  // .&.G.&.W..Q..Bu.
    4980: 26 8B 47 08 26 89 47 22 EB 42 80 FA 43 75 0A 26  // &.G.&.G".B..Cu.&
    4990: 8A 47 08 26 88 47 33 EB 33 80 FA 46 75 12 26 8B  // .G.&.G3.3..Fu.&.
    49A0: 57 08 26 8B 47 0A 26 89 57 18 26 89 47 1A EB 1C  // W.&.G.&.W.&.G...
    49B0: 80 FA 47 75 0A 26 8B 47 08 26 89 47 24 EB 0D 80  // ..Gu.&.G.&.G$...
    49C0: FA 48 75 08 26 8B 47 08 26 89 47 20 5E 5A 5B C3  // .Hu.&.G.&.G ^Z[.
    49D0: 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 26 89 47  // SV...w5&.D.2.&.G
    49E0: 14 26 C7 47 16 00 00 5E 5B C3 53 56 8B D8 26 8B  // .&.G...^[.SV..&.
    49F0: 77 02 26 8B 74 02 8A 04 32 E4 26 89 47 14 26 C7  // w.&.t...2.&.G.&.
    4A00: 47 16 00 00 26 8B 5F 02 26 FF 47 02 5E 5B C3 53  // G...&._.&.G.^[.S
    4A10: 56 8B D8 26 8B 77 02 26 8B 74 02 8B 34 26 89 77  // V..&.w.&.t..4&.w
    4A20: 14 26 C7 47 16 00 00 26 8B 5F 02 26 83 47 02 02  // .&.G...&._.&.G..
    4A30: 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B  // ^[.SV..&.w.&.t..
    4A40: 04 8B 74 02 26 89 47 14 26 89 77 16 26 8B 5F 02  // ..t.&.G.&.w.&._.
    4A50: 26 83 47 02 04 5E 5B C3 53 52 56 8B D8 E8 70 FF  // &.G..^[.SRV...p.
    4A60: 8B F3 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA  // ..&.G.&.W.......
    4A70: D1 D8 26 01 47 14 26 11 54 16 8B C3 E8 2B 10 E9  // ..&.G.&.T....+..
    4A80: 4A FF 53 8B D8 26 8B 5F 02 26 FF 47 02 5B C3 53  // J.S..&._.&.G.[.S
    4A90: 8B D8 26 8B 5F 02 26 83 47 02 02 5B C3 53 56 8B  // ..&._.&.G..[.SV.
    4AA0: D8 E8 6B FF 8B F3 26 8B 57 20 33 C0 26 01 57 14  // ..k...&.W 3.&.W.
    4AB0: 26 11 44 16 8C D2 8E C2 26 8B 47 2E 32 C0 80 E4  // &.D.....&.G.2...
    4AC0: 06 3D 00 02 75 07 32 E4 33 D2 5E 5B C3 26 8B 47  // .=..u.2.3.^[.&.G
    4AD0: 2E 32 C0 80 E4 06 3D 00 04 74 EB 26 80 7F 34 00  // .2....=..t.&..4.
    4AE0: 75 08 8B C3 E8 2F 0F 5E 5B C3 26 8A 47 34 32 E4  // u..../.^[.&.G42.
    4AF0: 26 89 47 1C 26 C7 47 1E 00 00 8B C3 E8 EA FC 5E  // &.G.&.G........^
    4B00: 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14 C1 E0 02 26  // [.S.....&.G....&
    4B10: 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B 57 02 5B C3  // ..&....&..&.W.[.
    4B20: 26 4B 1B 4B 31 4B 80 4B 37 4B 4F 4B 69 4B 74 4B  // &K.K1K.K7KOKiKtK
    4B30: 7A 4B 53 51 56 8B D8 E8 B0 FE 8C D2 8E C2 26 83  // zKSQV.........&.
    4B40: 7F 16 00 75 22 26 83 7F 14 40 73 1B 26 8B 77 02  // ...u"&...@s.&.w.
    4B50: 26 8B 5F 14 C1 E3 02 26 8B 44 04 03 D8 26 8B 07  // &._....&.D...&..
    4B60: 26 8B 57 02 E9 7B 05 26 8B 77 14 26 8B 47 16 83  // &.W..{.&.w.&.G..
    4B70: C6 C0 83 D0 FF 75 71 83 FE 08 77 6C 03 F6 2E FF  // .....uq...wl....
    4B80: A4 B8 4A 26 8B 47 10 26 8B 57 12 E9 54 05 26 8B  // ..J&.G.&.W..T.&.
    4B90: 47 0C 26 8B 57 0E E9 49 05 26 8B 47 22 EB 4B 26  // G.&.W..I.&.G".K&
    4BA0: 8A 4F 33 32 ED BB 01 00 33 D2 E3 06 D1 E3 D1 D2  // .O32....3.......
    4BB0: E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32 ED B8 01 00  // .....+.&.O32....
    4BC0: 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 E9 11  // 3...............
    4BD0: 05 26 8B 47 18 26 8B 57 1A E9 06 05 26 8B 47 24  // .&.G.&.W....&.G$
    4BE0: EB 08 26 8B 47 20 EB 02 33 C0 33 D2 E9 F3 04 53  // ..&.G ..3.3....S
    4BF0: 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18 26 8B 57 1A  // V.......&.G.&.W.
    4C00: D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16  // ........&.G.&.T.
    4C10: 8B C3 E8 16 0E 5E 5B C3 33 C0 33 D2 C3 53 56 8B  // .....^[.3.3..SV.
    4C20: D8 E8 EB FD 26 8B 77 14 26 03 77 22 8B 04 8B 54  // ....&.w.&.w"...T
    4C30: 02 5E 5B C3 53 8B D8 26 C6 47 2B 04 E8 AB FD 26  // .^[.S..&.G+....&
    4C40: 8B 47 14 26 8B 57 16 5B C3 53 8B D8 26 C6 47 2B  // .G.&.W.[.S..&.G+
    4C50: 01 E8 BB FD EB E9 53 8B D8 26 C6 47 2B 00 E8 D2  // ......S..&.G+...
    4C60: FD EB DC 53 8B D8 83 C3 35 26 8A 5F 01 C0 EB 03  // ...S....5&._....
    4C70: 80 E3 07 32 FF 03 DB FF 97 D6 A3 5B C3 53 52 56  // ...2.......[.SRV
    4C80: 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // ..&.G,2.........
    4C90: F2 A3 26 89 47 08 26 89 57 0A 26 8A 47 2D 32 E4  // ..&.G.&.W.&.G-2.
    4CA0: 8B F0 03 F0 8B C3 FF 94 0A A4 26 89 47 04 26 89  // ..........&.G.&.
    4CB0: 57 06 E9 17 FD 53 51 56 8B D8 26 8A 4F 2B 32 ED  // W....SQV..&.O+2.
    4CC0: 8B F1 8A 8C 3A A4 E3 0A 26 D1 6F 06 26 D1 5F 04  // ....:...&.o.&._.
    4CD0: E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 1A  // ..&.O+2.........
    4CE0: A4 8B B4 1C A4 26 21 4F 04 26 21 77 06 26 8A 4F  // .....&!O.&!w.&.O
    4CF0: 2A 32 ED 8B F1 8A 8C 42 A4 E3 0A 26 D1 67 04 26  // *2.....B...&.g.&
    4D00: D1 57 06 E2 F6 26 8B 4F 08 26 8B 77 0A 26 89 4F  // .W...&.O.&.w.&.O
    4D10: 14 26 89 77 16 E9 CA 03 53 51 52 56 57 8B D8 8C  // .&.w....SQRVW...
    4D20: D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A  // ...&.G+2......&.
    4D30: 47 2A 8B F8 8A 8D 42 A4 32 ED 8B 84 1A A4 8B 94  // G*....B.2.......
    4D40: 1C A4 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21  // ..............&!
    4D50: 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C  // G.&!W.&.G*2.....
    4D60: 42 A4 32 ED E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6  // B.2...&.o.&._...
    4D70: 26 8A 47 2B 8B F0 C1 E6 02 8B 84 1A A4 8B 94 1C  // &.G+............
    4D80: A4 26 21 47 08 26 21 57 0A 26 8A 47 2A 32 E4 8B  // .&!G.&!W.&.G*2..
    4D90: F0 8A 8C 42 A4 32 ED E3 0A 26 D1 67 08 26 D1 57  // ...B.2...&.g.&.W
    4DA0: 0A E2 F6 26 8B 47 14 26 8B 57 16 26 09 47 08 26  // ...&.G.&.W.&.G.&
    4DB0: 09 57 0A 5F 5E 5A 59 5B C3 53 51 56 8B D8 26 8A  // .W._^ZY[.SQV..&.
    4DC0: 4F 2B 32 ED 8B F1 8A 8C 3A A4 E3 0A 26 D1 6F 06  // O+2.....:...&.o.
    4DD0: 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6  // &._...&.O+2.....
    4DE0: 02 8B 8C 1A A4 8B B4 1C A4 26 21 4F 04 26 21 77  // .........&!O.&!w
    4DF0: 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 42 A4 E3 0A 26  // .&.O*2.....B...&
    4E00: D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B 32 ED 8B  // .o.&._...&.O+2..
    4E10: F1 C1 E6 02 8B 8C 1A A4 8B B4 1C A4 26 21 4F 08  // ............&!O.
    4E20: 26 21 77 0A E9 BB 02 51 52 57 8B D8 8C D0 8E C0  // &!w....QRW......
    4E30: 26 80 7F 2B 00 74 1A 26 8A 47 2C 32 E4 8B F0 03  // &..+.t.&.G,2....
    4E40: F0 8B C3 FF 94 F2 A3 26 89 47 08 26 89 57 0A EB  // .......&.G.&.W..
    4E50: 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 FE  // .&.G,2..........
    4E60: A3 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 0A  // .&.G-2..........
    4E70: A4 26 89 47 04 26 89 57 06 8C D2 8E C2 26 80 7F  // .&.G.&.W.....&..
    4E80: 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26  // +.tJ&.G+2......&
    4E90: 8A 47 2A 8B F8 8A 8D 42 A4 32 ED 8B 84 1A A4 8B  // .G*....B.2......
    4EA0: 94 1C A4 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26  // ...............&
    4EB0: 21 47 08 26 21 57 0A 8B C3 E8 F9 FD 26 8B 47 04  // !G.&!W......&.G.
    4EC0: 26 8B 57 06 26 09 47 08 26 09 57 0A EB 10 26 8B  // &.W.&.G.&.W...&.
    4ED0: 57 04 26 8B 47 06 26 89 57 08 26 89 47 0A 26 8A  // W.&.G.&.W.&.G.&.
    4EE0: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 E6 A3 5F 5A  // G,2..........._Z
    4EF0: 59 C3 53 51 52 56 57 8B D8 26 8A 47 2A 32 E4 8B  // Y.SQRVW..&.G*2..
    4F00: F0 8A 8C 42 A4 32 ED E3 0A 26 D1 67 04 26 D1 57  // ...B.2...&.g.&.W
    4F10: 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1  // .......&.G+2....
    4F20: E6 02 26 8A 47 2A 8B F8 8A 8D 42 A4 32 ED 8B 84  // ..&.G*....B.2...
    4F30: 1A A4 8B 94 1C A4 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // ................
    4F40: F7 D2 26 09 47 04 26 09 57 06 26 8B 47 04 26 8B  // ..&.G.&.W.&.G.&.
    4F50: 57 06 26 21 47 08 26 21 57 0A E9 56 FE 55 8B EC  // W.&!G.&!W..V.U..
    4F60: 51 52 50 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // QRP..&.G,2......
    4F70: C3 FF 94 F2 A3 26 89 47 08 26 89 57 0A 26 8A 47  // .....&.G.&.W.&.G
    4F80: 2B 88 46 FA 8B C3 E8 DA FC 26 89 47 04 26 89 57  // +.F......&.G.&.W
    4F90: 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B C3 FF 94 0A  // .&.O-2..........
    4FA0: A4 26 89 47 14 26 89 57 16 8B C3 E8 44 FF 8A 46  // .&.G.&.W....D..F
    4FB0: FA 32 E4 8B F0 8A 8C 3A A4 E3 0A 26 D1 6F 16 26  // .2.....:...&.o.&
    4FC0: D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B F2 C1 E6 02  // ._...&.W+2......
    4FD0: 8B 84 1A A4 8B 94 1C A4 26 21 47 14 26 21 57 16  // ........&!G.&!W.
    4FE0: 26 8A 47 2A 32 E4 8B F0 8A 8C 42 A4 32 ED E3 0A  // &.G*2.....B.2...
    4FF0: 26 D1 67 14 26 D1 57 16 E2 F6 26 8B 47 14 26 8B  // &.g.&.W...&.G.&.
    5000: 57 16 26 09 47 08 26 09 57 0A 26 8A 47 2C 32 E4  // W.&.G.&.W.&.G,2.
    5010: 8B F0 03 F0 8B C3 FF 94 E6 A3 8D 66 FC 5A 59 5D  // ...........f.ZY]
    5020: C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32 ED 8B F1 8A  // .Q...V.&.O+2....
    5030: 8C 3A A4 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 8B  // .:...&.o.&._....
    5040: C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3  // ....&.O,2.......
    5050: FF 94 E6 A3 59 C3 8B D8 E8 22 FC 8B C3 E8 55 FC  // ....Y...."....U.
    5060: 26 8B 47 04 26 8B 77 06 26 09 47 08 26 09 77 0A  // &.G.&.w.&.G.&.w.
    5070: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 E6 A3  // &.G,2...........
    5080: C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28 FC 26 8B 47  // .SV........(.&.G
    5090: 04 26 8B 77 06 26 31 47 08 26 31 77 0A 26 8A 47  // .&.w.&1G.&1w.&.G
    50A0: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 E6 A3 5E 5B C3  // ,2...........^[.
    50B0: 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB 26 8B 4F  // SQV..........&.O
    50C0: 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 8B C3 E8  // ...&.g.&.W......
    50D0: 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94  // F.&.O,2.........
    50E0: E6 A3 5E 59 5B C3 53 51 56 8B D8 E8 8F FB 8B C3  // ..^Y[.SQV.......
    50F0: E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F  // ...&.O...&.o.&._
    5100: 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B C3 E8 A5 FB  // .....R...r......
    5110: 8B F3 26 8B 47 04 26 8B 57 06 26 01 47 08 26 11  // ..&.G.&.W.&.G.&.
    5120: 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32 E4 8B F0 03  // T......&.G,2....
    5130: F0 8B C3 FF 94 E6 A3 5A C3 52 8B D8 E8 3E FB 8B  // .......Z.R...>..
    5140: C3 E8 71 FB 8B F3 26 8B 47 04 26 8B 57 06 26 29  // ..q...&.G.&.W.&)
    5150: 47 08 26 19 54 0A EB CA 51 52 8B F0 E8 1E FB 8B  // G.&.T...QR......
    5160: C6 E8 55 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04  // ..U.&.D.&.T.&.\.
    5170: 26 8B 4C 06 E8 B1 F2 26 89 44 0C 26 89 54 0E 5A  // &.L....&.D.&.T.Z
    5180: 59 C3 52 8B D0 E8 F5 FA 8B C2 E8 2C FC 8B C2 E8  // Y.R........,....
    5190: 5C 08 5A C3 51 52 57 8B F0 E8 E1 FA 8B C6 E8 18  // \.Z.QRW.........
    51A0: FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C  // .&.D.&.T.&.\.&.L
    51B0: 06 E8 F0 F1 26 89 44 0C 26 89 54 0E 8C D7 8E C7  // ....&.D.&.T.....
    51C0: 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06  // &.D.&.T.&.\.&.L.
    51D0: E8 D1 F1 26 89 5C 10 26 89 4C 12 E9 10 FD 52 8B  // ...&.\.&.L....R.
    51E0: D0 E8 99 FA 8B C2 E8 D0 FB 8B C2 E8 D3 07 5A C3  // ..............Z.
    51F0: 51 52 8B D8 E8 86 FA 8B C3 E8 BD FB 8C D1 8E C1  // QR..............
    5200: 26 8B 47 08 26 8B 57 0A 26 3B 57 06 75 0E 26 3B  // &.G.&.W.&;W.u.&;
    5210: 47 04 75 08 26 C6 47 30 01 5A 59 C3 8B D0 26 8B  // G.u.&.G0.ZY...&.
    5220: 47 0A 26 3B 47 06 72 08 75 0A 26 3B 57 04 73 04  // G.&;G.r.u.&;W.s.
    5230: 33 C0 EB 03 B8 02 00 26 88 47 30 5A 59 C3 51 52  // 3......&.G0ZY.QR
    5240: 57 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // W..&.G,2........
    5250: 94 F2 A3 26 89 47 08 26 89 57 0A 8C D0 8E C0 26  // ...&.G.&.W.....&
    5260: 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D 3A A4  // .G+2..........:.
    5270: 32 ED 8B 84 1A A4 8B 94 1C A4 E3 06 D1 E0 D1 D2  // 2...............
    5280: E2 FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A E9 4D  // ......&!G.&!W..M
    5290: FC 55 8B EC 51 52 57 83 EC 06 8B D8 26 8A 47 2B  // .U..QRW.....&.G+
    52A0: 32 E4 8B F0 C1 E6 02 8B F8 8A 8D 3A A4 32 ED 8B  // 2..........:.2..
    52B0: 84 1A A4 89 46 F4 8B 84 1C A4 89 46 F6 E3 08 D1  // ....F......F....
    52C0: 66 F4 D1 56 F6 E2 F8 8B 7E F4 8B 46 F6 89 46 F8  // f..V....~..F..F.
    52D0: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 F2 A3  // &.G,2...........
    52E0: 26 89 47 08 26 89 57 0A 8B C3 E8 47 F9 26 89 47  // &.G.&.W....G.&.G
    52F0: 04 26 89 57 06 8B C7 F7 D0 8B 56 F6 F7 D2 26 23  // .&.W......V...&#
    5300: 47 08 26 23 57 0A 26 89 47 14 26 89 57 16 26 21  // G.&#W.&.G.&.W.&!
    5310: 7F 08 8B 46 F6 26 21 47 0A 8C D1 8D 77 35 8E C1  // ...F.&!G....w5..
    5320: 26 80 3C 19 73 12 26 8B 4F 04 E3 0A 26 D1 67 08  // &.<.s.&.O...&.g.
    5330: 26 D1 57 0A E2 F6 EB 10 26 8B 4F 04 E3 0A 26 D1  // &.W.....&.O...&.
    5340: 6F 0A 26 D1 5F 08 E2 F6 26 21 7F 08 8B 46 F8 26  // o.&._...&!...F.&
    5350: 21 47 0A 26 8B 57 14 26 8B 47 16 26 09 57 08 26  // !G.&.W.&.G.&.W.&
    5360: 09 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // .G.&.G,2........
    5370: 94 E6 A3 8D 66 FA 5F E9 A3 FC 52 8B D8 E8 FD F8  // ....f._...R.....
    5380: 8B C3 E8 34 FA 26 8B 47 08 26 8B 57 0A 26 85 57  // ...4.&.G.&.W.&.W
    5390: 06 75 06 26 85 47 04 74 05 B8 03 00 EB 03 B8 01  // .u.&.G.t........
    53A0: 00 26 88 47 30 5A C3 53 51 52 56 8B D8 26 8A 4F  // .&.G0Z.SQRV..&.O
    53B0: 2D 32 ED 8B F1 03 F1 FF 94 0A A4 26 89 47 04 26  // -2.........&.G.&
    53C0: 89 57 06 26 8A 47 2B 32 E4 8B F0 8A 8C 3A A4 E3  // .W.&.G+2.....:..
    53D0: 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 47 2B 8B  // .&.o.&._...&.G+.
    53E0: F0 C1 E6 02 8B 84 1A A4 8B 94 1C A4 26 21 47 04  // ............&!G.
    53F0: 26 21 57 06 E9 BD F9 52 8B D8 E8 AA FF 26 8B 47  // &!W....R.....&.G
    5400: 04 26 8B 57 06 26 89 47 18 26 89 57 1A 5A C3 51  // .&.W.&.G.&.W.Z.Q
    5410: 52 8B D8 E8 91 FF 8C D0 8E C0 26 8B 77 02 26 8B  // R.........&.w.&.
    5420: 74 02 81 3C 5A 5A 74 5B 26 8B 77 02 26 8B 74 02  // t..<ZZt[&.w.&.t.
    5430: 80 3C 63 75 E1 26 8B 77 02 26 FF 44 02 8B C3 E8  // .<cu.&.w.&.D....
    5440: 21 F8 26 89 47 08 26 89 57 0A 8B C3 E8 FA F7 26  // !.&.G.&.W......&
    5450: 89 47 14 26 89 57 16 8C D1 8E C1 26 8B 57 04 26  // .G.&.W.....&.W.&
    5460: 8B 47 06 26 3B 47 0A 75 AD 26 3B 57 08 75 A7 26  // .G.&;G.u.&;W.u.&
    5470: 8B 77 02 26 8B 04 26 03 47 14 8B DE 26 89 47 02  // .w.&..&.G...&.G.
    5480: 5A 59 C3 26 8B 5F 02 26 83 47 02 02 5A 59 C3 52  // ZY.&._.&.G..ZY.R
    5490: 57 8B D8 8C D0 8E C0 26 8B 77 02 26 8B 74 02 8A  // W......&.w.&.t..
    54A0: 54 01 84 D2 75 08 26 C7 47 22 00 00 EB 2F 80 FA  // T...u.&.G".../..
    54B0: FF 75 14 26 8B 77 02 26 8B 3F 26 8B 34 26 2B 75  // .u.&.w.&.?&.4&+u
    54C0: 02 26 89 77 22 EB 16 26 8B 07 E8 E3 02 8B F0 8A  // .&.w"..&........
    54D0: C2 32 E4 03 C0 03 F0 8B 04 26 89 47 22 26 8B 5F  // .2.......&.G"&._
    54E0: 02 26 83 47 02 02 5F 5A C3 8B D8 26 80 67 2F F9  // .&.G.._Z...&.g/.
    54F0: 26 8B 77 02 26 8B 74 02 8A 44 01 26 88 47 34 26  // &.w.&.t..D.&.G4&
    5500: 8B 5F 02 26 83 47 02 03 C3 8B D8 26 8B 77 02 26  // ._.&.G.....&.w.&
    5510: 8B 74 02 8B 74 01 26 89 77 20 EB E3 53 8B D8 26  // .t..t.&.w ..S..&
    5520: 8A 47 2C 32 E4 24 03 26 80 67 2F F9 C1 E0 09 26  // .G,2.$.&.g/....&
    5530: 09 47 2E E9 4F F5 8B D8 26 8B 77 02 26 8B 74 02  // .G..O...&.w.&.t.
    5540: 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B  // .D.2.&.G.&.G....
    5550: C3 E8 40 04 26 8B 5F 02 26 83 47 02 02 C3 8B D8  // ..@.&._.&.G.....
    5560: 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47  // &.w.&.t..D.2.&.G
    5570: 04 26 C7 47 06 00 00 8B C3 E8 08 04 EB D6 53 56  // .&.G..........SV
    5580: 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26  // ..&.w.&.t..D.2.&
    5590: 89 47 04 26 C7 47 06 00 00 8B C3 E8 06 04 E9 86  // .G.&.G..........
    55A0: F4 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01  // .SV..&.w.&.t..D.
    55B0: 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 F0  // 2.&.G.&.G.......
    55C0: 03 E9 63 F4 53 56 8B D8 26 8B 77 02 8B DE 26 8B  // ..c.SV..&.w...&.
    55D0: 5F 02 8B 5F 01 83 C3 03 26 01 5C 02 5E 5B C3 51  // _.._....&.\.^[.Q
    55E0: 52 8B D8 26 8B 77 02 26 83 44 02 02 26 8B 07 E8  // R..&.w.&.D..&...
    55F0: A0 01 8B C8 26 8B 77 28 8A 44 01 32 E4 03 C0 8B  // ....&.w(.D.2....
    5600: F1 03 F0 83 3C 00 74 4F 26 8B 77 28 8A 54 01 32  // ....<.tO&.w(.T.2
    5610: F6 8B C3 E8 B0 01 26 88 47 31 26 8B 77 02 26 8B  // ......&.G1&.w.&.
    5620: 34 8B 44 04 C1 E8 08 32 E4 24 7F C1 E8 02 32 E4  // 4.D....2.$....2.
    5630: 24 1F 26 80 67 2F 07 C1 E0 0B 26 09 47 2E 26 8B  // $.&.g/....&.G.&.
    5640: 37 26 8B 47 2E C1 E8 0B C1 E0 02 26 01 04 26 C6  // 7&.G.......&..&.
    5650: 47 32 01 26 89 4F 28 5A 59 C3 53 8B D8 26 C6 47  // G2.&.O(ZY.S..&.G
    5660: 32 82 5B C3 57 8B D8 8C D6 8E C6 26 80 7F 2C 05  // 2.[.W......&..,.
    5670: 74 0A 26 8A 47 2C 26 3A 47 30 75 1E 26 8B 77 02  // t.&.G,&:G0u.&.w.
    5680: 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7  // &.t.&...&.=.t...
    5690: 26 8B 5F 02 26 89 77 02 5F C3 26 8B 5F 02 26 83  // &._.&.w._.&._.&.
    56A0: 47 02 03 5F C3 53 56 57 8B D8 8C D6 8E C6 26 80  // G.._.SVW......&.
    56B0: 7F 30 01 74 0A 26 8A 47 30 26 3A 47 2C 75 20 26  // .0.t.&.G0&:G,u &
    56C0: 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74  // .w.&.t.&...&.=.t
    56D0: 01 03 F7 26 8B 5F 02 26 89 77 02 5F 5E 5B C3 26  // ...&._.&.w._^[.&
    56E0: 8B 5F 02 26 83 47 02 03 EB F1 53 56 57 8B D8 8C  // ._.&.G....SVW...
    56F0: D0 8E C0 26 80 7F 30 01 74 E5 EB C3 55 8B EC 53  // ...&..0.t...U..S
    5700: 51 52 57 8B D8 26 8B 77 02 26 8B 74 02 8A 04 26  // QRW..&.w.&.t...&
    5710: C6 47 3D 00 8C D1 8E C1 26 80 7F 3D 08 73 20 26  // .G=.....&..=.s &
    5720: 8B 77 02 26 8A 57 3D 32 F6 26 8B 7C 02 03 FA 8B  // .w.&.W=2.&.|....
    5730: F3 03 F2 8A 15 26 88 54 35 26 FE 47 3D EB D5 26  // .....&.T5&.G=..&
    5740: 8B 7F 02 8A D0 32 F6 8B F2 C1 E6 02 8A 94 67 A4  // .....2........g.
    5750: 26 01 55 02 26 8B 7F 28 8A 55 01 80 E2 07 26 88  // &.U.&..(.U....&.
    5760: 57 2D 26 8B 7F 28 8A 55 01 C0 EA 03 80 E2 07 26  // W-&..(.U.......&
    5770: 88 57 2B 26 8B 7F 28 8A 55 01 C0 EA 06 26 88 57  // .W+&..(.U....&.W
    5780: 2A 8A 94 66 A4 26 88 57 2C 8D 66 F8 5F 5A 59 5B  // *..f.&.W,.f._ZY[
    5790: 5D C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03  // ].SV..&.w....tH.
    57A0: F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0 04 5E 5B C3  // ....t........^[.
    57B0: 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0 8B  // SV..&.w....tH...
    57C0: D8 8B 74 20 EB E0 8A C2 C3 16 07 55 8B EC 53 51  // ..t .......U..SQ
    57D0: 56 57 83 EC 40 8B F8 89 46 B8 E8 D3 FF 8B D8 89  // VW..@...F.......
    57E0: 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89 5E DE 83 46  // F.&.E.._....^..F
    57F0: DE 04 8B C7 E8 9B FF 89 46 E0 32 F6 8D 46 B8 E8  // ........F.2..F..
    5800: C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03 DA 83 3F 00  // ....2....^....?.
    5810: 0F 84 65 01 88 46 E9 80 66 E7 F9 C6 46 EC 00 C7  // ..e..F..f...F...
    5820: 46 D8 00 00 66 C7 46 D0 00 00 00 00 C7 46 F6 00  // F...f.F......F..
    5830: 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C 00 8A 56 E9  // ..F....<......V.
    5840: 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83 3F 00 74 75  // ..2....^....?.tu
    5850: 26 8B 45 02 8B 1F 03 D8 8B 47 04 32 E4 8B C8 83  // &.E......G.2....
    5860: C1 09 32 ED 80 E1 FE 83 F9 00 74 07 D1 E9 33 C0  // ..2.......t...3.
    5870: 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0 74 41 83 C0  // P.......F...tA..
    5880: 08 26 89 47 04 8A C2 32 E4 03 C0 8B 5E E0 03 D8  // .&.G...2....^...
    5890: 26 8B 45 02 03 07 8B 5E BA 26 89 07 8B 5E BA 26  // &.E....^.&...^.&
    58A0: 8B 07 83 C0 06 26 89 47 02 8B 5E BA 8B 76 F6 26  // .....&.G..^..v.&
    58B0: 89 77 06 8B 5E BA 89 5E F6 C6 46 EA 00 EB 0A C6  // .w..^..^..F.....
    58C0: 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA 32 E4 83 F8  // F.....F...F.2...
    58D0: 10 0F 8F 99 00 88 66 EA 8A 46 EA 32 E4 85 C0 0F  // ......f..F.2....
    58E0: 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B 5F 02 89 5E  // ......^...&._..^
    58F0: E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75 4A C6 46 EA  // ..^.&._..?[uJ.F.
    5900: 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B 5E BA 26 8B  // ..^.&._..^..^.&.
    5910: 1F 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE  // ..G.2......2....
    5920: 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC 26 8B 1F 8B  // ...^..^...t.&...
    5930: 47 04 C1 E8 08 32 E4 24 7F C1 E8 02 C1 E0 02 8B  // G....2.$........
    5940: 5E B8 26 29 07 EB 91 8D 46 B8 E8 AF FD 8A D0 8D  // ^.&)....F.......
    5950: 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02 8D 46 B8 FF  // F......2.....F..
    5960: 97 64 A4 E9 72 FF 83 7E F6 00 0F 85 C9 FE 80 7E  // .d..r..~.......~
    5970: EA 10 74 05 8A 46 EA EB 02 32 C0 8D 66 F8 5F 5E  // ..t..F...2..f._^
    5980: E9 0B FE C3 53 51 8B D8 26 8A 4F 04 32 ED E8 83  // ....SQ..&.O.2...
    5990: E8 59 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 7E  // .Y[.SQ..&.O.2..~
    59A0: E8 59 5B C3 53 8B D8 26 8A 47 04 32 E4 E6 80 5B  // .Y[.S..&.G.2...[
    59B0: C3 53 51 8B D8 26 8A 4F 04 32 ED E8 60 E3 59 5B  // .SQ..&.O.2..`.Y[
    59C0: C3 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08 66  // .S..fPfRfQf&.G.f
    59D0: 26 8B 57 10 66 26 8B 4F 04 66 F7 F1 66 26 89 47  // &.W.f&.O.f..f&.G
    59E0: 0C 66 26 89 57 10 66 59 66 5A 66 58 5B C3 53 8B  // .f&.W.fYfZfX[.S.
    59F0: D8 66 50 66 52 66 51 66 26 8B 47 08 66 26 8B 4F  // .fPfRfQf&.G.f&.O
    5A00: 04 66 F7 E1 66 26 89 47 0C 66 26 89 57 10 66 59  // .f..f&.G.f&.W.fY
    5A10: 66 5A 66 58 5B C3 53 57 8B D8 26 8B 5F 14 E8 0C  // fZfX[.SW..&._...
    5A20: EB 8B D0 66 C1 E8 10 92 5F 5B C3 53 57 8B D8 26  // ...f...._[.SW..&
    5A30: 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3 10 8B  // .G.&.W.....f....
    5A40: DA C1 E3 02 E8 0A EB EB D8 53 52 57 8B D8 26 8B  // .........SRW..&.
    5A50: 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 26 8B 5F  // G.&.W..f.....&._
    5A60: 14 E8 2E EA 5F 5A 5B C3 53 52 8B D8 26 8B 47 1C  // ...._Z[.SR..&.G.
    5A70: 26 8B 57 1E 92 66 C1 E0 10 8B C2 26 8B 5F 26 8B  // &.W..f.....&._&.
    5A80: 5F 01 E8 0D EA 5A 5B C3 53 52 56 8B F0 26 8B 5C  // _....Z[.SRV..&.\
    5A90: 26 8B 5F 01 E8 96 EA 8B D0 66 C1 E8 10 92 26 89  // &._......f....&.
    5AA0: 44 1C 26 89 54 1E 5E 5A 5B C3 53 51 52 57 8B D8  // D.&.T.^Z[.SQRW..
    5AB0: 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 8B  // &.G.&.W..f......
    5AC0: C8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3  // .&.G.&.W.....f..
    5AD0: 10 8B DA C1 E3 02 8B C1 E8 EA E9 5F 5A 59 5B C3  // ..........._ZY[.
    5AE0: 8B D0 66 C1 E8 10 92 C3 1E 06 66 50 66 51 66 52  // ..f.......fPfQfR
    5AF0: 66 53 66 55 66 56 66 57 0E 1F 0A C0 75 06 E8 07  // fSfUfVfW....u...
    5B00: 01 E9 A8 00 3C 01 75 06 E8 37 01 E9 9E 00 3C 02  // ....<.u..7....<.
    5B10: 75 06 E8 5F 02 E9 94 00 3C 03 75 0B E8 91 03 8B  // u.._....<.u.....
    5B20: EC 89 5E 0C E9 85 00 3C 04 75 02 EB 7D 3C 05 75  // ..^....<.u..}<.u
    5B30: 0A E8 0E 04 8B EC 89 56 10 EB 71 3C 06 75 10 E8  // .......V..q<.u..
    5B40: 8C 03 8B EC 89 5E 0C 89 4E 14 89 56 10 EB 5D 3C  // .....^..N..V..]<
    5B50: 07 75 02 EB 55 3C 08 75 0A E8 D0 03 8B EC 88 7E  // .u..U<.u.......~
    5B60: 0D EB 49 3C 09 75 02 EB 41 3C 0A 75 10 E8 65 04  // ..I<.u..A<.u..e.
    5B70: 8B EC 89 4E 14 89 7E 00 8C 46 1C EB 2F 3C 0B 75  // ...N..~..F../<.u
    5B80: 02 EB 27 3C 10 75 0A E8 5A 04 8B EC 89 5E 0C EB  // ..'<.u..Z....^..
    5B90: 1B 3C 11 75 02 EB 13 3C 15 75 0F E8 80 04 8B EC  // .<.u...<.u......
    5BA0: 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0 8B EC 89 46  // .^....O...2....F
    5BB0: 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    5BC0: 1F C3 50 1E 2E 8E 1E D3 28 8C D8 A3 2A 6B A3 3A  // ..P.....(...*k.:
    5BD0: 6B A3 4C 6B 2E 8E 1E CB 28 A3 AA 04 1F 58 CB 00  // k.Lk....(....X..
    5BE0: 30 31 2E 30 30 00 56 45 53 41 00 03 8C 03 00 00  // 01.00.VESA......
    5BF0: 01 00 00 00 00 00 00 00 00 03 02 14 91 02 00 00  // ................
    5C00: 21 02 00 00 78 5B 00 00 B9 3F 00 8B DF 83 C7 04  // !...x[...?......
    5C10: FC 66 33 C0 F3 66 AB 8B FB BE 7E 5B B9 22 00 F3  // .f3..f....~[."..
    5C20: A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18 8C 4F 1C 8C  // ....O..G..O..O..
    5C30: 4F 20 83 C7 22 89 7F 0E 0E 1F E8 BC DF B0 4F 32  // O ..".........O2
    5C40: E4 C3 56 51 57 B9 10 00 66 33 C0 F3 66 AB 5F 59  // ..VQW...f3..f._Y
    5C50: 8C DB 06 1F C7 05 BB 00 C6 45 02 07 C7 45 04 40  // .........E...E.@
    5C60: 00 C7 45 06 40 00 C6 45 1B 06 C6 45 18 01 C6 45  // ..E.@..E...E...E
    5C70: 1A 01 C6 45 1E 01 66 C7 45 3E 00 84 D7 17 8E DB  // ...E..f.E>......
    5C80: E8 97 D8 66 0B C0 0F 84 E1 00 06 1F 66 89 45 28  // ...f........f.E(
    5C90: 8C C8 66 C1 E0 10 B8 37 5F 66 89 45 0C 81 F9 FF  // ..f....7_f.E....
    5CA0: 81 0F 84 C2 00 80 E5 03 B2 01 53 8E DB BE 80 4C  // ..........S....L
    5CB0: E8 68 DD 5B 06 1F 0F 84 B1 00 53 E8 E4 DF 66 89  // .h.[......S...f.
    5CC0: 45 12 C7 45 16 08 10 8D 5C 0C E8 8E E8 66 89 45  // E..E....\....f.E
    5CD0: 1F 66 89 45 36 8D 5C 10 E8 80 E8 66 89 45 23 66  // .f.E6.\....f.E#f
    5CE0: 89 45 3A 8D 5C 08 E8 72 E8 0A C0 75 03 5B EB 7B  // .E:.\..r...u.[.{
    5CF0: E8 AF DF 66 C1 E8 10 3D 58 02 74 0D 3D 5E 01 74  // ...f...=X.t.=^.t
    5D00: 08 77 0A C6 45 17 08 EB 04 C6 45 17 0E 2E A1 CD  // .w..E.....E.....
    5D10: 28 89 45 08 8D 5C 04 E8 41 E8 66 8B C8 66 C1 E9  // (.E..\..A.f..f..
    5D20: 10 D3 E0 89 45 10 89 45 32 B0 08 D2 E0 88 45 19  // ....E..E2.....E.
    5D30: 8D 5C 14 E8 25 E8 5B 3D 00 03 77 2F 53 8B D8 B8  // .\..%.[=..w/S...
    5D40: 00 03 33 D2 F7 F3 5B FE C8 88 45 1D 88 45 35 88  // ..3...[...E..E5.
    5D50: 45 34 8E DB 57 53 BE 80 4C E8 27 D8 5B 5F 0B C9  // E4..WS..L.'.[_..
    5D60: 75 05 06 1F 83 25 FE 32 E4 EB 02 B4 03 B0 4F 8E  // u....%.2......O.
    5D70: DB 5E C3 00 81 FB FF 81 74 68 0A FF 75 04 8B C3  // .^......th..u...
    5D80: EB 21 F6 C7 08 75 61 8B CB B2 01 BE 20 4C E8 8A  // .!...ua..... L..
    5D90: DC 74 55 E8 EB DE 0A C0 75 0E 66 C1 E8 10 80 E7  // .tU.....u.f.....
    5DA0: 80 0A C7 E8 D5 02 EB 3A E8 4C DA 74 06 E8 DB D8  // .......:.L.t....
    5DB0: E8 D1 D3 BE 20 4C E8 9E D7 74 2D E8 A5 00 E8 2C  // .... L...t-....,
    5DC0: 00 66 BB 20 4C 00 4C E8 AE DE BE 00 4C E8 B1 DE  // .f. L.L.....L...
    5DD0: 66 C1 E8 10 8B D8 32 C0 F6 C7 80 74 02 B0 40 E8  // f.....2....t..@.
    5DE0: CE D7 B0 4F 32 E4 EB 04 B0 4F B4 03 C3 56 06 33  // ...O2....O...V.3
    5DF0: C0 8E C0 BE 20 4C E8 A9 DE 8B C8 66 C1 E8 10 8B  // .... L.....f....
    5E00: D0 C1 E9 03 26 89 0E 4A 04 C1 EA 04 FE CA 26 88  // ....&..J......&.
    5E10: 16 84 04 26 C6 06 51 04 00 26 C6 06 50 04 00 26  // ...&..Q..&..P..&
    5E20: C6 06 49 04 62 26 C7 06 4C 04 00 A0 26 C6 06 85  // ..I.b&..L...&...
    5E30: 04 10 26 C7 06 0C 01 09 75 8C C8 26 A3 0E 01 07  // ..&.....u..&....
    5E40: 5E C3 01 0F 00 0A 00 00 00 00 00 40 05 0F FF 00  // ^..........@....
    5E50: 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01  // ................
    5E60: 00 0F 00 FC BA C4 03 B8 00 01 EF B9 04 00 B4 01  // ................
    5E70: BE DA 5D AC 86 E0 EF 8A E0 FE C4 E2 F6 B8 00 03  // ..].............
    5E80: EF B9 09 00 BA CE 03 32 E4 BE DE 5D 8A C4 EE AC  // .......2...]....
    5E90: 42 EE 4A FE C4 E2 F5 BA DA 03 EC B9 14 00 BA C0  // B.J.............
    5EA0: 03 32 E4 BE E7 5D 8A C4 EE AC EE FE C4 E2 F7 C3  // .2...]..........
    5EB0: BE 00 4C E8 CB DD 66 C1 E8 10 8B D8 E8 9B DD 75  // ..L...f........u
    5EC0: 05 E8 87 DD 75 04 B8 4F 00 C3 B8 4F 03 C3 E8 89  // ....u..O...O....
    5ED0: DD 74 53 BE 00 4C 80 FB 00 74 18 80 FB 01 75 05  // .tS..L...t....u.
    5EE0: E8 C7 DD EB 1D 80 FB 02 75 10 8B C1 E8 7A DD D3  // ........u....z..
    5EF0: E8 8B C8 E8 61 D8 74 2E EB 08 80 FB 03 75 24 E8  // ....a.t......u$.
    5F00: 1E DD E8 64 DD 8B D8 D3 E3 50 33 C0 BA 00 03 3B  // ...d.....P3....;
    5F10: DA 77 05 BA FF FF EB 04 F7 F3 8B D0 58 8B C8 B8  // .w..........X...
    5F20: 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00 0A DB 75 07  // O..2...O......u.
    5F30: 8A EF E8 2A D9 EB 05 E8 0F D9 8A F8 B0 4F 32 E4  // ...*.........O2.
    5F40: C3 00 E8 15 DD 74 2C BE 00 4C E8 34 DD 66 C1 E8  // .....t,..L.4.f..
    5F50: 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E 00 EB 0F 80  // ...@u...u.......
    5F60: FF 01 75 14 BB 13 00 E8 BF E5 D1 E8 8B D0 B0 4F  // ..u............O
    5F70: 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52 53 66 50 81  // 2...O...2..RSfP.
    5F80: E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10 8B C2 BB 13  // .......@f.......
    5F90: 00 E8 F0 E4 BB 12 00 E8 EA E4 66 58 5B 5A C3 9C  // ..........fX[Z..
    5FA0: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    5FB0: 0E 1F E8 08 E6 E8 8A FF E8 27 E6 8B EC 89 56 10  // .........'....V.
    5FC0: 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66  // .F.f_f^f]f[fZfYf
    5FD0: 58 07 1F 9D CB 0E 07 BF 0C A3 2E 8B 0E 0A A3 B8  // X...............
    5FE0: 4F 00 C3 00 0A DB 75 06 B7 04 B3 10 EB 26 80 FB  // O.....u......&..
    5FF0: 01 75 14 E8 01 D8 75 21 53 B1 01 0A FF 74 02 B1  // .u....u!S....t..
    6000: 00 E8 1B D7 5B EB 0D 80 FB 02 75 0D E8 2E D8 8A  // ....[.....u.....
    6010: F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03 C3 00 80 E3  // .....O2...O.....
    6020: 01 0A DB 75 05 BB 02 01 EB 0E E8 CA D7 75 0E 33  // ...u.........u.3
    6030: C0 53 E8 5B CB 5B 74 05 B0 4F 32 E4 C3 B0 4F B4  // .S.[.[t..O2...O.
    6040: 03 C3 80 FC 1D 72 03 CD 42 C3 1E 06 66 50 66 51  // .....r..B...fPfQ
    6050: 66 52 66 53 66 55 66 56 66 57 0E 1F 50 0F B6 C4  // fRfSfUfVfW..P...
    6060: D1 E0 8B F0 58 2E FF 94 24 60 66 5F 66 5E 66 5D  // ....X...$`f_f^f]
    6070: 66 5B 66 5A 66 59 66 58 07 1F C3 0E 1F 50 0F B6  // f[fZfYfX.....P..
    6080: C4 D1 E0 8B F0 58 2E FF 94 24 60 C3 5E 60 74 99  // .....X...$`.^`t.
    6090: 8D 99 AA 99 51 61 AD 90 DF 90 52 91 D5 91 63 93  // ....Qa....R...c.
    60A0: 67 93 70 96 41 97 C4 97 2B 98 C6 99 28 9A D1 9C  // g.p.A...+...(...
    60B0: 6A 63 18 A1 12 60 12 60 12 60 12 60 12 60 12 60  // jc...`.`.`.`.`.`
    60C0: E8 A1 EB 85 3F 87 2E 8E 1E CB 28 80 26 87 04 F3  // ....?.....(.&...
    60D0: 50 8A E0 80 E4 7F E8 C4 01 3B D3 75 02 58 C3 BA  // P........;.u.X..
    60E0: CC 03 EC B2 B4 B1 30 26 F6 47 09 01 74 0C B2 D4  // ......0&.G..t...
    60F0: B1 20 A8 01 75 49 B5 09 EB 06 A8 01 74 41 B5 0B  // . ..uI......tA..
    6100: 53 E8 70 41 0A FF 5B 75 0B 80 26 88 04 F0 08 2E  // S.pA..[u..&.....
    6110: 88 04 EB 2B 58 80 0E 87 04 08 80 26 10 04 CF 08  // ...+X......&....
    6120: 0E 10 04 89 16 63 04 C7 06 85 04 08 00 C6 06 84  // .....c..........
    6130: 04 18 C7 06 0C 01 F6 6C 8C 0E 0E 01 CD 42 C3 80  // .......l.....B..
    6140: 26 10 04 CF 08 0E 10 04 58 53 50 0E 1F 33 C9 8A  // &.......XSP..3..
    6150: C8 E8 A3 D6 74 06 E8 32 D5 E8 28 D0 B2 08 BE 40  // ....t..2..(....@
    6160: 4C E8 B7 D8 BE 40 4C E8 ED D3 58 5B 0F 84 6E FF  // L....@L...X[..n.
    6170: 2E 8E 1E CB 28 0E 07 E8 19 29 0E 1F 53 66 BB 40  // ....(....)..Sf.@
    6180: 4C 00 4C E8 F2 DA BE 00 4C B0 20 E8 22 D4 5B 2E  // L.L.....L. .".[.
    6190: 8E 1E CB 28 0E 07 E8 22 2E E8 24 00 E8 2E 3D E8  // ...(..."..$...=.
    61A0: D1 01 E8 8E 01 E8 B4 3E 0E 1F BE 00 4C B0 10 E8  // .......>....L...
    61B0: FE D3 E8 FD 2D E8 F5 2D C3 8B EC C6 46 1B 00 C3  // ....-..-....F...
    61C0: E8 2F 00 E8 0A 00 E8 BD 00 E8 52 00 E8 62 0A C3  // ./........R..b..
    61D0: 53 83 C3 0A 8B 16 63 04 B9 19 00 B8 11 30 EF 32  // S.....c......0.2
    61E0: C0 26 8A 27 EF 43 FE C0 E2 F7 5B 80 C2 06 32 C0  // .&.'.C....[...2.
    61F0: EE C3 53 BA C4 03 83 C3 05 B9 04 00 B0 01 26 8A  // ..S...........&.
    6200: 27 3C 01 75 03 80 CC 20 EF 43 FE C0 E2 F0 5B 26  // '<.u... .C....[&
    6210: 8A 47 09 BA C2 03 EE B2 C4 B8 00 03 EF C3 8B F3  // .G..............
    6220: 83 C6 23 BA DA 03 26 F6 47 09 01 75 02 B2 BA F6  // ..#...&.G..u....
    6230: 06 89 04 08 74 1D 83 C6 10 EC B9 04 00 B4 10 B2  // ....t...........
    6240: C0 80 FC 11 74 07 8A C4 EE 26 8A 04 EE 46 FE C4  // ....t....&...F..
    6250: E2 EF C3 53 EC 8B DE B9 14 00 32 E4 B2 C0 8A C4  // ...S......2.....
    6260: EE FE C4 26 8A 07 EE 43 E2 F4 8A C4 EE 32 C0 EE  // ...&...C.....2..
    6270: 1E 06 E8 4F 2D 0B ED 74 09 1F 1E B9 10 00 F3 A4  // ...O-..t........
    6280: 46 A4 07 1F 5B C3 53 83 C3 37 B9 09 00 32 C0 BA  // F...[.S..7...2..
    6290: CE 03 26 8A 27 EF 43 FE C0 E2 F7 5B C3 BB 28 65  // ..&.'.C....[..(e
    62A0: 0E 07 8B D3 0A E4 7D 01 C3 E8 01 00 C3 33 F6 80  // ......}......3..
    62B0: FC 03 7F 3C 4A F6 06 89 04 10 75 20 A0 88 04 24  // ...<J.....u ...$
    62C0: 0F 3C 02 7E 24 3C 08 74 20 3C 06 74 1C 3C 07 74  // .<.~$<.t <.t.<.t
    62D0: 18 B0 40 F6 E4 03 D8 81 C3 00 04 C3 B0 40 D0 EC  // ..@..........@..
    62E0: F6 E4 03 D8 81 C3 80 04 C3 B0 40 F6 E4 03 D8 C3  // ..........@.....
    62F0: 80 FC 07 75 11 F6 06 89 04 10 75 05 81 C3 00 01  // ...u......u.....
    6300: C3 81 C3 00 05 C3 BF AA 62 BE CB 62 33 C9 E8 4E  // ........b..b3..N
    6310: 00 C3 04 80 00 05 80 00 06 C0 00 0D 80 02 0E C0  // ................
    6320: 02 0F 80 03 10 C0 03 11 40 05 12 80 05 13 C0 05  // ........@.......
    6330: 62 40 01 53 8A 1E 49 04 80 FB 07 7F 10 32 FF D1  // b@.S..I......2..
    6340: E3 2E 8B 87 E7 62 A2 65 04 88 26 66 04 5B C3 2C  // .....b.e..&f.[.,
    6350: 30 28 30 2D 30 29 30 2A 30 2E 30 1E 3F 29 30 2E  // 0(0-0)0*0.0.?)0.
    6360: 38 25 75 07 2E 03 5D 01 33 F6 C3 83 C7 03 3B FE  // 8%u...].3.....;.
    6370: 75 ED C3 1E 06 2E 8E 1E CB 28 F6 06 87 04 80 75  // u........(.....u
    6380: 49 83 3E 4C 04 00 74 42 A0 49 04 B9 00 20 2E 8B  // I.>L..tB.I... ..
    6390: 3E D1 28 26 F6 47 33 01 75 0E 26 F6 47 09 01 75  // >.(&.G3.u.&.G..u
    63A0: 1B 2E 8B 3E CF 28 EB 14 3C 06 7E 0B 2E 8B 3E CD  // ...>.(..<.~...>.
    63B0: 28 26 8A 67 37 B5 40 66 33 C0 EB 06 66 B8 20 07  // (&.g7.@f3...f. .
    63C0: 20 07 8E C7 66 33 FF F3 66 AB 80 26 87 04 7F 07  //  ...f3..f..&....
    63D0: 1F C3 2E 8E 1E CB 28 80 FB 10 75 03 E9 7A 01 80  // ......(...u..z..
    63E0: FB 20 75 03 E9 9B 01 80 FB 32 75 1F BA CC 03 0A  // . u......2u.....
    63F0: C0 75 09 EC 0C 02 B2 C2 EE E9 F3 00 FE C8 0F 85  // .u..............
    6400: F3 00 EC 24 FD B2 C2 EE E9 E4 00 80 FB 35 75 28  // ...$.........5u(
    6410: 3C 80 75 08 80 0E 89 04 40 E9 D3 00 F6 06 89 04  // <.u.....@.......
    6420: 40 0F 84 D0 00 0A C0 0F 84 CA 00 FE C8 75 06 E8  // @............u..
    6430: 98 07 E9 BA 00 E9 BD 00 80 FB 30 74 03 E9 96 00  // ..........0t....
    6440: 50 E8 30 3E 8A EF BA CC 03 EC 8A C8 58 0A C0 75  // P.0>........X..u
    6450: 30 B7 08 F6 C1 01 75 12 0A ED 75 0B A0 10 04 24  // 0.....u...u....$
    6460: 30 3C 30 75 10 B7 02 E9 8B 00 A0 10 04 24 30 3C  // 0<0u.........$0<
    6470: 30 75 02 B7 02 80 26 89 04 6F 80 0E 89 04 80 EB  // 0u....&..o......
    6480: 36 3C 01 75 41 80 26 89 04 6F B7 09 F6 C1 01 75  // 6<.uA.&..o.....u
    6490: 15 B7 0B A0 10 04 24 30 3C 30 74 1B B7 09 0A ED  // ......$0<0t.....
    64A0: 74 15 B7 05 EB 11 A0 10 04 24 30 3C 30 75 08 B7  // t........$0<0u..
    64B0: 0B 0A ED 74 02 B7 03 8A 1E 88 04 80 E3 F0 0A DF  // ...t............
    64C0: 88 1E 88 04 EB 29 3C 02 75 2B 80 26 89 04 6F 80  // .....)<.u+.&..o.
    64D0: 0E 89 04 10 EB B4 80 FB 31 75 1B 0A C0 74 0B 3C  // ........1u...t.<
    64E0: 01 75 0C 80 0E 89 04 08 EB 05 80 26 89 04 F7 8B  // .u.........&....
    64F0: EC C6 46 1A 12 C3 80 FB 33 75 16 3C 00 74 0B 3C  // ..F.....3u.<.t.<
    6500: 01 75 EC 80 26 89 04 FD EB E5 80 0E 89 04 02 EB  // .u..&...........
    6510: DE 80 FB 34 75 17 3C 00 75 07 80 26 87 04 FE EB  // ...4u.<.u..&....
    6520: CE 3C 01 75 07 80 0E 87 04 01 EB C3 C3 80 FB 36  // .<.u...........6
    6530: 75 26 BB 20 FF 3C 01 74 09 BB 00 DF 3C 00 74 02  // u&. .<.t....<.t.
    6540: EB AD E8 02 00 EB A8 9C FA BA C4 03 B0 01 EE 42  // ...............B
    6550: EC 22 C7 0A C3 EE 9D C3 C3 B3 03 B7 00 BA CC 03  // ."..............
    6560: EC A8 01 75 02 B7 01 A0 88 04 8A E0 B1 04 D2 EC  // ...u............
    6570: 25 0F 0F 8B C8 8B EC 89 5E 0E 89 4E 16 C6 46 1A  // %.......^..N..F.
    6580: 12 C3 9C FA C7 06 14 00 D8 8A 8C 0E 16 00 9D C3  // ................
    6590: 28 18 08 00 08 09 03 00 02 63 2D 27 28 90 2B A0  // (........c-'(.+.
    65A0: BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 14 1F 96  // ................
    65B0: B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    65C0: 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // ................
    65D0: 50 18 08 00 10 01 03 00 02 63 5F 4F 50 82 55 81  // P........c_OP.U.
    65E0: BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 28 1F 96  // .............(..
    65F0: B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    6600: 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // ................
    6610: 28 18 08 00 40 09 03 00 02 63 2D 27 28 90 2B 80  // (...@....c-'(.+.
    6620: BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 14 00 96  // ................
    6630: B9 A2 FF 00 13 15 17 02 04 06 07 10 11 12 13 14  // ................
    6640: 15 16 17 01 00 03 00 00 00 00 00 00 30 0F 00 FF  // ............0...
    6650: 50 18 08 00 40 01 01 00 06 63 5F 4F 50 82 54 80  // P...@....c_OP.T.
    6660: BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 28 00 96  // .............(..
    6670: B9 C2 FF 00 17 17 17 17 17 17 17 17 17 17 17 17  // ................
    6680: 17 17 17 01 00 01 00 00 00 00 00 00 00 0D 00 FF  // ................
    6690: 50 18 0E 00 10 00 03 00 03 A6 5F 4F 50 82 55 81  // P........._OP.U.
    66A0: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28 0D 63  // ...M........](.c
    66B0: BA A3 FF 00 08 08 08 08 08 08 08 10 18 18 18 18  // ................
    66C0: 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF  // ................
    66D0: 50 1D 10 00 A0 01 0F 00 0A E3 5F 4F 50 82 54 80  // P........._OP.T.
    66E0: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 50 00 E7  // .>.@.........P..
    66F0: 04 E3 FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    6700: 0D 0E 0F 01 00 0F 00 10 00 00 00 00 40 05 0F FF  // ............@...
    6710: 00 05 11 1C 08 0B 14 28 0E 18 2D 32 20 24 38 3F  // .......(..-2 $8?
    6720: 00 05 08 0B 0E 11 14 18 1C 20 24 28 2D 32 38 3F  // ......... $(-28?
    6730: 07 0C 10 15 1A 18 16 15 13 1C 25 2F 38 33 2E 2A  // ..........%/83.*
    6740: 25 27 29 2A 2C 23 19 10 23 25 27 2A 2C 2B 2A 29  // %')*,#..#%'*,+*)
    6750: 29 2D 32 37 3B 39 37 34 32 33 34 35 35 31 2C 27  // )-27;974234551,'
    6760: 2F 30 32 33 34 34 33 33 32 35 38 3A 3D 3C 3A 39  // /0234433258:=<:9
    6770: 38 38 39 39 3A 37 34 31 03 05 07 09 0B 0B 0A 09  // 8899:741........
    6780: 08 0D 11 15 19 17 15 13 11 11 12 13 14 0F 0B 07  // ................
    6790: 10 10 12 13 14 13 13 13 12 14 16 18 1A 19 18 17  // ................
    67A0: 16 17 17 17 18 15 14 11 15 15 16 17 17 17 17 17  // ................
    67B0: 16 18 19 1A 1B 1B 1A 19 19 19 19 19 1A 18 17 16  // ................
    67C0: 02 03 04 05 07 06 06 05 05 07 0A 0C 0E 0D 0C 0B  // ................
    67D0: 09 0A 0A 0B 0B 09 06 04 09 09 0A 0B 0B 0B 0B 0B  // ................
    67E0: 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D 0E 0C 0B 0A  // ................
    67F0: 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F 0F 0F 0F 0E  // ................
    6800: 0E 0E 0E 0E 0E 0E 0D 0C 00 00 00 00 00 00 00 00  // ................
    6810: 28 18 08 00 20 09 0F 00 06 63 2D 27 28 90 2B 80  // (... ....c-'(.+.
    6820: BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 14 00 96  // ................
    6830: B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    6840: 15 16 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // ................
    6850: 50 18 08 00 40 01 0F 00 06 63 5F 4F 50 82 54 80  // P...@....c_OP.T.
    6860: BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 28 00 96  // .............(..
    6870: B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    6880: 15 16 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // ................
    6890: 00 05 11 1C 08 0B 25 28 02 07 1B 20 0F 14 28 2C  // ......%(... ..(,
    68A0: 0C 11 25 2A 14 1E 32 36 0F 13 27 2C 1B 20 34 39  // ..%*..26..',. 49
    68B0: 06 0B 1F 24 13 18 2C 30 09 0D 21 26 15 1A 2E 33  // ...$..,0..!&...3
    68C0: 13 17 2B 30 1F 24 38 3D 0E 18 2D 32 20 24 38 3F  // ..+0.$8=..-2 $8?
    68D0: 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18  // ................
    68E0: 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F  // ..-2 $8?..-2 $8?
    68F0: 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18  // ................
    6900: 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F  // ..-2 $8?..-2 $8?
    6910: 50 18 0E 00 80 01 0F 00 06 A2 5F 4F 50 82 54 80  // P........._OP.T.
    6920: BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63  // ...@........](.c
    6930: BA E3 FF 00 08 00 00 18 18 00 00 00 08 00 00 00  // ................
    6940: 18 00 00 0B 00 05 00 00 00 00 00 00 00 05 05 FF  // ................
    6950: 50 18 0E 00 80 01 0F 00 06 A3 5F 4F 50 82 54 80  // P........._OP.T.
    6960: BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63  // ...@........](.c
    6970: BA E3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    6980: 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // =>?.............
    6990: 28 18 0E 00 08 09 03 00 02 A3 2D 27 28 90 2B A0  // (.........-'(.+.
    69A0: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 14 1F 63  // ...M........]..c
    69B0: BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    69C0: 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // =>?.............
    69D0: 50 18 0E 00 10 01 03 00 02 A3 5F 4F 50 82 55 81  // P........._OP.U.
    69E0: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28 1F 63  // ...M........](.c
    69F0: BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    6A00: 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // =>?.............
    6A10: 28 18 10 00 08 08 03 00 02 67 2D 27 28 90 2B A0  // (........g-'(.+.
    6A20: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 14 1F 96  // ...O............
    6A30: B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    6A40: 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF  // =>?.............
    6A50: 50 18 10 00 10 00 03 00 02 67 5F 4F 50 82 55 81  // P........g_OP.U.
    6A60: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 1F 96  // ...O.........(..
    6A70: B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    6A80: 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF  // =>?.............
    6A90: 50 18 10 00 10 00 03 00 02 66 5F 4F 50 82 55 81  // P........f_OP.U.
    6AA0: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 0F 96  // ...O.........(..
    6AB0: B9 A3 FF 00 08 08 08 08 08 08 08 10 18 18 18 18  // ................
    6AC0: 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF  // ................
    6AD0: 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80  // P........._OP.T.
    6AE0: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7  // .>.@.........(..
    6AF0: 04 C3 FF 00 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F  // ....????????????
    6B00: 3F 3F 3F 01 00 0F 00 00 00 00 00 00 00 05 01 FF  // ???.............
    6B10: 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80  // P........._OP.T.
    6B20: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7  // .>.@.........(..
    6B30: 04 E3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    6B40: 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // =>?.............
    6B50: 28 18 08 00 20 01 0F 00 0E 63 5F 4F 50 82 54 80  // (... ....c_OP.T.
    6B60: BF 1F 00 41 00 00 00 00 00 00 9C 8E 8F 28 40 96  // ...A.........(@.
    6B70: B9 A3 FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    6B80: 0D 0E 0F 41 00 0F 00 00 00 00 00 00 40 05 0F FF  // ...A........@...
    6B90: 28 65 00 C0 00 00 00 00 00 00 00 00 00 00 00 00  // (e..............
    6BA0: 48 6B 00 C0 00 00 00 00 00 00 00 00 00 00 00 00  // Hk..............
    6BB0: 1A 00 E6 A2 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    6BC0: 00 00 00 00 00 00 00 00 00 00 1E E8 10 00 2E 8E  // ................
    6BD0: 1E CB 28 E8 FE 36 E8 D5 36 E8 76 1A 1F C3 2E 8E  // ..(..6..6.v.....
    6BE0: 1E CB 28 C7 06 87 04 60 F9 C6 06 8A 04 0B A0 89  // ..(....`........
    6BF0: 04 0C 11 24 17 A2 89 04 B4 01 E8 73 1E A0 89 04  // ...$.......s....
    6C00: 80 26 10 04 CF 80 0E 10 04 20 C7 06 63 04 D4 03  // .&....... ..c...
    6C10: 0E 1F E8 CD C5 F7 C1 02 00 75 03 E8 66 C5 B8 03  // .........u..f...
    6C20: 00 E8 57 F4 C3 1E 2E 8E 1E CB 28 0E 07 EB 00 1F  // ..W.......(.....
    6C30: C3 F6 06 89 04 08 74 01 C3 53 BA C8 03 EC B0 FF  // ......t..S......
    6C40: B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F BE AA 6C B9  // ......>c..u/..l.
    6C50: 40 00 33 DB 9C FA 8A C3 EE 8B FB C1 EF 03 83 E7  // @.3.............
    6C60: 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04 EE 2E 8A 45  // ......B...E....E
    6C70: 08 EE FE C3 4A E2 DF 9D E9 85 00 26 8A 47 2B F6  // ....J......&.G+.
    6C80: 06 89 04 06 74 31 B9 F8 00 BF A8 66 3C 08 74 11  // ....t1.....f<.t.
    6C90: B9 40 00 BF 28 68 3C 38 74 07 3C 3F 74 03 BF 68  // .@..(h<8t.<?t..h
    6CA0: 68 33 DB 9C FA 8A C3 EE 2E 8A 01 42 EE EE EE FE  // h3.........B....
    6CB0: C3 4A E2 F1 9D EB 49 3C 08 74 25 3C 38 74 2E 3C  // .J....I<.t%<8t.<
    6CC0: 3F 74 2A B9 08 00 33 DB 51 E8 E7 D3 B9 08 00 F7  // ?t*...3.Q.......
    6CD0: C3 10 00 74 03 83 C7 18 E8 67 00 59 E2 EA EB 20  // ...t.....g.Y... 
    6CE0: E8 D0 D3 B9 10 00 33 DB E8 57 00 EB 13 B9 40 00  // ......3..W....@.
    6CF0: 33 DB 51 E8 28 00 8A C3 E8 B7 2F FE C3 59 E2 F2  // 3.Q.(...../..Y..
    6D00: 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F 15 3F 15 3F  // [..*.*.*.*.?.?.?
    6D10: 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A 00 3F 8B FB  // .?.*.?.*.?.*.?..
    6D20: C1 EF 02 83 E7 0F 2E 8A B5 9A 6C 8B FB D1 EF 83  // ..........l.....
    6D30: E7 0F 2E 8A AD 9A 6C 8B FB 83 E7 0F 2E 8A 8D 9A  // ......l.........
    6D40: 6C C3 9C 8A C3 FA EE 2E 8A 05 42 EE 47 2E 8A 05  // l.........B.G...
    6D50: EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7 9D C3 00 00  // .G....G..J......
    6D60: 00 00 00 00 00 00 7E 81 A5 81 BD 99 81 7E 7C FE  // ......~......~|.
    6D70: D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38 10 00 10 38  // ....|.....|8...8
    6D80: 7C FE 7C 38 10 00 10 38 10 EE EE 10 38 00 38 7C  // |.|8...8....8.8|
    6D90: FE FE 6C 10 38 00 00 18 3C 7E 3C 18 00 00 FF E7  // ..l.8...<~<.....
    6DA0: C3 81 C3 E7 FF FF 00 18 3C 66 66 3C 18 00 FF E7  // ........<ff<....
    6DB0: C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC CC 78 7E C3  // .........6x..x~.
    6DC0: C3 7E 18 7E 18 18 1E 1A 1E 18 18 70 F0 60 3E 3E  // .~.~.......p.`>>
    6DD0: 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C DB 00 80 C0  // 66.f...<f.f<....
    6DE0: F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06 02 00 18 3C  // .........>.....<
    6DF0: 7E 18 7E 3C 18 00 66 66 66 66 66 00 66 00 7F DB  // ~.~<..fffff.f...
    6E00: 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38 CC 78 00 00  // {;....<f8ll8.x..
    6E10: 00 00 FE FE FE 00 18 3C 7E 18 7E 3C 18 7E 18 3C  // .......<~.~<.~.<
    6E20: 7E 18 18 18 18 00 18 18 18 18 7E 3C 18 00 00 18  // ~.........~<....
    6E30: 1C FE 1C 18 00 00 00 30 70 FE 70 30 00 00 00 00  // .......0p.p0....
    6E40: C0 C0 C0 FE 00 00 00 24 66 FF 66 24 00 00 00 10  // .......$f.f$....
    6E50: 38 7C 7C FE 00 00 00 FE 7C 7C 38 10 00 00 00 00  // 8||.....||8.....
    6E60: 00 00 00 00 00 00 18 3C 3C 18 18 00 18 00 6C 6C  // .......<<.....ll
    6E70: 6C 00 00 00 00 00 6C 6C FE 6C FE 6C 6C 00 18 7E  // l.....ll.l.ll..~
    6E80: C0 7C 06 FC 18 00 00 C6 0C 18 30 60 C6 00 38 6C  // .|........0`..8l
    6E90: 38 76 CC CC 76 00 18 18 30 00 00 00 00 00 18 30  // 8v..v...0......0
    6EA0: 60 60 60 30 18 00 60 30 18 18 18 30 60 00 00 EE  // ```0..`0...0`...
    6EB0: 7C FE 7C EE 00 00 00 18 18 7E 18 18 00 00 00 00  // |.|......~......
    6EC0: 00 00 18 18 30 00 00 00 00 FE 00 00 00 00 00 00  // ....0...........
    6ED0: 00 00 00 38 38 00 06 0C 18 30 60 C0 80 00 7C C6  // ...88....0`...|.
    6EE0: CE DE F6 E6 7C 00 18 78 18 18 18 18 7E 00 7C C6  // ....|..x....~.|.
    6EF0: 0C 18 30 66 FE 00 7C C6 06 3C 06 C6 7C 00 0C 1C  // ..0f..|..<..|...
    6F00: 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6 7C 00 7C C6  // <l..........|.|.
    6F10: C0 FC C6 C6 7C 00 FE C6 06 0C 18 18 18 00 7C C6  // ....|.........|.
    6F20: C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6 7C 00 00 1C  // .|..|.|..~..|...
    6F30: 1C 00 00 1C 1C 00 00 18 18 00 00 18 18 30 0C 18  // .............0..
    6F40: 30 60 30 18 0C 00 00 00 FE 00 00 FE 00 00 60 30  // 0`0...........`0
    6F50: 18 0C 18 30 60 00 7C C6 06 0C 18 00 18 00 7C C6  // ...0`.|.......|.
    6F60: C6 DE DC C0 7E 00 38 6C C6 C6 FE C6 C6 00 FC 66  // ....~.8l.......f
    6F70: 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66 3C 00 F8 6C  // f|ff..<f...f<..l
    6F80: 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2 FE 00 FE 62  // fffl...........b
    6F90: 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6 7C 00 C6 C6  // `|``..|.....|...
    6FA0: C6 FE C6 C6 C6 00 3C 18 18 18 18 18 3C 00 3C 18  // ......<.....<.<.
    6FB0: 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC C6 00 F0 60  // ....p..........`
    6FC0: 60 60 60 62 FE 00 C6 EE FE D6 D6 C6 C6 00 C6 E6  // ```b............
    6FD0: E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6 7C 00 FC 66  // ......|.....|..f
    6FE0: 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6 7C 06 FC C6  // f|``..|.....|...
    6FF0: C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6 7C 00 7E 5A  // ......|..|..|.~Z
    7000: 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6 7C 00 C6 C6  // ....<.......|...
    7010: C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE C6 00 C6 6C  // ..l8...........l
    7020: 38 38 38 6C C6 00 66 66 66 3C 18 18 3C 00 FE 86  // 888l..fff<..<...
    7030: 0C 18 30 62 FE 00 7C 60 60 60 60 60 7C 00 C0 60  // ..0b..|`````|..`
    7040: 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C 7C 00 10 38  // 0.....|.....|..8
    7050: 6C C6 00 00 00 00 00 00 00 00 00 00 00 FF 30 30  // l.............00
    7060: 18 00 00 00 00 00 00 00 78 0C 7C CC 7E 00 E0 60  // ........x.|.~..`
    7070: 7C 66 66 66 FC 00 00 00 7C C6 C0 C6 7C 00 1C 0C  // |fff....|...|...
    7080: 7C CC CC CC 7E 00 00 00 7C C6 FE C0 7C 00 1C 36  // |...~...|...|..6
    7090: 30 FC 30 30 78 00 00 00 76 CE C6 7E 06 7C E0 60  // 0.00x...v..~.|.`
    70A0: 7C 66 66 66 E6 00 18 00 38 18 18 18 3C 00 0C 00  // |fff....8...<...
    70B0: 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C E6 00 18 18  // .....x.`flxl....
    70C0: 18 18 18 18 1C 00 00 00 6C FE D6 D6 C6 00 00 00  // ........l.......
    70D0: DC 66 66 66 66 00 00 00 7C C6 C6 C6 7C 00 00 00  // .ffff...|...|...
    70E0: DC 66 66 7C 60 F0 00 00 76 CC CC 7C 0C 1E 00 00  // .ff|`...v..|....
    70F0: DC 66 60 60 F0 00 00 00 7C C0 7C 06 7C 00 30 30  // .f``....|.|.|.00
    7100: FC 30 30 36 1C 00 00 00 CC CC CC CC 76 00 00 00  // .006........v...
    7110: C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE 6C 00 00 00  // ..l8........l...
    7120: C6 6C 38 6C C6 00 00 00 C6 C6 CE 76 06 7C 00 00  // .l8l.......v.|..
    7130: FC 98 30 64 FC 00 0E 18 18 70 18 18 0E 00 18 18  // ..0d.....p......
    7140: 18 00 18 18 18 00 70 18 18 0E 18 18 70 00 76 DC  // ......p.....p.v.
    7150: 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00 3C 66  // ........88ll..<f
    7160: C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE 76 00 0E 00  // .f<..x......v...
    7170: 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC 7E 00 C6 00  // |...|.|.x.|.~...
    7180: 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC 7E 00 38 38  // x.|.~...x.|.~.88
    7190: 78 0C 7C CC 7E 00 00 00 7C C0 7C 18 6C 38 7C C6  // x.|.~...|.|.l8|.
    71A0: 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0 7C 00 E0 00  // |...|...|...|...
    71B0: 7C C6 FE C0 7C 00 66 00 38 18 18 18 3C 00 7C C6  // |...|.f.8...<.|.
    71C0: 38 18 18 18 3C 00 00 00 38 18 18 18 3C 00 C6 38  // 8...<...8...<..8
    71D0: 6C C6 FE C6 C6 00 38 38 00 7C C6 FE C6 00 0E 00  // l.....88.|......
    71E0: FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8 6E 00 7E D8  // ........l.~.n.~.
    71F0: D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6 7C 00 00 C6  // ......|..|..|...
    7200: 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6 7C 00 7C C6  // .|..|....|..|.|.
    7210: 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE 76 00 18 00  // ....v.......v...
    7220: 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C 38 00 C6 00  // <...<..8l..l8...
    7230: C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E 18 00 38 6C  // ....|...~..~..8l
    7240: 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C 18 00 3E 63  // `.f.l..f<~.<..>c
    7250: 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C 00 1C 0E 00  // 8.c>...>a<.|....
    7260: 78 0C 7C CC 7E 00 1C 00 38 18 18 18 3C 00 00 0E  // x.|.~...8...<...
    7270: 00 7C C6 C6 7C 00 00 0E 00 CC CC DC 76 00 00 FC  // .|..|.......v...
    7280: 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE C6 00 3E 00  // ..ff..........>.
    7290: 3E 60 67 63 3D 00 3E 00 76 CE C6 7E 06 7C 18 00  // >`gc=.>.v..~.|..
    72A0: 18 30 60 66 3C 00 00 00 00 7C 60 60 00 00 00 00  // .0`f<....|``....
    72B0: 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36 0C 3E C0 CC  // .|.......0|6.>..
    72C0: D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C 18 00 00 36  // .0l<~.....<<...6
    72D0: 6C D8 6C 36 00 00 00 D8 6C 36 6C D8 00 00 22 88  // l.l6....l6l...".
    72E0: 22 88 22 88 22 88 55 AA 55 AA 55 AA 55 AA DD 77  // ".".".U.U.U.U..w
    72F0: DD 77 DD 77 DD 77 18 18 18 18 18 18 18 18 18 18  // .w.w.w..........
    7300: 18 18 F8 18 18 18 18 18 F8 18 F8 18 18 18 36 36  // ..............66
    7310: 36 36 F6 36 36 36 00 00 00 00 FE 36 36 36 00 00  // 66.666.....666..
    7320: F8 18 F8 18 18 18 36 36 F6 06 F6 36 36 36 36 36  // ......66...66666
    7330: 36 36 36 36 36 36 00 00 FE 06 F6 36 36 36 36 36  // 666666.....66666
    7340: F6 06 FE 00 00 00 36 36 36 36 FE 00 00 00 18 18  // ......6666......
    7350: F8 18 F8 00 00 00 00 00 00 00 F8 18 18 18 18 18  // ................
    7360: 18 18 1F 00 00 00 18 18 18 18 FF 00 00 00 00 00  // ................
    7370: 00 00 FF 18 18 18 18 18 18 18 1F 18 18 18 00 00  // ................
    7380: 00 00 FF 00 00 00 18 18 18 18 FF 18 18 18 18 18  // ................
    7390: 1F 18 1F 18 18 18 36 36 36 36 37 36 36 36 36 36  // ......6666766666
    73A0: 37 30 3F 00 00 00 00 00 3F 30 37 36 36 36 36 36  // 70?.....?0766666
    73B0: F7 00 FF 00 00 00 00 00 FF 00 F7 36 36 36 36 36  // ...........66666
    73C0: 37 30 37 36 36 36 00 00 FF 00 FF 00 00 00 36 36  // 707666........66
    73D0: F7 00 F7 36 36 36 18 18 FF 00 FF 00 00 00 36 36  // ...666........66
    73E0: 36 36 FF 00 00 00 00 00 FF 00 FF 18 18 18 00 00  // 66..............
    73F0: 00 00 FF 36 36 36 36 36 36 36 3F 00 00 00 18 18  // ...6666666?.....
    7400: 1F 18 1F 00 00 00 00 00 1F 18 1F 18 18 18 00 00  // ................
    7410: 00 00 3F 36 36 36 36 36 36 36 FF 36 36 36 18 18  // ..?6666666.666..
    7420: FF 18 FF 18 18 18 18 18 18 18 F8 00 00 00 00 00  // ................
    7430: 00 00 1F 18 18 18 FF FF FF FF FF FF FF FF 00 00  // ................
    7440: 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 0F 0F  // ................
    7450: 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00 00 00 00 00  // ................
    7460: 66 DC D8 DC 66 00 00 78 CC F8 CC C6 CC 00 00 FE  // f...f..x........
    7470: 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C 6C 00 FE C6  // b```....lllll...
    7480: 60 30 60 C6 FE 00 00 7E D8 CC CC D8 70 00 00 66  // `0`....~....p..f
    7490: 66 66 66 7C C0 00 00 76 DC 18 18 18 38 00 FE 38  // fff|...v....8..8
    74A0: 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C 38 00 38 6C  // l.l8..8l...l8.8l
    74B0: C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC 78 00 00 00  // ..ll..>`8f..x...
    74C0: 7E DB DB 7E 00 00 06 7C DE F6 E6 7C C0 00 38 60  // ~..~...|...|..8`
    74D0: C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6 C6 00 00 FE  // ...`8.|.........
    74E0: 00 FE 00 FE 00 00 18 18 7E 18 18 00 7E 00 30 18  // ........~...~.0.
    74F0: 0C 18 30 00 7E 00 0C 18 30 18 0C 00 7E 00 0C 1E  // ..0.~...0...~...
    7500: 18 18 18 18 18 18 18 18 18 18 18 78 30 00 00 00  // ...........x0...
    7510: 18 00 7E 00 18 00 00 76 DC 00 76 DC 00 00 7C C6  // ..~....v..v...|.
    7520: C6 7C 00 00 00 00 00 00 00 18 18 00 00 00 00 00  // .|..............
    7530: 00 00 18 00 00 00 1F 18 18 18 F8 38 18 00 D8 6C  // ...........8...l
    7540: 6C 6C 00 00 00 00 70 D8 30 F8 00 00 00 00 00 00  // ll....p.0.......
    7550: 7C 7C 7C 7C 00 00 00 00 00 00 00 00 00 00 1D 00  // ||||............
    7560: 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 00 10  // ...$f.f$........
    7570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7580: 00 00 00 7E 81 A5 81 81 BD 99 81 81 7E 00 00 00  // ...~........~...
    7590: 00 00 00 7C FE FE D6 FE FE BA C6 FE 7C 00 00 00  // ...|........|...
    75A0: 00 00 00 00 6C EE FE FE FE FE 7C 38 10 00 00 00  // ....l.....|8....
    75B0: 00 00 00 00 10 38 7C FE 7C 38 10 00 00 00 00 00  // .....8|.|8......
    75C0: 00 00 00 00 10 38 38 10 6C EE 6C 10 38 00 00 00  // .....88.l.l.8...
    75D0: 00 00 00 10 38 7C 7C FE FE FE 6C 10 38 00 00 00  // ....8||...l.8...
    75E0: 00 00 00 00 00 00 18 3C 3C 3C 18 00 00 00 00 00  // .......<<<......
    75F0: 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF FF FF FF FF  // ................
    7600: FF 00 00 00 00 18 3C 66 66 66 3C 18 00 00 00 00  // ......<fff<.....
    7610: 00 FF FF FF FF E7 C3 99 99 99 C3 E7 FF FF FF FF  // ................
    7620: FF 00 00 1E 0E 1E 36 78 CC CC CC CC 78 00 00 00  // ......6x....x...
    7630: 00 00 00 3C 66 66 66 3C 18 7E 18 18 18 00 00 00  // ...<fff<.~......
    7640: 00 00 00 1E 1A 1E 18 18 18 18 78 F8 70 00 00 00  // ..........x.p...
    7650: 00 00 00 3E 36 3E 36 36 76 F6 66 0E 1E 0C 00 00  // ...>6>66v.f.....
    7660: 00 00 00 18 DB 7E 3C 66 66 3C 7E DB 18 00 00 00  // .....~<ff<~.....
    7670: 00 00 00 00 80 E0 F0 FC FE FC F0 E0 80 00 00 00  // ................
    7680: 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E 02 00 00 00  // ......>~.~>.....
    7690: 00 00 00 18 3C 7E 18 18 18 18 7E 3C 18 00 00 00  // ....<~....~<....
    76A0: 00 00 00 66 66 66 66 66 66 66 00 66 66 00 00 00  // ...fffffff.ff...
    76B0: 00 00 00 7F DB DB DB DB 7B 1B 1B 1B 1B 00 00 00  // ........{.......
    76C0: 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C C6 C6 7C 00  // ...|..`|..|...|.
    76D0: 00 00 00 00 00 00 00 00 00 FE FE FE FE 00 00 00  // ................
    76E0: 00 00 00 18 3C 7E 18 18 18 7E 3C 18 7E 00 00 00  // ....<~...~<.~...
    76F0: 00 00 00 18 3C 7E 18 18 18 18 18 18 18 00 00 00  // ....<~..........
    7700: 00 00 00 18 18 18 18 18 18 18 7E 3C 18 00 00 00  // ..........~<....
    7710: 00 00 00 00 00 00 0C 0E FF 0E 0C 00 00 00 00 00  // ................
    7720: 00 00 00 00 00 00 30 70 FE 70 30 00 00 00 00 00  // ......0p.p0.....
    7730: 00 00 00 00 00 00 00 C0 C0 C0 FE 00 00 00 00 00  // ................
    7740: 00 00 00 00 00 00 24 66 FF 66 24 00 00 00 00 00  // ......$f.f$.....
    7750: 00 00 00 00 10 38 38 38 7C 7C FE FE 00 00 00 00  // .....888||......
    7760: 00 00 00 00 FE FE 7C 7C 7C 38 38 10 00 00 00 00  // ......|||88.....
    7770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7780: 00 00 00 18 3C 3C 3C 3C 18 18 00 18 18 00 00 00  // ....<<<<........
    7790: 00 00 36 36 36 36 14 00 00 00 00 00 00 00 00 00  // ..6666..........
    77A0: 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C 6C 00 00 00  // ...lll.ll.lll...
    77B0: 00 00 00 18 18 7C C6 C0 78 3C 06 C6 7C 18 18 00  // .....|..x<..|...
    77C0: 00 00 00 00 00 00 62 66 0C 18 30 66 C6 00 00 00  // ......bf..0f....
    77D0: 00 00 00 38 6C 38 30 76 7E CC CC CC 76 00 00 00  // ...8l80v~...v...
    77E0: 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00  // ................
    77F0: 00 00 00 0C 18 30 30 30 30 30 30 18 0C 00 00 00  // .....000000.....
    7800: 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18 30 00 00 00  // ...0........0...
    7810: 00 00 00 00 00 00 6C 38 FE 38 6C 00 00 00 00 00  // ......l8.8l.....
    7820: 00 00 00 00 00 00 18 18 7E 18 18 00 00 00 00 00  // ........~.......
    7830: 00 00 00 00 00 00 00 00 00 00 0C 0C 0C 18 00 00  // ................
    7840: 00 00 00 00 00 00 00 00 FE 00 00 00 00 00 00 00  // ................
    7850: 00 00 00 00 00 00 00 00 00 00 00 18 18 00 00 00  // ................
    7860: 00 00 00 00 00 02 06 0C 18 30 60 C0 80 00 00 00  // .........0`.....
    7870: 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6 7C 00 00 00  // ...|........|...
    7880: 00 00 00 18 78 18 18 18 18 18 18 18 7E 00 00 00  // ....x.......~...
    7890: 00 00 00 7C C6 C6 06 0C 18 30 60 C6 FE 00 00 00  // ...|.....0`.....
    78A0: 00 00 00 7C C6 06 06 3C 06 06 06 C6 7C 00 00 00  // ...|...<....|...
    78B0: 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C 1E 00 00 00  // .....<l.........
    78C0: 00 00 00 FE C0 C0 C0 FC 06 06 06 C6 7C 00 00 00  // ............|...
    78D0: 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    78E0: 00 00 00 FE C6 06 0C 18 30 30 30 30 30 00 00 00  // ........00000...
    78F0: 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6 7C 00 00 00  // ...|...|....|...
    7900: 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6 7C 00 00 00  // ...|....~...|...
    7910: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 00 00 00 00  // ................
    7920: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 0C 18 00 00  // ................
    7930: 00 00 00 00 0C 18 30 60 C0 60 30 18 0C 00 00 00  // ......0`.`0.....
    7940: 00 00 00 00 00 00 00 FE 00 FE 00 00 00 00 00 00  // ................
    7950: 00 00 00 00 60 30 18 0C 06 0C 18 30 60 00 00 00  // ....`0.....0`...
    7960: 00 00 00 7C C6 C6 0C 18 18 18 00 18 18 00 00 00  // ...|............
    7970: 00 00 00 7C C6 C6 C6 DE DE DE DC C0 7E 00 00 00  // ...|........~...
    7980: 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6 C6 00 00 00  // ...8l...........
    7990: 00 00 00 FC 66 66 66 7C 66 66 66 66 FC 00 00 00  // ....fff|ffff....
    79A0: 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66 3C 00 00 00  // ...<f......f<...
    79B0: 00 00 00 F8 6C 66 66 66 66 66 66 6C F8 00 00 00  // ....lffffffl....
    79C0: 00 00 00 FE 66 60 64 7C 64 60 60 66 FE 00 00 00  // ....f`d|d``f....
    79D0: 00 00 00 FE 66 60 64 7C 64 60 60 60 F0 00 00 00  // ....f`d|d```....
    79E0: 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6 7C 00 00 00  // ...|........|...
    79F0: 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6 C6 00 00 00  // ................
    7A00: 00 00 00 3C 18 18 18 18 18 18 18 18 3C 00 00 00  // ...<........<...
    7A10: 00 00 00 3C 18 18 18 18 18 18 D8 D8 70 00 00 00  // ...<........p...
    7A20: 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6 C6 00 00 00  // ................
    7A30: 00 00 00 F0 60 60 60 60 60 60 62 66 FE 00 00 00  // ....``````bf....
    7A40: 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6 C6 00 00 00  // ................
    7A50: 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6 C6 00 00 00  // ................
    7A60: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    7A70: 00 00 00 FC 66 66 66 66 7C 60 60 60 F0 00 00 00  // ....ffff|```....
    7A80: 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6 7C 06 00 00  // ...|........|...
    7A90: 00 00 00 FC 66 66 66 7C 78 6C 66 66 E6 00 00 00  // ....fff|xlff....
    7AA0: 00 00 00 7C C6 C0 C0 70 1C 06 06 C6 7C 00 00 00  // ...|...p....|...
    7AB0: 00 00 00 7E 5A 18 18 18 18 18 18 18 3C 00 00 00  // ...~Z.......<...
    7AC0: 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    7AD0: 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    7AE0: 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6 C6 00 00 00  // ................
    7AF0: 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6 C6 00 00 00  // ......l88l......
    7B00: 00 00 00 66 66 66 66 66 3C 18 18 18 3C 00 00 00  // ...fffff<...<...
    7B10: 00 00 00 FE C6 86 0C 18 30 60 C2 C6 FE 00 00 00  // ........0`......
    7B20: 00 00 00 7C 60 60 60 60 60 60 60 60 7C 00 00 00  // ...|````````|...
    7B30: 00 00 00 00 00 80 C0 60 30 18 0C 06 02 00 00 00  // .......`0.......
    7B40: 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C 7C 00 00 00  // ...|........|...
    7B50: 00 00 10 38 6C C6 00 00 00 00 00 00 00 00 00 00  // ...8l...........
    7B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00  // ................
    7B70: 00 00 18 18 18 0C 00 00 00 00 00 00 00 00 00 00  // ................
    7B80: 00 00 00 00 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    7B90: 00 00 00 E0 60 60 7C 66 66 66 66 66 FC 00 00 00  // ....``|fffff....
    7BA0: 00 00 00 00 00 00 7C C6 C0 C0 C0 C6 7C 00 00 00  // ......|.....|...
    7BB0: 00 00 00 1C 0C 0C 7C CC CC CC CC CC 7E 00 00 00  // ......|.....~...
    7BC0: 00 00 00 00 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    7BD0: 00 00 00 1C 36 30 30 FC 30 30 30 30 78 00 00 00  // ....600.0000x...
    7BE0: 00 00 00 00 00 00 76 CE C6 C6 CE 76 06 C6 7C 00  // ......v....v..|.
    7BF0: 00 00 00 E0 60 60 7C 66 66 66 66 66 E6 00 00 00  // ....``|fffff....
    7C00: 00 00 00 18 18 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    7C10: 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C CC CC 78 00  // ..............x.
    7C20: 00 00 00 E0 60 60 66 66 6C 78 6C 66 E6 00 00 00  // ....``fflxlf....
    7C30: 00 00 00 18 18 18 18 18 18 18 18 18 1C 00 00 00  // ................
    7C40: 00 00 00 00 00 00 6C FE D6 D6 C6 C6 C6 00 00 00  // ......l.........
    7C50: 00 00 00 00 00 00 DC 66 66 66 66 66 66 00 00 00  // .......ffffff...
    7C60: 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    7C70: 00 00 00 00 00 00 DC 66 66 66 66 7C 60 60 F0 00  // .......ffff|``..
    7C80: 00 00 00 00 00 00 76 CC CC CC CC 7C 0C 0C 1E 00  // ......v....|....
    7C90: 00 00 00 00 00 00 DC 66 60 60 60 60 F0 00 00 00  // .......f````....
    7CA0: 00 00 00 00 00 00 7C C6 C0 7C 06 C6 7C 00 00 00  // ......|..|..|...
    7CB0: 00 00 00 30 30 30 FC 30 30 30 30 36 1C 00 00 00  // ...000.00006....
    7CC0: 00 00 00 00 00 00 CC CC CC CC CC CC 76 00 00 00  // ............v...
    7CD0: 00 00 00 00 00 00 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    7CE0: 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE 6C 00 00 00  // ............l...
    7CF0: 00 00 00 00 00 00 C6 C6 6C 38 6C C6 C6 00 00 00  // ........l8l.....
    7D00: 00 00 00 00 00 00 C6 C6 C6 C6 CE 76 06 C6 7C 00  // ...........v..|.
    7D10: 00 00 00 00 00 00 FE 86 0C 18 30 62 FE 00 00 00  // ..........0b....
    7D20: 00 00 00 0E 18 18 18 70 18 18 18 18 0E 00 00 00  // .......p........
    7D30: 00 00 00 18 18 18 18 00 18 18 18 18 18 00 00 00  // ................
    7D40: 00 00 00 70 18 18 18 0E 18 18 18 18 70 00 00 00  // ...p........p...
    7D50: 00 00 00 76 DC 00 00 00 00 00 00 00 00 00 00 00  // ...v............
    7D60: 00 00 00 00 00 00 10 38 38 6C 6C FE 00 00 00 00  // .......88ll.....
    7D70: 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18 0C CC 38 00  // ...<f....f<...8.
    7D80: 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ............v...
    7D90: 00 00 0C 18 30 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ....0.|.....|...
    7DA0: 00 00 30 78 CC 00 78 0C 7C CC CC DC 76 00 00 00  // ..0x..x.|...v...
    7DB0: 00 00 00 CC 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    7DC0: 00 00 60 30 18 00 78 0C 7C CC CC DC 76 00 00 00  // ..`0..x.|...v...
    7DD0: 00 00 38 6C 38 00 78 0C 7C CC CC DC 76 00 00 00  // ..8l8.x.|...v...
    7DE0: 00 00 00 00 00 7C C6 C0 C0 C6 7C 18 0C 6C 38 00  // .....|....|..l8.
    7DF0: 00 00 30 78 CC 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0x..|.....|...
    7E00: 00 00 00 CC 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    7E10: 00 00 30 18 0C 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0...|.....|...
    7E20: 00 00 00 66 00 00 38 18 18 18 18 18 3C 00 00 00  // ...f..8.....<...
    7E30: 00 00 18 3C 66 00 38 18 18 18 18 18 3C 00 00 00  // ...<f.8.....<...
    7E40: 00 00 00 00 00 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    7E50: 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6 C6 00 00 00  // ....8l..........
    7E60: 00 38 6C 38 00 38 6C C6 C6 FE C6 C6 C6 00 00 00  // .8l8.8l.........
    7E70: 00 0C 18 30 00 FE 60 60 7C 60 60 60 FE 00 00 00  // ...0..``|```....
    7E80: 00 00 00 00 00 66 DB 1B 7F D8 D8 DF 76 00 00 00  // .....f......v...
    7E90: 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8 DE 00 00 00  // ...~............
    7EA0: 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0x..|.....|...
    7EB0: 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    7EC0: 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0...|.....|...
    7ED0: 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..0x........v...
    7EE0: 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..`0........v...
    7EF0: 00 00 18 00 3C 18 18 18 18 18 18 18 3C 00 00 00  // ....<.......<...
    7F00: 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ....|.......|...
    7F10: 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    7F20: 00 00 00 18 18 7C C6 C0 C0 C6 7C 18 18 00 00 00  // .....|....|.....
    7F30: 00 00 38 6C 60 60 F0 60 60 60 66 F6 6C 00 00 00  // ..8l``.```f.l...
    7F40: 00 00 66 66 66 66 3C 18 7E 18 3C 18 18 00 00 00  // ..ffff<.~.<.....
    7F50: 00 00 00 3E 63 63 30 1C 06 63 63 3E 00 1C 00 00  // ...>cc0..cc>....
    7F60: 00 00 00 00 00 00 3E 63 38 0E 63 3E 00 1C 00 00  // ......>c8.c>....
    7F70: 00 00 0C 18 30 00 78 0C 7C CC CC DC 76 00 00 00  // ....0.x.|...v...
    7F80: 00 00 0C 18 30 00 38 18 18 18 18 18 3C 00 00 00  // ....0.8.....<...
    7F90: 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ....0.|.....|...
    7FA0: 00 00 18 30 60 00 CC CC CC CC CC DC 76 00 00 00  // ...0`.......v...
    7FB0: 00 00 00 76 DC 00 BC 66 66 66 66 66 E6 00 00 00  // ...v...fffff....
    7FC0: 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6 C6 00 00 00  // ..v.............
    7FD0: 00 00 21 1E 00 1E 33 60 60 67 63 33 1D 00 00 00  // ..!...3``gc3....
    7FE0: 00 00 42 3C 00 3B 66 66 66 3E 06 66 3C 00 00 00  // ..B<.;fff>.f<...
    7FF0: 00 00 00 30 30 00 30 30 30 60 C6 C6 7C 00 00 00  // ...00.000`..|...
    8000: 00 00 00 00 00 00 00 00 7E 60 60 60 00 00 00 00  // ........~```....
    8010: 00 00 00 00 00 00 00 00 7E 06 06 06 00 00 00 00  // ........~.......
    8020: 00 00 60 60 62 66 6C 18 30 60 DC 36 0C 18 3E 00  // ..``bfl.0`.6..>.
    8030: 00 00 60 60 62 66 6C 18 36 6E DE 36 7E 06 06 00  // ..``bfl.6n.6~...
    8040: 00 00 00 18 18 00 18 18 3C 3C 3C 3C 18 00 00 00  // ........<<<<....
    8050: 00 00 00 00 00 00 36 6C D8 6C 36 00 00 00 00 00  // ......6l.l6.....
    8060: 00 00 00 00 00 00 D8 6C 36 6C D8 00 00 00 00 00  // .......l6l......
    8070: 00 11 44 11 44 11 44 11 44 11 44 11 44 11 44 11  // ..D.D.D.D.D.D.D.
    8080: 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.U.U.U.U.U.U.U.
    8090: 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.w.w.w.w.w.w.w.
    80A0: 77 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // w...............
    80B0: 18 18 18 18 18 18 18 18 F8 18 18 18 18 18 18 18  // ................
    80C0: 18 18 18 18 18 18 F8 18 F8 18 18 18 18 18 18 18  // ................
    80D0: 18 36 36 36 36 36 36 36 F6 36 36 36 36 36 36 36  // .6666666.6666666
    80E0: 36 00 00 00 00 00 00 00 FE 36 36 36 36 36 36 36  // 6........6666666
    80F0: 36 00 00 00 00 00 F8 18 F8 18 18 18 18 18 18 18  // 6...............
    8100: 18 36 36 36 36 36 F6 06 F6 36 36 36 36 36 36 36  // .66666...6666666
    8110: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    8120: 36 00 00 00 00 00 FE 06 F6 36 36 36 36 36 36 36  // 6........6666666
    8130: 36 36 36 36 36 36 F6 06 FE 00 00 00 00 00 00 00  // 666666..........
    8140: 00 36 36 36 36 36 36 36 FE 00 00 00 00 00 00 00  // .6666666........
    8150: 00 18 18 18 18 18 F8 18 F8 00 00 00 00 00 00 00  // ................
    8160: 00 00 00 00 00 00 00 00 F8 18 18 18 18 18 18 18  // ................
    8170: 18 18 18 18 18 18 18 18 1F 00 00 00 00 00 00 00  // ................
    8180: 00 18 18 18 18 18 18 18 FF 00 00 00 00 00 00 00  // ................
    8190: 00 00 00 00 00 00 00 00 FF 18 18 18 18 18 18 18  // ................
    81A0: 18 18 18 18 18 18 18 18 1F 18 18 18 18 18 18 18  // ................
    81B0: 18 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    81C0: 00 18 18 18 18 18 18 18 FF 18 18 18 18 18 18 18  // ................
    81D0: 18 18 18 18 18 18 1F 18 1F 18 18 18 18 18 18 18  // ................
    81E0: 18 36 36 36 36 36 36 36 37 36 36 36 36 36 36 36  // .666666676666666
    81F0: 36 36 36 36 36 36 37 30 3F 00 00 00 00 00 00 00  // 66666670?.......
    8200: 00 00 00 00 00 00 3F 30 37 36 36 36 36 36 36 36  // ......?076666666
    8210: 36 36 36 36 36 36 F7 00 FF 00 00 00 00 00 00 00  // 666666..........
    8220: 00 00 00 00 00 00 FF 00 F7 36 36 36 36 36 36 36  // .........6666666
    8230: 36 36 36 36 36 36 37 30 37 36 36 36 36 36 36 36  // 6666667076666666
    8240: 36 00 00 00 00 00 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    8250: 00 36 36 36 36 36 F7 00 F7 36 36 36 36 36 36 36  // .66666...6666666
    8260: 36 18 18 18 18 18 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    8270: 00 36 36 36 36 36 36 36 FF 00 00 00 00 00 00 00  // .6666666........
    8280: 00 00 00 00 00 00 FF 00 FF 18 18 18 18 18 18 18  // ................
    8290: 18 00 00 00 00 00 00 00 FF 36 36 36 36 36 36 36  // .........6666666
    82A0: 36 36 36 36 36 36 36 36 3F 00 00 00 00 00 00 00  // 66666666?.......
    82B0: 00 18 18 18 18 18 1F 18 1F 00 00 00 00 00 00 00  // ................
    82C0: 00 00 00 00 00 00 1F 18 1F 18 18 18 18 18 18 18  // ................
    82D0: 18 00 00 00 00 00 00 00 3F 36 36 36 36 36 36 36  // ........?6666666
    82E0: 36 36 36 36 36 36 36 36 FF 36 36 36 36 36 36 36  // 66666666.6666666
    82F0: 36 18 18 18 18 18 FF 18 FF 18 18 18 18 18 18 18  // 6...............
    8300: 18 18 18 18 18 18 18 18 F8 00 00 00 00 00 00 00  // ................
    8310: 00 00 00 00 00 00 00 00 1F 18 18 18 18 18 18 18  // ................
    8320: 18 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    8330: FF 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF  // ................
    8340: FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    8350: F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    8360: 0F FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00  // ................
    8370: 00 00 00 00 00 76 DC D8 D8 D8 D8 DC 76 00 00 00  // .....v......v...
    8380: 00 00 00 78 CC CC D8 FC C6 C6 C6 C6 CC 00 00 00  // ...x............
    8390: 00 00 00 FE 66 62 60 60 60 60 60 60 60 00 00 00  // ....fb```````...
    83A0: 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C 6C 00 00 00  // .......llllll...
    83B0: 00 00 00 FE C6 62 30 18 18 30 62 C6 FE 00 00 00  // .....b0..0b.....
    83C0: 00 00 00 00 00 00 7E D8 CC CC CC D8 70 00 00 00  // ......~.....p...
    83D0: 00 00 00 00 00 66 66 66 66 66 7C 60 C0 80 00 00  // .....fffff|`....
    83E0: 00 00 00 00 00 00 76 DC 18 18 18 18 18 00 00 00  // ......v.........
    83F0: 00 00 00 FE 38 38 6C C6 C6 6C 38 38 FE 00 00 00  // ....88l..l88....
    8400: 00 00 00 00 38 6C C6 C6 FE C6 C6 6C 38 00 00 00  // ....8l.....l8...
    8410: 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C EE 00 00 00  // ...8l....lll....
    8420: 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC 78 00 00 00  // ...>``<f....x...
    8430: 00 00 00 00 00 00 7E DB DB DB 7E 00 00 00 00 00  // ......~...~.....
    8440: 00 00 00 02 06 7C CE DE F6 F6 7C 60 C0 00 00 00  // .....|....|`....
    8450: 00 00 00 00 1C 30 60 60 7C 60 60 30 1C 00 00 00  // .....0``|``0....
    8460: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 C6 00 00 00  // ...|............
    8470: 00 00 00 00 00 FE 00 00 FE 00 00 FE 00 00 00 00  // ................
    8480: 00 00 00 00 00 18 18 7E 18 18 00 00 7E 00 00 00  // .......~....~...
    8490: 00 00 00 30 18 0C 06 0C 18 30 00 00 7E 00 00 00  // ...0.....0..~...
    84A0: 00 00 00 0C 18 30 60 30 18 0C 00 00 7E 00 00 00  // .....0`0....~...
    84B0: 00 00 00 00 00 0C 1E 1A 18 18 18 18 18 18 18 18  // ................
    84C0: 18 18 18 18 18 18 18 18 18 18 18 58 78 30 00 00  // ...........Xx0..
    84D0: 00 00 00 00 00 18 18 00 7E 00 18 18 00 00 00 00  // ........~.......
    84E0: 00 00 00 00 00 00 00 76 DC 00 76 DC 00 00 00 00  // .......v..v.....
    84F0: 00 00 00 78 CC CC 78 00 00 00 00 00 00 00 00 00  // ...x..x.........
    8500: 00 00 00 00 00 00 00 00 18 18 00 00 00 00 00 00  // ................
    8510: 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00  // ................
    8520: 00 00 00 1F 18 18 18 18 18 D8 D8 78 38 18 00 00  // ...........x8...
    8530: 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00 00 00 00 00  // ....lllll.......
    8540: 00 00 00 70 D8 18 30 60 F8 00 00 00 00 00 00 00  // ...p..0`........
    8550: 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E 00 00 00 00  // ......~~~~~~....
    8560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    8570: 00 1D 00 00 00 00 00 24 66 FF 66 24 00 00 00 00  // .......$f.f$....
    8580: 00 00 2F 00 00 00 01 03 06 0C 18 30 60 C0 80 00  // ../........0`...
    8590: 00 00 00 30 00 00 7E C3 C3 C3 DB DB C3 C3 C3 7E  // ...0..~........~
    85A0: 00 00 00 00 4D 00 00 C3 C3 E7 FF FF DB DB C3 C3  // ....M...........
    85B0: C3 00 00 00 00 54 00 00 FF 99 18 18 18 18 18 18  // .....T..........
    85C0: 18 3C 00 00 00 00 56 00 00 C3 C3 C3 C3 C3 C3 C3  // .<....V.........
    85D0: 66 3C 18 00 00 00 00 57 00 00 C3 C3 C3 C3 DB DB  // f<.....W........
    85E0: DB DB FF 66 00 00 00 00 58 00 00 C3 C3 C3 66 3C  // ...f....X.....f<
    85F0: 3C 66 C3 C3 C3 00 00 00 00 59 00 00 C3 C3 C3 C3  // <f.......Y......
    8600: 66 3C 18 18 18 3C 00 00 00 00 5C 00 00 00 80 C0  // f<...<....\.....
    8610: 60 30 18 0C 06 03 01 00 00 00 00 6D 00 00 00 00  // `0.........m....
    8620: 00 66 FF DB DB DB C3 C3 00 00 00 00 76 00 00 00  // .f..........v...
    8630: 00 00 C3 C3 C3 C3 66 3C 18 00 00 00 00 77 00 00  // ......f<.....w..
    8640: 00 00 00 C3 C3 DB DB DB FF 66 00 00 00 00 00 00  // .........f......
    8650: 09 75 C3 0B DB 74 03 E9 46 01 57 32 C0 B9 40 00  // .u...t..F.W2..@.
    8660: F3 AA 5F BB D6 A2 26 89 1D 26 8C 4D 02 2E 8E 1E  // .._...&..&.M....
    8670: CB 28 57 BE 49 04 B9 1E 00 83 C7 04 FC 8A 04 26  // .(W.I..........&
    8680: 88 05 46 47 E2 F7 5F A0 84 04 FE C0 26 88 45 22  // ..FG.._.....&.E"
    8690: A1 85 04 26 89 45 23 57 E8 D9 1B 5F 26 88 5D 25  // ...&.E#W..._&.]%
    86A0: 26 88 7D 26 8A 1E 49 04 E8 FC 05 74 05 80 FB 13  // &.}&..I....t....
    86B0: 7F 1D 32 FF D1 E3 2E 8A 87 AE A2 32 E4 0A C0 74  // ..2........2...t
    86C0: 01 40 26 89 45 27 2E 8A 87 AF A2 26 88 45 29 A1  // .@&.E'.....&.E).
    86D0: 85 04 8A 16 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E  // ............=..~
    86E0: 15 B2 01 3D 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2  // ...=^.~...=..~..
    86F0: 03 3D E0 01 7E 00 26 88 55 2A 8A 26 87 04 8A C4  // .=..~.&.U*.&....
    8700: 24 01 C0 E0 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0  // $...............
    8710: 89 04 24 0A 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC  // ..$.........0.B.
    8720: 24 08 C0 E0 02 0A C4 0C 01 26 88 45 2D B0 03 26  // $........&.E-..&
    8730: 88 45 31 E8 77 08 1E 06 32 D2 C4 1E A8 04 8C C1  // .E1.w...2.......
    8740: 8C CE 3B CE 74 34 26 C5 77 04 8C D9 0B F1 74 03  // ..;.t4&.w.....t.
    8750: 80 CA 10 26 C5 77 0C 8C D9 0B F1 74 03 80 CA 08  // ...&.w.....t....
    8760: 26 C5 77 08 8C D9 0B F1 74 03 80 CA 04 26 C5 77  // &.w.....t....&.w
    8770: 10 8C D9 0B F1 74 03 80 CA 01 07 1F 26 88 55 32  // .....t......&.U2
    8780: B0 03 BA C4 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A  // ................
    8790: F2 D0 EE 81 E2 04 04 25 03 03 0B C2 26 89 45 2B  // .......%....&.E+
    87A0: 8B EC C6 46 1A 1B C3 0A C0 74 0F FE C8 74 36 FE  // ...F.....t...t6.
    87B0: C8 74 56 8B EC C6 46 1A 00 C3 B8 20 00 F6 C1 01  // .tV...F.... ....
    87C0: 74 03 83 C0 60 F6 C1 02 74 03 83 C0 3A F6 C1 04  // t...`...t...:...
    87D0: 74 03 05 03 03 83 C0 3F C1 E8 06 8B EC 89 46 0E  // t......?......F.
    87E0: C6 46 1A 1C C3 8B FB 83 C7 20 F6 C1 01 74 03 E8  // .F....... ...t..
    87F0: 85 00 F6 C1 02 74 03 E8 EF 00 F6 C1 04 74 03 E8  // .....t.......t..
    8800: F8 01 8B EC C6 46 1A 1C C3 F6 C1 01 74 06 E8 16  // .....F......t...
    8810: 15 E8 25 01 F6 C1 02 74 03 E8 85 01 F6 C1 04 74  // ..%....t.......t
    8820: 03 E8 12 02 EB DC 8A C4 EE 42 EC AA FE C4 4A E2  // .........B....J.
    8830: F5 C3 E8 6B 04 BD C0 03 B9 15 00 32 E4 EC 87 EA  // ...k.......2....
    8840: 8A C4 EE 42 EC AA FE C4 4A 87 EA E2 F0 EC 87 EA  // ...B....J.......
    8850: B0 20 EE C3 26 8A 05 88 04 47 46 E2 F7 C3 26 8A  // . ..&....GF...&.
    8860: 25 EF 47 FE C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05  // %.G..........&..
    8870: 47 FE C4 EE E2 F4 C3 9C FA 51 57 8B C7 2B C3 26  // G........QW..+.&
    8880: 89 07 8B F7 E8 0A 04 EC 26 88 44 01 26 89 54 41  // ........&.D.&.TA
    8890: B2 CE EC 26 88 44 02 B2 CC EC 26 88 44 09 B2 CA  // ...&.D....&.D...
    88A0: EC 26 88 44 04 B2 C4 EC 26 88 04 83 C7 05 B9 04  // .&.D....&.......
    88B0: 00 B4 01 E8 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26  // ....p.&........&
    88C0: 8B 54 41 32 E4 B9 19 00 E8 5B FF 26 8A 44 01 EE  // .TA2.....[.&.D..
    88D0: E8 5F FF B2 CE 32 E4 B9 09 00 E8 49 FF 26 8A 44  // ._...2.....I.&.D
    88E0: 02 EE 5F 59 83 C7 60 9D C3 9C FA 8B C7 2B C3 26  // .._Y..`......+.&
    88F0: 89 47 02 51 57 2E 8E 1E CB 28 A0 10 04 24 30 AA  // .G.QW....(...$0.
    8900: BE 49 04 B9 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE  // .I..............
    8910: A8 04 B1 04 F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00  // ..............t.
    8920: B1 04 F3 A4 BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04  // .....|..........
    8930: F3 A4 5F 59 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB  // .._Y..:....&.?..
    8940: 8B F7 51 8B FE 83 C7 05 BA C4 03 B8 00 01 EF B0  // ..Q.............
    8950: 01 B9 04 00 E8 07 FF 47 B2 C2 26 8A 44 09 EE B2  // .......G..&.D...
    8960: C4 B8 00 03 EF 26 8A 04 EE 26 8B 54 41 B8 11 00  // .....&...&.TA...
    8970: EF B1 19 32 C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06  // ...2....&.D.....
    8980: 26 8A 44 04 EE EC B1 15 32 E4 E8 DB FE B0 20 EE  // &.D.....2..... .
    8990: B1 09 32 C0 B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D  // ..2......&.D..Y.
    89A0: C3 9C FA 26 8B 7F 02 03 FB 06 51 2E 8E 1E CB 28  // ...&......Q....(
    89B0: 26 8A 05 80 26 10 04 CF 08 06 10 04 47 BE 49 04  // &...&.......G.I.
    89C0: B9 1E 00 E8 8E FE BE 84 04 B1 07 E8 86 FE BE A8  // ................
    89D0: 04 B1 04 E8 7E FE BE 14 00 B1 04 E8 76 FE BE 74  // ....~.......v..t
    89E0: 00 B1 04 E8 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C  // ....n..|....f...
    89F0: 01 B1 04 E8 5E FE 59 07 9D C3 9C FA 8B C7 2B C3  // ....^.Y.......+.
    8A00: 26 89 47 04 E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88  // &.G.......4.B.&.
    8A10: 05 BA C8 03 EC 26 88 45 01 50 4A 4A EC 26 88 45  // .....&.E.PJJ.&.E
    8A20: 02 83 C7 03 B9 00 03 42 32 C0 EE 42 42 EC AA E2  // .......B2..BB...
    8A30: FC 58 4A EE 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C  // .XJ.....&.w....l
    8A40: 05 B2 C0 B0 34 EE 26 8A 04 EE BA C6 03 26 8A 44  // ....4.&......&.D
    8A50: 02 EE 56 42 42 83 C6 03 32 C0 EE 42 B9 00 03 26  // ..VBB...2..B...&
    8A60: 8A 04 EE 46 E2 F9 5E FE CA 26 8A 44 01 EE 9D C3  // ...F..^..&.D....
    8A70: BA CC 03 EC 24 FE 0A C4 B2 C2 EE C3 E8 A8 12 B2  // ....$...........
    8A80: C0 86 C4 EE EB 00 EB 00 86 C4 EE EB 00 EB 00 B0  // ................
    8A90: 20 EE C3 50 8A E0 80 E4 80 80 26 87 04 7F 08 26  //  ..P......&....&
    8AA0: 87 04 24 7F 8A E0 3C 07 7E 1E 26 F6 47 33 01 75  // ..$...<.~.&.G3.u
    8AB0: 17 3C 23 74 13 3C 32 74 0F 3C 33 74 0B B4 03 26  // .<#t.<2t.<3t...&
    8AC0: F6 47 09 01 75 02 B4 07 88 26 49 04 BA B4 03 80  // .G..u....&I.....
    8AD0: 0E 87 04 02 26 F6 47 09 01 74 07 B2 D4 80 26 87  // ....&.G..t....&.
    8AE0: 04 FD 89 16 63 04 C7 06 4E 04 00 00 C6 06 62 04  // ....c...N.....b.
    8AF0: 00 B9 08 00 BF 50 04 FC 06 1E 07 33 C0 F3 AB 07  // .....P.....3....
    8B00: 26 8A 07 32 E4 A3 4A 04 26 8A 47 01 A2 84 04 26  // &..2..J.&.G....&
    8B10: 8A 47 02 A3 85 04 26 8B 47 03 A3 4C 04 26 8B 47  // .G....&.G..L.&.G
    8B20: 14 86 C4 A3 60 04 58 C3 52 32 E4 33 D2 B0 0D CD  // ....`.X.R2.3....
    8B30: 17 F6 C4 29 75 08 32 E4 33 D2 B0 0A CD 17 5A C3  // ...)u.2.3.....Z.
    8B40: 06 1E 60 2E 8E 1E CB 28 2E 83 0E D5 28 00 75 6E  // ..`....(....(.un
    8B50: 80 3E 00 05 01 74 67 C6 06 00 05 01 8A 1E 62 04  // .>...tg.......b.
    8B60: 32 FF D1 E3 8B FB 8B 85 50 04 8A 3E 62 04 50 32  // 2.......P..>b.P2
    8B70: F6 8A 0E 84 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8  // .....2.AQ..J.2..
    8B80: A6 FF F6 C4 29 75 3D 51 52 89 95 50 04 B4 08 E8  // ....)u=QR..P....
    8B90: B0 D4 0A C0 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4  // ....u.. 3.2.....
    8BA0: 29 75 1F 5A FE C2 59 E2 DE FE C6 59 E2 CA E8 77  // )u.Z..Y....Y...w
    8BB0: FF 32 C0 A2 00 05 58 89 85 50 04 E8 AF 03 61 1F  // .2....X..P....a.
    8BC0: 07 CF 5A 59 59 B0 FF EB EA 52 2A F5 38 C6 7D 02  // ..ZYY....R*.8.}.
    8BD0: 32 C0 2E 8E 06 CD 28 5A C3 A0 85 04 F6 E3 8A F7  // 2.....(Z........
    8BE0: 8B D8 8B CA BA C4 03 B8 02 0F EF B4 02 E8 6D 00  // ..............m.
    8BF0: 8B D1 32 ED 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75  // ..2...........Ku
    8C00: F7 32 E4 E8 57 00 C3 53 8A 1E 62 04 0B C0 75 04  // .2..W..S..b...u.
    8C10: 0A DB 74 03 E8 35 03 5B 8B F8 2B D1 81 C2 01 01  // ..t..5.[..+.....
    8C20: 8A C3 32 E4 C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A  // ..2....2.+...t**
    8C30: C3 F6 26 85 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8  // ..&....R... ....
    8C40: 02 0F EF 5A 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03  // ...Z............
    8C50: FD 48 75 F5 1F E8 81 FF C3 8A D8 EB F8 BA CE 03  // .Hu.............
    8C60: B0 05 EE 42 EC 24 FC 0A C4 EE 4A C3 9C FA EE 42  // ...B.$....J....B
    8C70: EB 00 EC 4A 9D C3 1E 2E 8E 1E CB 28 8B 16 63 04  // ...J.......(..c.
    8C80: 80 C2 06 1F C3 1E 2E 8E 1E CB 28 8B 16 63 04 1F  // ..........(..c..
    8C90: C3 50 BA CC 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3  // .P........u...X.
    8CA0: E8 EE FF 80 C2 06 C3 1E 2E 8E 1E CB 28 80 3E 49  // ............(.>I
    8CB0: 04 03 74 13 80 3E 49 04 02 74 0C 80 3E 49 04 01  // ..t..>I..t..>I..
    8CC0: 74 05 80 3E 49 04 00 1F C3 50 2E 8E 06 CF 28 A0  // t..>I....P....(.
    8CD0: 10 04 24 30 3C 30 74 05 2E 8E 06 D1 28 58 0B C0  // ..$0<0t.....(X..
    8CE0: 74 03 E8 E1 01 03 06 4E 04 81 C2 01 01 2B D1 32  // t......N.....+.2
    8CF0: ED 8B 2E 4A 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1  // ...J............
    8D00: E5 0A DB 75 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A  // ...u...8.~......
    8D10: D8 8B C1 E8 B3 FF 03 F0 3A 16 4A 04 74 06 06 1F  // ........:.J.t...
    8D20: E8 1B 00 C3 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A  // .......@........
    8D30: E6 E8 95 FF F7 DD 2B F0 06 1F E8 01 00 C3 53 8A  // ......+.......S.
    8D40: CE 2A CB 32 ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B  // .*.2.2.+.+......
    8D50: CA F3 A5 03 F5 03 FD FE CC 75 F4 58 B0 20 8A CA  // .........u.X. ..
    8D60: F3 AB 03 FD FE CB 75 F6 C3 53 8A C6 2A C3 74 06  // ......u..S..*.t.
    8D70: F6 E2 8B C8 F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB  // ......X...... ..
    8D80: C3 8B D8 E8 2E 00 2E 8E 1E D1 28 8A C3 22 DF D3  // ..........(.."..
    8D90: E3 A8 80 74 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE  // ...t.0.....4"...
    8DA0: 88 1C C3 8A FC E8 0C 00 2E 8E 1E D1 28 8A 04 D2  // ............(...
    8DB0: E8 22 C7 C3 B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F  // ."...(.....t....
    8DC0: 8B F1 C1 EE 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1  // ................
    8DD0: 03 D0 E1 B7 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7  // ................
    8DE0: 01 C3 FC 8A D8 2E 8E 06 D1 28 8B C1 E8 86 00 75  // .........(.....u
    8DF0: 02 8A DE 03 F0 E8 24 00 C3 FC 8A D8 2E 8E 06 D1  // ......$.........
    8E00: 28 8A C1 8A E6 E8 6D 00 75 02 8A DE F7 DD 81 C6  // (.....m.u.......
    8E10: F0 00 81 C7 F0 00 2B F0 E8 01 00 C3 8A CE 2A CB  // ......+.......*.
    8E20: E3 2C 51 8A CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A  // .,Q..VW.........
    8E30: CA 2B F1 2B F9 81 C6 00 20 81 C7 00 20 D1 E9 F3  // .+.+.... ... ...
    8E40: A5 13 C9 F3 A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7  // ....._^....Y....
    8E50: 8A E7 8A CA 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B  // ....W..........+
    8E60: F9 81 C7 00 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD  // .... ........_..
    8E70: FE CB 75 DE C3 E8 B0 00 81 C2 01 01 2B D1 38 F3  // ..u.........+.8.
    8E80: 76 02 32 DB 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50  // v.2.Q......Y2..P
    8E90: 00 80 3E 49 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8  // ..>I..t.........
    8EA0: 8B F0 B0 50 F6 E3 0A DB C3 52 53 8A DF 32 FF D1  // ...P.....RS..2..
    8EB0: E3 8B 87 50 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3  // ...P....P...L...
    8EC0: 5B 03 C3 5B 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6  // [..[Z.R...J...2.
    8ED0: 03 C2 D1 E0 5A C3 8B E8 83 E5 0F 2E 8A A6 86 8E  // ....Z...........
    8EE0: 8B E8 C1 ED 04 83 E5 0F 2E 8A 86 86 8E C3 00 03  // ................
    8EF0: 0C 0F 30 33 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B  // ..03<?........&.
    8F00: 04 86 E0 BA 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1  // .........t......
    8F10: E0 02 75 F2 88 56 00 45 C3 8B 16 63 04 8A C5 86  // ..u..V.E...c....
    8F20: E0 EF 8A E1 FE C0 EF C3 52 8B D0 8A C4 F6 26 4A  // ........R.....&J
    8F30: 04 C1 E0 02 32 F6 03 C2 5A C3 53 8A DF 32 FF D1  // ....2...Z.S..2..
    8F40: E3 8B 87 50 04 D1 EB E8 02 00 5B C3 52 8B D0 32  // ...P......[.R..2
    8F50: F6 52 8A C4 F6 26 85 04 F7 26 4A 04 5A 03 C2 0A  // .R...&...&J.Z...
    8F60: DB 74 08 03 06 4C 04 FE CB 75 F8 5A C3 52 8B D0  // .t...L...u.Z.R..
    8F70: A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1  // .J...2.......N..
    8F80: F8 8B C8 B4 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04  // ........Z....&J.
    8F90: 8B F9 C1 EF 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7  // .........t...2..
    8FA0: 26 4C 04 03 F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC  // &L..............
    8FB0: EC C3 E8 F8 FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0  // ........ .......
    8FC0: 32 C0 EE C3 C4 3E A8 04 26 C4 7D 04 8C C5 0B EF  // 2....>..&.}.....
    8FD0: C3 53 B0 0E E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8  // .S..............
    8FE0: B8 0E AA EF B8 0F 55 EF B0 0E E8 7F FC 3C AA 74  // ......U......<.t
    8FF0: 0D B0 0F E8 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E  // ....v.<Ut.2.[...
    9000: 8A E7 EF FE C0 8A E3 EF B0 01 0A C0 5B C3 8A EE  // ............[...
    9010: 8A 36 85 04 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6  // .6......t%..*...
    9020: 8B C8 52 32 F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B  // ..R2........+.Q.
    9030: C8 F3 A5 2B FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A  // ...+.+.Y..Z.....
    9040: DD EB F8 8A C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1  // .............2..
    9050: E2 02 8B DA D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA  // ........+.....+.
    9060: 4E 75 F7 C3 2E 8E 1E CB 28 89 0E 60 04 8A C5 24  // Nu......(..`...$
    9070: 60 A8 20 74 06 B9 00 1E E9 94 00 F6 06 87 04 01  // `. t............
    9080: 0F 85 8B 00 80 3E 49 04 07 74 06 E8 19 FC 74 01  // .....>I..t....t.
    9090: C3 F6 06 87 04 08 74 03 CD 42 C3 8A 36 85 04 8A  // ......t..B..6...
    90A0: D6 FE CA 38 CD 7E 1F 0A C9 74 64 8A E9 8A CE FE  // ...8.~...td.....
    90B0: C9 EB 5C 38 D1 74 58 8A CE 80 FD 03 7C 04 8A E9  // ..\8.tX.....|...
    90C0: D0 ED FE C9 EB 49 80 F9 03 7E 44 8A E1 2A E5 0A  // .....I...~D..*..
    90D0: E4 75 0A 38 CA 74 38 FE CA 38 CA 74 32 8A C5 0A  // .u.8.t8..8.t2...
    90E0: C1 38 F0 7E 0A 80 FC 02 7E 12 80 FD 02 7F C8 80  // .8.~....~.......
    90F0: FC 03 7D BF 8A D6 FE CA 38 D1 74 13 8A CE FE C9  // ..}.....8.t.....
    9100: FE C9 8A E9 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4  // ....*...........
    9110: 0A E8 05 FE C3 2E 8E 1E CB 28 A2 62 04 32 E4 8B  // .........(.b.2..
    9120: F0 F7 26 4C 04 A3 4E 04 8B C8 E8 7A FB 74 07 80  // ..&L..N....z.t..
    9130: 3E 49 04 07 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B  // >I..w...........
    9140: 84 50 04 E8 27 FE C3 2E 8E 1E CB 28 8A 26 49 04  // .P..'......(.&I.
    9150: E8 F8 AA 74 07 C7 06 50 04 00 00 C3 E8 48 FB 74  // ...t...P.....H.t
    9160: 0B 80 FC 07 74 06 77 08 E8 77 FC C3 E8 9F FB C3  // ....t.w..w......
    9170: 80 FC 13 7C 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8  // ...|.t...N......
    9180: 85 FA 8B 2E 4A 04 52 F6 26 85 04 F7 E5 8B F7 03  // ....J.R.&.......
    9190: F0 5A E8 90 FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA  // .Z.....0......g.
    91A0: C1 E7 03 52 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7  // ...R..J.....&...
    91B0: E5 8B F7 03 F0 5A E8 55 FE C3 2E 8E 1E CB 28 8A  // .....Z.U......(.
    91C0: 26 49 04 E8 E1 FA 74 0C 80 FC 07 74 07 77 40 80  // &I....t....t.w@.
    91D0: FC 03 7F 04 E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A  // .....S..........
    91E0: D8 8A C1 8A E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7  // ..........+>J...
    91F0: 03 52 F7 26 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B  // .R.&...&J......+
    9200: F0 5A 8B 2E 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80  // .Z..J...........
    9210: FC 13 7C 03 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6  // ..|.t...........
    9220: FE C4 E8 E2 F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5  // .....R..J..&....
    9230: 2B FD 8B F7 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E  // +...+.Z.........
    9240: CB 28 2E 8E 06 D1 28 E8 5D FA 74 11 80 3E 49 04  // .(....(.].t..>I.
    9250: 07 7C 18 2E 8E 06 CF 28 74 03 E9 B1 00 E8 49 FC  // .|.....(t.....I.
    9260: 8B D8 26 8B 07 8B EC 89 46 1A C3 A1 50 04 E8 B7  // ..&.....F...P...
    9270: FC 8B F0 BB 08 00 2B E3 8B EC 80 3E 49 04 06 75  // ......+....>I..u
    9280: 1F B9 04 00 26 8A 04 88 46 00 45 26 8A 84 00 20  // ....&...F.E&... 
    9290: 88 46 00 45 83 C6 50 E2 EB B8 00 02 B2 80 EB 17  // .F.E..P.........
    92A0: D1 E6 B9 04 00 E8 56 FC 81 C6 00 20 E8 4F FC 81  // ......V.... .O..
    92B0: EE B0 1F E2 F0 EB E2 2B EB C4 3E 0C 01 32 F6 80  // .......+..>..2..
    92C0: FB 0E 75 09 26 83 7D FE 10 75 02 B6 80 16 1F 8B  // ..u.&.}..u......
    92D0: F5 8B CB F6 C6 80 74 01 47 56 57 F3 A6 5F 5E 74  // ......t.GVW.._^t
    92E0: 23 FE C0 03 FB F6 C6 80 74 01 47 FE CA 75 E2 FE  // #.......t.G..u..
    92F0: CC 74 0F 2E 8E 1E CB 28 C4 3E 7C 00 B0 80 B2 80  // .t.....(.>|.....
    9300: EB CB 32 C0 8B E5 03 E3 8B EC 89 46 1A C3 80 3E  // ..2........F...>
    9310: 49 04 13 7C 05 75 02 EB 5A C3 2E 8E 06 CD 28 E8  // I..|.u..Z.....(.
    9320: 18 FC 8B F0 8B 1E 85 04 2B E3 8B EC B8 05 08 B9  // ........+.......
    9330: 05 00 BA CE 03 80 3E 49 04 0F 72 1A F6 06 87 04  // ......>I..r.....
    9340: 60 75 13 B4 0A F7 C6 01 00 75 02 B4 05 B0 07 EF  // `u.......u......
    9350: B8 05 18 B9 05 01 EF 51 8B CB 26 8A 04 F6 D0 88  // .......Q..&.....
    9360: 46 00 45 03 36 4A 04 E2 F1 58 EF B8 00 01 32 D2  // F.E.6J...X....2.
    9370: E9 44 FF 2E 8E 06 CD 28 A1 50 04 8B D0 32 F6 52  // .D.....(.P...2.R
    9380: 8A C4 32 E4 F7 26 4A 04 F7 26 85 04 5A 03 C2 8B  // ..2..&J..&..Z...
    9390: F0 8B 1E 85 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1  // .....+...S.>J.O.
    93A0: E7 03 C1 E6 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A  // ........2.&.....
    93B0: C0 74 03 80 CC 01 46 E2 F1 88 66 00 45 03 F7 4B  // .t....F...f.E..K
    93C0: 75 E3 5B B8 00 01 32 D2 E9 EC FE 33 ED EB 03 BD  // u.[...2....3....
    93D0: 01 00 2E 8E 1E CB 28 2E 8E 06 D1 28 8A 26 49 04  // ......(....(.&I.
    93E0: E8 C4 F8 74 0F 2E 8E 06 CF 28 80 FC 07 74 05 7C  // ...t.....(...t.|
    93F0: 3D E9 0B 02 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87  // =.........2.....
    9400: 50 04 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1  // P....J...2......
    9410: E7 0A DB 74 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA  // ...t....L.....u.
    9420: 8B C6 0B ED 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E  // ....u.....G...P.
    9430: 8E 06 D1 28 A1 50 04 E8 EE FA 8B F8 A0 50 04 8A  // ...(.P.......P..
    9440: 26 4A 04 8B E8 58 A8 80 74 08 24 7F C5 36 7C 00  // &J...X..t.$..6|.
    9450: EB 04 C5 36 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80  // ...6....2.......
    9460: FF 06 74 69 D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A  // ..ti.....U......
    9470: D8 8A F8 8B C5 50 B2 04 F6 C6 80 75 27 AC E8 55  // .....P.....u'..U
    9480: FA 23 C3 AB AC E8 4E FA 23 C3 26 89 85 FE 1F 83  // .#....N.#.&.....
    9490: C7 4E FE CA 75 E7 83 EE 08 81 EF 3E 01 58 E8 72  // .N..u......>.X.r
    94A0: 00 E2 D2 C3 AC E8 2E FA 23 C3 26 31 05 AC E8 25  // ........#.&1...%
    94B0: FA 23 C3 26 31 85 00 20 83 C7 50 FE CA 75 E5 83  // .#.&1.. ..P..u..
    94C0: EE 08 81 EF 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50  // ....>.X.I......P
    94D0: B2 04 F6 C3 80 74 1F AC 26 30 05 AC 26 30 85 00  // .....t..&0..&0..
    94E0: 20 83 C7 50 FE CA 7F EF 83 EE 08 81 EF 3F 01 58  //  ..P.........?.X
    94F0: E8 20 00 E2 DA C3 AC AA AC 26 88 85 FF 1F 83 C7  // . .......&......
    9500: 4F FE CA 7F F1 83 EE 08 81 EF 3F 01 58 E8 03 00  // O.........?.X...
    9510: E2 BD C3 FE C0 38 E0 72 06 32 C0 81 C7 F0 00 C3  // .....8.r.2......
    9520: 8A 16 85 04 F6 E2 8B F0 32 F6 8B EA 66 0F B6 06  // ........2...f...
    9530: 51 04 F6 E2 66 0F B7 16 4A 04 83 FA 64 75 03 BA  // Q...f...J...du..
    9540: 68 00 83 FA 5A 75 03 BA 60 00 81 FA AF 00 75 03  // h...Zu..`.....u.
    9550: BA B0 00 52 F7 E2 66 0F B7 F8 66 0F B6 06 50 04  // ...R..f...f...P.
    9560: 66 03 F8 66 C1 CF 10 03 FA 66 C1 C7 03 81 CF 00  // f..f.....f......
    9570: FF 66 C1 C7 10 5A 8A E2 4A C1 E2 03 A0 50 04 50  // .f...Z..J....P.P
    9580: C5 06 0C 01 03 F0 2E 8E 06 CD 28 58 57 51 50 9C  // ..........(XWQP.
    9590: FC 8B CD E8 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73  // ....;..........s
    95A0: 02 8A C3 26 88 05 66 47 FE CD 75 EF 66 03 FA E2  // ...&..fG..u.f...
    95B0: E2 9D 58 59 5F 83 C7 08 FE C0 38 E0 72 0E 51 32  // ..XY_.....8.r.Q2
    95C0: C0 8B CD 49 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC  // ...I.......Y+...
    95D0: C3 06 52 33 C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7  // ..R3...f.....f..
    95E0: 10 E8 67 A6 74 16 38 E0 74 12 0F B6 D0 E8 8B C9  // ..g.t.8.t.......
    95F0: 8A E0 66 C1 C7 10 8B F8 66 C1 C7 10 5A 07 C3 80  // ..f.....f...Z...
    9600: FC 13 7C 0B 0F 84 18 FF 80 FC 62 0F 84 11 FF E8  // ..|.......b.....
    9610: 01 00 C3 80 FC 11 75 06 80 E3 80 80 CB 0F 50 53  // ......u.......PS
    9620: 8A DF 32 FF D1 E3 8B 97 50 04 5B 2E 8E 06 CD 28  // ..2.....P.[....(
    9630: E8 07 F9 8B F8 8B 2E 85 04 58 32 F6 52 8B 36 4A  // .........X2.R.6J
    9640: 04 56 8A 26 85 04 C5 36 0C 01 80 FC 0E 75 09 83  // .V.&...6.....u..
    9650: 7C FE 10 75 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3  // |..u...F........
    9660: 80 75 6D B2 C4 B8 02 0F EF 5A 58 50 52 4A 8A E0  // .um......ZXPRJ..
    9670: 57 51 51 57 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE  // WQQW..2......_G.
    9680: C4 38 D4 76 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59  // .8.v.2...I..G..Y
    9690: E2 E0 59 5F BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51  // ..Y_........[KZQ
    96A0: 57 8B CD AC 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5  // W...&.%....._G+.
    96B0: 42 3B D3 76 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59  // B;.v.3...I..G..Y
    96C0: E2 DD BA CE 03 B8 03 00 EF B2 C4 B8 02 0F EF C3  // ................
    96D0: B2 CE B8 03 18 EF EB BC 2E 8E 1E CB 28 80 3E 63  // ............(.>c
    96E0: 04 B4 74 0B BA CC 03 EC A8 01 75 04 CD 42 C3 C3  // ..t.......u..B..
    96F0: E8 D1 F8 0A FF 75 1C 8A E3 80 E4 1F 80 26 66 04  // .....u.......&f.
    9700: E0 08 26 66 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1  // ..&f..-...f... .
    9710: 05 D2 EB E8 91 F5 74 19 A0 66 04 24 DF 80 E3 01  // ......t..f.$....
    9720: 74 02 0C 20 A2 66 04 24 10 0C 02 0A D8 E8 53 00  // t.. .f.$......S.
    9730: C3 E8 7E F8 C3 53 50 80 E3 0F 8A FB D0 E3 81 E3  // ..~..SP.........
    9740: 10 07 0A DF E8 60 F5 74 0E B4 00 8A C3 E8 2C F3  // .....`.t......,.
    9750: 0B ED 74 03 26 88 1D 8A C3 E8 0B 00 0B ED 74 04  // ..t.&.........t.
    9760: 26 88 5D 10 58 5B C3 8A E0 1E 2E 8E 1E CB 28 80  // &.].X[........(.
    9770: 3E 49 04 33 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8  // >I.3............
    9780: 30 F8 C3 9C FA E8 9F 05 B2 C0 B9 03 00 B4 01 8A  // 0...............
    9790: C4 EE 8A C3 EE 0B ED 74 04 47 26 88 1D FE C4 80  // .......t.G&.....
    97A0: C3 02 E2 EB B0 20 EE 9D C3 2E 8E 1E CB 28 8A 26  // ..... .......(.&
    97B0: 49 04 E8 F2 F4 74 0A 80 FC 07 77 06 74 03 E8 C0  // I....t....w.t...
    97C0: F5 C3 80 FC 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA  // .....|.tL.......
    97D0: CE 03 B0 08 EF 2E 8E 1E CD 28 F6 C3 80 75 1C B2  // .........(...u..
    97E0: C4 B8 02 FF EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4  // ......%.......%.
    97F0: FF 88 25 EF B2 CE B8 08 FF EF C3 B8 03 18 EF B2  // ..%.............
    9800: C4 B0 02 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8  // .......%...%....
    9810: 03 00 EF EB E1 50 2E 8E 06 CD 28 A1 4A 04 C1 E0  // .....P....(.J...
    9820: 03 F7 E2 03 C1 8B F8 58 26 88 05 C3 2E 8E 1E CB  // .......X&.......
    9830: 28 8A 26 49 04 E8 6F F4 74 0F 80 FC 07 77 0B 74  // (.&I..o.t....w.t
    9840: 08 E8 5F F5 8B EC 89 46 1A C3 80 FC 13 7C 03 74  // .._....F.....|.t
    9850: 29 C3 E8 35 F7 8A CC 2E 8E 1E CD 28 BA CE 03 32  // )..5.......(...2
    9860: FF B8 04 03 EF D0 E7 8A 1D 22 D9 74 03 80 CF 01  // .........".t....
    9870: FE CC 7D F0 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03  // ..}....~...J....
    9880: F7 E2 03 C1 8B F8 2E 8E 1E CD 28 8A 05 8B EC 88  // ..........(.....
    9890: 46 1A C3 2E 8E 1E CB 28 8A 3E 62 04 8A CF D0 E1  // F......(.>b.....
    98A0: 32 ED BE 50 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76  // 2..P.......I.<.v
    98B0: 4A 2E 8E 06 D1 28 E8 EE F3 75 33 8A 1E 4A 04 8A  // J....(...u3..J..
    98C0: F8 8A C6 F6 E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B  // .............N..
    98D0: F9 8A C7 AA D1 E9 41 FE C2 38 DA 73 59 89 14 8B  // ......A..8.sY...
    98E0: 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E  // .c..............
    98F0: 06 CF 28 80 F9 07 74 C3 E9 83 00 75 04 32 D2 EB  // ..(...t....u.2..
    9900: 0F 3C 0A 75 1D 3A 36 84 04 75 03 E9 93 00 FE C6  // .<.u.:6..u......
    9910: 89 14 E8 92 F3 75 05 80 F9 07 7F 05 8B C2 E8 4C  // .....u.........L
    9920: F6 C3 3C 07 75 04 E8 11 92 C3 3C 08 75 83 0A D2  // ..<.u.....<.u...
    9930: 74 DE FE CA EB DA 32 FF 32 D2 2B CB 3A 36 84 04  // t.....2.2.+.:6..
    9940: 74 06 FE C6 03 CB EB 95 89 14 8B 16 63 04 B0 0E  // t...........c...
    9950: 8A E5 EF 8A E1 FE C0 EF 2B FB 2B FB 26 8A 65 02  // ........+.+.&.e.
    9960: 50 8B 3E 4E 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3  // P.>N............
    9970: 8B C8 06 1F F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01  // ........X. .....
    9980: 00 B4 0A E8 BC C6 FE C2 3A 16 4A 04 74 03 89 14  // ........:.J.t...
    9990: C3 32 FF 32 D2 89 14 3A 36 84 04 74 2E FE C6 EB  // .2.2...:6..t....
    99A0: ED 89 14 2E 8E 06 D1 28 E8 FC F2 74 0E 2E 8E 06  // .......(...t....
    99B0: CF 28 80 F9 07 74 04 32 FF EB 10 8B C2 E8 AD F5  // .(...t.2........
    99C0: 8B F9 D1 E7 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84  // ....O..J...3..6.
    99D0: 04 8A 16 4A 04 FE CA B0 01 E9 70 F7 2E 8E 1E CB  // ...J......p.....
    99E0: 28 F6 06 87 04 08 74 03 CD 42 C3 E8 76 F6 8B EC  // (.....t..B..v...
    99F0: C6 46 1B 00 C3 2E 8E 1E CB 28 8A DF 32 FF D1 E3  // .F.......(..2...
    9A00: 89 97 50 04 D0 EB 38 1E 62 04 75 05 8B C2 E8 5C  // ..P...8.b.u....\
    9A10: F5 C3 2E 8E 1E CB 28 8A DF 32 FF D1 E3 8B 97 50  // ......(..2.....P
    9A20: 04 8B 0E 60 04 8B EC 89 4E 16 89 56 12 C3 2E 8E  // ...`....N..V....
    9A30: 1E CB 28 A0 87 04 24 80 0A 06 49 04 8A 26 4A 04  // ..(...$...I..&J.
    9A40: F6 06 87 04 08 75 2D E8 5D F2 74 07 80 3E 49 04  // .....u-.].t..>I.
    9A50: 07 7F 21 51 8A CC 8A 2E 84 04 BE 1F 9A 81 FE 28  // ..!Q...........(
    9A60: 9A 74 10 2E 3B 0C 74 05 83 C6 03 EB F0 24 80 2E  // .t..;.t......$..
    9A70: 0A 44 02 59 8A 3E 62 04 8B EC 89 46 1A 89 5E 0E  // .D.Y.>b....F..^.
    9A80: 89 4E 16 89 56 12 C3 84 18 23 84 2B 33 84 2A 32  // .N..V....#.+3.*2
    9A90: 2E 8E 1E CB 28 3C 04 7F 1B 50 52 BA CC 03 EC A8  // ....(<...PR.....
    9AA0: 01 5A 58 74 08 80 3E 63 04 D4 74 08 C3 80 3E 63  // .ZXt..>c..t...>c
    9AB0: 04 B4 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5 2E FF  // ..u.<.s.2.......
    9AC0: A6 5B 9A 93 9A B3 9A C5 9A FA 9A 44 9A 44 9A 44  // .[.........D.D.D
    9AD0: 9A 1F 9B 37 9B 3B 9B 44 9A 44 9A 44 9A 44 9A 44  // ...7.;.D.D.D.D.D
    9AE0: 9A 44 9A 69 9B 44 9A 6D 9B 88 9B 44 9A C7 9B 44  // .D.i.D.m...D...D
    9AF0: 9A D5 9B F0 9B F7 9B 03 9C 27 9C 80 3E 49 04 13  // .........'..>I..
    9B00: 74 15 E8 BF F4 8B C3 86 E0 E8 70 EF 0B ED 74 07  // t.........p...t.
    9B10: 8A C7 32 FF 26 88 01 E8 93 F4 C3 E8 A6 F4 8A C7  // ..2.&...........
    9B20: E8 44 FC 0B ED 74 F0 26 88 7D 11 EB EA 80 3E 49  // .D...t.&.}....>I
    9B30: 04 13 74 E3 06 E8 8C F4 1F 0B ED 74 07 8B F2 B9  // ..t........t....
    9B40: 11 00 F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00 B2 C0  // .........2......
    9B50: 9C FA 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8 07 FC  // ................
    9B60: EB B5 80 FB 01 77 B0 E8 43 F4 B2 C0 B0 30 E8 FB  // .....w..C....0..
    9B70: F0 24 F7 80 26 65 04 DF 80 FB 00 74 07 0C 08 80  // .$..&e.....t....
    9B80: 0E 65 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0 E8 DB  // .e. ............
    9B90: F0 8B C8 EE B0 20 EE 8B EC 88 4E 0F E9 78 FF B3  // ..... ....N..x..
    9BA0: 11 EB E4 8B FA E8 05 F4 B9 10 00 32 E4 B2 C0 8A  // ...........2....
    9BB0: C4 9C FA EE 42 EC 26 88 05 FE C4 4A EE 9D 47 E2  // ....B.&....J..G.
    9BC0: EE 9C FA B0 11 EE 42 EC 9D 26 88 05 E8 E3 F3 EB  // ......B..&......
    9BD0: 5A E8 CE 00 C3 8B FA 51 8B C3 26 8A 35 26 8A 6D  // Z......Q..&.5&.m
    9BE0: 01 26 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2 E8 C3  // .&.M.......CY...
    9BF0: 0A DB 75 1A E8 B6 F3 B2 C0 B0 30 E8 6E F0 24 7F  // ..u.......0.n.$.
    9C00: F6 C7 01 74 02 0C 80 B4 30 E8 70 EE EB 1D FE CB  // ...t....0.p.....
    9C10: 75 1C E8 98 F3 B2 C0 B0 30 E8 50 F0 EE A8 80 75  // u.......0.P....u
    9C20: 03 C0 E7 02 B4 34 8A C7 E8 51 EE E8 7F F3 C3 8A  // .....4...Q......
    9C30: C3 E8 D1 00 8B EC 89 4E 16 88 76 13 C3 8B FA 51  // .......N..v....Q
    9C40: 8B C3 E8 C3 00 26 88 35 26 88 6D 01 26 88 4D 02  // .....&.5&.m.&.M.
    9C50: 83 C7 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE C3 BA  // ...CY...........
    9C60: C6 03 EC 32 E4 8B EC 89 46 0E C3 E8 3F F3 B2 C0  // ...2....F...?...
    9C70: B0 34 E8 F7 EF 8A F8 EE B0 30 E8 EF EF B3 01 A8  // .4.......0......
    9C80: 80 75 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB 9C 51  // .u.........^...Q
    9C90: 8B C3 E8 73 00 E8 2A 00 8A C3 E8 52 00 43 59 E2  // ...s..*....R.CY.
    9CA0: EE C3 F6 06 89 04 02 74 03 E8 16 00 8A C3 E8 39  // .......t.......9
    9CB0: 00 C3 F6 06 89 04 02 74 03 E8 06 00 8A C3 E8 2E  // .......t........
    9CC0: 00 C3 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0 0B F6  // ..P....P.;..P...
    9CD0: E1 59 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32 7C 02  // .Y..Y...d....2|.
    9CE0: FE C0 8A F0 8A E8 8A C8 58 C3 52 E8 39 00 5A 53  // ........X.R.9.ZS
    9CF0: 8B DA BA C8 03 9C FA EE 42 8A C7 EE 8A C5 EE 8A  // ........B.......
    9D00: C1 EE 9D 5B C3 E8 1F 00 53 9C FA BA C7 03 EE 42  // ...[....S......B
    9D10: 42 EC 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB 00 EC  // B...............
    9D20: 8A C8 8A F7 9D 5B C3 50 51 E8 81 F2 B9 FF 7F EC  // .....[.PQ.......
    9D30: A8 08 75 02 E2 F9 59 58 C3 2E 8E 1E CB 28 8B F8  // ..u...YX.....(..
    9D40: 24 0F 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18 2E FF  // $...............
    9D50: A5 EB 9C F3 9C 08 9D A6 9D 02 9E 3C 03 74 08 3C  // ...........<.t.<
    9D60: 04 7F 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3 EF C3  // ................
    9D70: 3C 04 77 F2 50 53 50 52 8B 16 63 04 B0 07 E8 EB  // <.w.PSPR..c.....
    9D80: EE 8A E0 D0 EC 80 E4 01 A8 40 74 03 80 CC 02 B0  // .........@t.....
    9D90: 12 E8 D8 EE 40 A3 85 04 B0 09 E8 CF EE A8 80 74  // ....@..........t
    9DA0: 04 D1 2E 85 04 A1 85 04 8B D0 3D F4 01 73 1B BA  // ..........=..s..
    9DB0: E0 01 3D C2 01 73 13 BA 90 01 3D 7C 01 73 0B BA  // ..=..s....=|.s..
    9DC0: 5E 01 3D 4A 01 73 03 BA C8 00 89 16 85 04 5A 58  // ^.=J.s........ZX
    9DD0: C6 06 84 04 FF E8 5D 01 5B 58 8A DF 32 FF 0A C0  // ......].[X..2...
    9DE0: 74 0E B3 0E 3C 01 74 08 B3 08 3C 02 74 02 B3 10  // t...<.t...<.t...
    9DF0: 8A CB 8A E9 81 E9 01 02 80 F9 08 7E 04 81 E9 01  // ...........~....
    9E00: 01 87 1E 85 04 53 E8 5B F2 5B E8 85 02 C3 0A C0  // .....S.[.[......
    9E10: 74 11 FE C8 74 1A FE C8 74 38 FE C8 74 3C FE C8  // t...t...t8..t<..
    9E20: 74 40 C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8 8E C0  // t@...|...~......
    9E30: FE CA 0A DB 74 07 32 FF 2E 8A 97 E6 9D 89 0E 85  // ....t.2.........
    9E40: 04 88 16 84 04 89 2E 0C 01 8C 06 0E 01 C3 00 0D  // ................
    9E50: 18 2A E8 09 03 B9 0E 00 EB D6 BD F6 6C B9 08 00  // .*..........l...
    9E60: EB CA BD 09 75 B9 10 00 EB C2 0A C0 75 BD 8B 0E  // ....u.......u...
    9E70: 85 04 8A 16 84 04 80 FF 07 77 35 80 FF 01 77 10  // .........w5...w.
    9E80: 0A FF 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01 EB 20  // ..u...|..&..... 
    9E90: 80 FF 02 75 0B 8C CD 8E C5 2E 8B 2E E8 85 EB 10  // ...u............
    9EA0: 0E 07 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF 59 9E  // ....2.........Y.
    9EB0: 8B C5 8B EC 89 4E 16 89 56 12 89 46 0A 8C 46 1E  // .....N..V..F..F.
    9EC0: C3 09 75 F6 6C F6 70 F6 74 09 75 09 85 53 06 8A  // ..u.l.p.t.u..S..
    9ED0: 26 49 04 E8 C7 C3 26 8A 47 02 26 8A 67 33 F6 C4  // &I....&.G.&.g3..
    9EE0: 01 74 22 BD 09 75 3C 10 7D 0E E8 71 02 8C 06 0E  // .t"..u<.}..q....
    9EF0: 01 3C 0E 7D 07 BD F6 6C 8C 0E 0E 01 89 2E 0C 01  // .<.}...l........
    9F00: E8 10 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C 0E 74  // ....-..<.}...<.t
    9F10: 0D 7F 15 B4 02 3C 08 74 05 80 CC 80 EB 0A 26 F6  // .....<.t......&.
    9F20: 47 05 01 74 03 80 E4 7F 86 C4 32 DB E8 06 00 E8  // G..t......2.....
    9F30: C9 01 07 5B C3 8B F8 8B F2 BA CE 03 EC B8 05 00  // ...[............
    9F40: EF B8 06 04 EF B2 C4 EC B8 02 04 EF B8 04 07 EF  // ................
    9F50: 8B D6 8B C7 50 24 7F 0A C0 74 22 0E 07 33 D2 B9  // ....P$...t"..3..
    9F60: 00 01 3C 04 75 07 B7 10 BD 09 75 EB 10 FE C8 75  // ..<.u.....u....u
    9F70: 07 B7 0E E8 E8 01 EB 05 B7 08 BD F6 6C E8 2D 00  // ............l.-.
    9F80: 58 A8 80 74 00 BA C4 03 B8 02 03 EF B8 04 02 EF  // X..t............
    9F90: B2 CC EC A8 01 B8 06 0E 75 02 B4 0A B2 CE 50 EC  // ........u.....P.
    9FA0: 58 EF B0 04 EE 32 C0 EE B8 05 10 EF C3 FC 0B C9  // X....2..........
    9FB0: 75 01 C3 80 FF 0E 75 0A 26 83 7E FE 10 75 03 80  // u.....u.&.~..u..
    9FC0: CD 80 1E 06 1F 2E 8E 06 CD 28 8B FA C1 E7 05 B0  // .........(......
    9FD0: 40 53 80 E3 03 F6 E3 5B F6 C3 04 74 02 04 20 86  // @S.....[...t.. .
    9FE0: E0 8B D0 03 FA 8B F5 E3 28 32 C0 86 FB 32 FF 51  // ........(2...2.Q
    9FF0: F6 C5 80 74 01 46 8B CB F3 A4 83 FB 20 74 07 B9  // ...t.F...... t..
    A000: 20 00 2B CB F3 AA 59 F6 C5 80 74 01 46 FE C9 75  //  .+...Y...t.F..u
    A010: DE 1F C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4  // ....&I.P.W.>..&.
    A020: 7D 0C 8C C5 0B EF 74 30 8B EF 83 C7 07 26 8A 05  // }.....t0.....&..
    A030: 3C FF 74 24 38 E0 74 03 47 EB F2 8B FD 26 8A 05  // <.t$8.t.G....&..
    A040: FE C8 A2 84 04 26 8B 45 01 A3 85 04 26 C4 7D 03  // .....&.E....&.}.
    A050: 89 3E 0C 01 8C 06 0E 01 5F 07 58 C3 26 F6 47 33  // .>......_.X.&.G3
    A060: 01 74 01 C3 C4 1E A8 04 26 C4 5F 08 8C C0 0B C3  // .t......&._.....
    A070: 74 1F BF 0B 00 26 8A 01 3C FF 74 15 47 38 06 49  // t....&..<.t.G8.I
    A080: 04 75 F2 26 8A 07 32 E4 87 06 85 04 8B D8 E8 01  // .u.&..2.........
    A090: 00 C3 8B 16 63 04 8A 26 85 04 FE CC 80 E4 1F 9C  // ....c..&........
    A0A0: FA 80 FA D4 74 0B B0 14 EE 42 EC 24 E0 0A C4 EE  // ....t....B.$....
    A0B0: 4A B0 09 EE 42 EC 24 E0 0A C4 EE 9D 8A C8 8B C3  // J...B.$.........
    A0C0: 8A 16 85 04 F6 F2 80 3E 84 04 FF 75 07 A2 84 04  // .......>...u....
    A0D0: FE 0E 84 04 F6 E2 F6 C1 80 74 02 D1 E0 48 8A E0  // .........t...H..
    A0E0: B0 12 8B 16 63 04 EF A0 4A 04 8A 26 84 04 FE C4  // ....c...J..&....
    A0F0: F6 E4 D1 E0 05 00 01 A3 4C 04 C3 8A 26 49 04 50  // ........L...&I.P
    A100: 06 57 C4 3E A8 04 26 C4 7D 08 8C C5 0B EF 74 4A  // .W.>..&.}.....tJ
    A110: 8B EF 83 C7 0B 26 8A 05 3C FF 74 3E 38 E0 74 03  // .....&..<.t>8.t.
    A120: 47 EB F2 8B FD 26 8A 3D 26 8A 5D 01 26 8B 4D 02  // G....&.=&.].&.M.
    A130: 26 8B 55 04 26 8A 45 0A 3C FF 74 02 FE C8 50 A0  // &.U.&.E.<.t...P.
    A140: 84 04 FE C0 F6 26 85 04 A3 85 04 58 A2 84 04 26  // .....&.....X...&
    A150: C4 7D 06 8B EF 32 C0 E8 DB FD 5F 07 58 C3 50 53  // .}...2...._.X.PS
    A160: 51 52 2E A1 D5 28 0B C0 74 09 2E 8B 2E E8 85 0E  // QR...(..t.......
    A170: 07 EB 08 B8 30 11 B7 02 E8 C7 BE 5A 59 5B 58 C3  // ....0......ZY[X.
    A180: 3C 04 7C 01 C3 E3 FD 53 2E 8E 1E CB 28 86 FB 32  // <.|....S....(..2
    A190: FF D1 E3 8B FB 81 C7 50 04 8B 35 5B 89 15 56 8B  // .......P..5[..V.
    A1A0: F0 51 53 26 8A 46 00 45 3C 0D 7F 1F 75 04 32 D2  // .QS&.F.E<...u.2.
    A1B0: EB 40 3C 0A 74 32 3C 07 75 05 E8 7D 89 EB 62 3C  // .@<.t2<.u..}..b<
    A1C0: 08 75 08 0A D2 74 5A FE CA EB 27 F7 C6 02 00 74  // .u...tZ...'....t
    A1D0: 05 26 8A 5E 00 45 B9 01 00 B4 09 E8 64 BE FE C2  // .&.^.E......d...
    A1E0: 3A 16 4A 04 72 0C 32 D2 89 15 3A 36 84 04 73 06  // :.J.r.2...:6..s.
    A1F0: FE C6 89 15 EB 2B 50 E8 AD EA 75 08 B8 00 08 E8  // .....+P...u.....
    A200: 40 BE EB 09 80 3E 49 04 07 74 F1 32 E4 86 3E 62  // @....>I..t.2..>b
    A210: 04 53 8A FC 55 E8 25 00 5D 5B 86 3E 62 04 58 8B  // .S..U.%.][.>b.X.
    A220: 15 5B 59 E2 15 5A F7 C6 01 00 75 02 89 15 8B 05  // .[Y..Z....u.....
    A230: 3A 3E 62 04 75 03 E8 34 ED C3 E9 64 FF 33 C9 8A  // :>b.u..4...d.3..
    A240: 36 84 04 8A 16 4A 04 FE CA B8 01 06 E8 F3 BD C3  // 6....J..........
    A250: 2E 8E 1E CB 28 0A C0 75 0D E8 18 00 8B EC 89 5E  // ....(..u.......^
    A260: 0E C6 46 1A 1A C3 3C 01 75 09 E8 41 00 8B EC C6  // ..F...<.u..A....
    A270: 46 1A 1A C3 A0 8A 04 BF E6 A2 2E 3A 05 72 04 BB  // F..........:.r..
    A280: FF FF C3 32 E4 D1 E0 03 F8 2E 8B 5D 04 0A DB 74  // ...2.......]...t
    A290: 05 0A FF 75 04 C3 86 FB C3 A0 10 04 24 30 3C 30  // ...u........$0<0
    A2A0: 74 06 F6 C3 01 75 EF C3 F6 C3 01 74 E9 C3 BF E6  // t....u.....t....
    A2B0: A2 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D 74 12 86 FB  // ....2.....;.t...
    A2C0: 2E 3B 1D 74 0B 83 C7 02 FE C0 38 C8 7E EB B0 FF  // .;.t......8.~...
    A2D0: A2 8A 04 C3 BB 08 00 F6 06 89 04 02 74 0E BB 07  // ............t...
    A2E0: 00 BA CC 03 EC A8 01 74 18 BB 08 00 BA B4 03 E8  // .......t........
    A2F0: DF EC 74 21 B7 01 E8 8C E9 80 FA D4 74 17 86 FB  // ..t!........t...
    A300: C3 BA D4 03 E8 CA EC 74 0C B7 02 E8 77 E9 80 FA  // .......t....w...
    A310: B4 74 02 86 FB C3 0F 08 0F 08 0F 08 0F 08 03 01  // .t..............
    A320: 03 01 01 01 00 08 01 01 01 01 01 01 01 01 0F 01  // ................
    A330: 0F 08 0F 04 00 02 0F 02 01 01 0F 01 FF 01 FF E0  // ................
    A340: 0F 00 00 00 00 07 02 08 FF 0E 00 00 3F 00 10 01  // ............?...
    A350: 08 00 00 00 00 01 00 02 02 01 00 04 04 01 00 05  // ................
    A360: 02 05 00 06 01 06 05 06 00 08 01 08 00 07 02 07  // ................
    A370: 06 07 CA 00 34 00 90 00 96 00 00 00 00 00 00 00  // ....4...........
    A380: 5F 57 C3 90 50 66 52 E8 F4 FF FF FF 81 EF 10 00  // _W..PfR.........
    A390: 00 00 2E 8B 07 66 BA F8 0C EF 66 BA FC 0C ED 32  // .....f....f....2
    A3A0: C0 66 8B F8 66 5A 58 C3 66 B8 4F 03 66 52 66 56  // .f..fZX.f.O.fRfV
    A3B0: 53 57 50 0A FF 75 44 E8 C8 FF FF FF 66 33 F6 66  // SWP..uD.....f3.f
    A3C0: BB 53 00 E8 48 00 00 00 C1 E8 10 F6 C4 40 75 2B  // .S..H........@u+
    A3D0: 66 81 E2 FF 02 66 D1 E2 66 8B C2 66 40 C1 E0 10  // f....f..f..f@...
    A3E0: 66 8B C2 66 BB 13 00 E8 30 00 00 00 66 BB 12 00  // f..f....0...f...
    A3F0: E8 27 00 00 00 66 58 32 E4 66 50 58 5F 5B 66 5E  // .'...fX2.fPX_[f^
    A400: 66 5A C3 90 66 B8 4F 03 C3 90 66 B8 4F 03 C3 90  // fZ..f.O...f.O...
    A410: 66 52 E8 11 00 00 00 ED 66 5A C3 90 66 52 E8 05  // fR......fZ..fR..
    A420: 00 00 00 EF 66 5A C3 90 66 8B D7 50 33 C0 66 8B  // ....fZ..f..P3.f.
    A430: C3 66 03 C6 C1 E0 02 EF 66 83 C2 04 58 C3 EE 4B  // .f......f...X..K
    A440: E1 4B E1 4B E1 4B CC 4B CC 4B CC 4B CC 4B 0E 48  // .K.K.K.K.K.K.K.H
    A450: 85 48 AF 48 F0 49 EF 49 EF 49 35 4A 9A 4A CA 4A  // .H.H.I.I.I5J.J.J
    A460: 87 4B B0 4B B0 4B 27 4A 1A 4A 1A 4A 1A 4A 1A 4A  // .K.K.K'J.J.J.J.J
    A470: 1A 4A 35 4A 9A 4A CA 4A 87 4B B5 4B FB 4B B0 4B  // .J5J.J.J.K.K.K.K
    A480: B0 4B FF FF FF FF FF FF 00 00 FF FF 00 00 FF FF  // .K..............
    A490: 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00 FF 00  // ................
    A4A0: 00 00 00 00 08 10 00 08 10 18 00 08 10 18 12 46  // ...............F
    A4B0: 01 12 46 02 20 5A 03 00 5A 03 37 47 03 EB 46 03  // ..F. Z..Z.7G..F.
    A4C0: 13 46 04 2C 46 04 3C 46 04 12 46 03 00 00 00 00  // .F.,F.<F..F.....
    A4D0: BF 4D 00 02 BF 4D 01 02 BF 4D 02 02 BF 4D 03 02  // .M...M...M...M..
    A4E0: BF 4D 04 02 BF 4D 05 02 B9 4F 00 02 B9 4F 01 02  // .M...M...O...O..
    A4F0: B9 4F 02 02 B9 4F 03 02 B9 4F 04 02 B9 4F 05 02  // .O...O...O...O..
    A500: EE 4F 00 02 EE 4F 01 02 EE 4F 02 02 EE 4F 03 02  // .O...O...O...O..
    A510: EE 4F 04 02 EE 4F 05 02 29 52 00 02 29 52 01 02  // .O...O..)R..)R..
    A520: 29 52 02 02 29 52 03 02 29 52 04 02 29 52 05 02  // )R..)R..)R..)R..
    A530: 29 52 00 02 29 52 01 02 29 52 02 02 29 52 03 02  // )R..)R..)R..)R..
    A540: 29 52 04 02 29 52 05 02 F0 50 00 02 F0 50 01 02  // )R..)R...P...P..
    A550: F0 50 02 02 F0 50 03 02 F0 50 04 02 F0 50 05 02  // .P...P...P...P..
    A560: 2C 51 00 02 2C 51 01 02 2C 51 02 02 2C 51 03 02  // ,Q..,Q..,Q..,Q..
    A570: 2C 51 04 02 2C 51 05 02 9D 50 00 02 9D 50 01 02  // ,Q..,Q...P...P..
    A580: 9D 50 02 02 9D 50 03 02 9D 50 04 02 9D 50 05 02  // .P...P...P...P..
    A590: D1 50 00 02 D1 50 01 02 D1 50 02 02 D1 50 03 02  // .P...P...P...P..
    A5A0: D1 50 04 02 D1 50 05 02 81 54 00 00 B4 54 01 00  // .P...P...T...T..
    A5B0: B4 54 02 00 A1 54 00 00 8F 53 00 02 88 51 00 02  // .T...T...S...Q..
    A5C0: 88 51 01 02 88 51 02 02 88 51 03 02 88 51 04 02  // .Q...Q...Q...Q..
    A5D0: 88 51 05 02 A7 53 00 02 FC 55 05 00 FC 55 01 00  // .Q...S...U...U..
    A5E0: FC 55 00 00 FC 55 02 00 3D 56 00 00 3D 56 02 00  // .U...U..=V..=V..
    A5F0: 82 56 00 00 12 53 00 02 12 53 01 02 12 53 02 02  // .V...S...S...S..
    A600: 12 53 03 02 12 53 04 02 12 53 05 02 CE 54 00 00  // .S...S...S...T..
    A610: F6 54 00 00 77 55 00 00 F2 55 00 00 D6 51 00 02  // .T..wU...U...Q..
    A620: D6 51 01 02 D6 51 02 02 D6 51 03 02 D6 51 04 02  // .Q...Q...Q...Q..
    A630: D6 51 05 02 F1 55 00 01 F1 55 00 01 F5 4E 00 02  // .Q...U...U...N..
    A640: F5 4E 01 02 F5 4E 02 02 F5 4E 03 02 F5 4E 04 02  // .N...N...N...N..
    A650: F5 4E 05 02 16 55 00 00 F2 55 00 00 F2 55 00 00  // .N...U...U...U..
    A660: F2 55 00 00 27 54 00 00 19 50 00 02 19 50 01 02  // .U..'T...P...P..
    A670: 19 50 02 02 19 50 03 02 19 50 04 02 19 50 05 02  // .P...P...P...P..
    A680: 48 50 00 02 48 50 01 02 48 50 02 02 48 50 03 02  // HP..HP..HP..HP..
    A690: 48 50 04 02 48 50 05 02 7E 50 00 02 7E 50 01 02  // HP..HP..~P..~P..
    A6A0: 7E 50 02 02 7E 50 03 02 7E 50 04 02 7E 50 05 02  // ~P..~P..~P..~P..
    A6B0: 39 55 00 00 5C 55 00 00 1A 51 01 02 1A 51 02 02  // 9U..\U...Q...Q..
    A6C0: 76 51 01 02 76 51 02 02 A6 00 02 01 06 A7 00 00  // vQ..vQ..........
    A6D0: 00 00 00 00 00 00 00 00 6A A7 00 00 00 00 00 00  // ........j.......
    A6E0: 00 00 00 00 00 00 F0 AC 00 00 00 00 00 00 00 00  // ................
    A6F0: 00 00 00 00 00 00 00 00 B6 A7 00 00 00 00 00 00  // ................
    A700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0E AD  // ................
    A720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A730: 00 00 00 00 00 00 DE A7 00 00 00 00 00 00 00 00  // ................
    A740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A750: CE A8 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 63 00  // ..............c.
    A770: 02 01 00 00 37 00 00 4B E5 00 04 49 37 00 56 00  // ....7..K...I7.V.
    A780: 40 01 05 00 00 61 60 01 00 3C E5 01 00 80 44 37  // @....a`..<....D7
    A790: 00 51 14 2D 05 40 01 00 00 00 3E 05 40 20 A1 07  // .Q.-.@....>.@ ..
    A7A0: 00 45 13 00 5B 52 0D 03 00 41 E3 0D 3E 05 41 00  // .E..[R...A..>.A.
    A7B0: 00 00 00 44 62 00 33 05 41 01 00 00 00 1B 05 41  // ...Db.3.A......A
    A7C0: 0B 01 02 06 00 41 0D 25 1F 0E 03 0D 65 53 00 02  // .....A.%....eS..
    A7D0: 5B 00 4B 00 01 01 00 00 37 00 00 42 21 00 63 00  // [.K.....7..B!.c.
    A7E0: 1F 00 63 01 39 00 63 03 3F 00 63 02 45 00 5A 5A  // ..c.9.c.?.c.E.ZZ
    A7F0: 5B 03 05 40 00 00 05 04 2D 19 40 00 15 05 40 02  // [..@....-.@...@.
    A800: 01 02 0C 00 40 02 00 00 0D 00 5B 02 00 00 E3 0D  // ....@.....[.....
    A810: 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D 5B 00 28 00  // [.....[.....[.(.
    A820: 02 01 00 00 37 00 00 01 05 00 00 6C A8 01 00 02  // ....7......l....
    A830: 00 00 01 00 02 01 01 00 01 05 00 00 6D A8 01 00  // ............m...
    A840: 02 00 02 01 00 5B F0 00 03 03 0C 00 37 00 00 66  // .....[......7..f
    A850: 04 03 04 46 28 00 3E 05 46 00 00 00 00 49 3C 00  // ...F(.>.F....I<.
    A860: 03 01 00 00 03 01 01 01 03 01 02 02 52 16 03 01  // ............R...
    A870: 46 00 1B 05 46 08 02 02 00 00 02 02 01 01 02 02  // F...F...........
    A880: 02 02 3D 65 02 00 49 47 00 2C 22 02 46 3D E5 02  // ..=e..IG.,".F=..
    A890: 00 49 52 00 2C A2 02 46 3D 65 02 02 49 6D 00 01  // .IR.,..F=e..Im..
    A8A0: 05 00 00 E5 68 01 00 01 01 01 00 00 02 05 00 98  // ....h...........
    A8B0: A3 05 00 03 01 40 03 09 05 40 00 00 00 FC 3E 05  // .....@...@....>.
    A8C0: 40 00 00 00 D0 49 90 00 01 05 63 C0 00 00 00 40  // @....I....c....@
    A8D0: 55 20 02 43 94 00 54 00 63 C0 01 01 64 C0 00 56  // U .C..T.c...d..V
    A8E0: 00 40 03 21 40 02 01 02 65 C0 40 01 01 66 C0 01  // .@.!@...e.@..f..
    A8F0: 03 31 40 02 01 02 67 C0 40 01 01 E8 C0 03 3D 65  // .1@...g.@.....=e
    A900: 02 01 44 E7 00 3D E5 02 01 44 E7 00 51 02 56 00  // ..D..=...D..Q.V.
    A910: 40 4A E5 A0 21 80 44 EF 00 51 14 2D 05 40 01 00  // @J..!.D..Q.-.@..
    A920: 00 00 3E 05 40 A0 86 01 00 45 CB 00 5B 4A E5 A0  // ..>.@....E..[J..
    A930: 21 80 49 E7 00 5B 21 04 01 01 04 00 37 00 00 3D  // !.I..[!.....7..=
    A940: 25 00 00 44 F5 00 4A 05 A3 36 02 00 00 00 44 20  // %..D..J..6....D 
    A950: 04 03 05 00 32 00 00 00 03 00 40 97 36 03 05 46  // ....2.....@.6..F
    A960: 00 31 00 00 04 02 04 40 03 03 41 05 3E 02 41 40  // .1.....@..A.>.A@
    A970: 48 4C 00 33 02 40 41 03 03 41 06 33 02 41 40 43  // HL.3.@A..A.3.A@C
    A980: 50 00 33 02 41 40 3E 05 41 00 00 00 00 44 70 00  // P.3.A@>.A....Dp.
    A990: 33 05 00 01 00 00 00 3E 05 00 00 00 00 00 44 20  // 3......>......D 
    A9A0: 04 51 14 43 22 00 03 03 40 05 03 02 41 40 2D 05  // .Q.C"...@...A@-.
    A9B0: 40 00 00 00 00 03 02 46 40 04 01 00 00 04 01 01  // @......F@.......
    A9C0: 01 04 01 02 02 04 01 03 03 04 01 04 04 04 01 05  // ................
    A9D0: 05 04 01 06 06 2D 05 41 40 00 00 00 3E 05 41 00  // .....-.A@...>.A.
    A9E0: 20 00 00 45 B7 00 27 05 41 00 20 00 00 03 05 46  //  ..E..'.A. ....F
    A9F0: 00 31 00 00 04 02 05 41 01 02 96 36 41 03 05 00  // .1.....A...6A...
    AA00: 80 1A 06 00 03 00 41 97 36 03 00 40 96 36 3E 02  // ......A.6..@.6>.
    AA10: 41 40 44 20 04 33 05 00 01 00 00 00 3E 05 00 00  // A@D .3......>...
    AA20: 00 00 00 44 20 04 51 14 43 CE 00 3D 65 00 01 44  // ...D .Q.C..=e..D
    AA30: 32 01 4A 05 B6 36 00 00 01 00 49 32 01 4A 05 B6  // 2.J..6....I2.J..
    AA40: 36 00 00 02 00 44 32 01 01 05 00 00 61 60 01 00  // 6....D2.....a`..
    AA50: 01 05 01 00 00 00 00 08 01 05 00 00 61 60 01 00  // ............a`..
    AA60: 3C E5 01 00 80 49 2A 01 4A 05 B6 36 00 00 02 00  // <....I*.J..6....
    AA70: 49 D1 01 01 05 B8 36 00 00 02 10 03 05 41 0A 00  // I.....6......A..
    AA80: 00 00 33 05 41 01 00 00 00 3E 05 41 00 00 00 00  // ..3.A....>.A....
    AA90: 44 8F 01 51 0A 3C 05 B8 36 00 00 02 00 49 4C 01  // D..Q.<..6....IL.
    AAA0: 03 05 41 04 00 00 00 51 0A 33 05 41 01 00 00 00  // ..A....Q.3.A....
    AAB0: 3E 05 41 00 00 00 00 44 8F 01 3C 05 AA 36 AD DE  // >.A....D..<..6..
    AAC0: AD DE 49 71 01 01 05 B8 36 00 00 00 00 0D 05 B6  // ..Iq....6.......
    AAD0: 36 00 00 02 00 07 05 B6 36 FF FF FE FF 0D 05 01  // 6.......6.......
    AAE0: 38 00 01 00 00 51 0A 01 05 97 36 00 00 00 00 01  // 8....Q....6.....
    AAF0: 05 96 36 00 00 00 00 01 05 A3 36 00 00 00 00 07  // ..6.......6.....
    AB00: 05 01 38 FF FE FF FF 66 0B 03 04 00 04 00 02 02  // ..8....f........
    AB10: 04 00 15 05 00 0A 1A 05 04 16 02 05 00 00 00 00  // ................
    AB20: 00 02 02 01 00 2C 05 01 00 00 02 00 55 00 02 02  // .....,......U...
    AB30: 89 02 04 02 05 03 00 00 05 D0 52 35 02 05 00 00  // ..........R5....
    AB40: 00 00 00 02 02 01 00 2C 05 01 00 00 00 00 55 00  // .......,......U.
    AB50: 02 02 89 02 04 02 05 03 00 20 00 D0 52 35 66 16  // ......... ..R5f.
    AB60: 3E 0D 42 00 00 44 9B 02 56 00 41 03 0C 41 00 00  // >.B..D..V.A..A..
    AB70: 2D 05 41 0F 00 00 00 09 05 41 F0 FF 00 00 2D 0A  // -.A......A....-.
    AB80: 41 42 03 05 46 00 80 00 00 56 08 42 04 04 00 00  // AB..F....V.B....
    AB90: 00 2D 05 46 04 00 00 00 2D 05 42 04 00 00 00 3E  // .-.F....-.B....>
    ABA0: 02 42 41 45 56 02 02 05 00 00 80 00 00 2C 02 00  // .BAEV........,..
    ABB0: 00 02 02 01 00 2C 05 01 00 00 02 00 02 89 02 04  // .....,..........
    ABC0: 02 09 02 04 02 05 03 00 00 00 40 02 0A 03 41 52  // ..........@...AR
    ABD0: 35 52 16 02 01 02 00 14 05 00 18 1A 05 02 08 03  // 5R..............
    ABE0: 02 41 00 2D 05 41 00 00 02 00 2D 01 41 00 01 02  // .A.-.A....-.A...
    ABF0: 7B 36 41 03 01 40 04 2D 01 40 02 01 02 7C 36 40  // {6A..@.-.@...|6@
    AC00: 01 05 68 36 00 00 00 03 01 05 70 36 FF FF 01 83  // ..h6......p6....
    AC10: 03 02 41 00 2D 05 41 00 00 04 00 2D 01 41 00 01  // ..A.-.A....-.A..
    AC20: 02 7D 36 41 03 01 40 04 2D 01 40 02 01 02 7E 36  // .}6A..@.-.@...~6
    AC30: 40 01 05 69 36 00 00 00 04 01 05 71 36 FF FF 00  // @..i6......q6...
    AC40: 84 03 02 41 00 2D 05 41 00 00 05 00 2D 01 41 00  // ...A.-.A....-.A.
    AC50: 01 02 7F 36 41 03 01 40 04 2D 01 40 02 01 02 80  // ...6A..@.-.@....
    AC60: 36 40 01 05 6A 36 00 00 00 05 01 05 72 36 FF FF  // 6@..j6......r6..
    AC70: 00 85 03 02 41 00 2D 05 41 00 00 06 00 2D 01 41  // ....A.-.A....-.A
    AC80: 00 01 02 81 36 41 03 01 40 04 2D 01 40 02 01 02  // ....6A..@.-.@...
    AC90: 82 36 40 01 05 6B 36 00 00 00 06 01 05 73 36 FF  // .6@..k6......s6.
    ACA0: FF 00 86 03 05 46 00 31 00 00 03 02 41 00 2D 05  // .....F.1....A.-.
    ACB0: 41 00 00 00 00 2D 01 41 00 03 01 40 04 2D 01 40  // A....-.A...@.-.@
    ACC0: 02 04 02 00 41 04 02 01 40 04 05 04 00 00 00 00  // ....A...@.......
    ACD0: 04 05 05 00 00 00 00 04 05 06 00 20 00 00 01 05  // ........... ....
    ACE0: 94 36 00 00 00 80 01 05 95 36 00 20 00 00 01 02  // .6.......6. ....
    ACF0: 56 36 41 01 02 57 36 40 01 05 61 36 FF FF 00 80  // V6A..W6@..a6....
    AD00: 01 05 97 36 00 00 00 00 01 05 96 36 00 00 00 00  // ...6.......6....
    AD10: 03 00 41 96 36 01 05 B1 36 00 00 00 00 5C 05 B6  // ..A.6...6....\..
    AD20: 36 00 FF FF FF C6 00 09 00 07 05 B6 36 FF FF FD  // 6...........6...
    AD30: FF 03 05 41 50 C3 00 00 4A 05 A3 36 02 00 00 00  // ...AP...J..6....
    AD40: 49 20 04 51 14 33 05 41 01 00 00 00 3E 05 41 00  // I .Q.3.A....>.A.
    AD50: 00 00 00 49 02 04 5B 00 1E 00 02 01 00 04 37 00  // ...I..[.......7.
    AD60: 00 66 16 03 0C 41 04 00 4C 0D 41 02 00 44 1D 00  // .f...A..L.A..D..
    AD70: 0D A5 4C 00 02 5B 15 00 03 01 04 00 37 00 00 03  // ..L..[......7...
    AD80: 05 46 10 27 00 00 02 02 00 46 5B FF FF FF FF FF  // .F.'.....F[.....
    AD90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ADA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ADB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ADC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ADD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ADE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ADF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE60: FF FF FF FF FF FF FF FF 13 00 00 00 00 00 00 00  // ................
    AE70: 00 00 00 00 02 10 4E 16 00 00 00 00 01 00 00 00  // ......N.........
    AE80: 00 AE 00 00 55 AA 57 E9 4E 23 00 00 00 00 00 00  // ....U.W.N#......
    AE90: 00 00 00 00 00 00 00 00 00 00 00 00 B8 01 00 00  // ................
    AEA0: 00 00 49 42 4D C8 24 A1 00 00 00 00 00 00 00 00  // ..IBM.$.........
    AEB0: 00 00 00 04 20 37 36 31 32 39 35 35 32 30 00 00  // .... 761295520..
    AEC0: 00 00 00 00 00 00 00 00 00 00 00 00 8A 01 00 00  // ................
    AED0: 00 00 00 00 30 39 2F 32 36 2F 32 32 2C 32 32 3A  // ....09/26/22,22:
    AEE0: 31 39 3A 32 34 00 00 00 E9 83 24 00 E9 8D 24 00  // 19:24.....$...$.
    AEF0: 00 00 70 00 31 30 32 2D 52 41 50 48 41 45 4C 2D  // ..p.102-RAPHAEL-
    AF00: 30 30 38 00 52 41 50 48 41 45 4C 00 50 43 49 5F  // 008.RAPHAEL.PCI_
    AF10: 45 58 50 52 45 53 53 00 30 00 0D 0A 52 61 70 68  // EXPRESS.0...Raph
    AF20: 61 65 6C 20 47 65 6E 65 72 69 63 20 56 42 49 4F  // ael Generic VBIO
    AF30: 53 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  // S               
    AF40: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    AF50: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    AF60: 20 20 20 20 20 20 20 20 0D 0A 00 0D 0A 20 0D 0A  //         ..... ..
    AF70: 00 28 43 29 20 31 39 38 38 2D 32 30 32 30 2C 20  // .(C) 1988-2020, 
    AF80: 41 64 76 61 6E 63 65 64 20 4D 69 63 72 6F 20 44  // Advanced Micro D
    AF90: 65 76 69 63 65 73 2C 20 49 6E 63 2E 00 41 54 4F  // evices, Inc..ATO
    AFA0: 4D 42 49 4F 53 42 4B 2D 41 4D 44 20 56 45 52 30  // MBIOSBK-AMD VER0
    AFB0: 33 32 2E 30 31 39 2E 30 30 30 2E 30 30 38 2E 30  // 32.019.000.008.0
    AFC0: 30 30 30 30 30 00 52 70 6C 47 65 6E 65 72 69 63  // 00000.RplGeneric
    AFD0: 56 62 00 32 33 39 34 30 31 32 20 00 36 31 32 31  // Vb.2394012 .6121
    AFE0: 32 37 20 20 00 20 20 20 20 20 20 20 20 00 41 4D  // 27  .        .AM
    AFF0: 44 5F 52 41 50 48 41 45 4C 5F 47 45 4E 45 52 49  // D_RAPHAEL_GENERI
    B000: 43 5C 63 6F 6E 66 69 67 2E 68 00 00 00 90 2C 00  // C\config.h....,.
    B010: 02 03 41 54 4F 4D 00 C0 56 24 42 01 DD 01 96 00  // ..ATOM..V$B.....
    B020: C8 24 00 00 00 00 02 10 02 10 B8 01 70 A4 10 02  // .$..........p...
    B030: 00 00 00 00 00 00 00 02 03 00 00 00 50 43 49 52  // ............PCIR
    B040: 02 10 4E 16 00 00 18 00 00 00 00 03 57 00 13 20  // ..N.........W.. 
    B050: 00 80 00 00 41 4D 44 20 41 54 4F 4D 42 49 4F 53  // ....AMD ATOMBIOS
    B060: 00 7F E8 11 8E 00 00 00 00 00 00 00 00 00 00 00  // ................
    B070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B090: 00 00 00 00 4A 00 02 01 00 00 00 00 00 00 28 20  // ....J.........( 
    B0A0: 5C 02 98 21 C8 02 18 03 14 05 00 00 00 00 30 05  // \..!..........0.
    B0B0: 3C 05 CC 21 90 05 00 00 00 00 70 22 00 00 00 00  // <..!......p"....
    B0C0: 00 00 00 00 84 22 20 20 00 00 BC 0A 00 00 E8 05  // ....."  ........
    B0D0: 00 00 00 00 BC 06 00 00 00 00 00 00 00 00 00 00  // ................
    B0E0: 6C 00 03 04 08 00 13 20 20 4E 00 00 20 4E 00 00  // l......  N.. N..
    B0F0: 01 00 00 00 00 00 00 00 4C 00 00 00 00 00 00 00  // ........L.......
    B100: 00 00 00 00 00 00 00 00 F4 00 00 00 00 00 00 00  // ................
    B110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B130: 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00  // ................
    B140: 00 00 00 00 00 00 00 00 88 06 FC 13 50 00 03 01  // ............P...
    B150: C8 00 00 00 B8 0B 00 00 00 00 00 00 7D 00 00 01  // ............}...
    B160: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B170: C8 00 00 00 B8 0B 00 00 00 00 00 00 7D 00 00 01  // ............}...
    B180: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B190: 00 00 00 00 00 00 00 00 00 00 00 00 FC 01 05 04  // ................
    B1A0: 10 00 38 00 4C 00 60 01 9B 01 48 00 30 75 00 00  // ..8.L.`...H.0u..
    B1B0: 0C 00 1F 05 39 50 00 00 40 9C 00 00 0C 00 1F 05  // ....9P..@.......
    B1C0: 3E 00 00 00 FF FF FF 00 0C 00 1F 05 6F A1 00 00  // >...........o...
    B1D0: 00 00 00 00 FF FF FF 00 0C 00 1F 02 3E 00 00 00  // ............>...
    B1E0: 00 00 00 00 00 00 00 00 48 3F 00 00 1F 00 44 00  // ........H?....D.
    B1F0: 00 16 00 00 00 05 01 1F 00 00 00 05 02 2C 00 00  // .............,..
    B200: 00 05 03 3E 00 00 00 05 08 1B 50 00 00 05 09 25  // ...>......P....%
    B210: 60 00 00 05 0A 35 90 00 00 05 10 21 B0 00 00 05  // `....5.....!....
    B220: 11 2F F0 00 00 05 18 2A 40 01 00 05 78 69 00 00  // ./.....*@...xi..
    B230: 1F 00 44 00 00 16 00 00 00 05 01 1F 00 00 00 05  // ..D.............
    B240: 02 2C 00 00 00 05 03 3E 00 00 00 05 08 1B 50 00  // .,.....>......P.
    B250: 00 05 09 25 60 00 00 05 0A 35 90 00 00 05 10 21  // ...%`....5.....!
    B260: B0 00 00 05 11 2F F0 00 00 05 18 2A 40 01 00 05  // ...../.....*@...
    B270: F0 D2 00 00 1F 00 44 00 00 1E 00 00 00 05 01 26  // ......D........&
    B280: 00 00 00 05 02 30 00 00 00 05 03 3E 00 00 00 05  // .....0.....>....
    B290: 08 22 40 00 00 05 09 2C 60 00 00 05 0A 37 70 00  // ."@....,`....7p.
    B2A0: 00 05 10 27 90 00 00 05 11 32 C0 00 00 05 18 2E  // ...'.....2......
    B2B0: 00 01 00 05 68 3C 01 00 1F 00 44 00 00 1E 00 00  // ....h<....D.....
    B2C0: 00 05 01 26 00 00 00 05 02 30 00 00 00 05 03 3E  // ...&.....0.....>
    B2D0: 00 00 00 05 08 22 40 00 00 05 09 2C 60 00 00 05  // ....."@....,`...
    B2E0: 0A 37 70 00 00 05 10 27 90 00 00 05 11 32 C0 00  // .7p....'.....2..
    B2F0: 00 05 18 2E 00 01 00 05 00 00 00 00 00 01 02 03  // ................
    B300: 00 01 02 03 00 07 05 00 00 01 02 03 00 01 02 03  // ................
    B310: 00 07 05 00 00 01 02 03 00 01 02 03 00 07 05 00  // ................
    B320: 00 01 02 03 00 01 02 03 00 07 05 00 01 02 03 00  // ................
    B330: 01 02 03 00 07 05 00 08 30 00 00 87 00 00 00 07  // ........0.......
    B340: 30 00 00 B2 25 00 00 08 31 00 00 87 00 00 00 07  // 0...%...1.......
    B350: 31 00 00 B2 25 00 00 08 32 00 00 87 00 00 00 07  // 1...%...2.......
    B360: 32 00 00 B2 25 00 00 08 33 00 00 87 00 00 00 07  // 2...%...3.......
    B370: 33 00 00 B2 25 00 00 5A 00 00 00 05 00 00 00 47  // 3...%..Z.......G
    B380: 00 00 00 30 00 00 00 54 00 00 00 30 00 00 00 FF  // ...0...T...0....
    B390: FF FF FF 00 00 00 00 00 1C 00 03 01 00 0D 00 00  // ................
    B3A0: 00 00 00 00 77 01 00 00 10 27 00 00 FF 00 FF 00  // ....w....'......
    B3B0: FF 00 00 00 0C 00 02 01 00 00 00 00 00 00 00 00  // ................
    B3C0: 54 00 02 01 B5 5D 00 00 00 00 01 00 B5 5D 00 00  // T....].......]..
    B3D0: 08 08 02 00 B5 5D 00 00 10 10 03 00 B5 5D 00 00  // .....].......]..
    B3E0: 18 14 04 00 B5 5D 00 00 1A 18 05 00 91 5D 00 00  // .....].......]..
    B3F0: 08 08 90 00 95 5D 00 00 08 08 91 00 99 5D 00 00  // .....].......]..
    B400: 08 08 92 00 9D 5D 00 00 08 08 93 00 A1 5D 00 00  // .....].......]..
    B410: 08 08 94 00 58 00 02 06 03 0A 01 00 04 01 02 02  // ....X...........
    B420: 64 C0 00 00 65 C0 00 00 66 C0 00 00 67 C0 00 00  // d...e...f...g...
    B430: E8 C0 00 00 A0 21 00 00 2E 6A 01 00 10 27 00 00  // .....!...j...'..
    B440: 04 02 01 00 00 00 00 00 9F 0F 00 00 01 00 00 00  // ................
    B450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B460: 00 00 00 00 00 00 00 00 00 00 00 00 D4 00 04 04  // ................
    B470: 40 00 00 00 24 F4 00 00 60 09 60 09 00 00 00 00  // @...$...`.`.....
    B480: 00 00 00 00 5E 01 4E 0C 01 01 00 00 55 00 00 00  // ....^.N.....U...
    B490: 60 09 4E 16 01 03 04 01 00 05 05 00 00 00 00 00  // `.N.............
    B4A0: 00 46 C3 23 00 00 00 00 00 00 00 00 00 00 00 00  // .F.#............
    B4B0: 54 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00  // T...............
    B4C0: 10 11 3D 10 4D 1C 02 00 00 45 00 00 00 00 00 00  // ..=.M....E......
    B4D0: 00 00 00 00 00 00 00 00 00 00 AA 0A 22 22 02 00  // ............""..
    B4E0: AA F2 01 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B4F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B540: 00 04 02 02 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B550: 00 00 00 00 77 01 00 00 00 00 22 02 00 00 00 00  // ....w.....".....
    B560: C8 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B580: C8 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B5A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B5B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B5C0: 8C 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B5D0: 00 00 00 00 00 04 40 02 0C 34 00 00 00 00 E4 00  // ......@..4......
    B5E0: 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B5F0: 00 00 00 00 08 00 10 02 13 31 02 02 00 00 E4 00  // .........1......
    B600: 02 00 00 00 80 00 20 02 13 32 03 03 00 00 E4 00  // ...... ..2......
    B610: 02 01 00 00 00 02 30 02 13 33 04 04 00 00 E4 00  // ......0..3......
    B620: 02 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B640: 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00  // ................
    B650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B6A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B6B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B6C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B6D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B6E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B6F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B7A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B7B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B7C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B7D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B7E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B7F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B8A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B8B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B8C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B8D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B8E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B8F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B940: FC 13 01 00 00 1F 00 00 00 00 00 00 48 3F 00 00  // ............H?..
    B950: 05 02 00 07 03 00 00 16 00 00 00 00 00 00 00 00  // ................
    B960: 00 00 00 00 00 00 00 00 00 1F 01 00 00 00 00 00  // ................
    B970: 48 3F 00 00 05 02 00 07 03 00 00 1F 00 00 00 00  // H?..............
    B980: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
    B990: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 2C  // ....H?.........,
    B9A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B9B0: 00 1F 03 00 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    B9C0: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    B9D0: 00 00 00 00 00 1F 08 00 00 00 00 00 48 3F 00 00  // ............H?..
    B9E0: 05 02 00 07 03 00 00 1B 05 00 00 00 00 00 00 00  // ................
    B9F0: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    BA00: 48 3F 00 00 05 02 00 07 03 00 00 25 06 00 00 00  // H?.........%....
    BA10: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 00  // ................
    BA20: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 35  // ....H?.........5
    BA30: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    BA40: 00 1F 10 00 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    BA50: 03 00 00 21 0B 00 00 00 00 00 00 00 00 00 00 00  // ...!............
    BA60: 00 00 00 00 00 1F 11 00 00 00 00 00 48 3F 00 00  // ............H?..
    BA70: 05 02 00 07 03 00 00 2F 0F 00 00 00 00 00 00 00  // ......./........
    BA80: 00 00 00 00 00 00 00 00 00 1F 18 00 00 00 00 00  // ................
    BA90: 48 3F 00 00 05 02 00 07 03 00 00 2A 14 00 00 00  // H?.........*....
    BAA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 00  // ................
    BAB0: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 16  // ....xi..........
    BAC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    BAD0: 00 1F 01 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    BAE0: 03 00 00 1F 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    BAF0: 00 00 00 00 00 1F 02 00 00 00 00 00 78 69 00 00  // ............xi..
    BB00: 05 02 00 07 03 00 00 2C 00 00 00 00 00 00 00 00  // .......,........
    BB10: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
    BB20: 78 69 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // xi.........>....
    BB30: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 00  // ................
    BB40: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 1B  // ....xi..........
    BB50: 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    BB60: 00 1F 09 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    BB70: 03 00 00 25 06 00 00 00 00 00 00 00 00 00 00 00  // ...%............
    BB80: 00 00 00 00 00 1F 0A 00 00 00 00 00 78 69 00 00  // ............xi..
    BB90: 05 02 00 07 03 00 00 35 09 00 00 00 00 00 00 00  // .......5........
    BBA0: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
    BBB0: 78 69 00 00 05 02 00 07 03 00 00 21 0B 00 00 00  // xi.........!....
    BBC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
    BBD0: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 2F  // ....xi........./
    BBE0: 0F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    BBF0: 00 1F 18 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    BC00: 03 00 00 2A 14 00 00 00 00 00 00 00 00 00 00 00  // ...*............
    BC10: 00 00 00 00 00 1F 00 00 00 00 00 00 F0 D2 00 00  // ................
    BC20: 05 02 00 07 03 00 00 1D 00 00 00 00 00 00 00 00  // ................
    BC30: 00 00 00 00 00 00 00 00 00 1F 01 00 00 00 00 00  // ................
    BC40: F0 D2 00 00 05 02 00 07 03 00 00 26 00 00 00 00  // ...........&....
    BC50: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
    BC60: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 30  // ...............0
    BC70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    BC80: 00 1F 03 00 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    BC90: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    BCA0: 00 00 00 00 00 1F 08 00 00 00 00 00 F0 D2 00 00  // ................
    BCB0: 05 02 00 07 03 00 00 22 04 00 00 00 00 00 00 00  // ......."........
    BCC0: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    BCD0: F0 D2 00 00 05 02 00 07 03 00 00 2C 06 00 00 00  // ...........,....
    BCE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 00  // ................
    BCF0: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 37  // ...............7
    BD00: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    BD10: 00 1F 10 00 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    BD20: 03 00 00 27 09 00 00 00 00 00 00 00 00 00 00 00  // ...'............
    BD30: 00 00 00 00 00 1F 11 00 00 00 00 00 F0 D2 00 00  // ................
    BD40: 05 02 00 07 03 00 00 32 0C 00 00 00 00 00 00 00  // .......2........
    BD50: 00 00 00 00 00 00 00 00 00 1F 18 00 00 00 00 00  // ................
    BD60: F0 D2 00 00 05 02 00 07 03 00 00 2E 10 00 00 00  // ................
    BD70: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 00  // ................
    BD80: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 1D  // ....h<..........
    BD90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    BDA0: 00 1F 01 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    BDB0: 03 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    BDC0: 00 00 00 00 00 1F 02 00 00 00 00 00 68 3C 01 00  // ............h<..
    BDD0: 05 02 00 07 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    BDE0: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
    BDF0: 68 3C 01 00 05 02 00 07 03 00 00 3E 00 00 00 00  // h<.........>....
    BE00: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 00  // ................
    BE10: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 22  // ....h<........."
    BE20: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    BE30: 00 1F 09 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    BE40: 03 00 00 2C 06 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    BE50: 00 00 00 00 00 1F 0A 00 00 00 00 00 68 3C 01 00  // ............h<..
    BE60: 05 02 00 07 03 00 00 37 07 00 00 00 00 00 00 00  // .......7........
    BE70: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
    BE80: 68 3C 01 00 05 02 00 07 03 00 00 27 09 00 00 00  // h<.........'....
    BE90: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
    BEA0: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 32  // ....h<.........2
    BEB0: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    BEC0: 00 1F 18 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    BED0: 03 00 00 2E 10 00 00 00 00 00 00 00 00 00 00 00  // ................
    BEE0: 00 00 00 00 08 1F 00 00 00 00 00 00 A0 86 01 00  // ................
    BEF0: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    BF00: 00 00 00 00 00 00 00 00 08 1F 01 00 00 00 00 00  // ................
    BF10: A0 86 01 00 05 02 00 07 03 00 00 38 06 00 00 00  // ...........8....
    BF20: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 02 00  // ................
    BF30: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 00 33  // ...............3
    BF40: 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    BF50: 08 1F 03 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    BF60: 03 00 00 30 0E 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    BF70: 00 00 00 00 08 1F 04 00 00 00 00 00 A0 86 01 00  // ................
    BF80: 05 02 00 07 03 00 00 2B 13 00 00 00 00 00 00 00  // .......+........
    BF90: 00 00 00 00 00 00 00 00 08 1F 05 00 00 00 00 00  // ................
    BFA0: A0 86 01 00 05 02 00 07 03 00 03 3B 00 00 00 00  // ...........;....
    BFB0: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 06 00  // ................
    BFC0: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 03 35  // ...............5
    BFD0: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    BFE0: 08 1F 07 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    BFF0: 03 00 03 31 0A 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    C000: 00 00 00 00 08 1F 08 00 00 00 00 00 A0 86 01 00  // ................
    C010: 05 02 00 07 03 00 03 2D 0E 00 00 00 00 00 00 00  // .......-........
    C020: 00 00 00 00 00 00 00 00 08 1F 09 00 00 00 00 00  // ................
    C030: A0 86 01 00 05 02 00 07 03 00 03 2A 11 00 00 00  // ...........*....
    C040: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 0A 00  // ................
    C050: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 06 38  // ...............8
    C060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C070: 08 1F 0B 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    C080: 03 00 06 32 06 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    C090: 00 00 00 00 08 1F 0C 00 00 00 00 00 A0 86 01 00  // ................
    C0A0: 05 02 00 07 03 00 06 2F 09 00 00 00 00 00 00 00  // ......./........
    C0B0: 00 00 00 00 00 00 00 00 08 1F 0D 00 00 00 00 00  // ................
    C0C0: A0 86 01 00 05 02 00 07 03 00 06 2B 0D 00 00 00  // ...........+....
    C0D0: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 0E 00  // ................
    C0E0: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 0A 33  // ...............3
    C0F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C100: 08 1F 0F 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    C110: 03 00 03 22 03 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    C120: 00 00 00 00 00 1F 00 00 00 00 00 00 60 54 00 00  // ............`T..
    C130: 05 02 00 07 03 00 00 1E 00 00 00 00 00 00 00 00  // ................
    C140: 00 00 00 00 00 00 00 00 00 1F 01 00 00 00 00 00  // ................
    C150: 60 54 00 00 05 02 00 07 03 00 00 26 00 00 00 00  // `T.........&....
    C160: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
    C170: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 30  // ....`T.........0
    C180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C190: 00 1F 03 00 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
    C1A0: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    C1B0: 00 00 00 00 00 1F 08 00 00 00 00 00 60 54 00 00  // ............`T..
    C1C0: 05 02 00 07 03 00 00 22 04 00 00 00 00 00 00 00  // ......."........
    C1D0: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    C1E0: 60 54 00 00 05 02 00 07 03 00 00 2C 06 00 00 00  // `T.........,....
    C1F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 00  // ................
    C200: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 37  // ....`T.........7
    C210: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C220: 00 1F 10 00 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
    C230: 03 00 00 27 09 00 00 00 00 00 00 00 00 00 00 00  // ...'............
    C240: 00 00 00 00 00 1F 11 00 00 00 00 00 60 54 00 00  // ............`T..
    C250: 05 02 00 07 03 00 00 32 0C 00 00 00 00 00 00 00  // .......2........
    C260: 00 00 00 00 00 00 00 00 00 1F 18 00 00 00 00 00  // ................
    C270: 60 54 00 00 05 02 00 07 03 00 00 2E 10 00 00 00  // `T..............
    C280: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 00  // ................
    C290: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 1E  // .....^..........
    C2A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C2B0: 00 1F 01 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    C2C0: 03 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    C2D0: 00 00 00 00 00 1F 02 00 00 00 00 00 EC 5E 00 00  // .............^..
    C2E0: 05 02 00 07 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    C2F0: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
    C300: EC 5E 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // .^.........>....
    C310: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 00  // ................
    C320: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 22  // .....^........."
    C330: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C340: 00 1F 09 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    C350: 03 00 00 2C 06 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    C360: 00 00 00 00 00 1F 0A 00 00 00 00 00 EC 5E 00 00  // .............^..
    C370: 05 02 00 07 03 00 00 37 07 00 00 00 00 00 00 00  // .......7........
    C380: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
    C390: EC 5E 00 00 05 02 00 07 03 00 00 27 09 00 00 00  // .^.........'....
    C3A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
    C3B0: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 32  // .....^.........2
    C3C0: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C3D0: 00 1F 18 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    C3E0: 03 00 00 2E 10 00 00 00 00 00 00 00 00 00 00 00  // ................
    C3F0: 00 00 00 00 00 1F 00 00 00 00 00 00 90 7E 00 00  // .............~..
    C400: 05 02 00 07 03 00 00 1E 00 00 00 00 00 00 00 00  // ................
    C410: 00 00 00 00 00 00 00 00 00 1F 01 00 00 00 00 00  // ................
    C420: 90 7E 00 00 05 02 00 07 03 00 00 26 00 00 00 00  // .~.........&....
    C430: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
    C440: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 30  // .....~.........0
    C450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C460: 00 1F 03 00 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
    C470: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    C480: 00 00 00 00 00 1F 08 00 00 00 00 00 90 7E 00 00  // .............~..
    C490: 05 02 00 07 03 00 00 22 04 00 00 00 00 00 00 00  // ......."........
    C4A0: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    C4B0: 90 7E 00 00 05 02 00 07 03 00 00 2C 06 00 00 00  // .~.........,....
    C4C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 00  // ................
    C4D0: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 37  // .....~.........7
    C4E0: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C4F0: 00 1F 10 00 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
    C500: 03 00 00 27 09 00 00 00 00 00 00 00 00 00 00 00  // ...'............
    C510: 00 00 00 00 00 1F 11 00 00 00 00 00 90 7E 00 00  // .............~..
    C520: 05 02 00 07 03 00 00 32 0C 00 00 00 00 00 00 00  // .......2........
    C530: 00 00 00 00 00 00 00 00 00 1F 18 00 00 00 00 00  // ................
    C540: 90 7E 00 00 05 02 00 07 03 00 00 2E 10 00 00 00  // .~..............
    C550: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 00  // ................
    C560: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 1E  // ................
    C570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C580: 00 1F 01 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
    C590: 03 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    C5A0: 00 00 00 00 00 1F 02 00 00 00 00 00 C0 A8 00 00  // ................
    C5B0: 05 02 00 07 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    C5C0: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
    C5D0: C0 A8 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // ...........>....
    C5E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 00  // ................
    C5F0: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 22  // ..............."
    C600: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C610: 00 1F 09 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
    C620: 03 00 00 2C 06 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    C630: 00 00 00 00 00 1F 0A 00 00 00 00 00 C0 A8 00 00  // ................
    C640: 05 02 00 07 03 00 00 37 07 00 00 00 00 00 00 00  // .......7........
    C650: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
    C660: C0 A8 00 00 05 02 00 07 03 00 00 27 09 00 00 00  // ...........'....
    C670: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
    C680: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 32  // ...............2
    C690: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C6A0: 00 1F 18 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
    C6B0: 03 00 00 2E 10 00 00 00 00 00 00 00 00 00 00 00  // ................
    C6C0: 00 00 00 00 00 1F 00 00 00 00 00 00 20 FD 00 00  // ............ ...
    C6D0: 05 02 00 07 03 00 00 1E 00 00 00 00 00 00 00 00  // ................
    C6E0: 00 00 00 00 00 00 00 00 00 1F 01 00 00 00 00 00  // ................
    C6F0: 20 FD 00 00 05 02 00 07 03 00 00 26 00 00 00 00  //  ..........&....
    C700: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
    C710: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 30  // .... ..........0
    C720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C730: 00 1F 03 00 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
    C740: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    C750: 00 00 00 00 00 1F 08 00 00 00 00 00 20 FD 00 00  // ............ ...
    C760: 05 02 00 07 03 00 00 22 04 00 00 00 00 00 00 00  // ......."........
    C770: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    C780: 20 FD 00 00 05 02 00 07 03 00 00 2C 06 00 00 00  //  ..........,....
    C790: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 00  // ................
    C7A0: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 37  // .... ..........7
    C7B0: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C7C0: 00 1F 10 00 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
    C7D0: 03 00 00 27 09 00 00 00 00 00 00 00 00 00 00 00  // ...'............
    C7E0: 00 00 00 00 00 1F 11 00 00 00 00 00 20 FD 00 00  // ............ ...
    C7F0: 05 02 00 07 03 00 00 32 0C 00 00 00 00 00 00 00  // .......2........
    C800: 00 00 00 00 00 00 00 00 00 1F 18 00 00 00 00 00  // ................
    C810: 20 FD 00 00 05 02 00 07 03 00 00 2E 10 00 00 00  //  ...............
    C820: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 00  // ................
    C830: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 1E  // ................
    C840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C850: 00 1F 01 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
    C860: 03 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    C870: 00 00 00 00 00 1F 02 00 00 00 00 00 AC 07 01 00  // ................
    C880: 05 02 00 07 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    C890: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
    C8A0: AC 07 01 00 05 02 00 07 03 00 00 3E 00 00 00 00  // ...........>....
    C8B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 00  // ................
    C8C0: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 22  // ..............."
    C8D0: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C8E0: 00 1F 09 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
    C8F0: 03 00 00 2C 06 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    C900: 00 00 00 00 00 1F 0A 00 00 00 00 00 AC 07 01 00  // ................
    C910: 05 02 00 07 03 00 00 37 07 00 00 00 00 00 00 00  // .......7........
    C920: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
    C930: AC 07 01 00 05 02 00 07 03 00 00 27 09 00 00 00  // ...........'....
    C940: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
    C950: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 32  // ...............2
    C960: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C970: 00 1F 18 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
    C980: 03 00 00 2E 10 00 00 00 00 00 00 00 00 00 00 00  // ................
    C990: 00 00 00 00 02 1F 00 00 00 00 00 00 30 75 00 00  // ............0u..
    C9A0: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    C9B0: 00 00 00 00 00 00 00 00 02 1F 00 00 00 00 00 00  // ................
    C9C0: 40 9C 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // @..........>....
    C9D0: 00 00 00 00 00 00 00 00 00 00 00 00 02 1F 00 00  // ................
    C9E0: 00 00 00 00 60 EA 00 00 05 02 00 07 03 00 00 3E  // ....`..........>
    C9F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CA00: 03 1F 00 00 00 00 00 00 30 75 00 00 05 02 00 07  // ........0u......
    CA10: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    CA20: 00 00 00 00 03 1F 00 00 00 00 00 00 40 9C 00 00  // ............@...
    CA30: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    CA40: 00 00 00 00 00 00 00 00 03 1F 00 00 00 00 00 00  // ................
    CA50: 60 EA 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // `..........>....
    CA60: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 00 00  // ................
    CA70: 00 00 00 00 30 75 00 00 05 02 00 07 03 00 05 31  // ....0u.........1
    CA80: 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CA90: 04 1F 01 00 00 00 00 00 30 75 00 00 05 02 00 07  // ........0u......
    CAA0: 03 00 05 2F 0A 00 00 00 00 00 00 00 00 00 00 00  // .../............
    CAB0: 00 00 00 00 04 1F 02 00 00 00 00 00 30 75 00 00  // ............0u..
    CAC0: 05 02 00 07 03 00 05 2C 0D 00 00 00 00 00 00 00  // .......,........
    CAD0: 00 00 00 00 00 00 00 00 04 1F 03 00 00 00 00 00  // ................
    CAE0: 30 75 00 00 05 02 00 07 03 00 05 29 10 00 00 00  // 0u.........)....
    CAF0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 00 00  // ................
    CB00: 00 00 00 00 60 EA 00 00 05 02 00 07 03 00 05 31  // ....`..........1
    CB10: 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CB20: 04 1F 01 00 00 00 00 00 60 EA 00 00 05 02 00 07  // ........`.......
    CB30: 03 00 05 2F 0A 00 00 00 00 00 00 00 00 00 00 00  // .../............
    CB40: 00 00 00 00 04 1F 02 00 00 00 00 00 60 EA 00 00  // ............`...
    CB50: 05 02 00 07 03 00 05 2C 0D 00 00 00 00 00 00 00  // .......,........
    CB60: 00 00 00 00 00 00 00 00 04 1F 03 00 00 00 00 00  // ................
    CB70: 60 EA 00 00 05 02 00 07 03 00 05 29 10 00 00 00  // `..........)....
    CB80: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 00 00  // ................
    CB90: 00 00 00 00 80 38 01 00 05 02 00 07 03 00 05 31  // .....8.........1
    CBA0: 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CBB0: 04 1F 01 00 00 00 00 00 80 38 01 00 05 02 00 07  // .........8......
    CBC0: 03 00 05 2F 0A 00 00 00 00 00 00 00 00 00 00 00  // .../............
    CBD0: 00 00 00 00 04 1F 02 00 00 00 00 00 80 38 01 00  // .............8..
    CBE0: 05 02 00 07 03 00 05 2C 0D 00 00 00 00 00 00 00  // .......,........
    CBF0: 00 00 00 00 00 00 00 00 04 1F 03 00 00 00 00 00  // ................
    CC00: 80 38 01 00 05 02 00 07 03 00 05 29 10 00 00 00  // .8.........)....
    CC10: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 00 00  // ................
    CC20: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 05 31  // ...............1
    CC30: 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CC40: 04 1F 01 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    CC50: 03 00 05 2F 0A 00 00 00 00 00 00 00 00 00 00 00  // .../............
    CC60: 00 00 00 00 04 1F 02 00 00 00 00 00 A0 86 01 00  // ................
    CC70: 05 02 00 07 03 00 05 2C 0D 00 00 00 00 00 00 00  // .......,........
    CC80: 00 00 00 00 00 00 00 00 04 1F 03 00 00 00 00 00  // ................
    CC90: A0 86 01 00 05 02 00 07 03 00 05 29 10 00 00 00  // ...........)....
    CCA0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 00 00  // ................
    CCB0: 00 00 00 00 C0 D4 01 00 05 02 00 07 03 00 05 31  // ...............1
    CCC0: 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CCD0: 04 1F 01 00 00 00 00 00 C0 D4 01 00 05 02 00 07  // ................
    CCE0: 03 00 05 2F 0A 00 00 00 00 00 00 00 00 00 00 00  // .../............
    CCF0: 00 00 00 00 04 1F 02 00 00 00 00 00 C0 D4 01 00  // ................
    CD00: 05 02 00 07 03 00 05 2C 0D 00 00 00 00 00 00 00  // .......,........
    CD10: 00 00 00 00 00 00 00 00 04 1F 03 00 00 00 00 00  // ................
    CD20: C0 D4 01 00 05 02 00 07 03 00 05 29 10 00 00 00  // ...........)....
    CD30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CD40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CD50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CD60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CD70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CD80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CD90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CDA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CDB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CDC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CDD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CDE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CDF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CEA0: 00 00 00 00 08 00 01 01 00 00 00 00 70 01 02 01  // ............p...
    CEB0: D6 09 80 02 A0 00 E0 01 2D 00 10 00 60 00 0A 00  // ........-...`...
    CEC0: 02 00 00 00 00 00 08 08 06 00 12 3C A0 0F 20 03  // ...........<.. .
    CED0: 00 01 58 02 1C 00 28 00 80 00 01 00 04 00 00 00  // ..X...(.........
    CEE0: 00 00 00 00 00 00 6A 3C 64 19 00 04 40 01 00 03  // ......j<d...@...
    CEF0: 26 00 18 00 88 00 03 00 06 00 00 00 00 00 00 00  // &...............
    CF00: 06 00 55 3C 01 1D 00 05 72 01 D0 02 1E 00 6E 00  // ..U<....r.....n.
    CF10: 28 00 05 00 05 00 00 00 00 00 00 00 00 00 E8 3C  // (..............<
    CF20: 30 2A 00 05 08 02 C0 03 28 00 60 00 70 00 01 00  // 0*......(.`.p...
    CF30: 03 00 00 00 00 00 00 00 00 00 E9 3C 30 2A 00 05  // ...........<0*..
    CF40: 98 01 00 04 2A 00 30 00 70 00 01 00 03 00 00 00  // ....*.0.p.......
    CF50: 00 00 00 00 00 00 EA 3C 66 21 56 05 AA 01 00 03  // .......<f!V.....
    CF60: 1E 00 46 00 8F 00 03 00 03 00 00 00 00 00 00 00  // ..F.............
    CF70: 02 00 ED 3C 8F 2F 78 05 D0 01 1A 04 27 00 58 00  // ...<./x.....'.X.
    CF80: 90 00 03 00 04 00 00 00 00 00 00 00 02 00 EB 3C  // ...............<
    CF90: 48 3F 40 06 30 02 B0 04 32 00 40 00 C0 00 01 00  // H?@.0...2.@.....
    CFA0: 03 00 00 00 00 00 00 00 00 00 EC 3C 02 3A 80 07  // ...........<.:..
    CFB0: 18 01 38 04 2D 00 58 00 2C 00 04 00 05 00 00 00  // ..8.-.X.,.......
    CFC0: 00 00 00 00 02 00 F3 3C 7D 4B 80 07 A0 02 B0 04  // .......<}K......
    CFD0: 2D 00 88 00 C8 00 03 00 06 00 00 00 00 00 00 00  // -...............
    CFE0: 02 00 F0 3C 68 5B 80 07 A8 02 A0 05 3C 00 80 00  // ...<h[......<...
    CFF0: D0 00 01 00 03 00 00 00 00 00 00 00 02 00 F1 3C  // ...............<
    D000: 32 96 00 0A B0 03 40 06 3A 00 C0 00 18 01 03 00  // 2.....@.:.......
    D010: 06 00 00 00 00 00 00 00 02 00 F2 3C 34 00 02 01  // ...........<4...
    D020: 00 00 00 00 00 2A 00 2A 00 00 2A 2A 2A 00 00 2A  // .....*.*..***..*
    D030: 00 2A 2A 15 00 2A 2A 2A 15 15 15 15 15 3F 15 3F  // .**..***.....?.?
    D040: 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F 15 3F 3F 3F  // ..???..?.???.???
    D050: A4 00 01 01 10 01 06 12 11 01 16 12 21 01 0A 12  // ............!...
    D060: 13 01 06 6A 14 01 16 6A 22 01 0A 6A 16 01 06 55  // ...j...j"..j...U
    D070: 17 01 16 55 23 01 0A 55 63 01 16 E8 64 01 0A E8  // ...U#..Uc...d...
    D080: 65 01 16 E9 66 01 0A E9 19 01 06 EA 1A 01 16 EA  // e...f...........
    D090: 24 01 0A EA 47 01 16 ED 48 01 0A ED 45 01 16 EB  // $...G...H...E...
    D0A0: 46 01 0A EB 75 01 16 EC 76 01 0A EC A5 01 16 F3  // F...u...v.......
    D0B0: A6 01 0A F3 A0 01 16 F0 A1 01 0A F0 A2 01 16 F1  // ................
    D0C0: A3 01 0A F1 A4 01 16 F2 A5 01 0A F2 D2 01 16 70  // ...............p
    D0D0: D4 01 0A 70 D8 01 16 71 D9 01 0A 71 E2 01 16 72  // ...p...q...q...r
    D0E0: E4 01 0A 72 E8 01 16 73 E9 01 0A 73 F5 01 16 74  // ...r...s...s...t
    D0F0: F6 01 0A 74 14 00 02 02 02 00 08 00 80 00 00 02  // ...t............
    D100: 00 04 00 08 40 00 FF FF CD 00 01 04 88 06 06 00  // ....@...........
    D110: 0C 34 68 00 1E 21 00 00 95 00 00 00 00 04 00 00  // .4h..!..........
    D120: 00 00 71 00 1E 22 00 00 9C 00 00 00 00 00 00 00  // ..q.."..........
    D130: 13 31 7A 00 20 21 00 00 A3 00 00 00 08 00 00 00  // .1z. !..........
    D140: 13 32 83 00 20 22 00 00 AA 00 00 00 80 00 00 00  // .2.. "..........
    D150: 13 33 8C 00 21 21 00 00 B1 00 00 00 00 02 00 00  // .3..!!..........
    D160: 03 71 B8 00 00 00 00 00 00 00 00 00 00 00 00 00  // .q..............
    D170: 01 04 90 00 02 04 01 00 FF 01 04 91 00 02 04 00  // ................
    D180: 00 FF 01 04 92 00 02 04 03 00 FF 01 04 93 00 02  // ................
    D190: 04 04 00 FF 01 04 94 00 02 04 05 00 FF 14 06 0F  // ................
    D1A0: 1E 00 00 FF 14 06 3F 1E 00 00 FF 14 06 0F 00 00  // ......?.........
    D1B0: 00 FF 14 06 0F 01 00 00 FF 14 06 0F 01 00 00 FF  // ................
    D1C0: 10 0A 01 02 03 04 05 00 00 00 11 0A 90 91 92 93  // ................
    D1D0: 94 00 00 00 FF 00 00 00 1E 06 66 50 66 51 66 52  // ..........fPfQfR
    D1E0: 66 53 66 55 66 56 66 57 0E 1F A3 14 00 8C 0E 08  // fSfUfVfW........
    D1F0: 00 B2 20 E8 A6 1E 0B C0 75 14 A2 02 00 66 5F 66  // .. .....u....f_f
    D200: 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F CB E8 C0  // ^f]f[fZfYfX.....
    D210: 1F E8 F8 00 E8 8F 1D 32 D2 8D 3E 8A 01 89 55 16  // .......2..>...U.
    D220: E8 0C 0D E8 CF 0C E8 01 1C 75 19 E8 1A 0E E8 EF  // .........u......
    D230: 02 E8 67 18 0B C0 74 0C E8 39 00 E8 BE 45 E8 C6  // ..g...t..9...E..
    D240: 0C E8 0D 46 E8 A9 00 B4 80 E8 84 1D 8A C7 66 C1  // ...F..........f.
    D250: E0 10 8A E3 B0 20 66 A3 24 A1 E8 EF 02 E8 D9 0C  // ..... f.$.......
    D260: E8 B1 1F 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66  // ...f_f^f]f[fZfYf
    D270: 58 07 1F CB 2E 8B 1E 08 00 83 3E 68 24 00 75 04  // X.........>h$.u.
    D280: 89 1E 66 24 1E 2E 8E 1E 5E 24 9C FA 66 C7 06 08  // ..f$....^$..f...
    D290: 01 65 F0 00 F0 C7 06 40 00 C8 24 89 1E 42 00 C7  // .e.....@..$..B..
    D2A0: 06 B4 01 C8 24 89 1E B6 01 C7 06 7C 00 06 6F 89  // ....$......|..o.
    D2B0: 1E 7E 00 C7 06 0C 01 19 73 89 1E 0E 01 C7 06 A8  // .~......s.......
    D2C0: 04 3E 69 89 1E AA 04 2E 8E 1E 66 24 8B C3 A3 40  // .>i.......f$...@
    D2D0: 69 A3 50 69 A3 62 69 9D 1F C3 50 4D 49 44 C8 24  // i.Pi.bi...PMID.$
    D2E0: 70 59 00 00 00 A0 00 B0 00 B8 00 C0 00 00 00 00  // pY..............
    D2F0: BB 00 00 E8 2C 0C 66 C1 E8 10 A3 BE 01 BB 0B 00  // ....,.f.........
    D300: E8 1F 0C 8D 3E 8A 01 66 89 45 18 C3 66 50 66 52  // ....>..f.E..fPfR
    D310: 51 56 66 B8 52 54 53 5F BA 80 00 66 EF B0 56 EE  // QVf.RTS_...f..V.
    D320: B0 42 EE B0 49 EE B0 4F EE B0 53 EE B0 20 EE BE  // .B..I..O..S.. ..
    D330: 28 01 B9 19 00 AC E6 80 E2 FB 66 B8 44 4E 45 5F  // (.........f.DNE_
    D340: BA 80 00 66 EF 5E 59 66 5A 66 58 C3 E8 A0 1E 80  // ...f.^YfZfX.....
    D350: FC A0 75 05 E8 3D 00 EB 11 80 FC 4F 75 05 E8 B9  // ..u..=.....Ou...
    D360: 33 EB 07 E8 0E 39 EB 02 B4 01 E8 A7 1E CF E8 7E  // 3....9.........~
    D370: 1E E8 20 00 EB 02 B4 01 E8 99 1E CB E8 70 1E 80  // .. ..........p..
    D380: FC 4F 75 05 E8 93 33 EB 07 E8 E8 38 EB 02 B4 01  // .Ou...3....8....
    D390: E8 81 1E CB 1E 06 66 50 66 51 66 52 66 53 66 55  // ......fPfQfRfSfU
    D3A0: 66 56 66 57 0E 1F 3C 04 75 29 2E A1 1A 00 66 C1  // fVfW..<.u)....f.
    D3B0: E0 10 2E A1 18 00 8D 36 97 00 8A 3C 80 EF 30 B3  // .......6...<..0.
    D3C0: 02 8B EC 89 5E 0C 89 46 04 66 C1 E8 10 89 46 00  // ....^..F.f....F.
    D3D0: E9 2B 01 3C 05 75 18 E8 F6 1B E8 C9 1B 2E A1 08  // .+.<.u..........
    D3E0: 00 8B EC 89 56 10 89 46 00 89 5E 04 E9 0F 01 3C  // ....V..F..^....<
    D3F0: 06 75 32 E8 14 0B 66 D1 E0 8B EC 89 46 14 BB 02  // .u2...f.....F...
    D400: 00 E8 1E 0B 88 46 18 E8 08 0B 66 89 46 0C BB 09  // .....F....f.F...
    D410: 00 E8 0E 0B 33 C0 66 89 46 00 2E 8B 16 BE 01 89  // ....3.f.F.......
    D420: 56 10 E9 D9 00 3C 0B 75 24 0A DB 75 11 B9 80 00  // V....<.u$..u....
    D430: BB 02 00 8B EC 89 5E 0C 89 4E 14 E9 C0 00 8A C7  // ......^..N......
    D440: E8 D3 00 E8 38 01 0F 84 AC 00 E9 B1 00 3C 17 75  // ....8........<.u
    D450: 1D E8 9B 0D 74 06 E8 8D 09 E8 9E 12 E8 13 07 E8  // ....t...........
    D460: 82 0A 33 C9 8B C8 8B EC 89 4E 14 E9 90 00 3C 18  // ..3......N....<.
    D470: 75 45 0A FF 75 10 E8 22 0D 8B EC 89 46 0C E8 4F  // uE..u.."....F..O
    D480: 07 89 4E 10 EB 78 E8 66 0D 75 6B BB 00 4C E8 FC  // ..N..x.f.uk..L..
    D490: 1C 66 0B C0 74 60 23 C9 74 5C E8 3A 0D BE 00 4C  // .f..t`#.t\.:...L
    D4A0: E8 AC 0A 74 51 BE 00 4C B0 40 E8 FB 0A E8 EB 0C  // ...tQ..L.@......
    D4B0: 8B EC 89 46 0C EB 47 3C 82 75 1A 80 FB 05 75 15  // ...F..G<.u....u.
    D4C0: 0A FF 75 0A E8 30 0C 8B EC 89 46 14 EB 30 E8 0D  // ..u..0....F..0..
    D4D0: 0C 74 1B EB 29 3C 8E 75 15 80 FF 01 74 08 80 FF  // .t..)<.u....t...
    D4E0: 02 75 0B 80 C1 02 80 C1 02 E8 57 0C EB 10 8B EC  // .u........W.....
    D4F0: C6 46 19 02 EB 0F 8B EC C6 46 19 01 EB 07 32 E4  // .F.......F....2.
    D500: 8B EC 88 66 19 66 5F 66 5E 66 5D 66 5B 66 5A 66  // ...f.f_f^f]f[fZf
    D510: 59 66 58 07 1F C3 51 8A C8 B8 01 00 D3 E0 59 C3  // YfX...Q.......Y.
    D520: E8 17 1D C3 0C 01 C3 00 50 51 B0 B6 E6 43 B0 33  // ........PQ...C.3
    D530: E6 42 B0 05 E6 42 E4 61 8A E0 0C 03 E6 61 8A C4  // .B...B.a.....a..
    D540: B9 C8 00 E8 6D 18 E6 61 59 58 C3 00 1E 56 0E 1F  // ....m..aYX...V..
    D550: 80 3E 02 00 80 76 05 C6 06 02 00 80 8A 0E 02 00  // .>...v..........
    D560: C1 E1 09 FC C6 06 21 00 00 33 F6 32 E4 AC 02 E0  // ......!..3.2....
    D570: E2 FB F6 D4 FE C4 88 26 21 00 5E 1F C3 00 57 0B  // .......&!.^...W.
    D580: C0 75 0F E8 28 08 74 25 E8 24 00 F6 C3 04 74 F3  // .u..(.t%.$....t.
    D590: EB 11 8B C8 E8 04 15 23 C1 74 12 E8 11 00 F6 C3  // .......#.t......
    D5A0: 04 74 0A 5F 8D 5C 28 E8 91 05 0B F6 C3 5F C3 50  // .t._.\(......_.P
    D5B0: E8 DD 07 E8 56 14 0A C9 74 11 E8 DA 11 3C 00 75  // ....V...t....<.u
    D5C0: 1F E8 CB 01 8A EB F6 C5 04 74 15 8D 9C A6 00 E8  // .........t......
    D5D0: BB 1B 0A C0 74 0A E8 88 04 74 05 33 C9 E8 51 05  // ....t....t.3..Q.
    D5E0: E8 AC 01 58 C3 51 B9 5F 00 E8 76 17 59 C3 51 E8  // ...X.Q._..v.Y.Q.
    D5F0: 1A 00 75 14 E8 69 01 3C 01 75 0D B9 20 00 E8 27  // ..u..i.<.u.. ..'
    D600: 00 75 05 80 C9 01 EB 02 33 C9 59 C3 53 E8 7D 1B  // .u......3.Y.S.}.
    D610: 66 3D 00 FF FF FF 75 0E 83 C3 04 E8 6F 1B 66 3D  // f=....u.....o.f=
    D620: FF FF FF 00 75 00 5B C3 50 52 32 D2 E8 5E 1B 02  // ....u.[.PR2..^..
    D630: D0 02 D4 66 C1 E8 10 02 D0 02 D4 83 C3 04 E2 EC  // ...f............
    D640: 0A D2 5A 58 C3 E8 48 07 8D 9C A4 01 E8 E9 00 A9  // ..ZX..H.........
    D650: DD 0F 74 52 E8 38 01 F6 C3 08 74 0C 8D 5C 28 E8  // ..tR.8....t..\(.
    D660: DD 00 75 04 E8 62 00 C3 B5 02 E8 FC 00 E8 1F 01  // ..u..b..........
    D670: F6 C3 04 74 21 8D 5C 28 E8 22 01 E8 6D 03 74 05  // ...t!.\(."..m.t.
    D680: B5 03 E8 E4 00 E8 41 04 E8 FA 00 80 FD 00 75 38  // ......A.......u8
    D690: B5 02 E8 E6 00 C3 8D 9C C0 01 B8 00 55 E8 73 0D  // ............U.s.
    D6A0: B5 02 E8 D6 00 C3 A9 02 00 74 1D B5 04 E8 B9 00  // .........t......
    D6B0: E8 DC 00 8D 5C 28 E8 E4 00 E8 67 18 E8 BC 00 8D  // ....\(....g.....
    D6C0: 5C 28 E8 D8 00 E8 01 04 C3 B5 01 E8 9B 00 B5 02  // \(..............
    D6D0: E8 A8 00 E8 B9 00 F6 C3 04 75 10 8D 9C C0 01 B8  // .........u......
    D6E0: 00 55 E8 2E 0D B5 02 E8 17 00 C3 E8 AF 00 B5 02  // .U..............
    D6F0: 8D 5C 28 E8 57 00 75 02 B5 01 E8 04 00 E8 C9 03  // .\(.W.u.........
    D700: C3 8D 9C AC 02 B1 02 E8 27 1A B5 02 E8 6C 00 C3  // ........'....l..
    D710: 8D 9C A4 01 E8 21 00 E8 75 00 F6 C3 04 74 12 8D  // .....!..u....t..
    D720: 5C 28 E8 78 00 E8 5D 00 E8 63 07 8D 5C 28 E8 FE  // \(.x..]..c..\(..
    D730: 17 B8 02 00 E8 0E FF C3 B9 48 00 E8 24 16 C3 53  // .........H..$..S
    D740: 81 C3 05 01 E8 46 1A 24 06 3C 02 5B C3 E8 10 00  // .....F.$.<.[....
    D750: 3D 01 04 75 0A 53 83 C3 18 E8 31 1A 5B A8 01 C3  // =..u.S....1.[...
    D760: 53 83 C3 12 E8 26 1A 5B C3 8D 9C AC 02 32 C9 E8  // S....&.[.....2..
    D770: BF 19 C3 8D 9C AC 02 E8 13 1A C3 8D 9C AC 02 B1  // ................
    D780: 01 E8 AD 19 C3 8D 9C AC 02 B1 01 E8 BB 19 C3 66  // ...............f
    D790: 50 8D 9C A0 01 E8 F5 19 8A D8 66 58 C3 55 57 51  // P.........fX.UWQ
    D7A0: B9 08 00 BD 00 00 BB 08 00 2B D9 D1 E3 8D 58 4E  // .........+....XN
    D7B0: E8 DA 19 E8 E3 01 E2 EE 8D 5C 4B E8 CF 19 B9 03  // .........\K.....
    D7C0: 00 8B D0 BF F9 29 85 55 06 74 17 66 8B 05 8D 9A  // .....).U.t.f....
    D7D0: 4C 02 E8 18 19 8B 45 04 8D 9A 50 02 E8 26 19 83  // L.....E...P..&..
    D7E0: C5 08 83 C7 08 E2 DF 8D 7C 5E B9 04 00 33 ED 8B  // ........|^...3..
    D7F0: DF E8 99 19 0B C0 74 09 E8 5D 01 E8 97 00 83 C5  // ......t..]......
    D800: 1C 83 C7 12 E2 E9 55 32 ED E8 6F FF 8D 5C 28 E8  // ......U2..o..\(.
    D810: 4E FF 3D 01 04 75 10 83 C3 14 E8 70 19 24 70 C0  // N.=..u.....p.$p.
    D820: E8 04 8A E8 E8 54 FF 5D 8D 9C A6 00 E8 5E 19 0A  // .....T.].....^..
    D830: C0 74 46 8D 9C A8 00 E8 53 19 3C 02 75 3B 66 C1  // .tF.....S.<.u;f.
    D840: E8 10 3C 04 72 33 8D 9C A8 00 32 E4 03 D8 8B FB  // ..<.r3....2.....
    D850: B9 04 00 8B DF E8 35 19 0B C0 74 15 E8 F9 00 A9  // ......5...t.....
    D860: 80 00 75 0D E8 2E 00 83 C5 1C 55 58 83 F8 70 73  // ..u.......UX..ps
    D870: 08 83 C7 12 49 0B C9 75 DA 59 5F 5D C3 20 03 58  // ....I..u.Y_]. .X
    D880: 02 3C 00 01 00 00 04 00 03 3C 00 00 08 80 02 E0  // .<.......<......
    D890: 01 3C 00 20 00 51 8D 1D E8 F2 18 8D 9A C0 01 E8  // .<. .Q..........
    D8A0: 63 18 8D 5D 02 E8 E5 18 8D 9A C2 01 E8 89 00 8D  // c..]............
    D8B0: 5D 05 E8 D8 18 8D 9A C6 01 E8 7C 00 8D 5D 08 E8  // ].........|..]..
    D8C0: CB 18 8B C8 8A DC 66 C1 C8 10 8A D0 80 E2 0F 8A  // ......f.........
    D8D0: F0 C0 EE 04 8A EC C0 ED 06 8A FC C0 EF 04 80 E7  // ................
    D8E0: 03 80 E4 0F C0 E4 04 0A D4 80 E2 3F 80 E4 C0 C0  // ...........?....
    D8F0: EC 02 0A F4 8B C3 8D 9A CC 01 E8 08 18 8D 9A CA  // ................
    D900: 01 8B C1 E8 FF 17 8D 9A CE 01 33 C0 8A C6 E8 F4  // ..........3.....
    D910: 17 8D 9A D0 01 33 C0 8A C2 E8 E9 17 8D 5D 0C E8  // .....3.......]..
    D920: 6B 18 8D 9A D2 01 E8 0F 00 8D 5D 0F E8 5E 18 8D  // k.........]..^..
    D930: 9A D6 01 E8 CF 17 59 C3 8B C8 8A D4 66 C1 C8 10  // ......Y.....f...
    D940: 8A F0 80 E6 0F 8A E8 C0 ED 04 8B C1 E8 B6 17 83  // ................
    D950: C3 02 8B C2 E8 AE 17 C3 8D 5D 11 E8 2F 18 8A E0  // .........]../...
    D960: BA 06 00 C0 E8 07 74 03 80 CA 80 8A C4 C0 E8 03  // ......t.........
    D970: 24 03 3C 02 75 03 80 CA 40 3C 03 75 12 8A C4 D0  // $.<.u...@<.u....
    D980: E8 A8 01 74 03 80 E2 FD A8 02 74 03 80 E2 FB 8B  // ...t......t.....
    D990: C2 8D 9A D8 01 E8 6D 17 C3 3C 01 74 3D 8B D0 0F  // ......m..<.t=...
    D9A0: B6 C6 24 3F 04 3C 8D 9A 50 02 E8 58 17 0F B6 C2  // ..$?.<..P..X....
    D9B0: 83 C0 1F C1 E0 03 8D 9A 4C 02 E8 48 17 0F B6 DE  // ........L..H....
    D9C0: C1 EB 06 C1 E3 02 2E F7 A7 59 2B 2E F7 B7 57 2B  // .........Y+...W+
    D9D0: 8D 9A 4E 02 E8 2E 17 83 C5 08 C3 10 00 0A 00 04  // ..N.............
    D9E0: 00 03 00 05 00 04 00 10 00 09 00 8D 9C A6 00 E8  // ................
    D9F0: 9B 17 0A C0 74 1F 8D 9C A8 00 51 B1 03 E8 18 00  // ....t.....Q.....
    DA00: 59 0B DB 74 10 E8 85 17 32 C0 66 3D 00 03 0C 00  // Y..t....2.f=....
    DA10: 75 03 0B DB C3 33 DB C3 66 50 52 E8 6F 17 3C 02  // u....3..fPR.o.<.
    DA20: 75 39 80 FC 03 72 34 66 C1 E8 10 32 E4 3C 04 76  // u9...r4f...2.<.v
    DA30: 2A 03 C3 8B D0 83 C3 04 3B DA 73 1F E8 4E 17 8A  // *.......;.s..N..
    DA40: E0 80 E4 E0 C0 EC 05 24 1F 38 CC 74 08 32 E4 FE  // .......$.8.t.2..
    DA50: C0 03 D8 EB E3 0B DB 5A 66 58 C3 33 DB 5A 66 58  // .......ZfX.3.ZfX
    DA60: C3 51 8D 9C A6 00 E8 24 17 0A C0 74 1B 8D 9C A8  // .Q.....$...t....
    DA70: 00 B1 12 E8 18 00 74 10 E8 12 17 66 C1 E8 10 80  // ......t....f....
    DA80: E4 07 75 04 B0 01 EB 02 32 C0 0A C0 59 C3 66 50  // ..u.....2...Y.fP
    DA90: 52 E8 F9 16 3C 70 75 2B 66 C1 E8 10 32 E4 83 C3  // R...<pu+f...2...
    DAA0: 05 03 C3 8B D0 3B DA 73 1A E8 E1 16 38 C8 74 0D  // .....;.s....8.t.
    DAB0: 66 C1 E8 10 32 E4 83 C0 03 03 D8 EB E8 0B DB 5A  // f...2..........Z
    DAC0: 66 58 C3 33 DB 5A 66 58 C3 57 66 51 8D 9C C0 01  // fX.3.ZfX.WfQ....
    DAD0: 8B FB 8B DF E8 3D 00 0B C9 74 0B 66 8B D1 E8 E0  // .....=...t.f....
    DAE0: 0B 83 C7 1C EB EC 66 59 5F C3 50 53 51 B9 07 00  // ......fY_.PSQ...
    DAF0: 53 8B DA E8 97 16 83 F8 00 5B 74 09 66 C1 E3 10  // S........[t.f...
    DB00: 8B DA E8 72 12 59 5B 58 C3 51 53 B9 07 00 E8 7F  // ...r.Y[X.QS.....
    DB10: 12 5B 59 C3 66 50 53 83 C3 06 E8 70 16 5B 8B C8  // .[Y.fPS....p.[..
    DB20: 66 C1 E1 10 53 83 C3 02 E8 62 16 8B C8 5B 66 58  // f...S....b...[fX
    DB30: C3 8D 9C A0 01 32 C9 E8 F7 15 C3 57 B9 20 00 E8  // .....2.....W. ..
    DB40: 5A 12 5F C3 53 51 E8 19 00 32 E4 8A C5 C1 E0 02  // Z._.SQ...2......
    DB50: 59 8D 9C 78 01 03 D8 E8 33 16 5B C3 B1 02 E8 07  // Y..x....3.[.....
    DB60: 00 C3 B1 01 E8 01 00 C3 53 8D 9C 98 01 E8 D9 15  // ........S.......
    DB70: 5B C3 33 C9 E8 B3 12 75 3C 66 BA 22 F0 FF FF 66  // [.3....u<f."...f
    DB80: 33 C0 E8 46 03 33 C0 E8 24 02 74 1C A9 DD 0F 74  // 3..F.3..$.t....t
    DB90: F6 E8 1B FA F6 C3 04 75 05 F6 C3 18 74 E9 E8 1F  // .......u....t...
    DBA0: 00 50 E8 A0 FA 58 EB DF E8 0B 00 75 08 E8 20 00  // .P...X.....u.. .
    DBB0: 8B C1 E8 90 FA C3 66 50 E8 29 03 8B C8 66 58 C3  // ......fP.)...fX.
    DBC0: 66 52 66 BA FF FF FF FF 33 D0 E8 FE 02 66 5A C3  // fRf.....3....fZ.
    DBD0: 50 53 52 E8 E0 FF 75 13 B9 08 00 E8 BD 0E 23 C8  // PSR...u.......#.
    DBE0: 75 19 33 C0 E8 C7 01 8B C8 EB 10 83 F9 02 74 0B  // u.3...........t.
    DBF0: E8 7B 06 80 FB 01 75 03 83 E1 FD 5A 5B 58 C3 56  // .{....u....Z[X.V
    DC00: 66 33 C0 66 BA 00 F0 FF FF E8 9E 05 66 C1 E6 10  // f3.f........f...
    DC10: E8 A8 01 0B C0 74 03 E8 05 00 E8 7E 05 5E C3 50  // .....t.....~.^.P
    DC20: 51 E8 6C 01 50 32 C0 E8 90 02 E8 CC 00 E8 7F 00  // Q.l.P2..........
    DC30: 8D 9C 08 03 E8 56 15 38 E8 74 0A 8A C5 E8 AD 14  // .....V.8.t......
    DC40: B0 02 E8 75 02 58 E8 79 00 66 51 8D 9C A4 01 E8  // ...u.X.y.fQ.....
    DC50: 3B 15 66 8B C8 8B D3 8D 9C D0 02 E8 2F 15 66 3B  // ;.f........./.f;
    DC60: C1 75 16 53 8D 9C AA 01 E8 22 15 8B C8 8D 9C D6  // .u.S....."......
    DC70: 02 E8 19 15 3B C1 5B 74 05 B0 02 E8 3C 02 66 59  // ....;.[t....<.fY
    DC80: E8 67 FE E8 FF 01 66 25 FF 0F 00 00 59 58 66 BA  // .g....f%....YXf.
    DC90: FF FF FF FF 33 D0 E8 11 05 33 D2 C3 53 66 50 8D  // ....3....3..SfP.
    DCA0: 9C C8 02 E8 E7 14 8A C4 E8 42 14 66 58 5B C3 53  // .........B.fX[.S
    DCB0: 66 50 8D 9C C8 02 E8 D4 14 8A E0 E8 2F 14 66 58  // fP........../.fX
    DCC0: 5B C3 8D 9C C8 02 E8 C4 14 32 C0 E8 1F 14 C3 66  // [........2.....f
    DCD0: 52 52 32 ED 83 C1 02 B8 06 00 F7 E1 66 33 C9 8B  // RR2.........f3..
    DCE0: C8 5A 51 66 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59  // .ZQf....f..f...Y
    DCF0: 66 F7 F1 66 8B C8 66 5A C3 53 E8 48 01 66 C1 E2  // f..f..fZ.S.H.f..
    DD00: 10 E8 36 01 8D 9C 98 01 E8 82 14 8A E8 8D 9C AC  // ..6.............
    DD10: 02 E8 79 14 8A C8 E8 9E 0B 8A EB 5B C3 57 53 53  // ..y........[.WSS
    DD20: E8 D6 FF E8 14 01 5B E8 B0 0B 74 61 80 FD 00 75  // ......[...ta...u
    DD30: 29 53 E8 0F FE 66 8B D0 E8 4A FA 8A CD 51 E8 1B  // )S...f...J...Q..
    DD40: FE 8A FD 59 E8 88 FF 5B E8 42 14 66 25 FF FF 00  // ...Y...[.B.f%...
    DD50: 00 66 3B C8 73 34 32 DB EB 33 80 FD 02 75 11 E8  // .f;.s42..3...u..
    DD60: 2C 01 8D 1F E8 26 14 3D 74 40 76 1E 32 DB EB 1D  // ,....&.=t@v.2...
    DD70: 80 FD 03 75 15 53 E8 C1 00 B3 03 E8 18 0B 5B E8  // ...u.S........[.
    DD80: 0B 14 3B C2 76 04 32 DB EB 03 80 CB 01 5B 5F C3  // ..;.v.2......[_.
    DD90: 53 8B F0 E8 05 0D 23 F0 74 09 8B C6 E8 89 0B 8B  // S.....#.t.......
    DDA0: F3 0B DB 5B C3 51 E8 27 FE E8 0F 00 59 C3 51 50  // ...[.Q.'....Y.QP
    DDB0: E8 E8 0C 8B C8 58 E8 02 00 59 C3 57 53 E8 97 0E  // .....X...Y.WS...
    DDC0: 0B C0 74 09 8B 1D 83 C7 02 3B C3 75 F7 8B 1D 83  // ..t......;.u....
    DDD0: FB FF 74 0B 83 C7 02 85 D9 74 F2 8B C3 EB 02 33  // ..t......t.....3
    DDE0: C0 0B C0 5B 5F C3 33 C0 E8 C3 FF 74 13 E8 A0 FF  // ...[_.3....t....
    DDF0: 8B DE B9 00 01 E8 6A 0F 83 C6 08 E8 4D 0C EB E8  // ......j.....M...
    DE00: BB F0 46 B8 5A A5 E8 FC 12 C3 53 66 50 8D 9C 08  // ..F.Z.....SfP...
    DE10: 03 E8 79 13 8A E8 66 58 5B C3 53 66 50 8D 9C C8  // ..y...fX[.SfP...
    DE20: 02 E8 69 13 8A C8 66 58 5B C3 53 66 50 8D 9C C9  // ..i...fX[.SfP...
    DE30: 02 E8 59 13 8A C8 66 58 5B C3 53 8D 5C 14 E8 4C  // ..Y...fX[.S.\..L
    DE40: 13 8B D0 5B C3 53 66 50 8D 5C 16 E8 3F 13 8B D0  // ...[.SfP.\..?...
    DE50: 66 58 5B C3 53 66 50 8D 9C 18 03 E8 2F 13 66 8B  // fX[.SfP...../.f.
    DE60: D0 66 58 5B C3 53 66 50 8D 9C 1C 03 E8 1E 13 66  // .fX[.SfP.......f
    DE70: 8B D0 66 58 5B C3 53 66 50 8D 5C 10 E8 0E 13 8B  // ..fX[.SfP.\.....
    DE80: C8 66 58 5B C3 53 8D 5C 08 E8 01 13 5B C3 53 66  // .fX[.S.\....[.Sf
    DE90: 50 8D 5C 0C E8 F6 12 8B D0 66 58 5B C3 8D 5C 04  // P.\......fX[..\.
    DEA0: E8 EA 12 C3 51 8D 5C 04 32 C9 E8 84 12 59 C3 8D  // ....Q.\.2....Y..
    DEB0: 9C 18 03 66 8B C2 E8 34 12 C3 53 51 8A E8 E8 DC  // ...f...4..SQ....
    DEC0: FF 24 FD 0A E8 E8 DC FF 59 5B C3 53 66 50 51 66  // .$......Y[.SfPQf
    DED0: 8B C8 BB 00 00 E8 2C 0A 23 C2 0B C1 E8 2E 0A 59  // ......,.#......Y
    DEE0: 66 58 5B C3 BB 00 00 E8 1A 0A 66 25 DF 0F 00 00  // fX[.......f%....
    DEF0: C3 80 FA 14 C3 E8 48 0E E8 D6 0D E8 B4 0D 75 06  // ......H.......u.
    DF00: E8 AA 0B E8 B8 0D C3 B0 01 C3 55 B3 01 E8 3B 10  // ..........U...;.
    DF10: 5D C3 66 53 66 BB 04 00 00 00 E8 05 00 33 C0 66  // ].fSf........3.f
    DF20: 5B C3 55 66 C1 E3 10 BB 00 00 E8 1E 10 5D C3 E8  // [.Uf.........]..
    DF30: D6 0E BB 0A 00 E8 D5 09 C3 BB 0A 00 E8 C5 09 66  // ...............f
    DF40: 8B C8 E8 C3 0E BB 0A 00 66 2B C1 E8 BF 09 C3 E8  // ........f+......
    DF50: 29 00 0B C9 74 22 E8 A6 FC E8 2A 07 66 51 66 8B  // )...t"....*.fQf.
    DF60: C8 BB 07 00 E8 9D 09 66 25 00 FE 00 00 66 0B C1  // .......f%....f..
    DF70: E8 9A 09 66 59 0C 01 C3 32 C0 C3 E8 49 02 0B C9  // ...fY...2...I...
    DF80: 75 06 E8 4B FC E8 4F 02 51 E8 44 FC 66 C1 E6 10  // u..K..O.Q.D.f...
    DF90: 33 C0 E8 10 FE 74 09 E8 F4 02 75 F6 33 C8 EB F2  // 3....t....u.3...
    DFA0: 58 23 C8 66 C1 EE 10 C3 A8 10 75 63 E8 E9 06 66  // X#.f......uc...f
    DFB0: C1 E6 10 33 C0 E8 F6 FD 74 35 E8 D3 FD 50 51 8B  // ...3....t5...PQ.
    DFC0: C8 E8 D7 01 85 C1 59 58 74 0D 50 E8 CF FE 24 03  // ......YXt.P...$.
    DFD0: 3C 03 58 75 E0 EB 0C 50 E8 C2 FE A8 01 58 74 D5  // <.Xu...P.....Xt.
    DFE0: E8 CC FC 50 E8 91 07 58 B5 00 E8 B7 FE EB C6 E8  // ...P...X........
    DFF0: A9 01 E8 9B FD E8 13 01 B1 00 E8 4B 07 66 C1 EE  // ...........K.f..
    E000: 10 E8 8D 06 A8 20 75 3B A8 40 75 03 E8 1F 08 E8  // ..... u;.@u.....
    E010: 74 06 0A C0 75 00 E8 82 01 E8 74 FD E8 6F FE E8  // t...u.....t..o..
    E020: CF FE 75 14 E8 47 02 0A DB 74 0D E8 81 FC E8 47  // ..u..G...t.....G
    E030: 07 B5 00 E8 6E FE EB 08 E8 2E 07 B5 01 E8 64 FE  // ....n.........d.
    E040: E8 CE 00 C3 E8 54 0A C3 E8 9B FD E8 AC 06 33 C9  // .....T........3.
    E050: E8 84 01 66 33 D2 66 33 C0 E8 6F FE E8 83 07 E8  // ...f3.f3..o.....
    E060: 52 00 B1 FF E8 77 00 33 C0 E8 42 FD 74 0A E8 1F  // R....w.3..B.t...
    E070: FD 50 E8 21 07 58 EB F1 32 C9 E8 A6 01 E8 1B 0A  // .P.!.X..2.......
    E080: 0B C0 C3 E8 60 FD E8 71 06 66 33 C0 66 BA 00 F0  // ....`..q.f3.f...
    E090: FF FF E8 15 01 51 B1 01 E8 6E 01 59 E8 56 07 33  // .....Q...n.Y.V.3
    E0A0: C0 E8 0A FD 74 0A E8 E7 FC 50 E8 DA 06 58 EB F1  // ....t....P...X..
    E0B0: E8 00 07 C3 B8 02 00 E8 D6 FC 74 21 B8 02 00 E8  // ..........t!....
    E0C0: ED F4 F6 C3 04 75 0A E8 D1 09 83 E0 FD E8 D4 09  // .....u..........
    E0D0: C3 66 B8 02 00 00 00 E8 F1 FD E8 33 F6 C3 E8 35  // .f.........3...5
    E0E0: 08 74 13 BB 02 00 E8 1B 08 8A E1 E8 1F 08 E8 DA  // .t..............
    E0F0: 06 0C 01 C3 0C 01 C3 51 E8 1B 08 74 0C 8A CC BB  // .......Q...t....
    E100: 02 00 E8 FF 07 8A C4 8A E1 59 C3 B0 01 E8 16 06  // .........Y......
    E110: C3 B0 00 E8 10 06 C3 E8 10 0D 75 18 E8 7C 00 E8  // ..........u..|..
    E120: 6E FC 80 F9 01 75 0E 51 E8 3E 06 B5 01 E8 74 FD  // n....u.Q.>....t.
    E130: 59 E8 DD FF C3 E8 D3 FF 51 E8 4B 06 B5 00 E8 63  // Y.......Q.K....c
    E140: FD 59 C3 B8 02 00 E8 47 FC 74 03 E8 6F 06 C3 E8  // .Y.....G.t..o...
    E150: D3 04 3B C1 7C 35 8B C1 E8 13 05 E8 29 07 8B C8  // ..;.|5......)...
    E160: 51 E8 43 05 E8 07 05 59 E8 1C 07 3B C8 72 02 8B  // Q.C....Y...;.r..
    E170: C1 8D 5C 04 E8 8E 0F 32 C9 E8 DD 0B FE C1 38 C1  // ..\....2......8.
    E180: 72 F7 8D 5C 04 E8 05 10 0B C0 C3 33 C0 C3 BB 00  // r..\.......3....
    E190: 48 33 C0 8A C2 C1 E0 02 03 D8 C3 53 BB 03 00 E8  // H3.........S....
    E1A0: 62 07 66 25 FF 0F 00 00 5B C3 53 66 50 66 51 66  // b.f%....[.SfPfQf
    E1B0: 8B C8 BB 03 00 E8 4C 07 66 23 C2 66 0B C1 E8 4C  // ......L.f#.f...L
    E1C0: 07 66 59 66 58 5B C3 66 50 BB 05 00 E8 35 07 25  // .fYfX[.fP....5.%
    E1D0: FF 0F 8B C8 66 58 C3 E8 C1 08 23 C8 66 50 BB 05  // ....fX....#.fP..
    E1E0: 00 E8 20 07 25 00 F0 0B C1 E8 21 07 66 58 C3 66  // .. .%.....!.fX.f
    E1F0: 50 53 BB 06 00 E8 0C 07 A8 10 75 09 BB F0 46 E8  // PS........u...F.
    E200: 8B 0F 3D 5A A5 5B 66 58 C3 66 50 53 BB 06 00 E8  // ..=Z.[fX.fPS....
    E210: F2 06 80 F1 01 C0 E1 04 24 EF 0A C1 E8 EE 06 5B  // ........$......[
    E220: 66 58 C3 53 66 50 BB F8 46 E8 61 0F 8A C1 E8 BC  // fX.SfP..F.a.....
    E230: 0E 66 58 5B C3 53 BB F8 46 E8 51 0F 83 E0 01 5B  // .fX[.S..F.Q....[
    E240: C3 53 66 50 BB 07 00 E8 BA 06 F6 C4 01 66 58 B0  // .SfP.........fX.
    E250: 06 74 02 B0 08 5B C3 53 BB 07 00 E8 A6 06 80 E4  // .t...[.S........
    E260: FE 80 FD 06 74 03 80 CC 01 E8 A1 06 5B C3 66 50  // ....t.......[.fP
    E270: BB 06 00 E8 8E 06 24 40 C0 E8 06 8A D8 66 58 C3  // ......$@.....fX.
    E280: B3 81 E8 BB 0C 75 04 83 C8 01 C3 33 C0 C3 50 66  // .....u.....3..Pf
    E290: 51 E8 FC FA 83 EC 04 8B EC 66 33 C0 66 89 46 00  // Q........f3.f.F.
    E2A0: 33 D2 8D BC C0 01 8D 1D E8 E2 0E 0B C0 74 3D 8B  // 3............t=.
    E2B0: DF B0 00 E8 2D 01 74 2F 8B DF E8 57 F8 66 8B 46  // ....-.t/...W.f.F
    E2C0: 00 3B C8 7F 10 72 20 66 C1 C8 10 66 C1 C9 10 3B  // .;...r f...f...;
    E2D0: C8 7F 0E EB 12 66 C1 C8 10 66 C1 C9 10 3B C8 72  // .....f...f...;.r
    E2E0: 06 8B D7 66 89 4E 00 83 C7 1C EB BA 0B D2 74 0A  // ...f.N........t.
    E2F0: 8D 9C A4 01 E8 F3 F7 E9 88 00 66 33 C0 66 89 46  // ..........f3.f.F
    E300: 00 8D BC 4C 02 33 D2 8D 1D E8 81 0E 0B C0 74 58  // ...L.3........tX
    E310: 66 50 E8 5E F4 3C 01 66 58 74 05 3D 40 06 73 43  // fP.^.<.fXt.=@.sC
    E320: 66 52 66 8B D0 8D 5D 04 E8 62 0E E8 5D 00 8B CA  // fRf...]..b..]...
    E330: 66 5A 74 2F 56 8D 9C A4 01 8B F1 E8 CB F7 5E B0  // fZt/V.........^.
    E340: 00 E8 9F 00 74 1D 8D 1D E8 42 0E 8B D9 8B 47 06  // ....t....B....G.
    E350: 66 C1 E0 10 8B 47 02 66 3B 46 00 72 06 8B D1 66  // f....G.f;F.r...f
    E360: 89 46 00 83 C7 08 EB 9F 0B D2 74 16 56 8D 9C A4  // .F........t.V...
    E370: 01 8B F2 E8 93 F7 5E 53 8D 9C BA 01 33 C0 E8 84  // ......^S....3...
    E380: 0D 5B 83 C4 04 0B D2 66 59 58 C3 57 53 51 E8 ED  // .[.....fYX.WSQ..
    E390: 08 3B 55 02 75 18 66 C1 CA 10 8B DA 66 C1 CA 10  // .;U.u.f.....f...
    E3A0: 3B 5D 06 75 09 0A C0 74 0E 3A 45 1B 74 09 83 C7  // ;].u...t.:E.t...
    E3B0: 1C E2 DE 33 D2 EB 02 8B D7 0B D2 59 5B 5F C3 51  // ...3.......Y[_.Q
    E3C0: 66 52 E8 B9 08 3A 65 1A 75 09 0A C0 74 0E 3A 45  // fR...:e.u...t.:E
    E3D0: 1B 74 09 83 C7 1C E2 ED 33 FF EB 00 0B FF 66 5A  // .t......3.....fZ
    E3E0: 59 C3 C3 66 51 66 52 53 53 66 C1 CE 10 8B DE 66  // Y..fQfRSSf.....f
    E3F0: C1 CE 10 E8 97 0D 5B 66 8B D0 E8 17 F7 3B CA 72  // ......[f.....;.r
    E400: 0A 66 3B CA 72 05 E8 14 F9 75 02 32 C0 5B 66 5A  // .f;.r....u.2.[fZ
    E410: 66 59 C3 56 57 E8 A7 FF 8B F7 E8 EC F6 5F 5E C3  // fY.VW........_^.
    E420: 66 50 53 66 51 52 57 56 51 8B DE B9 08 00 E8 31  // fPSfQRWVQ......1
    E430: 09 59 8D 5C 08 8B C1 66 C1 E0 10 8A C2 E8 AD 0C  // .Y.\...f........
    E440: F6 C2 03 75 24 8B C1 24 7F BF E7 36 80 3D FF 0F  // ...u$..$...6.=..
    E450: 84 0F 01 3A 05 75 0D 66 8B 45 01 66 B9 00 05 02  // ...:.u.f.E.f....
    E460: 00 E9 96 00 83 C7 05 EB E3 F6 C2 01 74 25 8B C1  // ............t%..
    E470: E8 70 01 0F 84 EB 00 33 C9 8A CC 8A D0 0A C0 75  // .p.....3.......u
    E480: 12 8D 5C 08 66 25 FF FF 00 00 66 C1 E0 08 E8 5C  // ..\.f%....f....\
    E490: 0C EB B2 8A E1 8A CA 80 E1 0C C0 E9 02 80 E2 F0  // ................
    E4A0: C0 EA 04 8A EA 80 FC 70 72 2A 80 FC 75 73 25 80  // .......pr*..us%.
    E4B0: EC 70 8A C4 32 E4 50 E8 30 02 8B D8 58 38 D8 72  // .p..2.P.0...X8.r
    E4C0: 05 33 C0 E9 9C 00 E8 28 02 E8 C1 0C 0B C0 0F 84  // .3.....(........
    E4D0: 90 00 EB 1B 32 C0 E8 E6 FE 0F 84 85 00 8D 5C 16  // ....2.........\.
    E4E0: 8B 05 E8 20 0C 8B 45 06 66 C1 E0 10 8B 45 02 50  // ... ..E.f....E.P
    E4F0: E8 94 03 66 C1 E1 10 8B C8 58 8D 1C E8 EE 0B 66  // ...f.....X.....f
    E500: 50 8D 5C 04 66 8B C1 E8 E3 0B 66 58 66 C1 E8 10  // P.\.f.....fXf...
    E510: 66 81 E1 FF FF 00 00 66 F7 E1 66 50 8D 5C 06 E8  // f......f..fP.\..
    E520: 6B 0C 8B C8 66 58 66 D3 E0 66 C1 E8 10 40 8D 5C  // k...fXf..f...@.\
    E530: 14 E8 D1 0B BF 47 37 83 F9 01 74 11 BF 4F 37 81  // .....G7...t..O7.
    E540: F9 01 01 74 08 BF 57 37 83 F9 02 75 15 8D 5C 0C  // ...t..W7...u..\.
    E550: 66 8B 05 E8 97 0B 8D 5C 10 66 8B 45 04 E8 8D 0B  // f......\.f.E....
    E560: 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00 40 01 90 01  // ..^_ZfY[fX..@...
    E570: 01 40 01 90 01 02 80 02 90 01 03 80 02 90 01 04  // .@..............
    E580: 40 01 90 01 05 40 01 90 01 06 80 02 90 01 07 D0  // @....@..........
    E590: 02 5E 01 0D 40 01 90 01 0E 80 02 90 01 0F 80 02  // .^..@...........
    E5A0: 5E 01 10 80 02 5E 01 11 80 02 E0 01 12 80 02 E0  // ^....^..........
    E5B0: 01 13 80 02 90 01 23 20 04 90 01 32 20 04 B0 02  // ......# ...2 ...
    E5C0: 33 20 04 C0 02 62 80 02 E0 01 FF 05 0A 05 05 05  // 3 ...b..........
    E5D0: 00 00 00 05 0B 06 05 05 00 00 00 08 10 08 08 08  // ................
    E5E0: 00 00 00 56 E8 2D 09 80 E4 01 3B 04 74 09 83 C6  // ...V.-....;.t...
    E5F0: 04 E2 F7 33 C0 EB 05 8B 44 02 0B C0 5E C3 57 53  // ...3....D...^.WS
    E600: 50 E8 10 09 83 E9 0A E8 E0 00 83 F8 05 76 03 B8  // P............v..
    E610: 05 00 D1 E0 03 C8 FB A5 83 C6 02 E2 FA B8 FF FF  // ................
    E620: AB 58 5B 5F C3 66 53 51 66 52 E8 41 00 E8 77 00  // .X[_.fSQfR.A..w.
    E630: 66 C1 E8 10 66 0F B7 D8 66 B8 00 00 00 03 66 D3  // f...f...f.....f.
    E640: E8 66 33 D2 66 F7 F3 E8 3D 02 66 5A 59 66 5B C3  // .f3.f...=.fZYf[.
    E650: 53 66 50 BB 07 00 E8 AB 02 0A C0 66 58 5B C3 53  // SfP........fX[.S
    E660: 66 50 BB 07 00 E8 9C 02 A8 01 66 58 5B C3 53 66  // fP........fX[.Sf
    E670: 50 8D 5C 06 E8 16 0B 8A C8 66 58 5B C3 51 B9 08  // P.\......fX[.Q..
    E680: 00 E8 F3 06 59 C3 53 8D 5C 08 E8 00 0B 24 03 5B  // ....Y.S.\....$.[
    E690: C3 8D 5C 09 E8 F6 0A C3 51 53 B1 01 8A E8 8D 5C  // ..\.....QS.....\
    E6A0: 08 E8 8D 0A 5B 59 C3 53 8D 1C E8 E0 0A 5B C3 53  // ....[Y.S.....[.S
    E6B0: 8D 5C 04 E8 D7 0A 5B C3 53 8D 5C 16 E8 CE 0A 5B  // .\....[.S.\....[
    E6C0: C3 53 66 52 33 C0 E8 C2 FC 66 5A 75 1B E8 34 00  // .SfR3....fZu..4.
    E6D0: 74 16 E8 15 00 40 83 F8 05 73 0D E8 0F 0A 48 E8  // t....@...s....H.
    E6E0: 0F 00 66 8B C2 E8 05 0A 5B C3 BB 00 4E E8 9D 0A  // ..f.....[...N...
    E6F0: C3 BB 08 4E C1 E0 03 03 D8 C3 BB 00 4E B9 32 00  // ...N........N.2.
    E700: E8 5F 06 C3 51 E8 E2 FF 0B C0 74 12 8B C8 BB 08  // ._..Q.....t.....
    E710: 4E E8 79 0A 66 3B C2 74 07 83 C3 08 E2 F3 0B DB  // N.y.f;.t........
    E720: 59 C3 C3 00 C3 00 8A E8 BB 20 DF 3C 01 74 02 32  // Y........ .<.t.2
    E730: DB E8 45 2A E8 E3 F6 66 B8 80 06 00 08 66 33 DB  // ..E*...f.....f3.
    E740: 8A D9 8A CD E8 B8 00 C3 66 51 66 52 66 57 66 B8  // ........fQfRfWf.
    E750: 80 05 00 08 66 BB 00 4C 00 00 66 33 C9 8B CE E8  // ....f..L..f3....
    E760: 9D 00 66 5F 66 5A 66 59 C3 66 B8 80 07 00 04 66  // ..f_fZfY.f.....f
    E770: 33 DB 8B DE E8 88 00 C3 66 B8 80 08 00 04 66 33  // 3.......f.....f3
    E780: DB 8B DE E8 79 00 C3 66 B8 80 09 00 04 66 33 DB  // ....y..f.....f3.
    E790: 8B DE E8 6A 00 C3 C3 66 B8 80 0A 00 04 66 33 DB  // ...j...f.....f3.
    E7A0: 8B DE E8 5A 00 E8 E7 EF F6 C3 02 74 03 B0 00 C3  // ...Z.......t....
    E7B0: B0 01 C3 66 B8 80 0D 00 00 E8 43 00 C3 66 B8 80  // ...f......C..f..
    E7C0: 0F 00 04 66 33 DB 8A D9 E8 34 00 66 B8 80 0F 00  // ...f3....4.f....
    E7D0: 04 66 33 DB 56 E8 76 04 03 74 04 8B 1C 5E E8 1E  // .f3.V.v..t...^..
    E7E0: 00 C3 66 B8 00 00 00 00 E8 14 00 66 B8 80 0C 00  // ..f........f....
    E7F0: 04 E8 0B 00 C3 66 B8 00 01 00 00 E8 01 00 C3 83  // .....f..........
    E800: EC 1C 8B EC 66 89 46 00 66 89 5E 04 66 89 4E 08  // ....f.F.f.^.f.N.
    E810: 66 89 56 0C 66 89 7E 10 66 89 76 14 8C D0 66 C1  // f.V.f.~.f.v...f.
    E820: E0 10 8B C4 BB 42 00 E8 67 04 83 C4 1C C3 51 8D  // .....B..g.....Q.
    E830: 5C 14 E8 58 09 66 C1 E0 10 E8 02 00 59 C3 83 EC  // \..X.f......Y...
    E840: 10 8B EC 66 3D F0 FF FF 03 76 06 66 B8 F0 FF FF  // ...f=....v.f....
    E850: 03 66 8B C8 66 33 C0 66 89 46 04 66 89 46 00 66  // .f..f3.f.F.f.F.f
    E860: 89 46 08 B0 01 88 46 09 66 B8 00 00 00 D0 66 0B  // .F....F.f.....f.
    E870: C1 66 89 46 0C 8C D0 66 C1 E0 10 8B C4 BB 35 00  // .f.F...f......5.
    E880: E8 0E 04 83 C4 10 C3 3D C0 7F 76 04 B8 C0 7F C3  // .......=..v.....
    E890: 83 C0 3F 24 C0 C3 53 51 66 50 B9 68 74 80 FB 03  // ..?$..SQfP.ht...
    E8A0: 74 0B B9 A0 8C 80 FB 00 75 03 B9 78 69 66 33 D2  // t.......u..xif3.
    E8B0: 8B D1 66 58 59 5B C3 66 52 B3 00 66 F7 C2 00 00  // ..fXY[.fR..f....
    E8C0: FF FF 75 13 80 FD 13 74 0E 80 FD 14 74 09 B3 03  // ..u....t....t...
    E8D0: 80 F9 03 74 02 B3 02 66 5A C3 E8 B0 08 66 C1 E8  // ...t...fZ....f..
    E8E0: 10 0B C0 74 1C 53 83 C3 06 E8 A1 08 5B 3D E0 01  // ...t.S......[=..
    E8F0: 72 0F 53 83 C3 18 E8 94 08 5B A8 80 75 03 0C 01  // r.S......[..u...
    E900: C3 32 C0 C3 53 83 C3 4C E8 50 08 5B C3 53 83 C3  // .2..S..L.P.[.S..
    E910: 4C E8 A2 07 5B C3 56 E8 34 03 83 C6 04 8A 64 10  // L...[.V.4.....d.
    E920: 8A 44 10 83 3C 00 5E C3 BB 00 50 83 F8 02 74 32  // .D..<.^...P...t2
    E930: BB 00 54 83 F8 08 74 2A BB 00 58 3D 80 00 74 22  // ..T...t*..X=..t"
    E940: BB 00 5C 3D 00 02 74 1A BB 00 60 3D 00 04 74 12  // ..\=..t...`=..t.
    E950: BB 00 64 3D 00 08 74 0A BB 00 68 83 F8 40 74 02  // ..d=..t...h..@t.
    E960: 33 DB C3 57 E8 56 00 74 0A 8B 5D 02 E8 08 00 0B  // 3..W.V.t..].....
    E970: DB 5F C3 33 DB 5F C3 52 51 0B DB 74 1B 56 E8 B4  // ._.3._.RQ..t.V..
    E980: 02 03 DE 5E 33 C9 8A 4F 01 80 3F FF 74 08 3A 07  // ...^3..O..?.t.:.
    E990: 74 06 03 D9 EB F0 33 DB 0B DB 59 5A C3 56 51 E8  // t.....3...YZ.VQ.
    E9A0: 93 02 32 C9 8D 7C 08 3B 5D 04 74 0C 83 C7 10 FE  // ..2..|.;].t.....
    E9B0: C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3 56 51 E8  // .:L.r.3...Y^.VQ.
    E9C0: 73 02 32 C9 8D 7C 08 3B 1D 74 0C 83 C7 10 FE C1  // s.2..|.;.t......
    E9D0: 3A 4C 06 72 F2 33 FF 0B FF 59 5E C3 56 51 E8 54  // :L.r.3...Y^.VQ.T
    E9E0: 02 32 C9 8D 7C 08 3B 45 0C 74 0C 83 C7 10 FE C1  // .2..|.;E.t......
    E9F0: 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3 57 50 E8 DB  // :L.r.3...Y^.WP..
    EA00: FF 8A C3 8B 5D 02 E8 6E FF 58 5F C3 53 32 C9 B3  // ....]..n.X_.S2..
    EA10: 01 E8 E8 FF 74 03 8A 4F 02 0A C9 5B C3 53 32 ED  // ....t..O...[.S2.
    EA20: B3 02 E8 D7 FF 74 03 8A 6F 02 0A ED 5B C3 50 57  // .....t..o...[.PW
    EA30: 8B DA E8 68 FF 75 04 33 DB EB 0D B0 14 8B 5D 08  // ...h.u.3......].
    EA40: E8 34 FF 74 F2 8B 5F 02 5F 58 C3 66 50 53 51 57  // .4.t.._._X.fPSQW
    EA50: 8D 1C 66 25 FF FF 00 00 E8 92 06 8B D8 E8 3B 00  // ..f%..........;.
    EA60: 23 C3 74 31 E8 75 FF 0B FF 74 2A 66 50 66 8B 45  // #.t1.u...t*fPf.E
    EA70: 04 8D 5C 0C E8 76 06 66 33 C0 8B 05 8D 5C 04 E8  // ..\..v.f3....\..
    EA80: 6B 06 66 58 E8 85 FF E8 93 FF 8D 5C 08 66 33 C0  // k.fX.......\.f3.
    EA90: 8B C1 E8 58 06 5F 59 5B 66 58 C3 56 E8 96 01 8B  // ...X._Y[fX.V....
    EAA0: 44 04 5E C3 56 E8 8D 01 89 44 04 5E C3 E8 B3 01  // D.^.V....D.^....
    EAB0: 8B F7 83 C6 38 BB 00 70 B9 23 00 E8 D2 02 E8 01  // ....8..p.#......
    EAC0: 00 C3 51 66 57 56 E8 6C 01 66 33 FF 8D 7C 08 33  // ..QfWV.l.f3..|.3
    EAD0: C0 E8 D0 FF 32 C9 8B 15 B8 00 70 23 C2 3D 00 30  // ....2.....p#.=.0
    EAE0: 75 54 80 FA 15 74 0B E8 B1 FF 0B 45 0C E8 B4 FF  // uT...t.....E....
    EAF0: EB 44 E8 5E 00 89 45 0C 0B C0 75 04 89 05 EB 36  // .D.^..E...u....6
    EB00: E8 98 FF 0B 45 0C E8 9B FF 83 7D 06 00 74 16 E8  // ....E.....}..t..
    EB10: 4A 00 89 45 06 0B C0 74 0C 83 7D 06 00 74 06 8B  // J..E...t..}..t..
    EB20: 5C 0A E8 A0 00 E8 40 00 89 05 8B 5D 02 E8 95 00  // \.....@....]....
    EB30: 8B 5D 08 E8 B0 00 83 C7 10 FE C1 3A 4C 06 72 96  // .].........:L.r.
    EB40: 5E 66 5F 59 C3 08 00 80 00 00 02 00 04 00 08 40  // ^f_Y...........@
    EB50: 00 00 00 53 E8 3D 00 E8 33 06 5B C3 53 E8 34 00  // ...S.=..3.[.S.4.
    EB60: 83 C3 08 E8 27 06 5B C3 53 57 52 E8 26 00 83 C3  // ....'.[.SWR.&...
    EB70: 04 E8 19 06 8B D0 5A 5F 5B C3 E8 EB FF 66 C1 E8  // ......Z_[....f..
    EB80: 10 B4 11 E8 25 00 C3 E8 DE FF 66 C1 E8 18 B4 10  // ....%.....f.....
    EB90: E8 18 00 C3 51 52 33 C9 8A CE 80 E1 07 49 B8 10  // ....QR3......I..
    EBA0: 00 F7 E1 BB 14 70 03 D8 5A 59 C3 57 53 51 33 C9  // .....p..ZY.WSQ3.
    EBB0: 8A C8 8A C4 BB 03 71 E8 A9 FD 83 C3 02 03 D9 8A  // ......q.........
    EBC0: 07 59 5B 5F C3 50 53 B0 01 E8 AB FD 74 15 E8 A9  // .Y[_.PS.....t...
    EBD0: FF 88 47 02 5B 53 B0 02 E8 9C FD 74 06 E8 A7 FF  // ..G.[S.....t....
    EBE0: 88 47 02 5B 58 C3 51 50 B0 14 E8 8A FD 74 3A 53  // .G.[X.QP.....t:S
    EBF0: E8 A1 FF 83 C3 0C E8 94 05 8B C8 5B F6 C1 01 74  // ...........[...t
    EC00: 05 66 83 67 02 FD F6 C1 80 74 05 66 83 67 02 F7  // .f.g.....t.f.g..
    EC10: F7 C1 00 01 74 08 66 81 4F 02 00 01 00 00 F7 C1  // ....t.f.O.......
    EC20: 00 02 74 05 66 83 67 02 FB 58 59 C3 BF AA 01 8B  // ..t.f.g..XY.....
    EC30: 3D 8B 7D 0C C3 BE AA 01 8B 34 8B 74 30 C3 1E 0E  // =.}......4.t0...
    EC40: 1F BF AA 01 8B 3D 8B 7D 0E 83 C7 04 1F C3 BE AA  // .....=.}........
    EC50: 01 8B 34 8B 74 10 C3 BF AA 01 8B 3D 8B 7D 26 83  // ..4.t......=.}&.
    EC60: C7 04 C3 BF AA 01 8B 3D 8B 7D 40 C3 BE AA 01 8B  // .......=.}@.....
    EC70: 34 8B 74 1A C3 BE AA 01 8B 34 8B 74 3A C3 BF AA  // 4.t......4.t:...
    EC80: 01 8B 3D 8B 7D 0A 83 C7 04 B9 0D 00 C3 E8 01 00  // ..=.}...........
    EC90: CB 83 EC 06 8B EC 89 46 00 66 33 C0 C6 46 04 00  // .......F.f3..F..
    ECA0: 89 46 02 06 52 8A D3 8B C5 E8 4F 17 5A 07 83 C4  // .F..R.....O.Z...
    ECB0: 06 C3 E8 77 FF 66 F7 45 10 01 00 00 00 C3 50 E8  // ...w.f.E......P.
    ECC0: 6A FF B8 01 00 09 45 10 58 C3 E8 5F FF 88 45 10  // j.....E.X.._..E.
    ECD0: C3 66 53 83 EC 48 8B EC 66 89 5E 00 66 89 4E 04  // .fS..H..f.^.f.N.
    ECE0: 8C D0 66 C1 E0 10 8B C4 BB 00 00 E8 A3 FF 83 C4  // ..f.............
    ECF0: 48 66 5B E8 49 01 E8 83 01 E8 0E 00 BB 04 00 E8  // Hf[.I...........
    ED00: 02 FC 66 C1 E8 10 E8 C1 FF C3 83 EC 0C 8B EC 8C  // ..f.............
    ED10: D0 66 C1 E0 10 8B C4 BB 16 00 E8 74 FF 66 BB 00  // .f.........t.f..
    ED20: 00 00 00 83 C4 0C E8 03 FF 66 8B C3 66 C1 E8 08  // .........f..f...
    ED30: 66 89 45 28 66 8B C3 66 C1 E0 18 66 89 45 2C C3  // f.E(f..f...f.E,.
    ED40: E8 E9 FE 66 8B 5D 08 66 8B 4D 0C C3 56 E8 25 FF  // ...f.].f.M..V.%.
    ED50: 66 8B 44 08 5E C3 B0 05 C3 B0 01 C3 B0 04 C3 B0  // f.D.^...........
    ED60: 08 C3 53 66 50 66 33 C0 E8 82 03 83 C3 04 E2 F8  // ..SfPf3.........
    ED70: 66 58 5B C3 32 C0 C3 FC E8 12 04 66 C1 CB 10 E8  // fX[.2......f....
    ED80: 6B 03 66 C1 CB 10 66 81 C3 04 00 04 00 E2 E9 C3  // k.f...f.........
    ED90: FC 66 AD E8 57 03 83 C3 04 E2 F6 C3 FC E8 ED 03  // .f..W...........
    EDA0: 66 AB 83 C3 04 E2 F6 C3 66 50 B8 30 00 E8 10 00  // f.......fP.0....
    EDB0: 66 58 C3 66 50 B8 C0 5D D1 E1 E8 03 00 66 58 C3  // fX.fP..].....fX.
    EDC0: 52 F7 E1 8B CA E8 DE 01 66 53 8B D9 66 C1 E3 10  // R.......fS..f...
    EDD0: 8B D8 66 B8 B8 A8 05 00 B2 00 66 EF B2 04 66 ED  // ..f.......f...f.
    EDE0: 33 C9 66 03 D8 73 0A 66 ED 66 A9 00 00 00 80 75  // 3.f..s.f.f.....u
    EDF0: F6 66 ED 66 3B C3 73 0C 66 C1 E8 10 3B C1 72 04  // .f.f;.s.f...;.r.
    EE00: 8B C8 EB ED 66 5B 5A C3 66 52 E8 99 01 66 B8 B8  // ....f[Z.fR...f..
    EE10: A8 05 00 B2 00 66 EF B2 04 66 ED 66 33 D2 66 BB  // .....f...f.f3.f.
    EE20: 30 00 00 00 66 F7 F3 66 5A C3 66 50 53 BB 07 00  // 0...f..fZ.fPS...
    EE30: E8 D1 FA 25 00 02 35 00 02 0B C0 5B 66 58 C3 66  // ...%..5....[fX.f
    EE40: 51 B3 01 E8 05 01 E8 23 FE 66 33 C9 8B 4C 08 66  // Q......#.f3..L.f
    EE50: C1 E0 0A 0B C9 75 03 B9 00 08 66 2B C1 E8 0C FE  // .....u....f+....
    EE60: 66 89 44 04 89 4C 08 66 59 C3 56 1E 0E 1F E8 FB  // f.D..L.fY.V.....
    EE70: FD 66 8B 44 04 66 C1 E0 0A 1F 5E C3 E8 C0 FF 06  // .f.D.f....^.....
    EE80: E8 E0 FD 0E 07 66 BB 00 F8 1A 00 E8 DC FF 66 03  // .....f........f.
    EE90: D8 E8 B8 03 66 3B 05 75 0F B9 00 01 FC E8 AC 03  // ....f;.u........
    EEA0: 66 AB 66 83 C3 04 E2 F5 E8 B8 FD BE AA 01 8B 34  // f.f............4
    EEB0: 8B 74 14 8B 45 14 89 44 0C E8 92 FD 0B F6 74 2B  // .t..E..D......t+
    EEC0: 57 56 83 C7 20 83 C6 04 B9 02 00 8B 05 89 04 8B  // WV.. ...........
    EED0: 45 02 89 44 02 8A 45 0C 88 44 0C 8A 45 0D 88 44  // E..D..E..D..E..D
    EEE0: 0D 8A 45 0E 88 44 0E 47 46 E2 E0 5E 5F E8 85 FD  // ..E..D.GF..^_...
    EEF0: 0B F6 74 1E 8A 85 06 01 88 44 2F BB 04 71 B0 09  // ..t......D/..q..
    EF00: E8 60 FA 74 0D 57 81 C7 80 00 8A 85 85 00 88 47  // .`.t.W.........G
    EF10: 04 5F 07 C3 BE AA 01 8B 34 8B 74 1E 83 C6 04 B9  // ._......4.t.....
    EF20: 28 00 C3 56 E8 27 FD 83 C6 04 8A 6C 0F 5E C3 56  // (..V.'.....l.^.V
    EF30: E8 1B FD 80 FD 00 74 06 83 C6 04 88 6C 0F 5E C3  // ......t.....l.^.
    EF40: 32 C0 C3 E8 1D FD 66 8B 45 08 C3 66 53 83 EC 04  // 2.....f.E..fS...
    EF50: 8B EC 8C D0 66 C1 E0 10 8B C4 66 89 5E 00 BB 06  // ....f.....f.^...
    EF60: 00 E8 2D FD 8B EC 66 8B 46 00 83 C4 04 66 5B C3  // ..-...f.F....f[.
    EF70: 83 EC 0C 8B EC 8C D0 66 C1 E0 10 8B C4 BB 16 00  // .......f........
    EF80: E8 0E FD 8B EC 66 8B 5E 00 66 8B 4E 00 66 8B 56  // .....f.^.f.N.f.V
    EF90: 08 83 C4 0C C3 66 B8 00 00 00 00 C3 BF AA 01 8B  // .....f..........
    EFA0: 3D 8B 7D 12 C3 00 66 50 8C C8 3D 00 C0 75 0C BA  // =.}...fP..=..u..
    EFB0: C3 03 EC 8A F0 0A F6 74 02 EB 0E 53 2E 8B 1E 14  // .......t...S....
    EFC0: 00 B2 20 E8 D6 00 8A F4 5B 32 D2 66 ED 66 58 C3  // .. .....[2.f.fX.
    EFD0: 2E 8B 1E 14 00 C3 0B C9 75 1A 4B 74 16 43 3B DA  // ........u.Kt.C;.
    EFE0: 77 09 8B C8 8B C2 2B D2 F7 F3 91 F7 F3 8B DA 8B  // w.....+.........
    EFF0: D1 2B C9 C3 3B CA 72 1A 75 10 3B D8 77 0C 2B C3  // .+..;.r.u.;.w.+.
    F000: 8B D8 2B C9 2B D2 B8 01 00 C3 2B C9 2B DB 93 87  // ..+.+.....+.+...
    F010: CA C3 55 56 2B F6 8B EE 03 DB 13 C9 72 11 45 3B  // ..UV+.......r.E;
    F020: CA 72 F5 77 04 3B D8 76 EF F8 13 F6 4D 78 20 D1  // .r.w.;.v....Mx .
    F030: D9 D1 DB 2B C3 1B D1 F5 72 F0 03 F6 4D 78 0C D1  // ...+....r...Mx..
    F040: E9 D1 DB 03 C3 13 D1 73 F1 EB DF 03 C3 13 D1 8B  // .......s........
    F050: D8 8B CA 8B C6 33 D2 5E 5D C3 93 50 92 0B C0 74  // .....3.^]..P...t
    F060: 02 F7 E2 91 0B C0 74 04 F7 E3 03 C8 58 F7 E3 03  // ......t.....X...
    F070: D1 C3 52 66 50 B4 80 8A C7 66 C1 E0 10 8A E3 8A  // ..RfP....f......
    F080: C2 24 FC BA F8 0C 66 EF 66 58 5A C3 52 BA FC 0C  // .$....f.fXZ.R...
    F090: 66 ED 5A C3 52 BA FC 0C 66 EF 5A C3 E8 31 FF 9C  // f.Z.R...f.Z..1..
    F0A0: FA E8 CE FF E8 E5 FF 9D C3 E8 24 FF 9C FA E8 C1  // ..........$.....
    F0B0: FF E8 E0 FF 9D C3 52 66 53 66 50 E8 06 00 66 58  // ......RfSfP...fX
    F0C0: 66 5B 5A C3 66 C1 E3 10 66 C1 EB 0E E8 D7 FE E8  // f[Z.f...f.......
    F0D0: BF 01 C3 66 50 66 C1 E3 10 66 C1 EB 10 E8 8A FD  // ...fPf...f......
    F0E0: 66 03 D8 66 81 CB 00 00 00 80 66 58 C3 52 66 53  // f..f......fX.RfS
    F0F0: E8 04 00 66 5B 5A C3 66 50 E8 AA FE E8 D4 FF E8  // ...f[Z.fP.......
    F100: 8F 01 66 58 C3 52 51 66 53 66 50 8A CB 80 E3 FC  // ..fX.RQfSfP.....
    F110: 80 E1 03 C0 E1 03 E8 8D FE E8 B7 FF E8 59 01 66  // .............Y.f
    F120: D3 C8 58 50 66 D3 C0 E8 67 01 66 58 66 5B 59 5A  // ..XPf...g.fXf[YZ
    F130: C3 66 50 51 C0 E1 03 E8 53 00 66 D3 C8 8A C5 66  // .fPQ....S.f....f
    F140: D3 C0 E8 A8 FF 59 66 58 C3 66 50 51 C0 E1 03 E8  // .....YfX.fPQ....
    F150: 3B 00 66 D3 C8 59 8A E8 66 58 C3 E8 5F 00 C3 E8  // ;.f..Y..fX.._...
    F160: 44 FE 66 C1 E3 10 66 C1 EB 0E E8 0B 01 C3 E8 35  // D.f...f........5
    F170: FE 66 C1 E3 02 E8 00 01 C3 52 66 53 E8 04 00 66  // .f.......RfS...f
    F180: 5B 5A C3 E8 20 FE E8 4A FF E8 EC 00 C3 51 66 52  // [Z.. ..J.....QfR
    F190: 8A EB 8A CB 80 E1 03 C0 E1 03 80 E3 FC E8 D9 FF  // ................
    F1A0: 80 F9 00 74 14 66 8B D0 83 C3 04 E8 CB FF 83 EB  // ...t.f..........
    F1B0: 04 66 92 66 0F AD D0 8A DD 66 5A 59 C3 52 66 53  // .f.f.....fZY.RfS
    F1C0: E8 9C FF 66 5B 5A C3 52 66 53 E8 A1 FF 66 5B 5A  // ...f[Z.RfS...f[Z
    F1D0: C3 66 50 55 52 66 50 8B EC 8B 56 0C 89 56 08 E8  // .fPURfP...V..V..
    F1E0: C4 FD B2 00 66 ED 66 89 46 0A 66 58 5A 5D C3 66  // ....f.f.F.fXZ].f
    F1F0: 50 55 52 66 50 8B EC 8B 56 0C 89 56 08 E8 A6 FD  // PURfP...V..V....
    F200: 2E A1 FD 01 B2 18 EF B2 00 66 ED 66 89 46 0A 66  // .........f.f.F.f
    F210: 58 5A 5D C3 66 50 55 52 8B EC E8 89 FD B2 00 66  // XZ].fPUR.......f
    F220: 8B 46 0A 66 EF 8B 56 08 89 56 0C 66 8B 46 04 66  // .F.f..V..V.f.F.f
    F230: 89 46 08 5A 5D 66 58 66 58 C3 66 50 52 E8 66 FD  // .F.Z]fXfX.fPR.f.
    F240: B2 18 66 ED 2E A3 FD 01 5A 66 58 C3 66 52 66 53  // ..f.....ZfX.fRfS
    F250: E8 53 FD 66 81 CB 00 00 00 80 E8 1B 00 66 5B 66  // .S.f.........f[f
    F260: 5A C3 66 52 66 53 E8 3D FD 66 81 CB 00 00 00 80  // Z.fRfS.=.f......
    F270: E8 1E 00 66 5B 66 5A C3 66 81 FB FF 00 00 00 77  // ...f[fZ.f......w
    F280: 04 8A D3 EB 09 66 8B C3 B2 00 66 EF B2 04 66 ED  // .....f....f...f.
    F290: C3 66 81 FB FF 00 00 00 77 04 8A D3 EB 0A 66 93  // .f......w.....f.
    F2A0: B2 00 66 EF 66 93 B2 04 66 EF C3 C3 C3 55 8B EC  // ..f.f...f....U..
    F2B0: 53 51 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28 00 8D  // SQ..&.\.&.L..(..
    F2C0: 66 FC 59 5B 5D C3 53 51 8B F0 26 8B 5C 24 33 C9  // f.Y[].SQ..&.\$3.
    F2D0: E8 14 00 59 5B C3 55 8B EC 53 51 8B F0 26 8B 5C  // ...Y[.U..SQ..&.\
    F2E0: 08 26 8B 4C 0A EB D5 52 56 57 C8 06 00 00 8B F0  // .&.L...RVW......
    F2F0: 89 4E FE 8C D0 8E C0 26 8B 7C 26 8A 45 01 32 E4  // .N.....&.|&.E.2.
    F300: B9 20 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8  // . .+............
    F310: E2 FA 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1 D7 E2  // ...M.2..........
    F320: FA F7 D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C D0 8E  // .....&!D.&!|....
    F330: C0 26 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B C1 8B  // .&.|&.M.2.. .+..
    F340: C8 66 C7 46 FA FF FF FF FF E3 08 D1 6E FC D1 5E  // .f.F........n..^
    F350: FA E2 F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3 06 D1  // ....M.2....V....
    F360: EA D1 D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03 32 ED  // .....#F.#V..M.2.
    F370: E3 06 D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09 54 1E  // ........&.D.&.T.
    F380: C9 5F 5E 5A C3 55 8B EC 53 51 52 57 50 8B D8 26  // ._^Z.U..SQRWP..&
    F390: 8B 7F 26 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF  // ..&.E.2.. .+....
    F3A0: 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88 4E F6  // ...........M..N.
    F3B0: C6 46 F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7 E2  // .F.....N........
    F3C0: FA 26 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A E9 F1  // .&.G.&....f._Z..
    F3D0: FE 53 51 52 57 8B D8 8C D0 8E C0 26 8B 77 26 8A  // .SQRW......&.w&.
    F3E0: 4C 01 32 ED B8 20 00 2B C1 8B C8 BE FF FF 8B D6  // L.2.. .+........
    F3F0: E3 06 D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D 02 32  // ........&..&.M.2
    F400: ED 8B C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26  // ...............&
    F410: 21 47 1C 26 21 57 1E 5F E9 CC 05 53 56 8B D8 8C  // !G.&!W._...SV...
    F420: D2 8E C2 26 8B 77 26 80 3C 00 74 73 80 3C 01 75  // ...&.w&.<.ts.<.u
    F430: 58 8A 44 01 32 E4 26 83 7F 1E 00 75 4C 26 3B 47  // X.D.2.&....uL&;G
    F440: 1C 75 46 8A 04 6B F0 03 8A 84 58 A2 26 01 47 26  // .uF..k....X.&.G&
    F450: 8C D0 8E C0 26 8B 77 26 80 3C 09 74 17 8A 04 32  // ....&.w&.<.t...2
    F460: E4 6B F0 03 8B C3 FF 94 56 A2 26 8B 77 26 8A 04  // .k......V.&.w&..
    F470: 32 E4 EB D1 8B 44 01 26 29 47 26 26 FF 47 26 26  // 2....D.&)G&&.G&&
    F480: 8B 47 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A 04 32  // .G.&.w...&.w&..2
    F490: E4 6B F0 03 8A 84 58 A2 26 01 47 26 E9 80 FF 33  // .k....X.&.G&...3
    F4A0: C0 33 F6 8B D6 5E 5B C3 53 51 52 56 8B D8 8D 77  // .3...^[.SQRV...w
    F4B0: 35 26 8B 54 02 26 89 57 14 26 C7 47 16 00 00 8B  // 5&.T.&.W.&.G....
    F4C0: F0 26 8B 47 20 33 D2 26 01 47 14 26 11 54 16 8C  // .&.G 3.&.G.&.T..
    F4D0: D1 8E C1 26 F6 47 2F 06 0F 85 0A 05 26 80 7F 34  // ...&.G/.....&..4
    F4E0: 00 75 22 26 8B 77 16 26 0B 77 14 75 10 26 D1 67  // .u"&.w.&.w.u.&.g
    F4F0: 08 26 D1 57 0A 26 D1 67 08 26 D1 57 0A 8B C3 E8  // .&.W.&.g.&.W....
    F500: 79 11 E9 E1 04 26 8A 47 34 32 E4 05 80 00 99 26  // y....&.G42.....&
    F510: 89 47 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7 04 53  // .G.&.W.........S
    F520: 56 8B D8 8D 77 35 26 8A 44 02 32 E4 C1 E0 02 26  // V...w5&.D.2....&
    F530: 8B 37 26 8B 34 03 F0 26 8B 47 08 26 8B 5F 0A 26  // .7&.4..&.G.&._.&
    F540: 89 04 26 89 5C 02 5E 5B C3 53 52 56 8B D8 8C D0  // ..&.\.^[.SRV....
    F550: 8D 77 35 8E C0 26 8A 54 02 80 FA 40 73 21 26 8B  // .w5..&.T...@s!&.
    F560: 77 02 32 F6 C1 E2 02 26 8B 74 04 03 F2 26 8B 57  // w.2....&.t...&.W
    F570: 08 26 8B 47 0A 26 89 14 26 89 44 02 E9 7F 00 80  // .&.G.&..&.D.....
    F580: FA 41 75 12 26 8B 47 08 26 8B 57 0A 26 89 47 10  // .Au.&.G.&.W.&.G.
    F590: 26 89 57 12 EB 68 80 FA 40 75 12 26 8B 47 08 26  // &.W..h..@u.&.G.&
    F5A0: 8B 57 0A 26 89 47 0C 26 89 57 0E EB 51 80 FA 42  // .W.&.G.&.W..Q..B
    F5B0: 75 0A 26 8B 47 08 26 89 47 22 EB 42 80 FA 43 75  // u.&.G.&.G".B..Cu
    F5C0: 0A 26 8A 47 08 26 88 47 33 EB 33 80 FA 46 75 12  // .&.G.&.G3.3..Fu.
    F5D0: 26 8B 57 08 26 8B 47 0A 26 89 57 18 26 89 47 1A  // &.W.&.G.&.W.&.G.
    F5E0: EB 1C 80 FA 47 75 0A 26 8B 47 08 26 89 47 24 EB  // ....Gu.&.G.&.G$.
    F5F0: 0D 80 FA 48 75 08 26 8B 47 08 26 89 47 20 5E 5A  // ...Hu.&.G.&.G ^Z
    F600: 5B C3 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 26  // [.SV...w5&.D.2.&
    F610: 89 47 14 26 C7 47 16 00 00 5E 5B C3 53 56 8B D8  // .G.&.G...^[.SV..
    F620: 26 8B 77 02 26 8B 74 02 8A 04 32 E4 26 89 47 14  // &.w.&.t...2.&.G.
    F630: 26 C7 47 16 00 00 26 8B 5F 02 26 FF 47 02 5E 5B  // &.G...&._.&.G.^[
    F640: C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B 34 26  // .SV..&.w.&.t..4&
    F650: 89 77 14 26 C7 47 16 00 00 26 8B 5F 02 26 83 47  // .w.&.G...&._.&.G
    F660: 02 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74  // ..^[.SV..&.w.&.t
    F670: 02 8B 04 8B 74 02 26 89 47 14 26 89 77 16 26 8B  // ....t.&.G.&.w.&.
    F680: 5F 02 26 83 47 02 04 5E 5B C3 53 52 56 8B D8 E8  // _.&.G..^[.SRV...
    F690: 70 FF 8B F3 26 8B 47 18 26 8B 57 1A D1 EA D1 D8  // p...&.G.&.W.....
    F6A0: D1 EA D1 D8 26 01 47 14 26 11 54 16 8B C3 E8 2B  // ....&.G.&.T....+
    F6B0: 10 E9 4A FF 53 8B D8 26 8B 5F 02 26 FF 47 02 5B  // ..J.S..&._.&.G.[
    F6C0: C3 53 8B D8 26 8B 5F 02 26 83 47 02 02 5B C3 53  // .S..&._.&.G..[.S
    F6D0: 56 8B D8 E8 6B FF 8B F3 26 8B 57 20 33 C0 26 01  // V...k...&.W 3.&.
    F6E0: 57 14 26 11 44 16 8C D2 8E C2 26 8B 47 2E 32 C0  // W.&.D.....&.G.2.
    F6F0: 80 E4 06 3D 00 02 75 07 32 E4 33 D2 5E 5B C3 26  // ...=..u.2.3.^[.&
    F700: 8B 47 2E 32 C0 80 E4 06 3D 00 04 74 EB 26 80 7F  // .G.2....=..t.&..
    F710: 34 00 75 08 8B C3 E8 2F 0F 5E 5B C3 26 8A 47 34  // 4.u..../.^[.&.G4
    F720: 32 E4 26 89 47 1C 26 C7 47 1E 00 00 8B C3 E8 EA  // 2.&.G.&.G.......
    F730: FC 5E 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14 C1 E0  // .^[.S.....&.G...
    F740: 02 26 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B 57 02  // .&..&....&..&.W.
    F750: 5B C3 3C 49 31 49 47 49 96 49 4D 49 65 49 7F 49  // [.<I1IGI.IMIeI.I
    F760: 8A 49 90 49 53 51 56 8B D8 E8 B0 FE 8C D2 8E C2  // .I.ISQV.........
    F770: 26 83 7F 16 00 75 22 26 83 7F 14 40 73 1B 26 8B  // &....u"&...@s.&.
    F780: 77 02 26 8B 5F 14 C1 E3 02 26 8B 44 04 03 D8 26  // w.&._....&.D...&
    F790: 8B 07 26 8B 57 02 E9 7B 05 26 8B 77 14 26 8B 47  // ..&.W..{.&.w.&.G
    F7A0: 16 83 C6 C0 83 D0 FF 75 71 83 FE 08 77 6C 03 F6  // .......uq...wl..
    F7B0: 2E FF A4 CE 48 26 8B 47 10 26 8B 57 12 E9 54 05  // ....H&.G.&.W..T.
    F7C0: 26 8B 47 0C 26 8B 57 0E E9 49 05 26 8B 47 22 EB  // &.G.&.W..I.&.G".
    F7D0: 4B 26 8A 4F 33 32 ED BB 01 00 33 D2 E3 06 D1 E3  // K&.O32....3.....
    F7E0: D1 D2 E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32 ED B8  // .......+.&.O32..
    F7F0: 01 00 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2  // ..3.............
    F800: E9 11 05 26 8B 47 18 26 8B 57 1A E9 06 05 26 8B  // ...&.G.&.W....&.
    F810: 47 24 EB 08 26 8B 47 20 EB 02 33 C0 33 D2 E9 F3  // G$..&.G ..3.3...
    F820: 04 53 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18 26 8B  // .SV.......&.G.&.
    F830: 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11  // W.........&.G.&.
    F840: 54 16 8B C3 E8 16 0E 5E 5B C3 33 C0 33 D2 C3 53  // T......^[.3.3..S
    F850: 56 8B D8 E8 EB FD 26 8B 77 14 26 03 77 22 8B 04  // V.....&.w.&.w"..
    F860: 8B 54 02 5E 5B C3 53 8B D8 26 C6 47 2B 04 E8 AB  // .T.^[.S..&.G+...
    F870: FD 26 8B 47 14 26 8B 57 16 5B C3 53 8B D8 26 C6  // .&.G.&.W.[.S..&.
    F880: 47 2B 01 E8 BB FD EB E9 53 8B D8 26 C6 47 2B 00  // G+......S..&.G+.
    F890: E8 D2 FD EB DC 53 8B D8 83 C3 35 26 8A 5F 01 C0  // .....S....5&._..
    F8A0: EB 03 80 E3 07 32 FF 03 DB FF 97 E6 A1 5B C3 53  // .....2.......[.S
    F8B0: 52 56 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // RV..&.G,2.......
    F8C0: FF 94 02 A2 26 89 47 08 26 89 57 0A 26 8A 47 2D  // ....&.G.&.W.&.G-
    F8D0: 32 E4 8B F0 03 F0 8B C3 FF 94 1A A2 26 89 47 04  // 2...........&.G.
    F8E0: 26 89 57 06 E9 17 FD 53 51 56 8B D8 26 8A 4F 2B  // &.W....SQV..&.O+
    F8F0: 32 ED 8B F1 8A 8C 4A A2 E3 0A 26 D1 6F 06 26 D1  // 2.....J...&.o.&.
    F900: 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B  // _...&.O+2.......
    F910: 8C 2A A2 8B B4 2C A2 26 21 4F 04 26 21 77 06 26  // .*...,.&!O.&!w.&
    F920: 8A 4F 2A 32 ED 8B F1 8A 8C 52 A2 E3 0A 26 D1 67  // .O*2.....R...&.g
    F930: 04 26 D1 57 06 E2 F6 26 8B 4F 08 26 8B 77 0A 26  // .&.W...&.O.&.w.&
    F940: 89 4F 14 26 89 77 16 E9 CA 03 53 51 52 56 57 8B  // .O.&.w....SQRVW.
    F950: D8 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02  // .....&.G+2......
    F960: 26 8A 47 2A 8B F8 8A 8D 52 A2 32 ED 8B 84 2A A2  // &.G*....R.2...*.
    F970: 8B 94 2C A2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2  // ..,.............
    F980: 26 21 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0  // &!G.&!W.&.G*2...
    F990: 8A 8C 52 A2 32 ED E3 0A 26 D1 6F 0A 26 D1 5F 08  // ..R.2...&.o.&._.
    F9A0: E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 2A A2 8B  // ..&.G+.......*..
    F9B0: 94 2C A2 26 21 47 08 26 21 57 0A 26 8A 47 2A 32  // .,.&!G.&!W.&.G*2
    F9C0: E4 8B F0 8A 8C 52 A2 32 ED E3 0A 26 D1 67 08 26  // .....R.2...&.g.&
    F9D0: D1 57 0A E2 F6 26 8B 47 14 26 8B 57 16 26 09 47  // .W...&.G.&.W.&.G
    F9E0: 08 26 09 57 0A 5F 5E 5A 59 5B C3 53 51 56 8B D8  // .&.W._^ZY[.SQV..
    F9F0: 26 8A 4F 2B 32 ED 8B F1 8A 8C 4A A2 E3 0A 26 D1  // &.O+2.....J...&.
    FA00: 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1  // o.&._...&.O+2...
    FA10: C1 E6 02 8B 8C 2A A2 8B B4 2C A2 26 21 4F 04 26  // .....*...,.&!O.&
    FA20: 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 52 A2 E3  // !w.&.O*2.....R..
    FA30: 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B 32  // .&.o.&._...&.O+2
    FA40: ED 8B F1 C1 E6 02 8B 8C 2A A2 8B B4 2C A2 26 21  // ........*...,.&!
    FA50: 4F 08 26 21 77 0A E9 BB 02 51 52 57 8B D8 8C D0  // O.&!w....QRW....
    FA60: 8E C0 26 80 7F 2B 00 74 1A 26 8A 47 2C 32 E4 8B  // ..&..+.t.&.G,2..
    FA70: F0 03 F0 8B C3 FF 94 02 A2 26 89 47 08 26 89 57  // .........&.G.&.W
    FA80: 0A EB 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // ...&.G,2........
    FA90: 94 0E A2 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF  // ...&.G-2........
    FAA0: 94 1A A2 26 89 47 04 26 89 57 06 8C D2 8E C2 26  // ...&.G.&.W.....&
    FAB0: 80 7F 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0 C1 E6  // ..+.tJ&.G+2.....
    FAC0: 02 26 8A 47 2A 8B F8 8A 8D 52 A2 32 ED 8B 84 2A  // .&.G*....R.2...*
    FAD0: A2 8B 94 2C A2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7  // ...,............
    FAE0: D2 26 21 47 08 26 21 57 0A 8B C3 E8 F9 FD 26 8B  // .&!G.&!W......&.
    FAF0: 47 04 26 8B 57 06 26 09 47 08 26 09 57 0A EB 10  // G.&.W.&.G.&.W...
    FB00: 26 8B 57 04 26 8B 47 06 26 89 57 08 26 89 47 0A  // &.W.&.G.&.W.&.G.
    FB10: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 F6 A1  // &.G,2...........
    FB20: 5F 5A 59 C3 53 51 52 56 57 8B D8 26 8A 47 2A 32  // _ZY.SQRVW..&.G*2
    FB30: E4 8B F0 8A 8C 52 A2 32 ED E3 0A 26 D1 67 04 26  // .....R.2...&.g.&
    FB40: D1 57 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32 E4 8B  // .W.......&.G+2..
    FB50: F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 52 A2 32 ED  // ....&.G*....R.2.
    FB60: 8B 84 2A A2 8B 94 2C A2 E3 06 D1 E0 D1 D2 E2 FA  // ..*...,.........
    FB70: F7 D0 F7 D2 26 09 47 04 26 09 57 06 26 8B 47 04  // ....&.G.&.W.&.G.
    FB80: 26 8B 57 06 26 21 47 08 26 21 57 0A E9 56 FE 55  // &.W.&!G.&!W..V.U
    FB90: 8B EC 51 52 50 8B D8 26 8A 47 2C 32 E4 8B F0 03  // ..QRP..&.G,2....
    FBA0: F0 8B C3 FF 94 02 A2 26 89 47 08 26 89 57 0A 26  // .......&.G.&.W.&
    FBB0: 8A 47 2B 88 46 FA 8B C3 E8 DA FC 26 89 47 04 26  // .G+.F......&.G.&
    FBC0: 89 57 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B C3 FF  // .W.&.O-2........
    FBD0: 94 1A A2 26 89 47 14 26 89 57 16 8B C3 E8 44 FF  // ...&.G.&.W....D.
    FBE0: 8A 46 FA 32 E4 8B F0 8A 8C 4A A2 E3 0A 26 D1 6F  // .F.2.....J...&.o
    FBF0: 16 26 D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B F2 C1  // .&._...&.W+2....
    FC00: E6 02 8B 84 2A A2 8B 94 2C A2 26 21 47 14 26 21  // ....*...,.&!G.&!
    FC10: 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C 52 A2 32 ED  // W.&.G*2.....R.2.
    FC20: E3 0A 26 D1 67 14 26 D1 57 16 E2 F6 26 8B 47 14  // ..&.g.&.W...&.G.
    FC30: 26 8B 57 16 26 09 47 08 26 09 57 0A 26 8A 47 2C  // &.W.&.G.&.W.&.G,
    FC40: 32 E4 8B F0 03 F0 8B C3 FF 94 F6 A1 8D 66 FC 5A  // 2............f.Z
    FC50: 59 5D C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32 ED 8B  // Y].Q...V.&.O+2..
    FC60: F1 8A 8C 4A A2 E3 0A 26 D1 6F 06 26 D1 5F 04 E2  // ...J...&.o.&._..
    FC70: F6 8B C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1 03 F1  // ......&.O,2.....
    FC80: 8B C3 FF 94 F6 A1 59 C3 8B D8 E8 22 FC 8B C3 E8  // ......Y...."....
    FC90: 55 FC 26 8B 47 04 26 8B 77 06 26 09 47 08 26 09  // U.&.G.&.w.&.G.&.
    FCA0: 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // w.&.G,2.........
    FCB0: F6 A1 C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28 FC 26  // ...SV........(.&
    FCC0: 8B 47 04 26 8B 77 06 26 31 47 08 26 31 77 0A 26  // .G.&.w.&1G.&1w.&
    FCD0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 F6 A1 5E  // .G,2...........^
    FCE0: 5B C3 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB 26  // [.SQV..........&
    FCF0: 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 8B  // .O...&.g.&.W....
    FD00: C3 E8 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3  // ..F.&.O,2.......
    FD10: FF 94 F6 A1 5E 59 5B C3 53 51 56 8B D8 E8 8F FB  // ....^Y[.SQV.....
    FD20: 8B C3 E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F 0A 26  // .....&.O...&.o.&
    FD30: D1 5F 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B C3 E8  // ._.....R...r....
    FD40: A5 FB 8B F3 26 8B 47 04 26 8B 57 06 26 01 47 08  // ....&.G.&.W.&.G.
    FD50: 26 11 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32 E4 8B  // &.T......&.G,2..
    FD60: F0 03 F0 8B C3 FF 94 F6 A1 5A C3 52 8B D8 E8 3E  // .........Z.R...>
    FD70: FB 8B C3 E8 71 FB 8B F3 26 8B 47 04 26 8B 57 06  // ....q...&.G.&.W.
    FD80: 26 29 47 08 26 19 54 0A EB CA 51 52 8B F0 E8 1E  // &)G.&.T...QR....
    FD90: FB 8B C6 E8 55 FC 26 8B 44 08 26 8B 54 0A 26 8B  // ....U.&.D.&.T.&.
    FDA0: 5C 04 26 8B 4C 06 E8 B1 F2 26 89 44 0C 26 89 54  // \.&.L....&.D.&.T
    FDB0: 0E 5A 59 C3 52 8B D0 E8 F5 FA 8B C2 E8 2C FC 8B  // .ZY.R........,..
    FDC0: C2 E8 5C 08 5A C3 51 52 57 8B F0 E8 E1 FA 8B C6  // ..\.Z.QRW.......
    FDD0: E8 18 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26  // ...&.D.&.T.&.\.&
    FDE0: 8B 4C 06 E8 F0 F1 26 89 44 0C 26 89 54 0E 8C D7  // .L....&.D.&.T...
    FDF0: 8E C7 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B  // ..&.D.&.T.&.\.&.
    FE00: 4C 06 E8 D1 F1 26 89 5C 10 26 89 4C 12 E9 10 FD  // L....&.\.&.L....
    FE10: 52 8B D0 E8 99 FA 8B C2 E8 D0 FB 8B C2 E8 D3 07  // R...............
    FE20: 5A C3 51 52 8B D8 E8 86 FA 8B C3 E8 BD FB 8C D1  // Z.QR............
    FE30: 8E C1 26 8B 47 08 26 8B 57 0A 26 3B 57 06 75 0E  // ..&.G.&.W.&;W.u.
    FE40: 26 3B 47 04 75 08 26 C6 47 30 01 5A 59 C3 8B D0  // &;G.u.&.G0.ZY...
    FE50: 26 8B 47 0A 26 3B 47 06 72 08 75 0A 26 3B 57 04  // &.G.&;G.r.u.&;W.
    FE60: 73 04 33 C0 EB 03 B8 02 00 26 88 47 30 5A 59 C3  // s.3......&.G0ZY.
    FE70: 51 52 57 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // QRW..&.G,2......
    FE80: C3 FF 94 02 A2 26 89 47 08 26 89 57 0A 8C D0 8E  // .....&.G.&.W....
    FE90: C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D  // .&.G+2..........
    FEA0: 4A A2 32 ED 8B 84 2A A2 8B 94 2C A2 E3 06 D1 E0  // J.2...*...,.....
    FEB0: D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A  // ........&!G.&!W.
    FEC0: E9 4D FC 55 8B EC 51 52 57 83 EC 06 8B D8 26 8A  // .M.U..QRW.....&.
    FED0: 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D 4A A2 32  // G+2..........J.2
    FEE0: ED 8B 84 2A A2 89 46 F4 8B 84 2C A2 89 46 F6 E3  // ...*..F...,..F..
    FEF0: 08 D1 66 F4 D1 56 F6 E2 F8 8B 7E F4 8B 46 F6 89  // ..f..V....~..F..
    FF00: 46 F8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // F.&.G,2.........
    FF10: 02 A2 26 89 47 08 26 89 57 0A 8B C3 E8 47 F9 26  // ..&.G.&.W....G.&
    FF20: 89 47 04 26 89 57 06 8B C7 F7 D0 8B 56 F6 F7 D2  // .G.&.W......V...
    FF30: 26 23 47 08 26 23 57 0A 26 89 47 14 26 89 57 16  // &#G.&#W.&.G.&.W.
    FF40: 26 21 7F 08 8B 46 F6 26 21 47 0A 8C D1 8D 77 35  // &!...F.&!G....w5
    FF50: 8E C1 26 80 3C 19 73 12 26 8B 4F 04 E3 0A 26 D1  // ..&.<.s.&.O...&.
    FF60: 67 08 26 D1 57 0A E2 F6 EB 10 26 8B 4F 04 E3 0A  // g.&.W.....&.O...
    FF70: 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 21 7F 08 8B 46  // &.o.&._...&!...F
    FF80: F8 26 21 47 0A 26 8B 57 14 26 8B 47 16 26 09 57  // .&!G.&.W.&.G.&.W
    FF90: 08 26 09 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // .&.G.&.G,2......
    FFA0: C3 FF 94 F6 A1 8D 66 FA 5F E9 A3 FC 52 8B D8 E8  // ......f._...R...
    FFB0: FD F8 8B C3 E8 34 FA 26 8B 47 08 26 8B 57 0A 26  // .....4.&.G.&.W.&
    FFC0: 85 57 06 75 06 26 85 47 04 74 05 B8 03 00 EB 03  // .W.u.&.G.t......
    FFD0: B8 01 00 26 88 47 30 5A C3 53 51 52 56 8B D8 26  // ...&.G0Z.SQRV..&
    FFE0: 8A 4F 2D 32 ED 8B F1 03 F1 FF 94 1A A2 26 89 47  // .O-2.........&.G
    FFF0: 04 26 89 57 06 26 8A 47 2B 32 E4 8B F0 8A 8C 4A  // .&.W.&.G+2.....J
   10000: A2 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 47  // ...&.o.&._...&.G
   10010: 2B 8B F0 C1 E6 02 8B 84 2A A2 8B 94 2C A2 26 21  // +.......*...,.&!
   10020: 47 04 26 21 57 06 E9 BD F9 52 8B D8 E8 AA FF 26  // G.&!W....R.....&
   10030: 8B 47 04 26 8B 57 06 26 89 47 18 26 89 57 1A 5A  // .G.&.W.&.G.&.W.Z
   10040: C3 51 52 8B D8 E8 91 FF 8C D0 8E C0 26 8B 77 02  // .QR.........&.w.
   10050: 26 8B 74 02 81 3C 5A 5A 74 5B 26 8B 77 02 26 8B  // &.t..<ZZt[&.w.&.
   10060: 74 02 80 3C 63 75 E1 26 8B 77 02 26 FF 44 02 8B  // t..<cu.&.w.&.D..
   10070: C3 E8 21 F8 26 89 47 08 26 89 57 0A 8B C3 E8 FA  // ..!.&.G.&.W.....
   10080: F7 26 89 47 14 26 89 57 16 8C D1 8E C1 26 8B 57  // .&.G.&.W.....&.W
   10090: 04 26 8B 47 06 26 3B 47 0A 75 AD 26 3B 57 08 75  // .&.G.&;G.u.&;W.u
   100A0: A7 26 8B 77 02 26 8B 04 26 03 47 14 8B DE 26 89  // .&.w.&..&.G...&.
   100B0: 47 02 5A 59 C3 26 8B 5F 02 26 83 47 02 02 5A 59  // G.ZY.&._.&.G..ZY
   100C0: C3 52 57 8B D8 8C D0 8E C0 26 8B 77 02 26 8B 74  // .RW......&.w.&.t
   100D0: 02 8A 54 01 84 D2 75 08 26 C7 47 22 00 00 EB 2F  // ..T...u.&.G".../
   100E0: 80 FA FF 75 14 26 8B 77 02 26 8B 3F 26 8B 34 26  // ...u.&.w.&.?&.4&
   100F0: 2B 75 02 26 89 77 22 EB 16 26 8B 07 E8 E3 02 8B  // +u.&.w"..&......
   10100: F0 8A C2 32 E4 03 C0 03 F0 8B 04 26 89 47 22 26  // ...2.......&.G"&
   10110: 8B 5F 02 26 83 47 02 02 5F 5A C3 8B D8 26 80 67  // ._.&.G.._Z...&.g
   10120: 2F F9 26 8B 77 02 26 8B 74 02 8A 44 01 26 88 47  // /.&.w.&.t..D.&.G
   10130: 34 26 8B 5F 02 26 83 47 02 03 C3 8B D8 26 8B 77  // 4&._.&.G.....&.w
   10140: 02 26 8B 74 02 8B 74 01 26 89 77 20 EB E3 53 8B  // .&.t..t.&.w ..S.
   10150: D8 26 8A 47 2C 32 E4 24 03 26 80 67 2F F9 C1 E0  // .&.G,2.$.&.g/...
   10160: 09 26 09 47 2E E9 4F F5 8B D8 26 8B 77 02 26 8B  // .&.G..O...&.w.&.
   10170: 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00  // t..D.2.&.G.&.G..
   10180: 00 8B C3 E8 40 04 26 8B 5F 02 26 83 47 02 02 C3  // ....@.&._.&.G...
   10190: 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26  // ..&.w.&.t..D.2.&
   101A0: 89 47 04 26 C7 47 06 00 00 8B C3 E8 08 04 EB D6  // .G.&.G..........
   101B0: 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32  // SV..&.w.&.t..D.2
   101C0: E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 06 04  // .&.G.&.G........
   101D0: E9 86 F4 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A  // ...SV..&.w.&.t..
   101E0: 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3  // D.2.&.G.&.G.....
   101F0: E8 F0 03 E9 63 F4 53 56 8B D8 26 8B 77 02 8B DE  // ....c.SV..&.w...
   10200: 26 8B 5F 02 8B 5F 01 83 C3 03 26 01 5C 02 5E 5B  // &._.._....&.\.^[
   10210: C3 51 52 8B D8 26 8B 77 02 26 83 44 02 02 26 8B  // .QR..&.w.&.D..&.
   10220: 07 E8 A0 01 8B C8 26 8B 77 28 8A 44 01 32 E4 03  // ......&.w(.D.2..
   10230: C0 8B F1 03 F0 83 3C 00 74 4F 26 8B 77 28 8A 54  // ......<.tO&.w(.T
   10240: 01 32 F6 8B C3 E8 B0 01 26 88 47 31 26 8B 77 02  // .2......&.G1&.w.
   10250: 26 8B 34 8B 44 04 C1 E8 08 32 E4 24 7F C1 E8 02  // &.4.D....2.$....
   10260: 32 E4 24 1F 26 80 67 2F 07 C1 E0 0B 26 09 47 2E  // 2.$.&.g/....&.G.
   10270: 26 8B 37 26 8B 47 2E C1 E8 0B C1 E0 02 26 01 04  // &.7&.G.......&..
   10280: 26 C6 47 32 01 26 89 4F 28 5A 59 C3 53 8B D8 26  // &.G2.&.O(ZY.S..&
   10290: C6 47 32 82 5B C3 57 8B D8 8C D6 8E C6 26 80 7F  // .G2.[.W......&..
   102A0: 2C 05 74 0A 26 8A 47 2C 26 3A 47 30 75 1E 26 8B  // ,.t.&.G,&:G0u.&.
   102B0: 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01  // w.&.t.&...&.=.t.
   102C0: 03 F7 26 8B 5F 02 26 89 77 02 5F C3 26 8B 5F 02  // ..&._.&.w._.&._.
   102D0: 26 83 47 02 03 5F C3 53 56 57 8B D8 8C D6 8E C6  // &.G.._.SVW......
   102E0: 26 80 7F 30 01 74 0A 26 8A 47 30 26 3A 47 2C 75  // &..0.t.&.G0&:G,u
   102F0: 20 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D  //  &.w.&.t.&...&.=
   10300: 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F 5E 5B  // .t...&._.&.w._^[
   10310: C3 26 8B 5F 02 26 83 47 02 03 EB F1 53 56 57 8B  // .&._.&.G....SVW.
   10320: D8 8C D0 8E C0 26 80 7F 30 01 74 E5 EB C3 55 8B  // .....&..0.t...U.
   10330: EC 53 51 52 57 8B D8 26 8B 77 02 26 8B 74 02 8A  // .SQRW..&.w.&.t..
   10340: 04 26 C6 47 3D 00 8C D1 8E C1 26 80 7F 3D 08 73  // .&.G=.....&..=.s
   10350: 20 26 8B 77 02 26 8A 57 3D 32 F6 26 8B 7C 02 03  //  &.w.&.W=2.&.|..
   10360: FA 8B F3 03 F2 8A 15 26 88 54 35 26 FE 47 3D EB  // .......&.T5&.G=.
   10370: D5 26 8B 7F 02 8A D0 32 F6 8B F2 C1 E6 02 8A 94  // .&.....2........
   10380: 77 A2 26 01 55 02 26 8B 7F 28 8A 55 01 80 E2 07  // w.&.U.&..(.U....
   10390: 26 88 57 2D 26 8B 7F 28 8A 55 01 C0 EA 03 80 E2  // &.W-&..(.U......
   103A0: 07 26 88 57 2B 26 8B 7F 28 8A 55 01 C0 EA 06 26  // .&.W+&..(.U....&
   103B0: 88 57 2A 8A 94 76 A2 26 88 57 2C 8D 66 F8 5F 5A  // .W*..v.&.W,.f._Z
   103C0: 59 5B 5D C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74  // Y[].SV..&.w....t
   103D0: 48 03 F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0 04 5E  // H.....t........^
   103E0: 5B C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03  // [.SV..&.w....tH.
   103F0: F0 8B D8 8B 74 20 EB E0 8A C2 C3 16 07 55 8B EC  // ....t .......U..
   10400: 53 51 56 57 83 EC 40 8B F8 89 46 B8 E8 D3 FF 8B  // SQVW..@...F.....
   10410: D8 89 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89 5E DE  // ..F.&.E.._....^.
   10420: 83 46 DE 04 8B C7 E8 9B FF 89 46 E0 32 F6 8D 46  // .F........F.2..F
   10430: B8 E8 C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03 DA 83  // ......2....^....
   10440: 3F 00 0F 84 65 01 88 46 E9 80 66 E7 F9 C6 46 EC  // ?...e..F..f...F.
   10450: 00 C7 46 D8 00 00 66 C7 46 D0 00 00 00 00 C7 46  // ..F...f.F......F
   10460: F6 00 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C 00 8A  // ....F....<......
   10470: 56 E9 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83 3F 00  // V...2....^....?.
   10480: 74 75 26 8B 45 02 8B 1F 03 D8 8B 47 04 32 E4 8B  // tu&.E......G.2..
   10490: C8 83 C1 09 32 ED 80 E1 FE 83 F9 00 74 07 D1 E9  // ....2.......t...
   104A0: 33 C0 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0 74 41  // 3.P.......F...tA
   104B0: 83 C0 08 26 89 47 04 8A C2 32 E4 03 C0 8B 5E E0  // ...&.G...2....^.
   104C0: 03 D8 26 8B 45 02 03 07 8B 5E BA 26 89 07 8B 5E  // ..&.E....^.&...^
   104D0: BA 26 8B 07 83 C0 06 26 89 47 02 8B 5E BA 8B 76  // .&.....&.G..^..v
   104E0: F6 26 89 77 06 8B 5E BA 89 5E F6 C6 46 EA 00 EB  // .&.w..^..^..F...
   104F0: 0A C6 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA 32 E4  // ..F.....F...F.2.
   10500: 83 F8 10 0F 8F 99 00 88 66 EA 8A 46 EA 32 E4 85  // ........f..F.2..
   10510: C0 0F 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B 5F 02  // ........^...&._.
   10520: 89 5E E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75 4A C6  // .^..^.&._..?[uJ.
   10530: 46 EA 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B 5E BA  // F...^.&._..^..^.
   10540: 26 8B 1F 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80  // &...G.2......2..
   10550: E1 FE 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC 26 8B  // .....^..^...t.&.
   10560: 1F 8B 47 04 C1 E8 08 32 E4 24 7F C1 E8 02 C1 E0  // ..G....2.$......
   10570: 02 8B 5E B8 26 29 07 EB 91 8D 46 B8 E8 AF FD 8A  // ..^.&)....F.....
   10580: D0 8D 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02 8D 46  // ..F......2.....F
   10590: B8 FF 97 74 A2 E9 72 FF 83 7E F6 00 0F 85 C9 FE  // ...t..r..~......
   105A0: 80 7E EA 10 74 05 8A 46 EA EB 02 32 C0 8D 66 F8  // .~..t..F...2..f.
   105B0: 5F 5E E9 0B FE C3 53 51 8B D8 26 8A 4F 04 32 ED  // _^....SQ..&.O.2.
   105C0: E8 E5 E7 59 5B C3 53 51 8B D8 26 8A 4F 04 32 ED  // ...Y[.SQ..&.O.2.
   105D0: E8 E0 E7 59 5B C3 53 8B D8 26 8A 47 04 32 E4 E6  // ...Y[.S..&.G.2..
   105E0: 80 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 34 E1  // .[.SQ..&.O.2..4.
   105F0: 59 5B C3 53 8B D8 66 50 66 52 66 51 66 26 8B 47  // Y[.S..fPfRfQf&.G
   10600: 08 66 26 8B 57 10 66 26 8B 4F 04 66 F7 F1 66 26  // .f&.W.f&.O.f..f&
   10610: 89 47 0C 66 26 89 57 10 66 59 66 5A 66 58 5B C3  // .G.f&.W.fYfZfX[.
   10620: 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08 66 26  // S..fPfRfQf&.G.f&
   10630: 8B 4F 04 66 F7 E1 66 26 89 47 0C 66 26 89 57 10  // .O.f..f&.G.f&.W.
   10640: 66 59 66 5A 66 58 5B C3 53 57 8B D8 26 8B 5F 14  // fYfZfX[.SW..&._.
   10650: E8 0C EB 8B D0 66 C1 E8 10 92 5F 5B C3 53 57 8B  // .....f...._[.SW.
   10660: D8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3  // .&.G.&.W.....f..
   10670: 10 8B DA C1 E3 02 E8 0A EB EB D8 53 52 57 8B D8  // ...........SRW..
   10680: 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 26  // &.G.&.W..f.....&
   10690: 8B 5F 14 E8 2E EA 5F 5A 5B C3 53 52 8B D8 26 8B  // ._...._Z[.SR..&.
   106A0: 47 1C 26 8B 57 1E 92 66 C1 E0 10 8B C2 26 8B 5F  // G.&.W..f.....&._
   106B0: 26 8B 5F 01 E8 0D EA 5A 5B C3 53 52 56 8B F0 26  // &._....Z[.SRV..&
   106C0: 8B 5C 26 8B 5F 01 E8 96 EA 8B D0 66 C1 E8 10 92  // .\&._......f....
   106D0: 26 89 44 1C 26 89 54 1E 5E 5A 5B C3 53 51 52 57  // &.D.&.T.^Z[.SQRW
   106E0: 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B  // ..&.G.&.W..f....
   106F0: C2 8B C8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66  // ...&.G.&.W.....f
   10700: C1 E3 10 8B DA C1 E3 02 8B C1 E8 EA E9 5F 5A 59  // ............._ZY
   10710: 5B C3 8B D0 66 C1 E8 10 92 C3 1E 06 66 50 66 51  // [...f.......fPfQ
   10720: 66 52 66 53 66 55 66 56 66 57 0E 1F 0A C0 75 06  // fRfSfUfVfW....u.
   10730: E8 07 01 E9 A8 00 3C 01 75 06 E8 37 01 E9 9E 00  // ......<.u..7....
   10740: 3C 02 75 06 E8 5F 02 E9 94 00 3C 03 75 0B E8 91  // <.u.._....<.u...
   10750: 03 8B EC 89 5E 0C E9 85 00 3C 04 75 02 EB 7D 3C  // ....^....<.u..}<
   10760: 05 75 0A E8 0E 04 8B EC 89 56 10 EB 71 3C 06 75  // .u.......V..q<.u
   10770: 10 E8 8C 03 8B EC 89 5E 0C 89 4E 14 89 56 10 EB  // .......^..N..V..
   10780: 5D 3C 07 75 02 EB 55 3C 08 75 0A E8 D0 03 8B EC  // ]<.u..U<.u......
   10790: 88 7E 0D EB 49 3C 09 75 02 EB 41 3C 0A 75 10 E8  // .~..I<.u..A<.u..
   107A0: 65 04 8B EC 89 4E 14 89 7E 00 8C 46 1C EB 2F 3C  // e....N..~..F../<
   107B0: 0B 75 02 EB 27 3C 10 75 0A E8 5A 04 8B EC 89 5E  // .u..'<.u..Z....^
   107C0: 0C EB 1B 3C 11 75 02 EB 13 3C 15 75 0F E8 80 04  // ...<.u...<.u....
   107D0: 8B EC 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0 8B EC  // ...^....O...2...
   107E0: 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66  // .F.f_f^f]f[fZfYf
   107F0: 58 07 1F C3 50 1E 2E 8E 1E 66 24 8C D8 A3 40 69  // X...P....f$...@i
   10800: A3 50 69 A3 62 69 2E 8E 1E 5E 24 A3 AA 04 1F 58  // .Pi.bi...^$....X
   10810: CB 00 30 31 2E 30 30 00 56 45 53 41 00 03 D0 01  // ..01.00.VESA....
   10820: 00 00 01 00 00 00 00 00 00 00 00 03 13 20 ED 00  // ............. ..
   10830: 00 00 80 00 00 00 8E 59 00 00 B9 3F 00 8B DF 83  // .......Y...?....
   10840: C7 04 FC 66 33 C0 F3 66 AB 8B FB BE 94 59 B9 22  // ...f3..f.....Y."
   10850: 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18 8C 4F  // ......O..G..O..O
   10860: 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F E8 8F DD B0  // ..O ..".........
   10870: 4F 32 E4 C3 56 51 57 B9 10 00 66 33 C0 F3 66 AB  // O2..VQW...f3..f.
   10880: 5F 59 8C DB 06 1F C7 05 BB 00 C6 45 02 07 C7 45  // _Y.........E...E
   10890: 04 40 00 C7 45 06 40 00 C6 45 1B 06 C6 45 18 01  // .@..E.@..E...E..
   108A0: C6 45 1A 01 C6 45 1E 01 66 C7 45 3E 00 84 D7 17  // .E...E..f.E>....
   108B0: 8E DB E8 5D D6 66 0B C0 0F 84 E1 00 06 1F 66 89  // ...].f........f.
   108C0: 45 28 8C C8 66 C1 E0 10 B8 4D 5D 66 89 45 0C 81  // E(..f....M]f.E..
   108D0: F9 FF 81 0F 84 C2 00 80 E5 03 B2 01 53 8E DB BE  // ............S...
   108E0: 80 4C E8 3B DB 5B 06 1F 0F 84 B1 00 53 E8 B7 DD  // .L.;.[......S...
   108F0: 66 89 45 12 C7 45 16 08 10 8D 5C 0C E8 8E E8 66  // f.E..E....\....f
   10900: 89 45 1F 66 89 45 36 8D 5C 10 E8 80 E8 66 89 45  // .E.f.E6.\....f.E
   10910: 23 66 89 45 3A 8D 5C 08 E8 72 E8 0A C0 75 03 5B  // #f.E:.\..r...u.[
   10920: EB 7B E8 82 DD 66 C1 E8 10 3D 58 02 74 0D 3D 5E  // .{...f...=X.t.=^
   10930: 01 74 08 77 0A C6 45 17 08 EB 04 C6 45 17 0E 2E  // .t.w..E.....E...
   10940: A1 60 24 89 45 08 8D 5C 04 E8 41 E8 66 8B C8 66  // .`$.E..\..A.f..f
   10950: C1 E9 10 D3 E0 89 45 10 89 45 32 B0 08 D2 E0 88  // ......E..E2.....
   10960: 45 19 8D 5C 14 E8 25 E8 5B 3D 00 03 77 2F 53 8B  // E..\..%.[=..w/S.
   10970: D8 B8 00 03 33 D2 F7 F3 5B FE C8 88 45 1D 88 45  // ....3...[...E..E
   10980: 35 88 45 34 8E DB 57 53 BE 80 4C E8 ED D5 5B 5F  // 5.E4..WS..L...[_
   10990: 0B C9 75 05 06 1F 83 25 FE 32 E4 EB 02 B4 03 B0  // ..u....%.2......
   109A0: 4F 8E DB 5E C3 00 81 FB FF 81 74 68 0A FF 75 04  // O..^......th..u.
   109B0: 8B C3 EB 21 F6 C7 08 75 61 8B CB B2 01 BE 20 4C  // ...!...ua..... L
   109C0: E8 5D DA 74 55 E8 BE DC 0A C0 75 0E 66 C1 E8 10  // .].tU.....u.f...
   109D0: 80 E7 80 0A C7 E8 D5 02 EB 3A E8 12 D8 74 06 E8  // .........:...t..
   109E0: A1 D6 E8 8D D1 BE 20 4C E8 64 D5 74 2D E8 A5 00  // ...... L.d.t-...
   109F0: E8 2C 00 66 BB 20 4C 00 4C E8 81 DC BE 00 4C E8  // .,.f. L.L.....L.
   10A00: 84 DC 66 C1 E8 10 8B D8 32 C0 F6 C7 80 74 02 B0  // ..f.....2....t..
   10A10: 40 E8 94 D5 B0 4F 32 E4 EB 04 B0 4F B4 03 C3 56  // @....O2....O...V
   10A20: 06 33 C0 8E C0 BE 20 4C E8 7C DC 8B C8 66 C1 E8  // .3.... L.|...f..
   10A30: 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1 EA 04 FE CA  // ......&..J......
   10A40: 26 88 16 84 04 26 C6 06 51 04 00 26 C6 06 50 04  // &....&..Q..&..P.
   10A50: 00 26 C6 06 49 04 62 26 C7 06 4C 04 00 A0 26 C6  // .&..I.b&..L...&.
   10A60: 06 85 04 10 26 C7 06 0C 01 19 73 8C C8 26 A3 0E  // ....&.....s..&..
   10A70: 01 07 5E C3 01 0F 00 0A 00 00 00 00 00 40 05 0F  // ..^..........@..
   10A80: FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E  // ................
   10A90: 0F 01 00 0F 00 FC BA C4 03 B8 00 01 EF B9 04 00  // ................
   10AA0: B4 01 BE F0 5B AC 86 E0 EF 8A E0 FE C4 E2 F6 B8  // ....[...........
   10AB0: 00 03 EF B9 09 00 BA CE 03 32 E4 BE F4 5B 8A C4  // .........2...[..
   10AC0: EE AC 42 EE 4A FE C4 E2 F5 BA DA 03 EC B9 14 00  // ..B.J...........
   10AD0: BA C0 03 32 E4 BE FD 5B 8A C4 EE AC EE FE C4 E2  // ...2...[........
   10AE0: F7 C3 BE 00 4C E8 9E DB 66 C1 E8 10 8B D8 E8 6E  // ....L...f......n
   10AF0: DB 75 05 E8 5A DB 75 04 B8 4F 00 C3 B8 4F 03 C3  // .u..Z.u..O...O..
   10B00: E8 5C DB 74 53 BE 00 4C 80 FB 00 74 18 80 FB 01  // .\.tS..L...t....
   10B10: 75 05 E8 9A DB EB 1D 80 FB 02 75 10 8B C1 E8 4D  // u.........u....M
   10B20: DB D3 E8 8B C8 E8 27 D6 74 2E EB 08 80 FB 03 75  // ......'.t......u
   10B30: 24 E8 F1 DA E8 37 DB 8B D8 D3 E3 50 33 C0 BA 00  // $....7.....P3...
   10B40: 03 3B DA 77 05 BA FF FF EB 04 F7 F3 8B D0 58 8B  // .;.w..........X.
   10B50: C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00 0A DB  // ..O..2...O......
   10B60: 75 07 8A EF E8 F0 D6 EB 05 E8 D5 D6 8A F8 B0 4F  // u..............O
   10B70: 32 E4 C3 00 E8 E8 DA 74 2C BE 00 4C E8 07 DB 66  // 2......t,..L...f
   10B80: C1 E8 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E 00 EB  // .....@u...u.....
   10B90: 0F 80 FF 01 75 14 BB 13 00 E8 BF E5 D1 E8 8B D0  // ....u...........
   10BA0: B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52 53 66  // .O2...O...2..RSf
   10BB0: 50 81 E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10 8B C2  // P........@f.....
   10BC0: BB 13 00 E8 F0 E4 BB 12 00 E8 EA E4 66 58 5B 5A  // ............fX[Z
   10BD0: C3 9C 1E 06 66 50 66 51 66 52 66 53 66 55 66 56  // ....fPfQfRfSfUfV
   10BE0: 66 57 0E 1F E8 08 E6 E8 8A FF E8 27 E6 8B EC 89  // fW.........'....
   10BF0: 56 10 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66  // V..F.f_f^f]f[fZf
   10C00: 59 66 58 07 1F 9D CB 0E 07 BF 1C A1 2E 8B 0E 1A  // YfX.............
   10C10: A1 B8 4F 00 C3 00 0A DB 75 06 B7 04 B3 10 EB 26  // ..O.....u......&
   10C20: 80 FB 01 75 14 E8 C7 D5 75 21 53 B1 01 0A FF 74  // ...u....u!S....t
   10C30: 02 B1 00 E8 E1 D4 5B EB 0D 80 FB 02 75 0D E8 F4  // ......[.....u...
   10C40: D5 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03 C3 00  // .......O2...O...
   10C50: 80 E3 01 0A DB 75 05 BB 02 01 EB 0E E8 90 D5 75  // .....u.........u
   10C60: 0E 33 C0 53 E8 17 C9 5B 74 05 B0 4F 32 E4 C3 B0  // .3.S...[t..O2...
   10C70: 4F B4 03 C3 80 FC 1D 72 03 CD 42 C3 1E 06 66 50  // O......r..B...fP
   10C80: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F 50 0F  // fQfRfSfUfVfW..P.
   10C90: B6 C4 D1 E0 8B F0 58 2E FF 94 3A 5E 66 5F 66 5E  // ......X...:^f_f^
   10CA0: 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3 0E 1F 50  // f]f[fZfYfX.....P
   10CB0: 0F B6 C4 D1 E0 8B F0 58 2E FF 94 3A 5E C3 74 5E  // .......X...:^.t^
   10CC0: 84 97 9D 97 BA 97 67 5F BD 8E EF 8E 62 8F E5 8F  // ......g_....b...
   10CD0: 73 91 77 91 80 94 51 95 D4 95 3B 96 D6 97 38 98  // s.w...Q...;...8.
   10CE0: E1 9A 80 61 28 9F 28 5E 28 5E 28 5E 28 5E 28 5E  // ...a(.(^(^(^(^(^
   10CF0: 28 5E F8 9F FB 83 4F 85 2E 8E 1E 5E 24 80 26 87  // (^....O....^$.&.
   10D00: 04 F3 50 8A E0 80 E4 7F E8 C4 01 3B D3 75 02 58  // ..P........;.u.X
   10D10: C3 BA CC 03 EC B2 B4 B1 30 26 F6 47 09 01 74 0C  // ........0&.G..t.
   10D20: B2 D4 B1 20 A8 01 75 49 B5 09 EB 06 A8 01 74 41  // ... ..uI......tA
   10D30: B5 0B 53 E8 6A 41 0A FF 5B 75 0B 80 26 88 04 F0  // ..S.jA..[u..&...
   10D40: 08 2E 88 04 EB 2B 58 80 0E 87 04 08 80 26 10 04  // .....+X......&..
   10D50: CF 08 0E 10 04 89 16 63 04 C7 06 85 04 08 00 C6  // .......c........
   10D60: 06 84 04 18 C7 06 0C 01 06 6B 8C 0E 0E 01 CD 42  // .........k.....B
   10D70: C3 80 26 10 04 CF 08 0E 10 04 58 53 50 0E 1F 33  // ..&.......XSP..3
   10D80: C9 8A C8 E8 69 D4 74 06 E8 F8 D2 E8 E4 CD B2 08  // ....i.t.........
   10D90: BE 40 4C E8 8A D6 BE 40 4C E8 B3 D1 58 5B 0F 84  // .@L....@L...X[..
   10DA0: 6E FF 2E 8E 1E 5E 24 0E 07 E8 13 29 0E 1F 53 66  // n....^$....)..Sf
   10DB0: BB 40 4C 00 4C E8 C5 D8 BE 00 4C B0 20 E8 E8 D1  // .@L.L.....L. ...
   10DC0: 5B 2E 8E 1E 5E 24 0E 07 E8 1C 2E E8 24 00 E8 28  // [...^$......$..(
   10DD0: 3D E8 D1 01 E8 8E 01 E8 AE 3E 0E 1F BE 00 4C B0  // =........>....L.
   10DE0: 10 E8 C4 D1 E8 F7 2D E8 EF 2D C3 8B EC C6 46 1B  // ......-..-....F.
   10DF0: 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8 52 00 E8 5C  // .../........R..\
   10E00: 0A C3 53 83 C3 0A 8B 16 63 04 B9 19 00 B8 11 30  // ..S.....c......0
   10E10: EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7 5B 80 C2 06  // .2.&.'.C....[...
   10E20: 32 C0 EE C3 53 BA C4 03 83 C3 05 B9 04 00 B0 01  // 2...S...........
   10E30: 26 8A 27 3C 01 75 03 80 CC 20 EF 43 FE C0 E2 F0  // &.'<.u... .C....
   10E40: 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8 00 03 EF C3  // [&.G............
   10E50: 8B F3 83 C6 23 BA DA 03 26 F6 47 09 01 75 02 B2  // ....#...&.G..u..
   10E60: BA F6 06 89 04 08 74 1D 83 C6 10 EC B9 04 00 B4  // ......t.........
   10E70: 10 B2 C0 80 FC 11 74 07 8A C4 EE 26 8A 04 EE 46  // ......t....&...F
   10E80: FE C4 E2 EF C3 53 EC 8B DE B9 14 00 32 E4 B2 C0  // .....S......2...
   10E90: 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4 8A C4 EE 32  // .....&...C.....2
   10EA0: C0 EE 1E 06 E8 49 2D 0B ED 74 09 1F 1E B9 10 00  // .....I-..t......
   10EB0: F3 A4 46 A4 07 1F 5B C3 53 83 C3 37 B9 09 00 32  // ..F...[.S..7...2
   10EC0: C0 BA CE 03 26 8A 27 EF 43 FE C0 E2 F7 5B C3 BB  // ....&.'.C....[..
   10ED0: 3E 63 0E 07 8B D3 0A E4 7D 01 C3 E8 01 00 C3 33  // >c......}......3
   10EE0: F6 80 FC 03 7F 3C 4A F6 06 89 04 10 75 20 A0 88  // .....<J.....u ..
   10EF0: 04 24 0F 3C 02 7E 24 3C 08 74 20 3C 06 74 1C 3C  // .$.<.~$<.t <.t.<
   10F00: 07 74 18 B0 40 F6 E4 03 D8 81 C3 00 04 C3 B0 40  // .t..@..........@
   10F10: D0 EC F6 E4 03 D8 81 C3 80 04 C3 B0 40 F6 E4 03  // ............@...
   10F20: D8 C3 80 FC 07 75 11 F6 06 89 04 10 75 05 81 C3  // .....u......u...
   10F30: 00 01 C3 81 C3 00 05 C3 BF C0 60 BE E1 60 33 C9  // ..........`..`3.
   10F40: E8 4E 00 C3 04 80 00 05 80 00 06 C0 00 0D 80 02  // .N..............
   10F50: 0E C0 02 0F 80 03 10 C0 03 11 40 05 12 80 05 13  // ..........@.....
   10F60: C0 05 62 40 01 53 8A 1E 49 04 80 FB 07 7F 10 32  // ..b@.S..I......2
   10F70: FF D1 E3 2E 8B 87 FD 60 A2 65 04 88 26 66 04 5B  // .......`.e..&f.[
   10F80: C3 2C 30 28 30 2D 30 29 30 2A 30 2E 30 1E 3F 29  // .,0(0-0)0*0.0.?)
   10F90: 30 2E 38 25 75 07 2E 03 5D 01 33 F6 C3 83 C7 03  // 0.8%u...].3.....
   10FA0: 3B FE 75 ED C3 1E 06 2E 8E 1E 5E 24 F6 06 87 04  // ;.u.......^$....
   10FB0: 80 75 49 83 3E 4C 04 00 74 42 A0 49 04 B9 00 20  // .uI.>L..tB.I... 
   10FC0: 2E 8B 3E 64 24 26 F6 47 33 01 75 0E 26 F6 47 09  // ..>d$&.G3.u.&.G.
   10FD0: 01 75 1B 2E 8B 3E 62 24 EB 14 3C 06 7E 0B 2E 8B  // .u...>b$..<.~...
   10FE0: 3E 60 24 26 8A 67 37 B5 40 66 33 C0 EB 06 66 B8  // >`$&.g7.@f3...f.
   10FF0: 20 07 20 07 8E C7 66 33 FF F3 66 AB 80 26 87 04  //  . ...f3..f..&..
   11000: 7F 07 1F C3 2E 8E 1E 5E 24 80 FB 10 75 03 E9 7A  // .......^$...u..z
   11010: 01 80 FB 20 75 03 E9 9B 01 80 FB 32 75 1F BA CC  // ... u......2u...
   11020: 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9 F3 00 FE C8  // ...u............
   11030: 0F 85 F3 00 EC 24 FD B2 C2 EE E9 E4 00 80 FB 35  // .....$.........5
   11040: 75 28 3C 80 75 08 80 0E 89 04 40 E9 D3 00 F6 06  // u(<.u.....@.....
   11050: 89 04 40 0F 84 D0 00 0A C0 0F 84 CA 00 FE C8 75  // ..@............u
   11060: 06 E8 98 07 E9 BA 00 E9 BD 00 80 FB 30 74 03 E9  // ............0t..
   11070: 96 00 50 E8 2A 3E 8A EF BA CC 03 EC 8A C8 58 0A  // ..P.*>........X.
   11080: C0 75 30 B7 08 F6 C1 01 75 12 0A ED 75 0B A0 10  // .u0.....u...u...
   11090: 04 24 30 3C 30 75 10 B7 02 E9 8B 00 A0 10 04 24  // .$0<0u.........$
   110A0: 30 3C 30 75 02 B7 02 80 26 89 04 6F 80 0E 89 04  // 0<0u....&..o....
   110B0: 80 EB 36 3C 01 75 41 80 26 89 04 6F B7 09 F6 C1  // ..6<.uA.&..o....
   110C0: 01 75 15 B7 0B A0 10 04 24 30 3C 30 74 1B B7 09  // .u......$0<0t...
   110D0: 0A ED 74 15 B7 05 EB 11 A0 10 04 24 30 3C 30 75  // ..t........$0<0u
   110E0: 08 B7 0B 0A ED 74 02 B7 03 8A 1E 88 04 80 E3 F0  // .....t..........
   110F0: 0A DF 88 1E 88 04 EB 29 3C 02 75 2B 80 26 89 04  // .......)<.u+.&..
   11100: 6F 80 0E 89 04 10 EB B4 80 FB 31 75 1B 0A C0 74  // o.........1u...t
   11110: 0B 3C 01 75 0C 80 0E 89 04 08 EB 05 80 26 89 04  // .<.u.........&..
   11120: F7 8B EC C6 46 1A 12 C3 80 FB 33 75 16 3C 00 74  // ....F.....3u.<.t
   11130: 0B 3C 01 75 EC 80 26 89 04 FD EB E5 80 0E 89 04  // .<.u..&.........
   11140: 02 EB DE 80 FB 34 75 17 3C 00 75 07 80 26 87 04  // .....4u.<.u..&..
   11150: FE EB CE 3C 01 75 07 80 0E 87 04 01 EB C3 C3 80  // ...<.u..........
   11160: FB 36 75 26 BB 20 FF 3C 01 74 09 BB 00 DF 3C 00  // .6u&. .<.t....<.
   11170: 74 02 EB AD E8 02 00 EB A8 9C FA BA C4 03 B0 01  // t...............
   11180: EE 42 EC 22 C7 0A C3 EE 9D C3 C3 B3 03 B7 00 BA  // .B."............
   11190: CC 03 EC A8 01 75 02 B7 01 A0 88 04 8A E0 B1 04  // .....u..........
   111A0: D2 EC 25 0F 0F 8B C8 8B EC 89 5E 0E 89 4E 16 C6  // ..%.......^..N..
   111B0: 46 1A 12 C3 9C FA C7 06 14 00 E8 88 8C 0E 16 00  // F...............
   111C0: 9D C3 28 18 08 00 08 09 03 00 02 63 2D 27 28 90  // ..(........c-'(.
   111D0: 2B A0 BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 14  // +...............
   111E0: 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12  // ................
   111F0: 13 14 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E  // ................
   11200: 00 FF 50 18 08 00 10 01 03 00 02 63 5F 4F 50 82  // ..P........c_OP.
   11210: 55 81 BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 28  // U..............(
   11220: 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12  // ................
   11230: 13 14 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E  // ................
   11240: 00 FF 28 18 08 00 40 09 03 00 02 63 2D 27 28 90  // ..(...@....c-'(.
   11250: 2B 80 BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 14  // +...............
   11260: 00 96 B9 A2 FF 00 13 15 17 02 04 06 07 10 11 12  // ................
   11270: 13 14 15 16 17 01 00 03 00 00 00 00 00 00 30 0F  // ..............0.
   11280: 00 FF 50 18 08 00 40 01 01 00 06 63 5F 4F 50 82  // ..P...@....c_OP.
   11290: 54 80 BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 28  // T..............(
   112A0: 00 96 B9 C2 FF 00 17 17 17 17 17 17 17 17 17 17  // ................
   112B0: 17 17 17 17 17 01 00 01 00 00 00 00 00 00 00 0D  // ................
   112C0: 00 FF 50 18 0E 00 10 00 03 00 03 A6 5F 4F 50 82  // ..P........._OP.
   112D0: 55 81 BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28  // U....M........](
   112E0: 0D 63 BA A3 FF 00 08 08 08 08 08 08 08 10 18 18  // .c..............
   112F0: 18 18 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A  // ................
   11300: 00 FF 50 1D 10 00 A0 01 0F 00 0A E3 5F 4F 50 82  // ..P........._OP.
   11310: 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 50  // T..>.@.........P
   11320: 00 E7 04 E3 FF 00 01 02 03 04 05 06 07 08 09 0A  // ................
   11330: 0B 0C 0D 0E 0F 01 00 0F 00 10 00 00 00 00 40 05  // ..............@.
   11340: 0F FF 00 05 11 1C 08 0B 14 28 0E 18 2D 32 20 24  // .........(..-2 $
   11350: 38 3F 00 05 08 0B 0E 11 14 18 1C 20 24 28 2D 32  // 8?......... $(-2
   11360: 38 3F 07 0C 10 15 1A 18 16 15 13 1C 25 2F 38 33  // 8?..........%/83
   11370: 2E 2A 25 27 29 2A 2C 23 19 10 23 25 27 2A 2C 2B  // .*%')*,#..#%'*,+
   11380: 2A 29 29 2D 32 37 3B 39 37 34 32 33 34 35 35 31  // *))-27;974234551
   11390: 2C 27 2F 30 32 33 34 34 33 33 32 35 38 3A 3D 3C  // ,'/0234433258:=<
   113A0: 3A 39 38 38 39 39 3A 37 34 31 03 05 07 09 0B 0B  // :98899:741......
   113B0: 0A 09 08 0D 11 15 19 17 15 13 11 11 12 13 14 0F  // ................
   113C0: 0B 07 10 10 12 13 14 13 13 13 12 14 16 18 1A 19  // ................
   113D0: 18 17 16 17 17 17 18 15 14 11 15 15 16 17 17 17  // ................
   113E0: 17 17 16 18 19 1A 1B 1B 1A 19 19 19 19 19 1A 18  // ................
   113F0: 17 16 02 03 04 05 07 06 06 05 05 07 0A 0C 0E 0D  // ................
   11400: 0C 0B 09 0A 0A 0B 0B 09 06 04 09 09 0A 0B 0B 0B  // ................
   11410: 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D 0E 0C  // ................
   11420: 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F 0F 0F  // ................
   11430: 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C 00 00 00 00 00 00  // ................
   11440: 00 00 28 18 08 00 20 09 0F 00 06 63 2D 27 28 90  // ..(... ....c-'(.
   11450: 2B 80 BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 14  // +...............
   11460: 00 96 B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12  // ................
   11470: 13 14 15 16 17 01 00 0F 00 00 00 00 00 00 00 05  // ................
   11480: 0F FF 50 18 08 00 40 01 0F 00 06 63 5F 4F 50 82  // ..P...@....c_OP.
   11490: 54 80 BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 28  // T..............(
   114A0: 00 96 B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12  // ................
   114B0: 13 14 15 16 17 01 00 0F 00 00 00 00 00 00 00 05  // ................
   114C0: 0F FF 00 05 11 1C 08 0B 25 28 02 07 1B 20 0F 14  // ........%(... ..
   114D0: 28 2C 0C 11 25 2A 14 1E 32 36 0F 13 27 2C 1B 20  // (,..%*..26..',. 
   114E0: 34 39 06 0B 1F 24 13 18 2C 30 09 0D 21 26 15 1A  // 49...$..,0..!&..
   114F0: 2E 33 13 17 2B 30 1F 24 38 3D 0E 18 2D 32 20 24  // .3..+0.$8=..-2 $
   11500: 38 3F 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B  // 8?..............
   11510: 14 18 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24  // ....-2 $8?..-2 $
   11520: 38 3F 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B  // 8?..............
   11530: 14 18 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24  // ....-2 $8?..-2 $
   11540: 38 3F 50 18 0E 00 80 01 0F 00 06 A2 5F 4F 50 82  // 8?P........._OP.
   11550: 54 80 BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28  // T....@........](
   11560: 0F 63 BA E3 FF 00 08 00 00 18 18 00 00 00 08 00  // .c..............
   11570: 00 00 18 00 00 0B 00 05 00 00 00 00 00 00 00 05  // ................
   11580: 05 FF 50 18 0E 00 80 01 0F 00 06 A3 5F 4F 50 82  // ..P........._OP.
   11590: 54 80 BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28  // T....@........](
   115A0: 0F 63 BA E3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .c...........89:
   115B0: 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05  // ;<=>?...........
   115C0: 0F FF 28 18 0E 00 08 09 03 00 02 A3 2D 27 28 90  // ..(.........-'(.
   115D0: 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 14  // +....M........].
   115E0: 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .c...........89:
   115F0: 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E  // ;<=>?...........
   11600: 00 FF 50 18 0E 00 10 01 03 00 02 A3 5F 4F 50 82  // ..P........._OP.
   11610: 55 81 BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28  // U....M........](
   11620: 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .c...........89:
   11630: 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E  // ;<=>?...........
   11640: 00 FF 28 18 10 00 08 08 03 00 02 67 2D 27 28 90  // ..(........g-'(.
   11650: 2B A0 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 14  // +....O..........
   11660: 1F 96 B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .............89:
   11670: 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E  // ;<=>?...........
   11680: 00 FF 50 18 10 00 10 00 03 00 02 67 5F 4F 50 82  // ..P........g_OP.
   11690: 55 81 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28  // U....O.........(
   116A0: 1F 96 B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .............89:
   116B0: 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E  // ;<=>?...........
   116C0: 00 FF 50 18 10 00 10 00 03 00 02 66 5F 4F 50 82  // ..P........f_OP.
   116D0: 55 81 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28  // U....O.........(
   116E0: 0F 96 B9 A3 FF 00 08 08 08 08 08 08 08 10 18 18  // ................
   116F0: 18 18 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A  // ................
   11700: 00 FF 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82  // ..P........._OP.
   11710: 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28  // T..>.@.........(
   11720: 00 E7 04 C3 FF 00 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F  // ......??????????
   11730: 3F 3F 3F 3F 3F 01 00 0F 00 00 00 00 00 00 00 05  // ?????...........
   11740: 01 FF 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82  // ..P........._OP.
   11750: 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28  // T..>.@.........(
   11760: 00 E7 04 E3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .............89:
   11770: 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05  // ;<=>?...........
   11780: 0F FF 28 18 08 00 20 01 0F 00 0E 63 5F 4F 50 82  // ..(... ....c_OP.
   11790: 54 80 BF 1F 00 41 00 00 00 00 00 00 9C 8E 8F 28  // T....A.........(
   117A0: 40 96 B9 A3 FF 00 01 02 03 04 05 06 07 08 09 0A  // @...............
   117B0: 0B 0C 0D 0E 0F 41 00 0F 00 00 00 00 00 00 40 05  // .....A........@.
   117C0: 0F FF 3E 63 00 C0 00 00 00 00 00 00 00 00 00 00  // ..>c............
   117D0: 00 00 5E 69 00 C0 00 00 00 00 00 00 00 00 00 00  // ..^i............
   117E0: 00 00 1A 00 F6 A0 00 C0 00 00 00 00 00 00 00 00  // ................
   117F0: 00 00 00 00 00 00 00 00 00 00 00 00 1E E8 10 00  // ................
   11800: 2E 8E 1E 5E 24 E8 F8 36 E8 CF 36 E8 70 1A 1F C3  // ...^$..6..6.p...
   11810: 2E 8E 1E 5E 24 C7 06 87 04 60 F9 C6 06 8A 04 0B  // ...^$....`......
   11820: A0 89 04 0C 11 24 17 A2 89 04 B4 01 E8 6D 1E A0  // .....$.......m..
   11830: 89 04 80 26 10 04 CF 80 0E 10 04 20 C7 06 63 04  // ...&....... ..c.
   11840: D4 03 0E 1F E8 89 C3 F7 C1 02 00 75 03 E8 22 C3  // ...........u..".
   11850: C3 1E 2E 8E 1E 5E 24 0E 07 EB 00 1F C3 F6 06 89  // .....^$.........
   11860: 04 08 74 01 C3 53 BA C8 03 EC B0 FF B2 C6 EE B2  // ..t..S..........
   11870: C8 80 3E 63 04 B4 75 2F BE BA 6A B9 40 00 33 DB  // ..>c..u/..j.@.3.
   11880: 9C FA 8A C3 EE 8B FB C1 EF 03 83 E7 03 03 FE 2E  // ................
   11890: 8A 05 42 EE 2E 8A 45 04 EE 2E 8A 45 08 EE FE C3  // ..B...E....E....
   118A0: 4A E2 DF 9D E9 85 00 26 8A 47 2B F6 06 89 04 06  // J......&.G+.....
   118B0: 74 31 B9 F8 00 BF BE 64 3C 08 74 11 B9 40 00 BF  // t1.....d<.t..@..
   118C0: 3E 66 3C 38 74 07 3C 3F 74 03 BF 7E 66 33 DB 9C  // >f<8t.<?t..~f3..
   118D0: FA 8A C3 EE 2E 8A 01 42 EE EE EE FE C3 4A E2 F1  // .......B.....J..
   118E0: 9D EB 49 3C 08 74 25 3C 38 74 2E 3C 3F 74 2A B9  // ..I<.t%<8t.<?t*.
   118F0: 08 00 33 DB 51 E8 46 D3 B9 08 00 F7 C3 10 00 74  // ..3.Q.F........t
   11900: 03 83 C7 18 E8 67 00 59 E2 EA EB 20 E8 2F D3 B9  // .....g.Y... ./..
   11910: 10 00 33 DB E8 57 00 EB 13 B9 40 00 33 DB 51 E8  // ..3..W....@.3.Q.
   11920: 28 00 8A C3 E8 B7 2F FE C3 59 E2 F2 5B C3 00 2A  // (...../..Y..[..*
   11930: 00 2A 00 2A 00 2A 15 3F 15 3F 15 3F 15 3F 00 2A  // .*.*.*.?.?.?.?.*
   11940: 00 3F 00 2A 00 3F 00 2A 00 3F 8B FB C1 EF 02 83  // .?.*.?.*.?......
   11950: E7 0F 2E 8A B5 AA 6A 8B FB D1 EF 83 E7 0F 2E 8A  // ......j.........
   11960: AD AA 6A 8B FB 83 E7 0F 2E 8A 8D AA 6A C3 9C 8A  // ..j.........j...
   11970: C3 FA EE 2E 8A 05 42 EE 47 2E 8A 05 EE 47 2E 8A  // ......B.G....G..
   11980: 05 EE 47 FE C3 4A E2 E7 9D C3 00 00 00 00 00 00  // ..G..J..........
   11990: 00 00 7E 81 A5 81 BD 99 81 7E 7C FE D6 BA C6 FE  // ..~......~|.....
   119A0: 7C 00 C6 EE FE FE 7C 38 10 00 10 38 7C FE 7C 38  // |.....|8...8|.|8
   119B0: 10 00 10 38 10 EE EE 10 38 00 38 7C FE FE 6C 10  // ...8....8.8|..l.
   119C0: 38 00 00 18 3C 7E 3C 18 00 00 FF E7 C3 81 C3 E7  // 8...<~<.........
   119D0: FF FF 00 18 3C 66 66 3C 18 00 FF E7 C3 99 99 C3  // ....<ff<........
   119E0: E7 FF 1E 0E 1E 36 78 CC CC 78 7E C3 C3 7E 18 7E  // .....6x..x~..~.~
   119F0: 18 18 1E 1A 1E 18 18 70 F0 60 3E 3E 36 36 F6 66  // .......p.`>>66.f
   11A00: 1E 0C DB 3C 66 E7 66 3C DB 00 80 C0 F0 F8 F0 C0  // ...<f.f<........
   11A10: 80 00 02 06 1E 3E 1E 06 02 00 18 3C 7E 18 7E 3C  // .....>.....<~.~<
   11A20: 18 00 66 66 66 66 66 00 66 00 7F DB 7B 3B 1B 1B  // ..fffff.f...{;..
   11A30: 1B 00 3C 66 38 6C 6C 38 CC 78 00 00 00 00 FE FE  // ..<f8ll8.x......
   11A40: FE 00 18 3C 7E 18 7E 3C 18 7E 18 3C 7E 18 18 18  // ...<~.~<.~.<~...
   11A50: 18 00 18 18 18 18 7E 3C 18 00 00 18 1C FE 1C 18  // ......~<........
   11A60: 00 00 00 30 70 FE 70 30 00 00 00 00 C0 C0 C0 FE  // ...0p.p0........
   11A70: 00 00 00 24 66 FF 66 24 00 00 00 10 38 7C 7C FE  // ...$f.f$....8||.
   11A80: 00 00 00 FE 7C 7C 38 10 00 00 00 00 00 00 00 00  // ....||8.........
   11A90: 00 00 18 3C 3C 18 18 00 18 00 6C 6C 6C 00 00 00  // ...<<.....lll...
   11AA0: 00 00 6C 6C FE 6C FE 6C 6C 00 18 7E C0 7C 06 FC  // ..ll.l.ll..~.|..
   11AB0: 18 00 00 C6 0C 18 30 60 C6 00 38 6C 38 76 CC CC  // ......0`..8l8v..
   11AC0: 76 00 18 18 30 00 00 00 00 00 18 30 60 60 60 30  // v...0......0```0
   11AD0: 18 00 60 30 18 18 18 30 60 00 00 EE 7C FE 7C EE  // ..`0...0`...|.|.
   11AE0: 00 00 00 18 18 7E 18 18 00 00 00 00 00 00 18 18  // .....~..........
   11AF0: 30 00 00 00 00 FE 00 00 00 00 00 00 00 00 00 38  // 0..............8
   11B00: 38 00 06 0C 18 30 60 C0 80 00 7C C6 CE DE F6 E6  // 8....0`...|.....
   11B10: 7C 00 18 78 18 18 18 18 7E 00 7C C6 0C 18 30 66  // |..x....~.|...0f
   11B20: FE 00 7C C6 06 3C 06 C6 7C 00 0C 1C 3C 6C FE 0C  // ..|..<..|...<l..
   11B30: 0C 00 FE C0 FC 06 06 C6 7C 00 7C C6 C0 FC C6 C6  // ........|.|.....
   11B40: 7C 00 FE C6 06 0C 18 18 18 00 7C C6 C6 7C C6 C6  // |.........|..|..
   11B50: 7C 00 7C C6 C6 7E 06 C6 7C 00 00 1C 1C 00 00 1C  // |.|..~..|.......
   11B60: 1C 00 00 18 18 00 00 18 18 30 0C 18 30 60 30 18  // .........0..0`0.
   11B70: 0C 00 00 00 FE 00 00 FE 00 00 60 30 18 0C 18 30  // ..........`0...0
   11B80: 60 00 7C C6 06 0C 18 00 18 00 7C C6 C6 DE DC C0  // `.|.......|.....
   11B90: 7E 00 38 6C C6 C6 FE C6 C6 00 FC 66 66 7C 66 66  // ~.8l.......ff|ff
   11BA0: FC 00 3C 66 C0 C0 C0 66 3C 00 F8 6C 66 66 66 6C  // ..<f...f<..lfffl
   11BB0: F8 00 FE C2 C0 F8 C0 C2 FE 00 FE 62 60 7C 60 60  // ...........b`|``
   11BC0: F0 00 7C C6 C0 C0 DE C6 7C 00 C6 C6 C6 FE C6 C6  // ..|.....|.......
   11BD0: C6 00 3C 18 18 18 18 18 3C 00 3C 18 18 18 D8 D8  // ..<.....<.<.....
   11BE0: 70 00 C6 CC D8 F0 D8 CC C6 00 F0 60 60 60 60 62  // p..........````b
   11BF0: FE 00 C6 EE FE D6 D6 C6 C6 00 C6 E6 E6 F6 DE CE  // ................
   11C00: C6 00 7C C6 C6 C6 C6 C6 7C 00 FC 66 66 7C 60 60  // ..|.....|..ff|``
   11C10: F0 00 7C C6 C6 C6 C6 D6 7C 06 FC C6 C6 FC D8 CC  // ..|.....|.......
   11C20: C6 00 7C C6 C0 7C 06 C6 7C 00 7E 5A 18 18 18 18  // ..|..|..|.~Z....
   11C30: 3C 00 C6 C6 C6 C6 C6 C6 7C 00 C6 C6 C6 C6 6C 38  // <.......|.....l8
   11C40: 10 00 C6 C6 D6 D6 FE EE C6 00 C6 6C 38 38 38 6C  // ...........l888l
   11C50: C6 00 66 66 66 3C 18 18 3C 00 FE 86 0C 18 30 62  // ..fff<..<.....0b
   11C60: FE 00 7C 60 60 60 60 60 7C 00 C0 60 30 18 0C 06  // ..|`````|..`0...
   11C70: 02 00 7C 0C 0C 0C 0C 0C 7C 00 10 38 6C C6 00 00  // ..|.....|..8l...
   11C80: 00 00 00 00 00 00 00 00 00 FF 30 30 18 00 00 00  // ..........00....
   11C90: 00 00 00 00 78 0C 7C CC 7E 00 E0 60 7C 66 66 66  // ....x.|.~..`|fff
   11CA0: FC 00 00 00 7C C6 C0 C6 7C 00 1C 0C 7C CC CC CC  // ....|...|...|...
   11CB0: 7E 00 00 00 7C C6 FE C0 7C 00 1C 36 30 FC 30 30  // ~...|...|..60.00
   11CC0: 78 00 00 00 76 CE C6 7E 06 7C E0 60 7C 66 66 66  // x...v..~.|.`|fff
   11CD0: E6 00 18 00 38 18 18 18 3C 00 0C 00 1C 0C 0C 0C  // ....8...<.......
   11CE0: CC 78 E0 60 66 6C 78 6C E6 00 18 18 18 18 18 18  // .x.`flxl........
   11CF0: 1C 00 00 00 6C FE D6 D6 C6 00 00 00 DC 66 66 66  // ....l........fff
   11D00: 66 00 00 00 7C C6 C6 C6 7C 00 00 00 DC 66 66 7C  // f...|...|....ff|
   11D10: 60 F0 00 00 76 CC CC 7C 0C 1E 00 00 DC 66 60 60  // `...v..|.....f``
   11D20: F0 00 00 00 7C C0 7C 06 7C 00 30 30 FC 30 30 36  // ....|.|.|.00.006
   11D30: 1C 00 00 00 CC CC CC CC 76 00 00 00 C6 C6 6C 38  // ........v.....l8
   11D40: 10 00 00 00 C6 C6 D6 FE 6C 00 00 00 C6 6C 38 6C  // ........l....l8l
   11D50: C6 00 00 00 C6 C6 CE 76 06 7C 00 00 FC 98 30 64  // .......v.|....0d
   11D60: FC 00 0E 18 18 70 18 18 0E 00 18 18 18 00 18 18  // .....p..........
   11D70: 18 00 70 18 18 0E 18 18 70 00 76 DC 00 00 00 00  // ..p.....p.v.....
   11D80: 00 00 00 10 38 38 6C 6C FE 00 3C 66 C0 66 3C 18  // ....88ll..<f.f<.
   11D90: CC 78 00 C6 00 C6 C6 CE 76 00 0E 00 7C C6 FE C0  // .x......v...|...
   11DA0: 7C 00 7C C6 78 0C 7C CC 7E 00 C6 00 78 0C 7C CC  // |.|.x.|.~...x.|.
   11DB0: 7E 00 E0 00 78 0C 7C CC 7E 00 38 38 78 0C 7C CC  // ~...x.|.~.88x.|.
   11DC0: 7E 00 00 00 7C C0 7C 18 6C 38 7C C6 7C C6 FE C0  // ~...|.|.l8|.|...
   11DD0: 7C 00 C6 00 7C C6 FE C0 7C 00 E0 00 7C C6 FE C0  // |...|...|...|...
   11DE0: 7C 00 66 00 38 18 18 18 3C 00 7C C6 38 18 18 18  // |.f.8...<.|.8...
   11DF0: 3C 00 00 00 38 18 18 18 3C 00 C6 38 6C C6 FE C6  // <...8...<..8l...
   11E00: C6 00 38 38 00 7C C6 FE C6 00 0E 00 FE C0 F8 C0  // ..88.|..........
   11E10: FE 00 00 00 6C 9A 7E D8 6E 00 7E D8 D8 FE D8 D8  // ....l.~.n.~.....
   11E20: DE 00 7C C6 00 7C C6 C6 7C 00 00 C6 00 7C C6 C6  // ..|..|..|....|..
   11E30: 7C 00 00 E0 00 7C C6 C6 7C 00 7C C6 00 C6 C6 CE  // |....|..|.|.....
   11E40: 76 00 00 E0 00 C6 C6 CE 76 00 18 00 3C 18 18 18  // v.......v...<...
   11E50: 3C 00 C6 38 6C C6 C6 6C 38 00 C6 00 C6 C6 C6 C6  // <..8l..l8.......
   11E60: 7C 00 00 18 7E D8 D8 7E 18 00 38 6C 60 F0 66 F6  // |...~..~..8l`.f.
   11E70: 6C 00 C3 66 3C 7E 18 3C 18 00 3E 63 38 0E 63 3E  // l..f<~.<..>c8.c>
   11E80: 00 1C 00 3E 61 3C 86 7C 00 1C 0E 00 78 0C 7C CC  // ...>a<.|....x.|.
   11E90: 7E 00 1C 00 38 18 18 18 3C 00 00 0E 00 7C C6 C6  // ~...8...<....|..
   11EA0: 7C 00 00 0E 00 CC CC DC 76 00 00 FC 00 BC 66 66  // |.......v.....ff
   11EB0: E6 00 FE 00 C6 E6 F6 CE C6 00 3E 00 3E 60 67 63  // ..........>.>`gc
   11EC0: 3D 00 3E 00 76 CE C6 7E 06 7C 18 00 18 30 60 66  // =.>.v..~.|...0`f
   11ED0: 3C 00 00 00 00 7C 60 60 00 00 00 00 00 7C 0C 0C  // <....|``.....|..
   11EE0: 00 00 C0 CC D8 30 7C 36 0C 3E C0 CC D8 30 6C 3C  // .....0|6.>...0l<
   11EF0: 7E 0C 18 00 18 18 3C 3C 18 00 00 36 6C D8 6C 36  // ~.....<<...6l.l6
   11F00: 00 00 00 D8 6C 36 6C D8 00 00 22 88 22 88 22 88  // ....l6l...".".".
   11F10: 22 88 55 AA 55 AA 55 AA 55 AA DD 77 DD 77 DD 77  // ".U.U.U.U..w.w.w
   11F20: DD 77 18 18 18 18 18 18 18 18 18 18 18 18 F8 18  // .w..............
   11F30: 18 18 18 18 F8 18 F8 18 18 18 36 36 36 36 F6 36  // ..........6666.6
   11F40: 36 36 00 00 00 00 FE 36 36 36 00 00 F8 18 F8 18  // 66.....666......
   11F50: 18 18 36 36 F6 06 F6 36 36 36 36 36 36 36 36 36  // ..66...666666666
   11F60: 36 36 00 00 FE 06 F6 36 36 36 36 36 F6 06 FE 00  // 66.....66666....
   11F70: 00 00 36 36 36 36 FE 00 00 00 18 18 F8 18 F8 00  // ..6666..........
   11F80: 00 00 00 00 00 00 F8 18 18 18 18 18 18 18 1F 00  // ................
   11F90: 00 00 18 18 18 18 FF 00 00 00 00 00 00 00 FF 18  // ................
   11FA0: 18 18 18 18 18 18 1F 18 18 18 00 00 00 00 FF 00  // ................
   11FB0: 00 00 18 18 18 18 FF 18 18 18 18 18 1F 18 1F 18  // ................
   11FC0: 18 18 36 36 36 36 37 36 36 36 36 36 37 30 3F 00  // ..666676666670?.
   11FD0: 00 00 00 00 3F 30 37 36 36 36 36 36 F7 00 FF 00  // ....?0766666....
   11FE0: 00 00 00 00 FF 00 F7 36 36 36 36 36 37 30 37 36  // .......666667076
   11FF0: 36 36 00 00 FF 00 FF 00 00 00 36 36 F7 00 F7 36  // 66........66...6
   12000: 36 36 18 18 FF 00 FF 00 00 00 36 36 36 36 FF 00  // 66........6666..
   12010: 00 00 00 00 FF 00 FF 18 18 18 00 00 00 00 FF 36  // ...............6
   12020: 36 36 36 36 36 36 3F 00 00 00 18 18 1F 18 1F 00  // 666666?.........
   12030: 00 00 00 00 1F 18 1F 18 18 18 00 00 00 00 3F 36  // ..............?6
   12040: 36 36 36 36 36 36 FF 36 36 36 18 18 FF 18 FF 18  // 666666.666......
   12050: 18 18 18 18 18 18 F8 00 00 00 00 00 00 00 1F 18  // ................
   12060: 18 18 FF FF FF FF FF FF FF FF 00 00 00 00 FF FF  // ................
   12070: FF FF F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F  // ................
   12080: 0F 0F FF FF FF FF 00 00 00 00 00 00 66 DC D8 DC  // ............f...
   12090: 66 00 00 78 CC F8 CC C6 CC 00 00 FE 62 60 60 60  // f..x........b```
   120A0: E0 00 00 FE 6C 6C 6C 6C 6C 00 FE C6 60 30 60 C6  // ....lllll...`0`.
   120B0: FE 00 00 7E D8 CC CC D8 70 00 00 66 66 66 66 7C  // ...~....p..ffff|
   120C0: C0 00 00 76 DC 18 18 18 38 00 FE 38 6C C6 6C 38  // ...v....8..8l.l8
   120D0: FE 00 38 6C C6 FE C6 6C 38 00 38 6C C6 C6 6C 6C  // ..8l...l8.8l..ll
   120E0: EE 00 3E 60 38 66 C6 CC 78 00 00 00 7E DB DB 7E  // ..>`8f..x...~..~
   120F0: 00 00 06 7C DE F6 E6 7C C0 00 38 60 C0 F8 C0 60  // ...|...|..8`...`
   12100: 38 00 7C C6 C6 C6 C6 C6 C6 00 00 FE 00 FE 00 FE  // 8.|.............
   12110: 00 00 18 18 7E 18 18 00 7E 00 30 18 0C 18 30 00  // ....~...~.0...0.
   12120: 7E 00 0C 18 30 18 0C 00 7E 00 0C 1E 18 18 18 18  // ~...0...~.......
   12130: 18 18 18 18 18 18 18 78 30 00 00 00 18 00 7E 00  // .......x0.....~.
   12140: 18 00 00 76 DC 00 76 DC 00 00 7C C6 C6 7C 00 00  // ...v..v...|..|..
   12150: 00 00 00 00 00 18 18 00 00 00 00 00 00 00 18 00  // ................
   12160: 00 00 1F 18 18 18 F8 38 18 00 D8 6C 6C 6C 00 00  // .......8...lll..
   12170: 00 00 70 D8 30 F8 00 00 00 00 00 00 7C 7C 7C 7C  // ..p.0.......||||
   12180: 00 00 00 00 00 00 00 00 00 00 1D 00 00 00 00 24  // ...............$
   12190: 66 FF 66 24 00 00 00 00 00 00 00 10 00 00 00 00  // f.f$............
   121A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7E  // ...............~
   121B0: 81 A5 81 81 BD 99 81 81 7E 00 00 00 00 00 00 7C  // ........~......|
   121C0: FE FE D6 FE FE BA C6 FE 7C 00 00 00 00 00 00 00  // ........|.......
   121D0: 6C EE FE FE FE FE 7C 38 10 00 00 00 00 00 00 00  // l.....|8........
   121E0: 10 38 7C FE 7C 38 10 00 00 00 00 00 00 00 00 00  // .8|.|8..........
   121F0: 10 38 38 10 6C EE 6C 10 38 00 00 00 00 00 00 10  // .88.l.l.8.......
   12200: 38 7C 7C FE FE FE 6C 10 38 00 00 00 00 00 00 00  // 8||...l.8.......
   12210: 00 00 18 3C 3C 3C 18 00 00 00 00 00 00 FF FF FF  // ...<<<..........
   12220: FF FF E7 C3 C3 C3 E7 FF FF FF FF FF FF 00 00 00  // ................
   12230: 00 18 3C 66 66 66 3C 18 00 00 00 00 00 FF FF FF  // ..<fff<.........
   12240: FF E7 C3 99 99 99 C3 E7 FF FF FF FF FF 00 00 1E  // ................
   12250: 0E 1E 36 78 CC CC CC CC 78 00 00 00 00 00 00 3C  // ..6x....x......<
   12260: 66 66 66 3C 18 7E 18 18 18 00 00 00 00 00 00 1E  // fff<.~..........
   12270: 1A 1E 18 18 18 18 78 F8 70 00 00 00 00 00 00 3E  // ......x.p......>
   12280: 36 3E 36 36 76 F6 66 0E 1E 0C 00 00 00 00 00 18  // 6>66v.f.........
   12290: DB 7E 3C 66 66 3C 7E DB 18 00 00 00 00 00 00 00  // .~<ff<~.........
   122A0: 80 E0 F0 FC FE FC F0 E0 80 00 00 00 00 00 00 00  // ................
   122B0: 02 0E 3E 7E FE 7E 3E 0E 02 00 00 00 00 00 00 18  // ..>~.~>.........
   122C0: 3C 7E 18 18 18 18 7E 3C 18 00 00 00 00 00 00 66  // <~....~<.......f
   122D0: 66 66 66 66 66 66 00 66 66 00 00 00 00 00 00 7F  // ffffff.ff.......
   122E0: DB DB DB DB 7B 1B 1B 1B 1B 00 00 00 00 00 00 7C  // ....{..........|
   122F0: C6 C6 60 7C F6 DE 7C 0C C6 C6 7C 00 00 00 00 00  // ..`|..|...|.....
   12300: 00 00 00 00 00 FE FE FE FE 00 00 00 00 00 00 18  // ................
   12310: 3C 7E 18 18 18 7E 3C 18 7E 00 00 00 00 00 00 18  // <~...~<.~.......
   12320: 3C 7E 18 18 18 18 18 18 18 00 00 00 00 00 00 18  // <~..............
   12330: 18 18 18 18 18 18 7E 3C 18 00 00 00 00 00 00 00  // ......~<........
   12340: 00 00 0C 0E FF 0E 0C 00 00 00 00 00 00 00 00 00  // ................
   12350: 00 00 30 70 FE 70 30 00 00 00 00 00 00 00 00 00  // ..0p.p0.........
   12360: 00 00 00 C0 C0 C0 FE 00 00 00 00 00 00 00 00 00  // ................
   12370: 00 00 24 66 FF 66 24 00 00 00 00 00 00 00 00 00  // ..$f.f$.........
   12380: 10 38 38 38 7C 7C FE FE 00 00 00 00 00 00 00 00  // .888||..........
   12390: FE FE 7C 7C 7C 38 38 10 00 00 00 00 00 00 00 00  // ..|||88.........
   123A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18  // ................
   123B0: 3C 3C 3C 3C 18 18 00 18 18 00 00 00 00 00 36 36  // <<<<..........66
   123C0: 36 36 14 00 00 00 00 00 00 00 00 00 00 00 00 6C  // 66.............l
   123D0: 6C 6C FE 6C 6C FE 6C 6C 6C 00 00 00 00 00 00 18  // ll.ll.lll.......
   123E0: 18 7C C6 C0 78 3C 06 C6 7C 18 18 00 00 00 00 00  // .|..x<..|.......
   123F0: 00 00 62 66 0C 18 30 66 C6 00 00 00 00 00 00 38  // ..bf..0f.......8
   12400: 6C 38 30 76 7E CC CC CC 76 00 00 00 00 00 0C 0C  // l80v~...v.......
   12410: 0C 18 00 00 00 00 00 00 00 00 00 00 00 00 00 0C  // ................
   12420: 18 30 30 30 30 30 30 18 0C 00 00 00 00 00 00 30  // .000000........0
   12430: 18 0C 0C 0C 0C 0C 0C 18 30 00 00 00 00 00 00 00  // ........0.......
   12440: 00 00 6C 38 FE 38 6C 00 00 00 00 00 00 00 00 00  // ..l8.8l.........
   12450: 00 00 18 18 7E 18 18 00 00 00 00 00 00 00 00 00  // ....~...........
   12460: 00 00 00 00 00 00 0C 0C 0C 18 00 00 00 00 00 00  // ................
   12470: 00 00 00 00 FE 00 00 00 00 00 00 00 00 00 00 00  // ................
   12480: 00 00 00 00 00 00 00 18 18 00 00 00 00 00 00 00  // ................
   12490: 00 02 06 0C 18 30 60 C0 80 00 00 00 00 00 00 7C  // .....0`........|
   124A0: C6 C6 CE DE F6 E6 C6 C6 7C 00 00 00 00 00 00 18  // ........|.......
   124B0: 78 18 18 18 18 18 18 18 7E 00 00 00 00 00 00 7C  // x.......~......|
   124C0: C6 C6 06 0C 18 30 60 C6 FE 00 00 00 00 00 00 7C  // .....0`........|
   124D0: C6 06 06 3C 06 06 06 C6 7C 00 00 00 00 00 00 0C  // ...<....|.......
   124E0: 1C 3C 6C CC CC FE 0C 0C 1E 00 00 00 00 00 00 FE  // .<l.............
   124F0: C0 C0 C0 FC 06 06 06 C6 7C 00 00 00 00 00 00 7C  // ........|......|
   12500: C6 C0 C0 FC C6 C6 C6 C6 7C 00 00 00 00 00 00 FE  // ........|.......
   12510: C6 06 0C 18 30 30 30 30 30 00 00 00 00 00 00 7C  // ....00000......|
   12520: C6 C6 C6 7C C6 C6 C6 C6 7C 00 00 00 00 00 00 7C  // ...|....|......|
   12530: C6 C6 C6 C6 7E 06 06 C6 7C 00 00 00 00 00 00 00  // ....~...|.......
   12540: 00 00 0C 0C 00 00 0C 0C 00 00 00 00 00 00 00 00  // ................
   12550: 00 00 0C 0C 00 00 0C 0C 0C 18 00 00 00 00 00 00  // ................
   12560: 0C 18 30 60 C0 60 30 18 0C 00 00 00 00 00 00 00  // ..0`.`0.........
   12570: 00 00 00 FE 00 FE 00 00 00 00 00 00 00 00 00 00  // ................
   12580: 60 30 18 0C 06 0C 18 30 60 00 00 00 00 00 00 7C  // `0.....0`......|
   12590: C6 C6 0C 18 18 18 00 18 18 00 00 00 00 00 00 7C  // ...............|
   125A0: C6 C6 C6 DE DE DE DC C0 7E 00 00 00 00 00 00 38  // ........~......8
   125B0: 6C C6 C6 C6 FE C6 C6 C6 C6 00 00 00 00 00 00 FC  // l...............
   125C0: 66 66 66 7C 66 66 66 66 FC 00 00 00 00 00 00 3C  // fff|ffff.......<
   125D0: 66 C2 C0 C0 C0 C0 C2 66 3C 00 00 00 00 00 00 F8  // f......f<.......
   125E0: 6C 66 66 66 66 66 66 6C F8 00 00 00 00 00 00 FE  // lffffffl........
   125F0: 66 60 64 7C 64 60 60 66 FE 00 00 00 00 00 00 FE  // f`d|d``f........
   12600: 66 60 64 7C 64 60 60 60 F0 00 00 00 00 00 00 7C  // f`d|d```.......|
   12610: C6 C6 C0 C0 C0 CE C6 C6 7C 00 00 00 00 00 00 C6  // ........|.......
   12620: C6 C6 C6 FE C6 C6 C6 C6 C6 00 00 00 00 00 00 3C  // ...............<
   12630: 18 18 18 18 18 18 18 18 3C 00 00 00 00 00 00 3C  // ........<......<
   12640: 18 18 18 18 18 18 D8 D8 70 00 00 00 00 00 00 C6  // ........p.......
   12650: C6 CC D8 F0 F0 D8 CC C6 C6 00 00 00 00 00 00 F0  // ................
   12660: 60 60 60 60 60 60 62 66 FE 00 00 00 00 00 00 C6  // ``````bf........
   12670: C6 EE EE FE D6 D6 D6 C6 C6 00 00 00 00 00 00 C6  // ................
   12680: C6 E6 E6 F6 DE CE CE C6 C6 00 00 00 00 00 00 7C  // ...............|
   12690: C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 FC  // ........|.......
   126A0: 66 66 66 66 7C 60 60 60 F0 00 00 00 00 00 00 7C  // ffff|```.......|
   126B0: C6 C6 C6 C6 C6 C6 D6 D6 7C 06 00 00 00 00 00 FC  // ........|.......
   126C0: 66 66 66 7C 78 6C 66 66 E6 00 00 00 00 00 00 7C  // fff|xlff.......|
   126D0: C6 C0 C0 70 1C 06 06 C6 7C 00 00 00 00 00 00 7E  // ...p....|......~
   126E0: 5A 18 18 18 18 18 18 18 3C 00 00 00 00 00 00 C6  // Z.......<.......
   126F0: C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 C6  // ........|.......
   12700: C6 C6 C6 C6 C6 C6 6C 38 10 00 00 00 00 00 00 C6  // ......l8........
   12710: C6 C6 D6 D6 D6 FE EE C6 C6 00 00 00 00 00 00 C6  // ................
   12720: C6 C6 6C 38 38 6C C6 C6 C6 00 00 00 00 00 00 66  // ..l88l.........f
   12730: 66 66 66 66 3C 18 18 18 3C 00 00 00 00 00 00 FE  // ffff<...<.......
   12740: C6 86 0C 18 30 60 C2 C6 FE 00 00 00 00 00 00 7C  // ....0`.........|
   12750: 60 60 60 60 60 60 60 60 7C 00 00 00 00 00 00 00  // ````````|.......
   12760: 00 80 C0 60 30 18 0C 06 02 00 00 00 00 00 00 7C  // ...`0..........|
   12770: 0C 0C 0C 0C 0C 0C 0C 0C 7C 00 00 00 00 00 10 38  // ........|......8
   12780: 6C C6 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // l...............
   12790: 00 00 00 00 00 00 00 00 00 00 FF 00 00 00 18 18  // ................
   127A0: 18 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   127B0: 00 00 78 0C 7C CC CC DC 76 00 00 00 00 00 00 E0  // ..x.|...v.......
   127C0: 60 60 7C 66 66 66 66 66 FC 00 00 00 00 00 00 00  // ``|fffff........
   127D0: 00 00 7C C6 C0 C0 C0 C6 7C 00 00 00 00 00 00 1C  // ..|.....|.......
   127E0: 0C 0C 7C CC CC CC CC CC 7E 00 00 00 00 00 00 00  // ..|.....~.......
   127F0: 00 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 1C  // ..|.....|.......
   12800: 36 30 30 FC 30 30 30 30 78 00 00 00 00 00 00 00  // 600.0000x.......
   12810: 00 00 76 CE C6 C6 CE 76 06 C6 7C 00 00 00 00 E0  // ..v....v..|.....
   12820: 60 60 7C 66 66 66 66 66 E6 00 00 00 00 00 00 18  // ``|fffff........
   12830: 18 00 38 18 18 18 18 18 3C 00 00 00 00 00 00 0C  // ..8.....<.......
   12840: 0C 00 1C 0C 0C 0C 0C 0C CC CC 78 00 00 00 00 E0  // ..........x.....
   12850: 60 60 66 66 6C 78 6C 66 E6 00 00 00 00 00 00 18  // ``fflxlf........
   12860: 18 18 18 18 18 18 18 18 1C 00 00 00 00 00 00 00  // ................
   12870: 00 00 6C FE D6 D6 C6 C6 C6 00 00 00 00 00 00 00  // ..l.............
   12880: 00 00 DC 66 66 66 66 66 66 00 00 00 00 00 00 00  // ...ffffff.......
   12890: 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 00  // ..|.....|.......
   128A0: 00 00 DC 66 66 66 66 7C 60 60 F0 00 00 00 00 00  // ...ffff|``......
   128B0: 00 00 76 CC CC CC CC 7C 0C 0C 1E 00 00 00 00 00  // ..v....|........
   128C0: 00 00 DC 66 60 60 60 60 F0 00 00 00 00 00 00 00  // ...f````........
   128D0: 00 00 7C C6 C0 7C 06 C6 7C 00 00 00 00 00 00 30  // ..|..|..|......0
   128E0: 30 30 FC 30 30 30 30 36 1C 00 00 00 00 00 00 00  // 00.00006........
   128F0: 00 00 CC CC CC CC CC CC 76 00 00 00 00 00 00 00  // ........v.......
   12900: 00 00 C6 C6 C6 C6 6C 38 10 00 00 00 00 00 00 00  // ......l8........
   12910: 00 00 C6 C6 D6 D6 D6 FE 6C 00 00 00 00 00 00 00  // ........l.......
   12920: 00 00 C6 C6 6C 38 6C C6 C6 00 00 00 00 00 00 00  // ....l8l.........
   12930: 00 00 C6 C6 C6 C6 CE 76 06 C6 7C 00 00 00 00 00  // .......v..|.....
   12940: 00 00 FE 86 0C 18 30 62 FE 00 00 00 00 00 00 0E  // ......0b........
   12950: 18 18 18 70 18 18 18 18 0E 00 00 00 00 00 00 18  // ...p............
   12960: 18 18 18 00 18 18 18 18 18 00 00 00 00 00 00 70  // ...............p
   12970: 18 18 18 0E 18 18 18 18 70 00 00 00 00 00 00 76  // ........p......v
   12980: DC 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   12990: 00 00 10 38 38 6C 6C FE 00 00 00 00 00 00 00 3C  // ...88ll........<
   129A0: 66 C0 C0 C0 C6 66 3C 18 0C CC 38 00 00 00 00 C6  // f....f<...8.....
   129B0: 00 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 0C 18  // ........v.......
   129C0: 30 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 30 78  // 0.|.....|.....0x
   129D0: CC 00 78 0C 7C CC CC DC 76 00 00 00 00 00 00 CC  // ..x.|...v.......
   129E0: 00 00 78 0C 7C CC CC DC 76 00 00 00 00 00 60 30  // ..x.|...v.....`0
   129F0: 18 00 78 0C 7C CC CC DC 76 00 00 00 00 00 38 6C  // ..x.|...v.....8l
   12A00: 38 00 78 0C 7C CC CC DC 76 00 00 00 00 00 00 00  // 8.x.|...v.......
   12A10: 00 7C C6 C0 C0 C6 7C 18 0C 6C 38 00 00 00 30 78  // .|....|..l8...0x
   12A20: CC 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 CC  // ..|.....|.......
   12A30: 00 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 30 18  // ..|.....|.....0.
   12A40: 0C 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 66  // ..|.....|......f
   12A50: 00 00 38 18 18 18 18 18 3C 00 00 00 00 00 18 3C  // ..8.....<......<
   12A60: 66 00 38 18 18 18 18 18 3C 00 00 00 00 00 00 00  // f.8.....<.......
   12A70: 00 00 38 18 18 18 18 18 3C 00 00 00 00 00 C6 00  // ..8.....<.......
   12A80: 38 6C C6 C6 C6 FE C6 C6 C6 00 00 00 00 38 6C 38  // 8l...........8l8
   12A90: 00 38 6C C6 C6 FE C6 C6 C6 00 00 00 00 0C 18 30  // .8l............0
   12AA0: 00 FE 60 60 7C 60 60 60 FE 00 00 00 00 00 00 00  // ..``|```........
   12AB0: 00 66 DB 1B 7F D8 D8 DF 76 00 00 00 00 00 00 7E  // .f......v......~
   12AC0: D8 D8 D8 D8 FE D8 D8 D8 DE 00 00 00 00 00 30 78  // ..............0x
   12AD0: CC 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 C6  // ..|.....|.......
   12AE0: 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 30 18  // ..|.....|.....0.
   12AF0: 0C 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 30 78  // ..|.....|.....0x
   12B00: CC 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 60 30  // ........v.....`0
   12B10: 18 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 18 00  // ........v.......
   12B20: 3C 18 18 18 18 18 18 18 3C 00 00 00 00 00 C6 00  // <.......<.......
   12B30: 7C C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 C6 00  // |.......|.......
   12B40: C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 18  // ........|.......
   12B50: 18 7C C6 C0 C0 C6 7C 18 18 00 00 00 00 00 38 6C  // .|....|.......8l
   12B60: 60 60 F0 60 60 60 66 F6 6C 00 00 00 00 00 66 66  // ``.```f.l.....ff
   12B70: 66 66 3C 18 7E 18 3C 18 18 00 00 00 00 00 00 3E  // ff<.~.<........>
   12B80: 63 63 30 1C 06 63 63 3E 00 1C 00 00 00 00 00 00  // cc0..cc>........
   12B90: 00 00 3E 63 38 0E 63 3E 00 1C 00 00 00 00 0C 18  // ..>c8.c>........
   12BA0: 30 00 78 0C 7C CC CC DC 76 00 00 00 00 00 0C 18  // 0.x.|...v.......
   12BB0: 30 00 38 18 18 18 18 18 3C 00 00 00 00 00 0C 18  // 0.8.....<.......
   12BC0: 30 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 18 30  // 0.|.....|......0
   12BD0: 60 00 CC CC CC CC CC DC 76 00 00 00 00 00 00 76  // `.......v......v
   12BE0: DC 00 BC 66 66 66 66 66 E6 00 00 00 00 00 76 DC  // ...fffff......v.
   12BF0: 00 C6 C6 E6 F6 DE CE C6 C6 00 00 00 00 00 21 1E  // ..............!.
   12C00: 00 1E 33 60 60 67 63 33 1D 00 00 00 00 00 42 3C  // ..3``gc3......B<
   12C10: 00 3B 66 66 66 3E 06 66 3C 00 00 00 00 00 00 30  // .;fff>.f<......0
   12C20: 30 00 30 30 30 60 C6 C6 7C 00 00 00 00 00 00 00  // 0.000`..|.......
   12C30: 00 00 00 00 7E 60 60 60 00 00 00 00 00 00 00 00  // ....~```........
   12C40: 00 00 00 00 7E 06 06 06 00 00 00 00 00 00 60 60  // ....~.........``
   12C50: 62 66 6C 18 30 60 DC 36 0C 18 3E 00 00 00 60 60  // bfl.0`.6..>...``
   12C60: 62 66 6C 18 36 6E DE 36 7E 06 06 00 00 00 00 18  // bfl.6n.6~.......
   12C70: 18 00 18 18 3C 3C 3C 3C 18 00 00 00 00 00 00 00  // ....<<<<........
   12C80: 00 00 36 6C D8 6C 36 00 00 00 00 00 00 00 00 00  // ..6l.l6.........
   12C90: 00 00 D8 6C 36 6C D8 00 00 00 00 00 00 11 44 11  // ...l6l........D.
   12CA0: 44 11 44 11 44 11 44 11 44 11 44 11 44 AA 55 AA  // D.D.D.D.D.D.D.U.
   12CB0: 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 DD 77 DD  // U.U.U.U.U.U.U.w.
   12CC0: 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 18 18 18  // w.w.w.w.w.w.w...
   12CD0: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
   12CE0: 18 18 18 18 F8 18 18 18 18 18 18 18 18 18 18 18  // ................
   12CF0: 18 18 F8 18 F8 18 18 18 18 18 18 18 18 36 36 36  // .............666
   12D00: 36 36 36 36 F6 36 36 36 36 36 36 36 36 00 00 00  // 6666.66666666...
   12D10: 00 00 00 00 FE 36 36 36 36 36 36 36 36 00 00 00  // .....66666666...
   12D20: 00 00 F8 18 F8 18 18 18 18 18 18 18 18 36 36 36  // .............666
   12D30: 36 36 F6 06 F6 36 36 36 36 36 36 36 36 36 36 36  // 66...66666666666
   12D40: 36 36 36 36 36 36 36 36 36 36 36 36 36 00 00 00  // 6666666666666...
   12D50: 00 00 FE 06 F6 36 36 36 36 36 36 36 36 36 36 36  // .....66666666666
   12D60: 36 36 F6 06 FE 00 00 00 00 00 00 00 00 36 36 36  // 66...........666
   12D70: 36 36 36 36 FE 00 00 00 00 00 00 00 00 18 18 18  // 6666............
   12D80: 18 18 F8 18 F8 00 00 00 00 00 00 00 00 00 00 00  // ................
   12D90: 00 00 00 00 F8 18 18 18 18 18 18 18 18 18 18 18  // ................
   12DA0: 18 18 18 18 1F 00 00 00 00 00 00 00 00 18 18 18  // ................
   12DB0: 18 18 18 18 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
   12DC0: 00 00 00 00 FF 18 18 18 18 18 18 18 18 18 18 18  // ................
   12DD0: 18 18 18 18 1F 18 18 18 18 18 18 18 18 00 00 00  // ................
   12DE0: 00 00 00 00 FF 00 00 00 00 00 00 00 00 18 18 18  // ................
   12DF0: 18 18 18 18 FF 18 18 18 18 18 18 18 18 18 18 18  // ................
   12E00: 18 18 1F 18 1F 18 18 18 18 18 18 18 18 36 36 36  // .............666
   12E10: 36 36 36 36 37 36 36 36 36 36 36 36 36 36 36 36  // 6666766666666666
   12E20: 36 36 37 30 3F 00 00 00 00 00 00 00 00 00 00 00  // 6670?...........
   12E30: 00 00 3F 30 37 36 36 36 36 36 36 36 36 36 36 36  // ..?0766666666666
   12E40: 36 36 F7 00 FF 00 00 00 00 00 00 00 00 00 00 00  // 66..............
   12E50: 00 00 FF 00 F7 36 36 36 36 36 36 36 36 36 36 36  // .....66666666666
   12E60: 36 36 37 30 37 36 36 36 36 36 36 36 36 00 00 00  // 6670766666666...
   12E70: 00 00 FF 00 FF 00 00 00 00 00 00 00 00 36 36 36  // .............666
   12E80: 36 36 F7 00 F7 36 36 36 36 36 36 36 36 18 18 18  // 66...66666666...
   12E90: 18 18 FF 00 FF 00 00 00 00 00 00 00 00 36 36 36  // .............666
   12EA0: 36 36 36 36 FF 00 00 00 00 00 00 00 00 00 00 00  // 6666............
   12EB0: 00 00 FF 00 FF 18 18 18 18 18 18 18 18 00 00 00  // ................
   12EC0: 00 00 00 00 FF 36 36 36 36 36 36 36 36 36 36 36  // .....66666666666
   12ED0: 36 36 36 36 3F 00 00 00 00 00 00 00 00 18 18 18  // 6666?...........
   12EE0: 18 18 1F 18 1F 00 00 00 00 00 00 00 00 00 00 00  // ................
   12EF0: 00 00 1F 18 1F 18 18 18 18 18 18 18 18 00 00 00  // ................
   12F00: 00 00 00 00 3F 36 36 36 36 36 36 36 36 36 36 36  // ....?66666666666
   12F10: 36 36 36 36 FF 36 36 36 36 36 36 36 36 18 18 18  // 6666.66666666...
   12F20: 18 18 FF 18 FF 18 18 18 18 18 18 18 18 18 18 18  // ................
   12F30: 18 18 18 18 F8 00 00 00 00 00 00 00 00 00 00 00  // ................
   12F40: 00 00 00 00 1F 18 18 18 18 18 18 18 18 FF FF FF  // ................
   12F50: FF FF FF FF FF FF FF FF FF FF FF FF FF 00 00 00  // ................
   12F60: 00 00 00 00 00 FF FF FF FF FF FF FF FF F0 F0 F0  // ................
   12F70: F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F  // ................
   12F80: 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF  // ................
   12F90: FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00  // ................
   12FA0: 00 76 DC D8 D8 D8 D8 DC 76 00 00 00 00 00 00 78  // .v......v......x
   12FB0: CC CC D8 FC C6 C6 C6 C6 CC 00 00 00 00 00 00 FE  // ................
   12FC0: 66 62 60 60 60 60 60 60 60 00 00 00 00 00 00 00  // fb```````.......
   12FD0: 00 00 FE 6C 6C 6C 6C 6C 6C 00 00 00 00 00 00 FE  // ...llllll.......
   12FE0: C6 62 30 18 18 30 62 C6 FE 00 00 00 00 00 00 00  // .b0..0b.........
   12FF0: 00 00 7E D8 CC CC CC D8 70 00 00 00 00 00 00 00  // ..~.....p.......
   13000: 00 66 66 66 66 66 7C 60 C0 80 00 00 00 00 00 00  // .fffff|`........
   13010: 00 00 76 DC 18 18 18 18 18 00 00 00 00 00 00 FE  // ..v.............
   13020: 38 38 6C C6 C6 6C 38 38 FE 00 00 00 00 00 00 00  // 88l..l88........
   13030: 38 6C C6 C6 FE C6 C6 6C 38 00 00 00 00 00 00 38  // 8l.....l8......8
   13040: 6C C6 C6 C6 C6 6C 6C 6C EE 00 00 00 00 00 00 3E  // l....lll.......>
   13050: 60 60 3C 66 C6 C6 C6 CC 78 00 00 00 00 00 00 00  // ``<f....x.......
   13060: 00 00 7E DB DB DB 7E 00 00 00 00 00 00 00 00 02  // ..~...~.........
   13070: 06 7C CE DE F6 F6 7C 60 C0 00 00 00 00 00 00 00  // .|....|`........
   13080: 1C 30 60 60 7C 60 60 30 1C 00 00 00 00 00 00 7C  // .0``|``0.......|
   13090: C6 C6 C6 C6 C6 C6 C6 C6 C6 00 00 00 00 00 00 00  // ................
   130A0: 00 FE 00 00 FE 00 00 FE 00 00 00 00 00 00 00 00  // ................
   130B0: 00 18 18 7E 18 18 00 00 7E 00 00 00 00 00 00 30  // ...~....~......0
   130C0: 18 0C 06 0C 18 30 00 00 7E 00 00 00 00 00 00 0C  // .....0..~.......
   130D0: 18 30 60 30 18 0C 00 00 7E 00 00 00 00 00 00 00  // .0`0....~.......
   130E0: 00 0C 1E 1A 18 18 18 18 18 18 18 18 18 18 18 18  // ................
   130F0: 18 18 18 18 18 18 18 58 78 30 00 00 00 00 00 00  // .......Xx0......
   13100: 00 18 18 00 7E 00 18 18 00 00 00 00 00 00 00 00  // ....~...........
   13110: 00 00 00 76 DC 00 76 DC 00 00 00 00 00 00 00 78  // ...v..v........x
   13120: CC CC 78 00 00 00 00 00 00 00 00 00 00 00 00 00  // ..x.............
   13130: 00 00 00 00 18 18 00 00 00 00 00 00 00 00 00 00  // ................
   13140: 00 00 00 00 00 18 00 00 00 00 00 00 00 00 00 1F  // ................
   13150: 18 18 18 18 18 D8 D8 78 38 18 00 00 00 00 00 D8  // .......x8.......
   13160: 6C 6C 6C 6C 6C 00 00 00 00 00 00 00 00 00 00 70  // lllll..........p
   13170: D8 18 30 60 F8 00 00 00 00 00 00 00 00 00 00 00  // ..0`............
   13180: 00 00 7E 7E 7E 7E 7E 7E 00 00 00 00 00 00 00 00  // ..~~~~~~........
   13190: 00 00 00 00 00 00 00 00 00 00 00 00 00 1D 00 00  // ................
   131A0: 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 2F 00  // ...$f.f$....../.
   131B0: 00 00 01 03 06 0C 18 30 60 C0 80 00 00 00 00 30  // .......0`......0
   131C0: 00 00 7E C3 C3 C3 DB DB C3 C3 C3 7E 00 00 00 00  // ..~........~....
   131D0: 4D 00 00 C3 C3 E7 FF FF DB DB C3 C3 C3 00 00 00  // M...............
   131E0: 00 54 00 00 FF 99 18 18 18 18 18 18 18 3C 00 00  // .T...........<..
   131F0: 00 00 56 00 00 C3 C3 C3 C3 C3 C3 C3 66 3C 18 00  // ..V.........f<..
   13200: 00 00 00 57 00 00 C3 C3 C3 C3 DB DB DB DB FF 66  // ...W...........f
   13210: 00 00 00 00 58 00 00 C3 C3 C3 66 3C 3C 66 C3 C3  // ....X.....f<<f..
   13220: C3 00 00 00 00 59 00 00 C3 C3 C3 C3 66 3C 18 18  // .....Y......f<..
   13230: 18 3C 00 00 00 00 5C 00 00 00 80 C0 60 30 18 0C  // .<....\.....`0..
   13240: 06 03 01 00 00 00 00 6D 00 00 00 00 00 66 FF DB  // .......m.....f..
   13250: DB DB C3 C3 00 00 00 00 76 00 00 00 00 00 C3 C3  // ........v.......
   13260: C3 C3 66 3C 18 00 00 00 00 77 00 00 00 00 00 C3  // ..f<.....w......
   13270: C3 DB DB DB FF 66 00 00 00 00 00 00 19 73 C3 0B  // .....f.......s..
   13280: DB 74 03 E9 46 01 57 32 C0 B9 40 00 F3 AA 5F BB  // .t..F.W2..@..._.
   13290: E6 A0 26 89 1D 26 8C 4D 02 2E 8E 1E 5E 24 57 BE  // ..&..&.M....^$W.
   132A0: 49 04 B9 1E 00 83 C7 04 FC 8A 04 26 88 05 46 47  // I..........&..FG
   132B0: E2 F7 5F A0 84 04 FE C0 26 88 45 22 A1 85 04 26  // .._.....&.E"...&
   132C0: 89 45 23 57 E8 D9 1B 5F 26 88 5D 25 26 88 7D 26  // .E#W..._&.]%&.}&
   132D0: 8A 1E 49 04 E8 FC 05 74 05 80 FB 13 7F 1D 32 FF  // ..I....t......2.
   132E0: D1 E3 2E 8A 87 BE A0 32 E4 0A C0 74 01 40 26 89  // .......2...t.@&.
   132F0: 45 27 2E 8A 87 BF A0 26 88 45 29 A1 85 04 8A 16  // E'.....&.E).....
   13300: 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E 15 B2 01 3D  // ........=..~...=
   13310: 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2 03 3D E0 01  // ^.~...=..~...=..
   13320: 7E 00 26 88 55 2A 8A 26 87 04 8A C4 24 01 C0 E0  // ~.&.U*.&....$...
   13330: 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0 89 04 24 0A  // ..............$.
   13340: 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC 24 08 C0 E0  // ........0.B.$...
   13350: 02 0A C4 0C 01 26 88 45 2D B0 03 26 88 45 31 E8  // .....&.E-..&.E1.
   13360: 77 08 1E 06 32 D2 C4 1E A8 04 8C C1 8C CE 3B CE  // w...2.........;.
   13370: 74 34 26 C5 77 04 8C D9 0B F1 74 03 80 CA 10 26  // t4&.w.....t....&
   13380: C5 77 0C 8C D9 0B F1 74 03 80 CA 08 26 C5 77 08  // .w.....t....&.w.
   13390: 8C D9 0B F1 74 03 80 CA 04 26 C5 77 10 8C D9 0B  // ....t....&.w....
   133A0: F1 74 03 80 CA 01 07 1F 26 88 55 32 B0 03 BA C4  // .t......&.U2....
   133B0: 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A F2 D0 EE 81  // ................
   133C0: E2 04 04 25 03 03 0B C2 26 89 45 2B 8B EC C6 46  // ...%....&.E+...F
   133D0: 1A 1B C3 0A C0 74 0F FE C8 74 36 FE C8 74 56 8B  // .....t...t6..tV.
   133E0: EC C6 46 1A 00 C3 B8 20 00 F6 C1 01 74 03 83 C0  // ..F.... ....t...
   133F0: 60 F6 C1 02 74 03 83 C0 3A F6 C1 04 74 03 05 03  // `...t...:...t...
   13400: 03 83 C0 3F C1 E8 06 8B EC 89 46 0E C6 46 1A 1C  // ...?......F..F..
   13410: C3 8B FB 83 C7 20 F6 C1 01 74 03 E8 85 00 F6 C1  // ..... ...t......
   13420: 02 74 03 E8 EF 00 F6 C1 04 74 03 E8 F8 01 8B EC  // .t.......t......
   13430: C6 46 1A 1C C3 F6 C1 01 74 06 E8 16 15 E8 25 01  // .F......t.....%.
   13440: F6 C1 02 74 03 E8 85 01 F6 C1 04 74 03 E8 12 02  // ...t.......t....
   13450: EB DC 8A C4 EE 42 EC AA FE C4 4A E2 F5 C3 E8 6B  // .....B....J....k
   13460: 04 BD C0 03 B9 15 00 32 E4 EC 87 EA 8A C4 EE 42  // .......2.......B
   13470: EC AA FE C4 4A 87 EA E2 F0 EC 87 EA B0 20 EE C3  // ....J........ ..
   13480: 26 8A 05 88 04 47 46 E2 F7 C3 26 8A 25 EF 47 FE  // &....GF...&.%.G.
   13490: C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05 47 FE C4 EE  // .........&..G...
   134A0: E2 F4 C3 9C FA 51 57 8B C7 2B C3 26 89 07 8B F7  // .....QW..+.&....
   134B0: E8 0A 04 EC 26 88 44 01 26 89 54 41 B2 CE EC 26  // ....&.D.&.TA...&
   134C0: 88 44 02 B2 CC EC 26 88 44 09 B2 CA EC 26 88 44  // .D....&.D....&.D
   134D0: 04 B2 C4 EC 26 88 04 83 C7 05 B9 04 00 B4 01 E8  // ....&...........
   134E0: 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26 8B 54 41 32  // p.&........&.TA2
   134F0: E4 B9 19 00 E8 5B FF 26 8A 44 01 EE E8 5F FF B2  // .....[.&.D..._..
   13500: CE 32 E4 B9 09 00 E8 49 FF 26 8A 44 02 EE 5F 59  // .2.....I.&.D.._Y
   13510: 83 C7 60 9D C3 9C FA 8B C7 2B C3 26 89 47 02 51  // ..`......+.&.G.Q
   13520: 57 2E 8E 1E 5E 24 A0 10 04 24 30 AA BE 49 04 B9  // W...^$...$0..I..
   13530: 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE A8 04 B1 04  // ................
   13540: F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00 B1 04 F3 A4  // ..........t.....
   13550: BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04 F3 A4 5F 59  // .|............_Y
   13560: 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB 8B F7 51 8B  // ..:....&.?....Q.
   13570: FE 83 C7 05 BA C4 03 B8 00 01 EF B0 01 B9 04 00  // ................
   13580: E8 07 FF 47 B2 C2 26 8A 44 09 EE B2 C4 B8 00 03  // ...G..&.D.......
   13590: EF 26 8A 04 EE 26 8B 54 41 B8 11 00 EF B1 19 32  // .&...&.TA......2
   135A0: C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06 26 8A 44 04  // ....&.D.....&.D.
   135B0: EE EC B1 15 32 E4 E8 DB FE B0 20 EE B1 09 32 C0  // ....2..... ...2.
   135C0: B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D C3 9C FA 26  // .....&.D..Y....&
   135D0: 8B 7F 02 03 FB 06 51 2E 8E 1E 5E 24 26 8A 05 80  // ......Q...^$&...
   135E0: 26 10 04 CF 08 06 10 04 47 BE 49 04 B9 1E 00 E8  // &.......G.I.....
   135F0: 8E FE BE 84 04 B1 07 E8 86 FE BE A8 04 B1 04 E8  // ................
   13600: 7E FE BE 14 00 B1 04 E8 76 FE BE 74 00 B1 04 E8  // ~.......v..t....
   13610: 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C 01 B1 04 E8  // n..|....f.......
   13620: 5E FE 59 07 9D C3 9C FA 8B C7 2B C3 26 89 47 04  // ^.Y.......+.&.G.
   13630: E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88 05 BA C8 03  // ......4.B.&.....
   13640: EC 26 88 45 01 50 4A 4A EC 26 88 45 02 83 C7 03  // .&.E.PJJ.&.E....
   13650: B9 00 03 42 32 C0 EE 42 42 EC AA E2 FC 58 4A EE  // ...B2..BB....XJ.
   13660: 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C 05 B2 C0 B0  // ....&.w....l....
   13670: 34 EE 26 8A 04 EE BA C6 03 26 8A 44 02 EE 56 42  // 4.&......&.D..VB
   13680: 42 83 C6 03 32 C0 EE 42 B9 00 03 26 8A 04 EE 46  // B...2..B...&...F
   13690: E2 F9 5E FE CA 26 8A 44 01 EE 9D C3 BA CC 03 EC  // ..^..&.D........
   136A0: 24 FE 0A C4 B2 C2 EE C3 E8 A8 12 B2 C0 86 C4 EE  // $...............
   136B0: EB 00 EB 00 86 C4 EE EB 00 EB 00 B0 20 EE C3 50  // ............ ..P
   136C0: 8A E0 80 E4 80 80 26 87 04 7F 08 26 87 04 24 7F  // ......&....&..$.
   136D0: 8A E0 3C 07 7E 1E 26 F6 47 33 01 75 17 3C 23 74  // ..<.~.&.G3.u.<#t
   136E0: 13 3C 32 74 0F 3C 33 74 0B B4 03 26 F6 47 09 01  // .<2t.<3t...&.G..
   136F0: 75 02 B4 07 88 26 49 04 BA B4 03 80 0E 87 04 02  // u....&I.........
   13700: 26 F6 47 09 01 74 07 B2 D4 80 26 87 04 FD 89 16  // &.G..t....&.....
   13710: 63 04 C7 06 4E 04 00 00 C6 06 62 04 00 B9 08 00  // c...N.....b.....
   13720: BF 50 04 FC 06 1E 07 33 C0 F3 AB 07 26 8A 07 32  // .P.....3....&..2
   13730: E4 A3 4A 04 26 8A 47 01 A2 84 04 26 8A 47 02 A3  // ..J.&.G....&.G..
   13740: 85 04 26 8B 47 03 A3 4C 04 26 8B 47 14 86 C4 A3  // ..&.G..L.&.G....
   13750: 60 04 58 C3 52 32 E4 33 D2 B0 0D CD 17 F6 C4 29  // `.X.R2.3.......)
   13760: 75 08 32 E4 33 D2 B0 0A CD 17 5A C3 06 1E 60 2E  // u.2.3.....Z...`.
   13770: 8E 1E 5E 24 2E 83 0E 68 24 00 75 6E 80 3E 00 05  // ..^$...h$.un.>..
   13780: 01 74 67 C6 06 00 05 01 8A 1E 62 04 32 FF D1 E3  // .tg.......b.2...
   13790: 8B FB 8B 85 50 04 8A 3E 62 04 50 32 F6 8A 0E 84  // ....P..>b.P2....
   137A0: 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8 A6 FF F6 C4  // .2.AQ..J.2......
   137B0: 29 75 3D 51 52 89 95 50 04 B4 08 E8 B6 D4 0A C0  // )u=QR..P........
   137C0: 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4 29 75 1F 5A  // u.. 3.2.....)u.Z
   137D0: FE C2 59 E2 DE FE C6 59 E2 CA E8 77 FF 32 C0 A2  // ..Y....Y...w.2..
   137E0: 00 05 58 89 85 50 04 E8 AF 03 61 1F 07 CF 5A 59  // ..X..P....a...ZY
   137F0: 59 B0 FF EB EA 52 2A F5 38 C6 7D 02 32 C0 2E 8E  // Y....R*.8.}.2...
   13800: 06 60 24 5A C3 A0 85 04 F6 E3 8A F7 8B D8 8B CA  // .`$Z............
   13810: BA C4 03 B8 02 0F EF B4 02 E8 6D 00 8B D1 32 ED  // ..........m...2.
   13820: 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75 F7 32 E4 E8  // ..........Ku.2..
   13830: 57 00 C3 53 8A 1E 62 04 0B C0 75 04 0A DB 74 03  // W..S..b...u...t.
   13840: E8 35 03 5B 8B F8 2B D1 81 C2 01 01 8A C3 32 E4  // .5.[..+.......2.
   13850: C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A C3 F6 26 85  // ...2.+...t**..&.
   13860: 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8 02 0F EF 5A  // ...R... .......Z
   13870: 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03 FD 48 75 F5  // .............Hu.
   13880: 1F E8 81 FF C3 8A D8 EB F8 BA CE 03 B0 05 EE 42  // ...............B
   13890: EC 24 FC 0A C4 EE 4A C3 9C FA EE 42 EB 00 EC 4A  // .$....J....B...J
   138A0: 9D C3 1E 2E 8E 1E 5E 24 8B 16 63 04 80 C2 06 1F  // ......^$..c.....
   138B0: C3 1E 2E 8E 1E 5E 24 8B 16 63 04 1F C3 50 BA CC  // .....^$..c...P..
   138C0: 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3 E8 EE FF 80  // ......u...X.....
   138D0: C2 06 C3 1E 2E 8E 1E 5E 24 80 3E 49 04 03 74 13  // .......^$.>I..t.
   138E0: 80 3E 49 04 02 74 0C 80 3E 49 04 01 74 05 80 3E  // .>I..t..>I..t..>
   138F0: 49 04 00 1F C3 50 2E 8E 06 62 24 A0 10 04 24 30  // I....P...b$...$0
   13900: 3C 30 74 05 2E 8E 06 64 24 58 0B C0 74 03 E8 E1  // <0t....d$X..t...
   13910: 01 03 06 4E 04 81 C2 01 01 2B D1 32 ED 8B 2E 4A  // ...N.....+.2...J
   13920: 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1 E5 0A DB 75  // ...............u
   13930: 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A D8 8B C1 E8  // ...8.~..........
   13940: B3 FF 03 F0 3A 16 4A 04 74 06 06 1F E8 1B 00 C3  // ....:.J.t.......
   13950: 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A E6 E8 95 FF  // ...@............
   13960: F7 DD 2B F0 06 1F E8 01 00 C3 53 8A CE 2A CB 32  // ..+.......S..*.2
   13970: ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B CA F3 A5 03  // .2.+.+..........
   13980: F5 03 FD FE CC 75 F4 58 B0 20 8A CA F3 AB 03 FD  // .....u.X. ......
   13990: FE CB 75 F6 C3 53 8A C6 2A C3 74 06 F6 E2 8B C8  // ..u..S..*.t.....
   139A0: F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB C3 8B D8 E8  // ..X...... ......
   139B0: 2E 00 2E 8E 1E 64 24 8A C3 22 DF D3 E3 A8 80 74  // .....d$..".....t
   139C0: 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE 88 1C C3 8A  // .0.....4".......
   139D0: FC E8 0C 00 2E 8E 1E 64 24 8A 04 D2 E8 22 C7 C3  // .......d$...."..
   139E0: B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F 8B F1 C1 EE  // .(.....t........
   139F0: 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1 03 D0 E1 B7  // ................
   13A00: 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7 01 C3 FC 8A  // ................
   13A10: D8 2E 8E 06 64 24 8B C1 E8 86 00 75 02 8A DE 03  // ....d$.....u....
   13A20: F0 E8 24 00 C3 FC 8A D8 2E 8E 06 64 24 8A C1 8A  // ..$........d$...
   13A30: E6 E8 6D 00 75 02 8A DE F7 DD 81 C6 F0 00 81 C7  // ..m.u...........
   13A40: F0 00 2B F0 E8 01 00 C3 8A CE 2A CB E3 2C 51 8A  // ..+.......*..,Q.
   13A50: CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A CA 2B F1 2B  // .VW..........+.+
   13A60: F9 81 C6 00 20 81 C7 00 20 D1 E9 F3 A5 13 C9 F3  // .... ... .......
   13A70: A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7 8A E7 8A CA  // ._^....Y........
   13A80: 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B F9 81 C7 00  // W..........+....
   13A90: 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD FE CB 75 DE  //  ........_....u.
   13AA0: C3 E8 B0 00 81 C2 01 01 2B D1 38 F3 76 02 32 DB  // ........+.8.v.2.
   13AB0: 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50 00 80 3E 49  // Q......Y2..P..>I
   13AC0: 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8 8B F0 B0 50  // ..t............P
   13AD0: F6 E3 0A DB C3 52 53 8A DF 32 FF D1 E3 8B 87 50  // .....RS..2.....P
   13AE0: 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3 5B 03 C3 5B  // ....P...L...[..[
   13AF0: 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0  // Z.R...J...2.....
   13B00: 5A C3 8B E8 83 E5 0F 2E 8A A6 96 8C 8B E8 C1 ED  // Z...............
   13B10: 04 83 E5 0F 2E 8A 86 96 8C C3 00 03 0C 0F 30 33  // ..............03
   13B20: 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B 04 86 E0 BA  // <?........&.....
   13B30: 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1 E0 02 75 F2  // .....t........u.
   13B40: 88 56 00 45 C3 8B 16 63 04 8A C5 86 E0 EF 8A E1  // .V.E...c........
   13B50: FE C0 EF C3 52 8B D0 8A C4 F6 26 4A 04 C1 E0 02  // ....R.....&J....
   13B60: 32 F6 03 C2 5A C3 53 8A DF 32 FF D1 E3 8B 87 50  // 2...Z.S..2.....P
   13B70: 04 D1 EB E8 02 00 5B C3 52 8B D0 32 F6 52 8A C4  // ......[.R..2.R..
   13B80: F6 26 85 04 F7 26 4A 04 5A 03 C2 0A DB 74 08 03  // .&...&J.Z....t..
   13B90: 06 4C 04 FE CB 75 F8 5A C3 52 8B D0 A0 4A 04 F6  // .L...u.Z.R...J..
   13BA0: E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1 F8 8B C8 B4  // .2.......N......
   13BB0: 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04 8B F9 C1 EF  // ....Z....&J.....
   13BC0: 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7 26 4C 04 03  // .....t...2..&L..
   13BD0: F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC EC C3 E8 F8  // ................
   13BE0: FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0 32 C0 EE C3  // .... .......2...
   13BF0: C4 3E A8 04 26 C4 7D 04 8C C5 0B EF C3 53 B0 0E  // .>..&.}......S..
   13C00: E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8 B8 0E AA EF  // ................
   13C10: B8 0F 55 EF B0 0E E8 7F FC 3C AA 74 0D B0 0F E8  // ..U......<.t....
   13C20: 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E 8A E7 EF FE  // v.<Ut.2.[.......
   13C30: C0 8A E3 EF B0 01 0A C0 5B C3 8A EE 8A 36 85 04  // ........[....6..
   13C40: 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6 8B C8 52 32  // ....t%..*.....R2
   13C50: F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B C8 F3 A5 2B  // ........+.Q....+
   13C60: FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A DD EB F8 8A  // .+.Y..Z.........
   13C70: C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1 E2 02 8B DA  // .........2......
   13C80: D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA 4E 75 F7 C3  // ....+.....+.Nu..
   13C90: 2E 8E 1E 5E 24 89 0E 60 04 8A C5 24 60 A8 20 74  // ...^$..`...$`. t
   13CA0: 06 B9 00 1E E9 94 00 F6 06 87 04 01 0F 85 8B 00  // ................
   13CB0: 80 3E 49 04 07 74 06 E8 19 FC 74 01 C3 F6 06 87  // .>I..t....t.....
   13CC0: 04 08 74 03 CD 42 C3 8A 36 85 04 8A D6 FE CA 38  // ..t..B..6......8
   13CD0: CD 7E 1F 0A C9 74 64 8A E9 8A CE FE C9 EB 5C 38  // .~...td.......\8
   13CE0: D1 74 58 8A CE 80 FD 03 7C 04 8A E9 D0 ED FE C9  // .tX.....|.......
   13CF0: EB 49 80 F9 03 7E 44 8A E1 2A E5 0A E4 75 0A 38  // .I...~D..*...u.8
   13D00: CA 74 38 FE CA 38 CA 74 32 8A C5 0A C1 38 F0 7E  // .t8..8.t2....8.~
   13D10: 0A 80 FC 02 7E 12 80 FD 02 7F C8 80 FC 03 7D BF  // ....~.........}.
   13D20: 8A D6 FE CA 38 D1 74 13 8A CE FE C9 FE C9 8A E9  // ....8.t.........
   13D30: 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4 0A E8 05 FE  // *...............
   13D40: C3 2E 8E 1E 5E 24 A2 62 04 32 E4 8B F0 F7 26 4C  // ....^$.b.2....&L
   13D50: 04 A3 4E 04 8B C8 E8 7A FB 74 07 80 3E 49 04 07  // ..N....z.t..>I..
   13D60: 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B 84 50 04 E8  // w............P..
   13D70: 27 FE C3 2E 8E 1E 5E 24 8A 26 49 04 E8 D1 A8 74  // '.....^$.&I....t
   13D80: 07 C7 06 50 04 00 00 C3 E8 48 FB 74 0B 80 FC 07  // ...P.....H.t....
   13D90: 74 06 77 08 E8 77 FC C3 E8 9F FB C3 80 FC 13 7C  // t.w..w.........|
   13DA0: 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8 85 FA 8B 2E  // .t...N..........
   13DB0: 4A 04 52 F6 26 85 04 F7 E5 8B F7 03 F0 5A E8 90  // J.R.&........Z..
   13DC0: FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA C1 E7 03 52  // ...0......g....R
   13DD0: 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7 E5 8B F7 03  // ..J.....&.......
   13DE0: F0 5A E8 55 FE C3 2E 8E 1E 5E 24 8A 26 49 04 E8  // .Z.U.....^$.&I..
   13DF0: E1 FA 74 0C 80 FC 07 74 07 77 40 80 FC 03 7F 04  // ..t....t.w@.....
   13E00: E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A D8 8A C1 8A  // .S..............
   13E10: E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7 03 52 F7 26  // ......+>J....R.&
   13E20: 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B F0 5A 8B 2E  // ...&J......+.Z..
   13E30: 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80 FC 13 7C 03  // J.............|.
   13E40: 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6 FE C4 E8 E2  // t...............
   13E50: F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5 2B FD 8B F7  // .R..J..&....+...
   13E60: 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E 5E 24 2E 8E  // +.Z.........^$..
   13E70: 06 64 24 E8 5D FA 74 11 80 3E 49 04 07 7C 18 2E  // .d$.].t..>I..|..
   13E80: 8E 06 62 24 74 03 E9 B1 00 E8 49 FC 8B D8 26 8B  // ..b$t.....I...&.
   13E90: 07 8B EC 89 46 1A C3 A1 50 04 E8 B7 FC 8B F0 BB  // ....F...P.......
   13EA0: 08 00 2B E3 8B EC 80 3E 49 04 06 75 1F B9 04 00  // ..+....>I..u....
   13EB0: 26 8A 04 88 46 00 45 26 8A 84 00 20 88 46 00 45  // &...F.E&... .F.E
   13EC0: 83 C6 50 E2 EB B8 00 02 B2 80 EB 17 D1 E6 B9 04  // ..P.............
   13ED0: 00 E8 56 FC 81 C6 00 20 E8 4F FC 81 EE B0 1F E2  // ..V.... .O......
   13EE0: F0 EB E2 2B EB C4 3E 0C 01 32 F6 80 FB 0E 75 09  // ...+..>..2....u.
   13EF0: 26 83 7D FE 10 75 02 B6 80 16 1F 8B F5 8B CB F6  // &.}..u..........
   13F00: C6 80 74 01 47 56 57 F3 A6 5F 5E 74 23 FE C0 03  // ..t.GVW.._^t#...
   13F10: FB F6 C6 80 74 01 47 FE CA 75 E2 FE CC 74 0F 2E  // ....t.G..u...t..
   13F20: 8E 1E 5E 24 C4 3E 7C 00 B0 80 B2 80 EB CB 32 C0  // ..^$.>|.......2.
   13F30: 8B E5 03 E3 8B EC 89 46 1A C3 80 3E 49 04 13 7C  // .......F...>I..|
   13F40: 05 75 02 EB 5A C3 2E 8E 06 60 24 E8 18 FC 8B F0  // .u..Z....`$.....
   13F50: 8B 1E 85 04 2B E3 8B EC B8 05 08 B9 05 00 BA CE  // ....+...........
   13F60: 03 80 3E 49 04 0F 72 1A F6 06 87 04 60 75 13 B4  // ..>I..r.....`u..
   13F70: 0A F7 C6 01 00 75 02 B4 05 B0 07 EF B8 05 18 B9  // .....u..........
   13F80: 05 01 EF 51 8B CB 26 8A 04 F6 D0 88 46 00 45 03  // ...Q..&.....F.E.
   13F90: 36 4A 04 E2 F1 58 EF B8 00 01 32 D2 E9 44 FF 2E  // 6J...X....2..D..
   13FA0: 8E 06 60 24 A1 50 04 8B D0 32 F6 52 8A C4 32 E4  // ..`$.P...2.R..2.
   13FB0: F7 26 4A 04 F7 26 85 04 5A 03 C2 8B F0 8B 1E 85  // .&J..&..Z.......
   13FC0: 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1 E7 03 C1 E6  // .+...S.>J.O.....
   13FD0: 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A C0 74 03 80  // ....2.&......t..
   13FE0: CC 01 46 E2 F1 88 66 00 45 03 F7 4B 75 E3 5B B8  // ..F...f.E..Ku.[.
   13FF0: 00 01 32 D2 E9 EC FE 33 ED EB 03 BD 01 00 2E 8E  // ..2....3........
   14000: 1E 5E 24 2E 8E 06 64 24 8A 26 49 04 E8 C4 F8 74  // .^$...d$.&I....t
   14010: 0F 2E 8E 06 62 24 80 FC 07 74 05 7C 3D E9 0B 02  // ....b$...t.|=...
   14020: 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87 50 04 8B D0  // ......2.....P...
   14030: A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1 E7 0A DB 74  // .J...2.........t
   14040: 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA 8B C6 0B ED  // ....L.....u.....
   14050: 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E 8E 06 64 24  // u.....G...P...d$
   14060: A1 50 04 E8 EE FA 8B F8 A0 50 04 8A 26 4A 04 8B  // .P.......P..&J..
   14070: E8 58 A8 80 74 08 24 7F C5 36 7C 00 EB 04 C5 36  // .X..t.$..6|....6
   14080: 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80 FF 06 74 69  // ....2.........ti
   14090: D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A D8 8A F8 8B  // .....U..........
   140A0: C5 50 B2 04 F6 C6 80 75 27 AC E8 55 FA 23 C3 AB  // .P.....u'..U.#..
   140B0: AC E8 4E FA 23 C3 26 89 85 FE 1F 83 C7 4E FE CA  // ..N.#.&......N..
   140C0: 75 E7 83 EE 08 81 EF 3E 01 58 E8 72 00 E2 D2 C3  // u......>.X.r....
   140D0: AC E8 2E FA 23 C3 26 31 05 AC E8 25 FA 23 C3 26  // ....#.&1...%.#.&
   140E0: 31 85 00 20 83 C7 50 FE CA 75 E5 83 EE 08 81 EF  // 1.. ..P..u......
   140F0: 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50 B2 04 F6 C3  // >.X.I......P....
   14100: 80 74 1F AC 26 30 05 AC 26 30 85 00 20 83 C7 50  // .t..&0..&0.. ..P
   14110: FE CA 7F EF 83 EE 08 81 EF 3F 01 58 E8 20 00 E2  // .........?.X. ..
   14120: DA C3 AC AA AC 26 88 85 FF 1F 83 C7 4F FE CA 7F  // .....&......O...
   14130: F1 83 EE 08 81 EF 3F 01 58 E8 03 00 E2 BD C3 FE  // ......?.X.......
   14140: C0 38 E0 72 06 32 C0 81 C7 F0 00 C3 8A 16 85 04  // .8.r.2..........
   14150: F6 E2 8B F0 32 F6 8B EA 66 0F B6 06 51 04 F6 E2  // ....2...f...Q...
   14160: 66 0F B7 16 4A 04 83 FA 64 75 03 BA 68 00 83 FA  // f...J...du..h...
   14170: 5A 75 03 BA 60 00 81 FA AF 00 75 03 BA B0 00 52  // Zu..`.....u....R
   14180: F7 E2 66 0F B7 F8 66 0F B6 06 50 04 66 03 F8 66  // ..f...f...P.f..f
   14190: C1 CF 10 03 FA 66 C1 C7 03 81 CF 00 FF 66 C1 C7  // .....f.......f..
   141A0: 10 5A 8A E2 4A C1 E2 03 A0 50 04 50 C5 06 0C 01  // .Z..J....P.P....
   141B0: 03 F0 2E 8E 06 60 24 58 57 51 50 9C FC 8B CD E8  // .....`$XWQP.....
   141C0: 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73 02 8A C3 26  // ;..........s...&
   141D0: 88 05 66 47 FE CD 75 EF 66 03 FA E2 E2 9D 58 59  // ..fG..u.f.....XY
   141E0: 5F 83 C7 08 FE C0 38 E0 72 0E 51 32 C0 8B CD 49  // _.....8.r.Q2...I
   141F0: 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC C3 06 52 33  // .......Y+.....R3
   14200: C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7 10 E8 40 A4  // ...f.....f....@.
   14210: 74 16 38 E0 74 12 0F B6 D0 E8 91 C9 8A E0 66 C1  // t.8.t.........f.
   14220: C7 10 8B F8 66 C1 C7 10 5A 07 C3 80 FC 13 7C 0B  // ....f...Z.....|.
   14230: 0F 84 18 FF 80 FC 62 0F 84 11 FF E8 01 00 C3 80  // ......b.........
   14240: FC 11 75 06 80 E3 80 80 CB 0F 50 53 8A DF 32 FF  // ..u.......PS..2.
   14250: D1 E3 8B 97 50 04 5B 2E 8E 06 60 24 E8 07 F9 8B  // ....P.[...`$....
   14260: F8 8B 2E 85 04 58 32 F6 52 8B 36 4A 04 56 8A 26  // .....X2.R.6J.V.&
   14270: 85 04 C5 36 0C 01 80 FC 0E 75 09 83 7C FE 10 75  // ...6.....u..|..u
   14280: 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3 80 75 6D B2  // ...F.........um.
   14290: C4 B8 02 0F EF 5A 58 50 52 4A 8A E0 57 51 51 57  // .....ZXPRJ..WQQW
   142A0: 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE C4 38 D4 76  // ..2......_G..8.v
   142B0: 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59 E2 E0 59 5F  // .2...I..G..Y..Y_
   142C0: BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51 57 8B CD AC  // ........[KZQW...
   142D0: 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5 42 3B D3 76  // &.%....._G+.B;.v
   142E0: 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59 E2 DD BA CE  // .3...I..G..Y....
   142F0: 03 B8 03 00 EF B2 C4 B8 02 0F EF C3 B2 CE B8 03  // ................
   14300: 18 EF EB BC 2E 8E 1E 5E 24 80 3E 63 04 B4 74 0B  // .......^$.>c..t.
   14310: BA CC 03 EC A8 01 75 04 CD 42 C3 C3 E8 D1 F8 0A  // ......u..B......
   14320: FF 75 1C 8A E3 80 E4 1F 80 26 66 04 E0 08 26 66  // .u.......&f...&f
   14330: 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1 05 D2 EB E8  // ..-...f... .....
   14340: 91 F5 74 19 A0 66 04 24 DF 80 E3 01 74 02 0C 20  // ..t..f.$....t.. 
   14350: A2 66 04 24 10 0C 02 0A D8 E8 53 00 C3 E8 7E F8  // .f.$......S...~.
   14360: C3 53 50 80 E3 0F 8A FB D0 E3 81 E3 10 07 0A DF  // .SP.............
   14370: E8 60 F5 74 0E B4 00 8A C3 E8 2C F3 0B ED 74 03  // .`.t......,...t.
   14380: 26 88 1D 8A C3 E8 0B 00 0B ED 74 04 26 88 5D 10  // &.........t.&.].
   14390: 58 5B C3 8A E0 1E 2E 8E 1E 5E 24 80 3E 49 04 33  // X[.......^$.>I.3
   143A0: 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8 30 F8 C3 9C  // ............0...
   143B0: FA E8 9F 05 B2 C0 B9 03 00 B4 01 8A C4 EE 8A C3  // ................
   143C0: EE 0B ED 74 04 47 26 88 1D FE C4 80 C3 02 E2 EB  // ...t.G&.........
   143D0: B0 20 EE 9D C3 2E 8E 1E 5E 24 8A 26 49 04 E8 F2  // . ......^$.&I...
   143E0: F4 74 0A 80 FC 07 77 06 74 03 E8 C0 F5 C3 80 FC  // .t....w.t.......
   143F0: 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA CE 03 B0 08  // .|.tL...........
   14400: EF 2E 8E 1E 60 24 F6 C3 80 75 1C B2 C4 B8 02 FF  // ....`$...u......
   14410: EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4 FF 88 25 EF  // ..%.......%...%.
   14420: B2 CE B8 08 FF EF C3 B8 03 18 EF B2 C4 B0 02 8A  // ................
   14430: E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8 03 00 EF EB  // ...%...%........
   14440: E1 50 2E 8E 06 60 24 A1 4A 04 C1 E0 03 F7 E2 03  // .P...`$.J.......
   14450: C1 8B F8 58 26 88 05 C3 2E 8E 1E 5E 24 8A 26 49  // ...X&......^$.&I
   14460: 04 E8 6F F4 74 0F 80 FC 07 77 0B 74 08 E8 5F F5  // ..o.t....w.t.._.
   14470: 8B EC 89 46 1A C3 80 FC 13 7C 03 74 29 C3 E8 35  // ...F.....|.t)..5
   14480: F7 8A CC 2E 8E 1E 60 24 BA CE 03 32 FF B8 04 03  // ......`$...2....
   14490: EF D0 E7 8A 1D 22 D9 74 03 80 CF 01 FE CC 7D F0  // .....".t......}.
   144A0: 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03 F7 E2 03 C1  // ...~...J........
   144B0: 8B F8 2E 8E 1E 60 24 8A 05 8B EC 88 46 1A C3 2E  // .....`$.....F...
   144C0: 8E 1E 5E 24 8A 3E 62 04 8A CF D0 E1 32 ED BE 50  // ..^$.>b.....2..P
   144D0: 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76 4A 2E 8E 06  // .......I.<.vJ...
   144E0: 64 24 E8 EE F3 75 33 8A 1E 4A 04 8A F8 8A C6 F6  // d$...u3..J......
   144F0: E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B F9 8A C7 AA  // .........N......
   14500: D1 E9 41 FE C2 38 DA 73 59 89 14 8B 16 63 04 B0  // ..A..8.sY....c..
   14510: 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E 06 62 24 80  // .............b$.
   14520: F9 07 74 C3 E9 83 00 75 04 32 D2 EB 0F 3C 0A 75  // ..t....u.2...<.u
   14530: 1D 3A 36 84 04 75 03 E9 93 00 FE C6 89 14 E8 92  // .:6..u..........
   14540: F3 75 05 80 F9 07 7F 05 8B C2 E8 4C F6 C3 3C 07  // .u.........L..<.
   14550: 75 04 E8 D3 8F C3 3C 08 75 83 0A D2 74 DE FE CA  // u.....<.u...t...
   14560: EB DA 32 FF 32 D2 2B CB 3A 36 84 04 74 06 FE C6  // ..2.2.+.:6..t...
   14570: 03 CB EB 95 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A  // ........c.......
   14580: E1 FE C0 EF 2B FB 2B FB 26 8A 65 02 50 8B 3E 4E  // ....+.+.&.e.P.>N
   14590: 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3 8B C8 06 1F  // ................
   145A0: F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01 00 B4 0A E8  // ....X. .........
   145B0: C2 C6 FE C2 3A 16 4A 04 74 03 89 14 C3 32 FF 32  // ....:.J.t....2.2
   145C0: D2 89 14 3A 36 84 04 74 2E FE C6 EB ED 89 14 2E  // ...:6..t........
   145D0: 8E 06 64 24 E8 FC F2 74 0E 2E 8E 06 62 24 80 F9  // ..d$...t....b$..
   145E0: 07 74 04 32 FF EB 10 8B C2 E8 AD F5 8B F9 D1 E7  // .t.2............
   145F0: 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84 04 8A 16 4A  // O..J...3..6....J
   14600: 04 FE CA B0 01 E9 70 F7 2E 8E 1E 5E 24 F6 06 87  // ......p....^$...
   14610: 04 08 74 03 CD 42 C3 E8 76 F6 8B EC C6 46 1B 00  // ..t..B..v....F..
   14620: C3 2E 8E 1E 5E 24 8A DF 32 FF D1 E3 89 97 50 04  // ....^$..2.....P.
   14630: D0 EB 38 1E 62 04 75 05 8B C2 E8 5C F5 C3 2E 8E  // ..8.b.u....\....
   14640: 1E 5E 24 8A DF 32 FF D1 E3 8B 97 50 04 8B 0E 60  // .^$..2.....P...`
   14650: 04 8B EC 89 4E 16 89 56 12 C3 2E 8E 1E 5E 24 A0  // ....N..V.....^$.
   14660: 87 04 24 80 0A 06 49 04 8A 26 4A 04 F6 06 87 04  // ..$...I..&J.....
   14670: 08 75 2D E8 5D F2 74 07 80 3E 49 04 07 7F 21 51  // .u-.].t..>I...!Q
   14680: 8A CC 8A 2E 84 04 BE 2F 98 81 FE 38 98 74 10 2E  // ......./...8.t..
   14690: 3B 0C 74 05 83 C6 03 EB F0 24 80 2E 0A 44 02 59  // ;.t......$...D.Y
   146A0: 8A 3E 62 04 8B EC 89 46 1A 89 5E 0E 89 4E 16 89  // .>b....F..^..N..
   146B0: 56 12 C3 84 18 23 84 2B 33 84 2A 32 2E 8E 1E 5E  // V....#.+3.*2...^
   146C0: 24 3C 04 7F 1B 50 52 BA CC 03 EC A8 01 5A 58 74  // $<...PR......ZXt
   146D0: 08 80 3E 63 04 D4 74 08 C3 80 3E 63 04 B4 75 F8  // ..>c..t...>c..u.
   146E0: 3C 1C 73 F4 32 E4 8B E8 D1 E5 2E FF A6 6B 98 A3  // <.s.2........k..
   146F0: 98 C3 98 D5 98 0A 99 54 98 54 98 54 98 2F 99 47  // .......T.T.T./.G
   14700: 99 4B 99 54 98 54 98 54 98 54 98 54 98 54 98 79  // .K.T.T.T.T.T.T.y
   14710: 99 54 98 7D 99 98 99 54 98 D7 99 54 98 E5 99 00  // .T.}...T...T....
   14720: 9A 07 9A 13 9A 37 9A 80 3E 49 04 13 74 15 E8 BF  // .....7..>I..t...
   14730: F4 8B C3 86 E0 E8 70 EF 0B ED 74 07 8A C7 32 FF  // ......p...t...2.
   14740: 26 88 01 E8 93 F4 C3 E8 A6 F4 8A C7 E8 44 FC 0B  // &............D..
   14750: ED 74 F0 26 88 7D 11 EB EA 80 3E 49 04 13 74 E3  // .t.&.}....>I..t.
   14760: 06 E8 8C F4 1F 0B ED 74 07 8B F2 B9 11 00 F3 A4  // .......t........
   14770: 8B F2 E8 DE 01 32 E4 B9 10 00 B2 C0 9C FA 8A C4  // .....2..........
   14780: EE AC EE 9D FE C4 E2 F4 AC E8 07 FC EB B5 80 FB  // ................
   14790: 01 77 B0 E8 43 F4 B2 C0 B0 30 E8 FB F0 24 F7 80  // .w..C....0...$..
   147A0: 26 65 04 DF 80 FB 00 74 07 0C 08 80 0E 65 04 20  // &e.....t.....e. 
   147B0: EE EB 90 E8 9D 01 8A C3 B2 C0 E8 DB F0 8B C8 EE  // ................
   147C0: B0 20 EE 8B EC 88 4E 0F E9 78 FF B3 11 EB E4 8B  // . ....N..x......
   147D0: FA E8 05 F4 B9 10 00 32 E4 B2 C0 8A C4 9C FA EE  // .......2........
   147E0: 42 EC 26 88 05 FE C4 4A EE 9D 47 E2 EE 9C FA B0  // B.&....J..G.....
   147F0: 11 EE 42 EC 9D 26 88 05 E8 E3 F3 EB 5A E8 CE 00  // ..B..&......Z...
   14800: C3 8B FA 51 8B C3 26 8A 35 26 8A 6D 01 26 8A 4D  // ...Q..&.5&.m.&.M
   14810: 02 E8 CA 00 83 C7 03 43 59 E2 E8 C3 0A DB 75 1A  // .......CY.....u.
   14820: E8 B6 F3 B2 C0 B0 30 E8 6E F0 24 7F F6 C7 01 74  // ......0.n.$....t
   14830: 02 0C 80 B4 30 E8 70 EE EB 1D FE CB 75 1C E8 98  // ....0.p.....u...
   14840: F3 B2 C0 B0 30 E8 50 F0 EE A8 80 75 03 C0 E7 02  // ....0.P....u....
   14850: B4 34 8A C7 E8 51 EE E8 7F F3 C3 8A C3 E8 D1 00  // .4...Q..........
   14860: 8B EC 89 4E 16 88 76 13 C3 8B FA 51 8B C3 E8 C3  // ...N..v....Q....
   14870: 00 26 88 35 26 88 6D 01 26 88 4D 02 83 C7 03 43  // .&.5&.m.&.M....C
   14880: 59 E2 E8 C3 BA C6 03 8A C3 EE C3 BA C6 03 EC 32  // Y..............2
   14890: E4 8B EC 89 46 0E C3 E8 3F F3 B2 C0 B0 34 E8 F7  // ....F...?....4..
   148A0: EF 8A F8 EE B0 30 E8 EF EF B3 01 A8 80 75 05 B3  // .....0.......u..
   148B0: 00 C0 EF 02 8B EC 89 5E 0E EB 9C 51 8B C3 E8 73  // .......^...Q...s
   148C0: 00 E8 2A 00 8A C3 E8 52 00 43 59 E2 EE C3 F6 06  // ..*....R.CY.....
   148D0: 89 04 02 74 03 E8 16 00 8A C3 E8 39 00 C3 F6 06  // ...t.......9....
   148E0: 89 04 02 74 03 E8 06 00 8A C3 E8 2E 00 C3 50 B0  // ...t..........P.
   148F0: 1E F6 E6 50 B0 3B F6 E5 50 B0 0B F6 E1 59 03 C1  // ...P.;..P....Y..
   14900: 59 03 C1 B1 64 F6 F1 80 FC 32 7C 02 FE C0 8A F0  // Y...d....2|.....
   14910: 8A E8 8A C8 58 C3 52 E8 39 00 5A 53 8B DA BA C8  // ....X.R.9.ZS....
   14920: 03 9C FA EE 42 8A C7 EE 8A C5 EE 8A C1 EE 9D 5B  // ....B..........[
   14930: C3 E8 1F 00 53 9C FA BA C7 03 EE 42 42 EC 8A F8  // ....S......BB...
   14940: EB 00 EB 00 EC 8A E8 EB 00 EB 00 EC 8A C8 8A F7  // ................
   14950: 9D 5B C3 50 51 E8 81 F2 B9 FF 7F EC A8 08 75 02  // .[.PQ.........u.
   14960: E2 F9 59 58 C3 2E 8E 1E 5E 24 8B F8 24 0F 81 E7  // ..YX....^$..$...
   14970: F0 00 C1 EF 03 83 FF 06 7F 18 2E FF A5 FB 9A 03  // ................
   14980: 9B 18 9B B6 9B 12 9C 3C 03 74 08 3C 04 7F 03 E8  // .......<.t.<....
   14990: CF 01 C3 BA C4 03 B0 03 8A E3 EF C3 3C 04 77 F2  // ............<.w.
   149A0: 50 53 50 52 8B 16 63 04 B0 07 E8 EB EE 8A E0 D0  // PSPR..c.........
   149B0: EC 80 E4 01 A8 40 74 03 80 CC 02 B0 12 E8 D8 EE  // .....@t.........
   149C0: 40 A3 85 04 B0 09 E8 CF EE A8 80 74 04 D1 2E 85  // @..........t....
   149D0: 04 A1 85 04 8B D0 3D F4 01 73 1B BA E0 01 3D C2  // ......=..s....=.
   149E0: 01 73 13 BA 90 01 3D 7C 01 73 0B BA 5E 01 3D 4A  // .s....=|.s..^.=J
   149F0: 01 73 03 BA C8 00 89 16 85 04 5A 58 C6 06 84 04  // .s........ZX....
   14A00: FF E8 5D 01 5B 58 8A DF 32 FF 0A C0 74 0E B3 0E  // ..].[X..2...t...
   14A10: 3C 01 74 08 B3 08 3C 02 74 02 B3 10 8A CB 8A E9  // <.t...<.t.......
   14A20: 81 E9 01 02 80 F9 08 7E 04 81 E9 01 01 87 1E 85  // .......~........
   14A30: 04 53 E8 5B F2 5B E8 85 02 C3 0A C0 74 11 FE C8  // .S.[.[......t...
   14A40: 74 1A FE C8 74 38 FE C8 74 3C FE C8 74 40 C3 89  // t...t8..t<..t@..
   14A50: 2E 7C 00 8C 06 7E 00 C3 8C C8 8E C0 FE CA 0A DB  // .|...~..........
   14A60: 74 07 32 FF 2E 8A 97 F6 9B 89 0E 85 04 88 16 84  // t.2.............
   14A70: 04 89 2E 0C 01 8C 06 0E 01 C3 00 0D 18 2A E8 09  // .............*..
   14A80: 03 B9 0E 00 EB D6 BD 06 6B B9 08 00 EB CA BD 19  // ........k.......
   14A90: 73 B9 10 00 EB C2 0A C0 75 BD 8B 0E 85 04 8A 16  // s.......u.......
   14AA0: 84 04 80 FF 07 77 35 80 FF 01 77 10 0A FF 75 06  // .....w5...w...u.
   14AB0: C4 2E 7C 00 EB 26 C4 2E 0C 01 EB 20 80 FF 02 75  // ..|..&..... ...u
   14AC0: 0B 8C CD 8E C5 2E 8B 2E F8 83 EB 10 0E 07 8A DF  // ................
   14AD0: 32 FF 80 EB 02 D1 E3 2E 8B AF 69 9C 8B C5 8B EC  // 2.........i.....
   14AE0: 89 4E 16 89 56 12 89 46 0A 8C 46 1E C3 19 73 06  // .N..V..F..F...s.
   14AF0: 6B 06 6F 06 73 19 73 19 83 53 06 8A 26 49 04 E8  // k.o.s.s..S..&I..
   14B00: CD C3 26 8A 47 02 26 8A 67 33 F6 C4 01 74 22 BD  // ..&.G.&.g3...t".
   14B10: 19 73 3C 10 7D 0E E8 71 02 8C 06 0E 01 3C 0E 7D  // .s<.}..q.....<.}
   14B20: 07 BD 06 6B 8C 0E 0E 01 89 2E 0C 01 E8 10 01 EB  // ...k............
   14B30: 2D B4 84 3C 10 7D 13 B4 81 3C 0E 74 0D 7F 15 B4  // -..<.}...<.t....
   14B40: 02 3C 08 74 05 80 CC 80 EB 0A 26 F6 47 05 01 74  // .<.t......&.G..t
   14B50: 03 80 E4 7F 86 C4 32 DB E8 06 00 E8 C9 01 07 5B  // ......2........[
   14B60: C3 8B F8 8B F2 BA CE 03 EC B8 05 00 EF B8 06 04  // ................
   14B70: EF B2 C4 EC B8 02 04 EF B8 04 07 EF 8B D6 8B C7  // ................
   14B80: 50 24 7F 0A C0 74 22 0E 07 33 D2 B9 00 01 3C 04  // P$...t"..3....<.
   14B90: 75 07 B7 10 BD 19 73 EB 10 FE C8 75 07 B7 0E E8  // u.....s....u....
   14BA0: E8 01 EB 05 B7 08 BD 06 6B E8 2D 00 58 A8 80 74  // ........k.-.X..t
   14BB0: 00 BA C4 03 B8 02 03 EF B8 04 02 EF B2 CC EC A8  // ................
   14BC0: 01 B8 06 0E 75 02 B4 0A B2 CE 50 EC 58 EF B0 04  // ....u.....P.X...
   14BD0: EE 32 C0 EE B8 05 10 EF C3 FC 0B C9 75 01 C3 80  // .2..........u...
   14BE0: FF 0E 75 0A 26 83 7E FE 10 75 03 80 CD 80 1E 06  // ..u.&.~..u......
   14BF0: 1F 2E 8E 06 60 24 8B FA C1 E7 05 B0 40 53 80 E3  // ....`$......@S..
   14C00: 03 F6 E3 5B F6 C3 04 74 02 04 20 86 E0 8B D0 03  // ...[...t.. .....
   14C10: FA 8B F5 E3 28 32 C0 86 FB 32 FF 51 F6 C5 80 74  // ....(2...2.Q...t
   14C20: 01 46 8B CB F3 A4 83 FB 20 74 07 B9 20 00 2B CB  // .F...... t.. .+.
   14C30: F3 AA 59 F6 C5 80 74 01 46 FE C9 75 DE 1F C3 8A  // ..Y...t.F..u....
   14C40: 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D 0C 8C C5  // &I.P.W.>..&.}...
   14C50: 0B EF 74 30 8B EF 83 C7 07 26 8A 05 3C FF 74 24  // ..t0.....&..<.t$
   14C60: 38 E0 74 03 47 EB F2 8B FD 26 8A 05 FE C8 A2 84  // 8.t.G....&......
   14C70: 04 26 8B 45 01 A3 85 04 26 C4 7D 03 89 3E 0C 01  // .&.E....&.}..>..
   14C80: 8C 06 0E 01 5F 07 58 C3 26 F6 47 33 01 74 01 C3  // ...._.X.&.G3.t..
   14C90: C4 1E A8 04 26 C4 5F 08 8C C0 0B C3 74 1F BF 0B  // ....&._.....t...
   14CA0: 00 26 8A 01 3C FF 74 15 47 38 06 49 04 75 F2 26  // .&..<.t.G8.I.u.&
   14CB0: 8A 07 32 E4 87 06 85 04 8B D8 E8 01 00 C3 8B 16  // ..2.............
   14CC0: 63 04 8A 26 85 04 FE CC 80 E4 1F 9C FA 80 FA D4  // c..&............
   14CD0: 74 0B B0 14 EE 42 EC 24 E0 0A C4 EE 4A B0 09 EE  // t....B.$....J...
   14CE0: 42 EC 24 E0 0A C4 EE 9D 8A C8 8B C3 8A 16 85 04  // B.$.............
   14CF0: F6 F2 80 3E 84 04 FF 75 07 A2 84 04 FE 0E 84 04  // ...>...u........
   14D00: F6 E2 F6 C1 80 74 02 D1 E0 48 8A E0 B0 12 8B 16  // .....t...H......
   14D10: 63 04 EF A0 4A 04 8A 26 84 04 FE C4 F6 E4 D1 E0  // c...J..&........
   14D20: 05 00 01 A3 4C 04 C3 8A 26 49 04 50 06 57 C4 3E  // ....L...&I.P.W.>
   14D30: A8 04 26 C4 7D 08 8C C5 0B EF 74 4A 8B EF 83 C7  // ..&.}.....tJ....
   14D40: 0B 26 8A 05 3C FF 74 3E 38 E0 74 03 47 EB F2 8B  // .&..<.t>8.t.G...
   14D50: FD 26 8A 3D 26 8A 5D 01 26 8B 4D 02 26 8B 55 04  // .&.=&.].&.M.&.U.
   14D60: 26 8A 45 0A 3C FF 74 02 FE C8 50 A0 84 04 FE C0  // &.E.<.t...P.....
   14D70: F6 26 85 04 A3 85 04 58 A2 84 04 26 C4 7D 06 8B  // .&.....X...&.}..
   14D80: EF 32 C0 E8 DB FD 5F 07 58 C3 50 53 51 52 2E A1  // .2...._.X.PSQR..
   14D90: 68 24 0B C0 74 09 2E 8B 2E F8 83 0E 07 EB 08 B8  // h$..t...........
   14DA0: 30 11 B7 02 E8 CD BE 5A 59 5B 58 C3 3C 04 7C 01  // 0......ZY[X.<.|.
   14DB0: C3 E3 FD 53 2E 8E 1E 5E 24 86 FB 32 FF D1 E3 8B  // ...S...^$..2....
   14DC0: FB 81 C7 50 04 8B 35 5B 89 15 56 8B F0 51 53 26  // ...P..5[..V..QS&
   14DD0: 8A 46 00 45 3C 0D 7F 1F 75 04 32 D2 EB 40 3C 0A  // .F.E<...u.2..@<.
   14DE0: 74 32 3C 07 75 05 E8 3F 87 EB 62 3C 08 75 08 0A  // t2<.u..?..b<.u..
   14DF0: D2 74 5A FE CA EB 27 F7 C6 02 00 74 05 26 8A 5E  // .tZ...'....t.&.^
   14E00: 00 45 B9 01 00 B4 09 E8 6A BE FE C2 3A 16 4A 04  // .E......j...:.J.
   14E10: 72 0C 32 D2 89 15 3A 36 84 04 73 06 FE C6 89 15  // r.2...:6..s.....
   14E20: EB 2B 50 E8 AD EA 75 08 B8 00 08 E8 46 BE EB 09  // .+P...u.....F...
   14E30: 80 3E 49 04 07 74 F1 32 E4 86 3E 62 04 53 8A FC  // .>I..t.2..>b.S..
   14E40: 55 E8 25 00 5D 5B 86 3E 62 04 58 8B 15 5B 59 E2  // U.%.][.>b.X..[Y.
   14E50: 15 5A F7 C6 01 00 75 02 89 15 8B 05 3A 3E 62 04  // .Z....u.....:>b.
   14E60: 75 03 E8 34 ED C3 E9 64 FF 33 C9 8A 36 84 04 8A  // u..4...d.3..6...
   14E70: 16 4A 04 FE CA B8 01 06 E8 F9 BD C3 2E 8E 1E 5E  // .J.............^
   14E80: 24 0A C0 75 0D E8 18 00 8B EC 89 5E 0E C6 46 1A  // $..u.......^..F.
   14E90: 1A C3 3C 01 75 09 E8 41 00 8B EC C6 46 1A 1A C3  // ..<.u..A....F...
   14EA0: A0 8A 04 BF F6 A0 2E 3A 05 72 04 BB FF FF C3 32  // .......:.r.....2
   14EB0: E4 D1 E0 03 F8 2E 8B 5D 04 0A DB 74 05 0A FF 75  // .......]...t...u
   14EC0: 04 C3 86 FB C3 A0 10 04 24 30 3C 30 74 06 F6 C3  // ........$0<0t...
   14ED0: 01 75 EF C3 F6 C3 01 74 E9 C3 BF F6 A0 2E 8A 0D  // .u.....t........
   14EE0: 32 C0 83 C7 04 2E 3B 1D 74 12 86 FB 2E 3B 1D 74  // 2.....;.t....;.t
   14EF0: 0B 83 C7 02 FE C0 38 C8 7E EB B0 FF A2 8A 04 C3  // ......8.~.......
   14F00: BB 08 00 F6 06 89 04 02 74 0E BB 07 00 BA CC 03  // ........t.......
   14F10: EC A8 01 74 18 BB 08 00 BA B4 03 E8 DF EC 74 21  // ...t..........t!
   14F20: B7 01 E8 8C E9 80 FA D4 74 17 86 FB C3 BA D4 03  // ........t.......
   14F30: E8 CA EC 74 0C B7 02 E8 77 E9 80 FA B4 74 02 86  // ...t....w....t..
   14F40: FB C3 0F 08 0F 08 0F 08 0F 08 03 01 03 01 01 01  // ................
   14F50: 00 08 01 01 01 01 01 01 01 01 0F 01 0F 08 0F 04  // ................
   14F60: 00 02 0F 02 01 01 0F 01 FF 01 FF E0 0F 00 00 00  // ................
   14F70: 00 07 02 08 FF 0E 00 00 3F 00 10 01 08 00 00 00  // ........?.......
   14F80: 00 01 00 02 02 01 00 04 04 01 00 05 02 05 00 06  // ................
   14F90: 01 06 05 06 00 08 01 08 00 07 02 07 06 07 CA 00  // ................
   14FA0: 34 00 90 00 96 00 00 00 00 00 00 00 5F 57 C3 90  // 4..........._W..
   14FB0: 50 66 52 E8 F4 FF FF FF 81 EF 10 00 00 00 2E 8B  // PfR.............
   14FC0: 07 66 BA F8 0C EF 66 BA FC 0C ED 32 C0 66 8B F8  // .f....f....2.f..
   14FD0: 66 5A 58 C3 66 B8 4F 03 66 52 66 56 53 57 50 0A  // fZX.f.O.fRfVSWP.
   14FE0: FF 75 44 E8 C8 FF FF FF 66 33 F6 66 BB 53 00 E8  // .uD.....f3.f.S..
   14FF0: 48 00 00 00 C1 E8 10 F6 C4 40 75 2B 66 81 E2 FF  // H........@u+f...
   15000: 02 66 D1 E2 66 8B C2 66 40 C1 E0 10 66 8B C2 66  // .f..f..f@...f..f
   15010: BB 13 00 E8 30 00 00 00 66 BB 12 00 E8 27 00 00  // ....0...f....'..
   15020: 00 66 58 32 E4 66 50 58 5F 5B 66 5E 66 5A C3 90  // .fX2.fPX_[f^fZ..
   15030: 66 B8 4F 03 C3 90 66 B8 4F 03 C3 90 66 52 E8 11  // f.O...f.O...fR..
   15040: 00 00 00 ED 66 5A C3 90 66 52 E8 05 00 00 00 EF  // ....fZ..fR......
   15050: 66 5A C3 90 66 8B D7 50 33 C0 66 8B C3 66 03 C6  // fZ..f..P3.f..f..
   15060: C1 E0 02 EF 66 83 C2 04 58 C3 04 4A F7 49 F7 49  // ....f...X..J.I.I
   15070: F7 49 E2 49 E2 49 E2 49 E2 49 24 46 9B 46 C5 46  // .I.I.I.I.I$F.F.F
   15080: 06 48 05 48 05 48 4B 48 B0 48 E0 48 9D 49 C6 49  // .H.H.HKH.H.H.I.I
   15090: C6 49 3D 48 30 48 30 48 30 48 30 48 30 48 4B 48  // .I=H0H0H0H0H0HKH
   150A0: B0 48 E0 48 9D 49 CB 49 11 4A C6 49 C6 49 FF FF  // .H.H.I.I.J.I.I..
   150B0: FF FF FF FF 00 00 FF FF 00 00 FF FF 00 00 FF 00  // ................
   150C0: 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00 00 00  // ................
   150D0: 08 10 00 08 10 18 00 08 10 18 28 44 01 28 44 02  // ..........(D.(D.
   150E0: 36 58 03 16 58 03 4D 45 03 01 45 03 29 44 04 42  // 6X..X.ME..E.)D.B
   150F0: 44 04 52 44 04 28 44 03 00 00 00 00 D5 4B 00 02  // D.RD.(D......K..
   15100: D5 4B 01 02 D5 4B 02 02 D5 4B 03 02 D5 4B 04 02  // .K...K...K...K..
   15110: D5 4B 05 02 CF 4D 00 02 CF 4D 01 02 CF 4D 02 02  // .K...M...M...M..
   15120: CF 4D 03 02 CF 4D 04 02 CF 4D 05 02 04 4E 00 02  // .M...M...M...N..
   15130: 04 4E 01 02 04 4E 02 02 04 4E 03 02 04 4E 04 02  // .N...N...N...N..
   15140: 04 4E 05 02 3F 50 00 02 3F 50 01 02 3F 50 02 02  // .N..?P..?P..?P..
   15150: 3F 50 03 02 3F 50 04 02 3F 50 05 02 3F 50 00 02  // ?P..?P..?P..?P..
   15160: 3F 50 01 02 3F 50 02 02 3F 50 03 02 3F 50 04 02  // ?P..?P..?P..?P..
   15170: 3F 50 05 02 06 4F 00 02 06 4F 01 02 06 4F 02 02  // ?P...O...O...O..
   15180: 06 4F 03 02 06 4F 04 02 06 4F 05 02 42 4F 00 02  // .O...O...O..BO..
   15190: 42 4F 01 02 42 4F 02 02 42 4F 03 02 42 4F 04 02  // BO..BO..BO..BO..
   151A0: 42 4F 05 02 B3 4E 00 02 B3 4E 01 02 B3 4E 02 02  // BO...N...N...N..
   151B0: B3 4E 03 02 B3 4E 04 02 B3 4E 05 02 E7 4E 00 02  // .N...N...N...N..
   151C0: E7 4E 01 02 E7 4E 02 02 E7 4E 03 02 E7 4E 04 02  // .N...N...N...N..
   151D0: E7 4E 05 02 97 52 00 00 CA 52 01 00 CA 52 02 00  // .N...R...R...R..
   151E0: B7 52 00 00 A5 51 00 02 9E 4F 00 02 9E 4F 01 02  // .R...Q...O...O..
   151F0: 9E 4F 02 02 9E 4F 03 02 9E 4F 04 02 9E 4F 05 02  // .O...O...O...O..
   15200: BD 51 00 02 12 54 05 00 12 54 01 00 12 54 00 00  // .Q...T...T...T..
   15210: 12 54 02 00 53 54 00 00 53 54 02 00 98 54 00 00  // .T..ST..ST...T..
   15220: 28 51 00 02 28 51 01 02 28 51 02 02 28 51 03 02  // (Q..(Q..(Q..(Q..
   15230: 28 51 04 02 28 51 05 02 E4 52 00 00 0C 53 00 00  // (Q..(Q...R...S..
   15240: 8D 53 00 00 08 54 00 00 EC 4F 00 02 EC 4F 01 02  // .S...T...O...O..
   15250: EC 4F 02 02 EC 4F 03 02 EC 4F 04 02 EC 4F 05 02  // .O...O...O...O..
   15260: 07 54 00 01 07 54 00 01 0B 4D 00 02 0B 4D 01 02  // .T...T...M...M..
   15270: 0B 4D 02 02 0B 4D 03 02 0B 4D 04 02 0B 4D 05 02  // .M...M...M...M..
   15280: 2C 53 00 00 08 54 00 00 08 54 00 00 08 54 00 00  // ,S...T...T...T..
   15290: 3D 52 00 00 2F 4E 00 02 2F 4E 01 02 2F 4E 02 02  // =R../N../N../N..
   152A0: 2F 4E 03 02 2F 4E 04 02 2F 4E 05 02 5E 4E 00 02  // /N../N../N..^N..
   152B0: 5E 4E 01 02 5E 4E 02 02 5E 4E 03 02 5E 4E 04 02  // ^N..^N..^N..^N..
   152C0: 5E 4E 05 02 94 4E 00 02 94 4E 01 02 94 4E 02 02  // ^N...N...N...N..
   152D0: 94 4E 03 02 94 4E 04 02 94 4E 05 02 4F 53 00 00  // .N...N...N..OS..
   152E0: 72 53 00 00 30 4F 01 02 30 4F 02 02 8C 4F 01 02  // rS..0O..0O...O..
   152F0: 8C 4F 02 02 A6 00 02 01 16 A5 00 00 00 00 00 00  // .O..............
   15300: 00 00 00 00 4A A5 00 00 00 00 00 00 00 00 00 00  // ....J...........
   15310: 00 00 44 AA 00 00 00 00 00 00 00 00 00 00 BE A5  // ..D.............
   15320: 00 00 00 00 96 A5 00 00 00 00 00 00 00 00 00 00  // ................
   15330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   15340: 00 00 00 00 00 00 00 00 00 00 B2 AA 00 00 00 00  // ................
   15350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   15360: 00 00 70 AC 00 00 00 00 00 00 00 00 00 00 00 00  // ..p.............
   15370: 00 00 00 00 00 00 00 00 00 00 00 00 12 A6 00 00  // ................
   15380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   15390: 00 00 00 00 00 00 00 00 00 00 33 00 02 01 00 08  // ..........3.....
   153A0: 37 00 00 52 0D 03 00 41 E3 0D 33 05 41 01 00 00  // 7..R...A..3.A...
   153B0: 00 1B 05 41 0B 01 02 06 00 41 0D 25 20 0E 03 0D  // ...A.....A.% ...
   153C0: 25 05 0C 02 0D 05 53 00 00 02 00 00 5B 00 4B 00  // %.....S.....[.K.
   153D0: 01 01 00 00 37 00 00 42 21 00 63 00 1F 00 63 01  // ....7..B!.c...c.
   153E0: 39 00 63 03 3F 00 63 02 45 00 5A 5A 5B 03 05 40  // 9.c.?.c.E.ZZ[..@
   153F0: 00 00 05 04 2D 19 40 00 15 05 40 02 01 02 0C 00  // ....-.@...@.....
   15400: 40 02 00 00 0D 00 5B 02 00 00 E3 0D 5B 02 00 00  // @.....[.....[...
   15410: E7 0D 5B 02 00 00 E8 0D 5B 00 28 00 02 01 00 00  // ..[.....[.(.....
   15420: 37 00 00 01 05 00 00 EC A8 01 00 02 00 00 01 00  // 7...............
   15430: 02 01 01 00 01 05 00 00 ED A8 01 00 02 00 02 01  // ................
   15440: 00 5B 54 00 01 02 00 00 37 00 00 01 05 00 00 9B  // .[T.....7.......
   15450: 62 01 00 54 00 01 00 01 05 00 00 93 62 01 00 01  // b..T........b...
   15460: 01 01 00 01 56 00 41 03 09 41 00 01 05 00 00 83  // ....V.A..A......
   15470: 62 01 00 01 02 01 00 41 01 05 00 00 9B 62 01 00  // b......A.....b..
   15480: 3C 25 01 00 00 44 36 00 01 05 00 00 93 62 01 00  // <%...D6......b..
   15490: 02 00 01 01 00 5B 31 04 01 01 04 00 37 00 00 3D  // .....[1.....7..=
   154A0: 25 00 00 44 F5 00 4A 05 A3 36 02 00 00 00 44 30  // %..D..J..6....D0
   154B0: 04 03 05 00 32 00 00 00 03 00 40 97 36 03 05 46  // ....2.....@.6..F
   154C0: 00 31 00 00 04 02 04 40 03 03 41 05 3E 02 41 40  // .1.....@..A.>.A@
   154D0: 48 4C 00 33 02 40 41 03 03 41 06 33 02 41 40 43  // HL.3.@A..A.3.A@C
   154E0: 50 00 33 02 41 40 3E 05 41 00 00 00 00 44 70 00  // P.3.A@>.A....Dp.
   154F0: 33 05 00 01 00 00 00 3E 05 00 00 00 00 00 44 30  // 3......>......D0
   15500: 04 51 14 43 22 00 03 03 40 05 03 02 41 40 2D 05  // .Q.C"...@...A@-.
   15510: 40 00 00 00 00 03 02 46 40 04 01 00 00 04 01 01  // @......F@.......
   15520: 01 04 01 02 02 04 01 03 03 04 01 04 04 04 01 05  // ................
   15530: 05 04 01 06 06 2D 05 41 40 00 00 00 3E 05 41 00  // .....-.A@...>.A.
   15540: 20 00 00 45 B7 00 27 05 41 00 20 00 00 03 05 46  //  ..E..'.A. ....F
   15550: 00 31 00 00 04 02 05 41 01 02 96 36 41 03 05 00  // .1.....A...6A...
   15560: 80 1A 06 00 03 00 41 97 36 03 00 40 96 36 3E 02  // ......A.6..@.6>.
   15570: 41 40 44 30 04 33 05 00 01 00 00 00 3E 05 00 00  // A@D0.3......>...
   15580: 00 00 00 44 30 04 51 14 43 CE 00 3D 65 00 01 44  // ...D0.Q.C..=e..D
   15590: 32 01 4A 05 B6 36 00 00 01 00 49 32 01 4A 05 C0  // 2.J..6....I2.J..
   155A0: 36 01 00 00 00 44 32 01 01 05 0C 00 84 09 81 03  // 6....D2.........
   155B0: 01 05 0D 00 00 00 06 00 01 05 0C 00 84 09 81 03  // ................
   155C0: 3C E5 0D 00 80 49 2A 01 4A 05 C0 36 01 00 00 00  // <....I*.J..6....
   155D0: 49 D1 01 01 05 B8 36 00 00 02 10 03 05 41 0A 00  // I.....6......A..
   155E0: 00 00 33 05 41 01 00 00 00 3E 05 41 00 00 00 00  // ..3.A....>.A....
   155F0: 44 8F 01 51 0A 3C 05 B8 36 00 00 02 00 49 4C 01  // D..Q.<..6....IL.
   15600: 03 05 41 04 00 00 00 51 0A 33 05 41 01 00 00 00  // ..A....Q.3.A....
   15610: 3E 05 41 00 00 00 00 44 8F 01 3C 05 AA 36 AD DE  // >.A....D..<..6..
   15620: AD DE 49 71 01 01 05 B8 36 00 00 00 00 0D 05 C0  // ..Iq....6.......
   15630: 36 01 00 00 00 07 05 B6 36 FF FF FE FF 0D 05 02  // 6.......6.......
   15640: 38 00 01 00 00 51 0A 01 05 97 36 00 00 00 00 01  // 8....Q....6.....
   15650: 05 96 36 00 00 00 00 01 05 A3 36 00 00 00 00 07  // ..6.......6.....
   15660: 05 02 38 FF FE FF FF 66 0B 03 04 00 04 00 02 02  // ..8....f........
   15670: 04 00 15 05 00 0A 1A 05 04 16 02 05 00 00 00 00  // ................
   15680: 00 02 02 01 00 2C 05 01 00 00 02 00 55 00 02 02  // .....,......U...
   15690: 89 02 04 02 05 03 00 00 05 D0 52 35 02 05 00 00  // ..........R5....
   156A0: 00 00 00 02 02 01 00 2C 05 01 00 00 00 00 55 00  // .......,......U.
   156B0: 02 02 89 02 04 02 05 03 00 20 00 D0 52 35 66 16  // ......... ..R5f.
   156C0: 3E 0D 42 00 00 44 9B 02 56 00 41 03 0C 41 00 00  // >.B..D..V.A..A..
   156D0: 2D 05 41 0F 00 00 00 09 05 41 F0 FF 00 00 2D 0A  // -.A......A....-.
   156E0: 41 42 03 05 46 00 84 00 00 56 08 42 04 04 00 00  // AB..F....V.B....
   156F0: 00 2D 05 46 04 00 00 00 2D 05 42 04 00 00 00 3E  // .-.F....-.B....>
   15700: 02 42 41 45 56 02 02 05 00 00 84 00 00 2C 02 00  // .BAEV........,..
   15710: 00 02 02 01 00 2C 05 01 00 00 02 00 02 89 02 04  // .....,..........
   15720: 02 09 02 04 02 05 03 00 00 00 40 02 0A 03 41 52  // ..........@...AR
   15730: 35 52 16 02 01 02 00 14 05 00 18 1A 05 02 08 03  // 5R..............
   15740: 02 41 00 2D 05 41 00 00 02 00 2D 01 41 00 01 02  // .A.-.A....-.A...
   15750: 7B 36 41 03 01 40 04 2D 01 40 02 01 02 7C 36 40  // {6A..@.-.@...|6@
   15760: 01 05 68 36 00 00 00 03 01 05 70 36 FF FF 01 83  // ..h6......p6....
   15770: 03 02 41 00 2D 05 41 00 00 04 00 2D 01 41 00 01  // ..A.-.A....-.A..
   15780: 02 7D 36 41 03 01 40 04 2D 01 40 02 01 02 7E 36  // .}6A..@.-.@...~6
   15790: 40 01 05 69 36 00 00 00 04 01 05 71 36 FF FF 00  // @..i6......q6...
   157A0: 84 03 02 41 00 2D 05 41 00 00 05 00 2D 01 41 00  // ...A.-.A....-.A.
   157B0: 01 02 7F 36 41 03 01 40 04 2D 01 40 02 01 02 80  // ...6A..@.-.@....
   157C0: 36 40 01 05 6A 36 00 00 00 05 01 05 72 36 FF FF  // 6@..j6......r6..
   157D0: 00 85 03 02 41 00 2D 05 41 00 00 06 00 2D 01 41  // ....A.-.A....-.A
   157E0: 00 01 02 81 36 41 03 01 40 04 2D 01 40 02 01 02  // ....6A..@.-.@...
   157F0: 82 36 40 01 05 6B 36 00 00 00 06 01 05 73 36 FF  // .6@..k6......s6.
   15800: FF 00 86 03 05 46 00 31 00 00 03 02 41 00 2D 05  // .....F.1....A.-.
   15810: 41 00 00 00 00 2D 01 41 00 03 01 40 04 2D 01 40  // A....-.A...@.-.@
   15820: 02 04 02 00 41 04 02 01 40 04 05 04 00 00 00 00  // ....A...@.......
   15830: 04 05 05 00 00 00 00 04 05 06 00 20 00 00 01 05  // ........... ....
   15840: 94 36 00 00 00 80 01 05 95 36 00 20 00 00 01 02  // .6.......6. ....
   15850: 56 36 41 01 02 57 36 40 01 05 61 36 FF FF 00 80  // V6A..W6@..a6....
   15860: 01 05 97 36 00 00 00 00 01 05 96 36 00 00 00 00  // ...6.......6....
   15870: 03 00 41 96 36 01 05 B1 36 00 00 00 00 4A 25 48  // ..A.6...6....J%H
   15880: 00 01 44 F7 03 0D 05 B1 36 08 00 00 00 5C 05 B6  // ..D.....6....\..
   15890: 36 00 FF FF FF C6 00 09 00 07 05 C0 36 FE FF FF  // 6...........6...
   158A0: FF 03 05 41 50 C3 00 00 4A 05 A3 36 02 00 00 00  // ...AP...J..6....
   158B0: 49 30 04 51 14 33 05 41 01 00 00 00 3E 05 41 00  // I0.Q.3.A....>.A.
   158C0: 00 00 00 49 12 04 5B 00 6D 00 02 01 00 04 37 00  // ...I..[.m.....7.
   158D0: 00 66 16 03 0C 41 04 00 4C 0D 41 02 00 44 1D 00  // .f...A..L.A..D..
   158E0: 0D A5 4C 00 02 52 16 01 01 35 39 02 01 01 36 39  // ..L..R...59...69
   158F0: 03 01 05 00 00 D7 A8 01 00 01 00 37 39 01 00 03  // ...........79...
   15900: 01 41 01 15 05 41 18 01 02 C4 00 41 03 01 41 01  // .A...A.....A..A.
   15910: 1B 05 41 08 01 02 C9 00 41 03 00 41 37 39 01 02  // ..A.....A..A79..
   15920: 3B 39 41 03 01 40 03 33 01 40 02 2D 02 40 41 01  // ;9A..@.3.@.-.@A.
   15930: 02 3C 39 40 5B 00 BD 01 03 01 04 00 37 00 00 66  // .<9@[.......7..f
   15940: 08 03 05 46 C0 12 00 00 3D A5 00 02 49 1E 00 02  // ...F....=...I...
   15950: 02 00 46 5B 03 05 40 0C 00 00 00 21 21 40 00 66  // ..F[..@....!!@.f
   15960: FF 2D 0D 42 81 01 2D 0A 42 40 03 04 40 00 00 03  // .-.B..-.B@..@...
   15970: 04 41 04 00 03 04 00 08 00 01 02 00 00 40 03 88  // .A...........@..
   15980: 40 01 00 03 18 40 01 00 09 8D 40 FF 01 3E 8D 40  // @....@....@..>.@
   15990: 00 00 49 99 00 01 02 00 00 41 03 00 40 01 00 09  // ..I......A..@...
   159A0: 05 40 FF 01 00 00 3E 0D 40 00 00 49 82 00 03 05  // .@....>.@..I....
   159B0: 46 00 71 02 00 43 BC 00 21 02 40 46 03 00 41 01  // F.q..C..!.@F..A.
   159C0: 00 09 05 41 00 1E 00 00 1B 05 41 09 43 B4 00 7C  // ...A......A.C..|
   159D0: 02 40 46 7E 05 40 00 00 01 00 03 00 41 01 00 09  // .@F~.@......A...
   159E0: 05 41 00 F0 00 00 1B 05 41 0C 75 02 40 41 03 02  // .A......A.u.@A..
   159F0: 46 40 3D A5 00 01 49 C8 00 02 02 00 46 5B 3D E5  // F@=...I.....F[=.
   15A00: 00 00 49 0B 01 56 00 40 03 29 40 00 21 0D 40 09  // ..I..V.@.)@.!.@.
   15A10: 00 03 02 41 00 2D 02 40 41 01 02 00 00 40 03 00  // ...A.-.@A....@..
   15A20: 41 01 00 09 05 41 00 00 F0 07 1B 05 41 14 02 E2  // A....A......A...
   15A30: 00 41 3D E5 00 00 49 0B 01 02 05 00 00 46 C3 23  // .A=...I......F.#
   15A40: 5B 56 00 40 03 39 40 00 55 38 00 66 FF 2D 0D 42  // [V.@.9@.U8.f.-.B
   15A50: 59 01 3E 0C 40 02 00 47 2C 01 2D 0D 42 08 00 43  // Y.>.@..G,.-.B..C
   15A60: 1C 01 33 0C 40 04 00 21 0C 40 06 00 2D 0C 40 00  // ..3.@..!.@..-.@.
   15A70: 00 03 09 42 00 55 00 00 02 0A 00 40 7C 05 46 40  // ...B.U.....@|.F@
   15A80: 42 0F 00 7E 01 40 00 02 02 00 40 5B 7A 64 00 FF  // B..~.@....@[zd..
   15A90: FF 07 00 00 00 00 00 C8 00 3F 00 08 00 19 00 40  // .........?.....@
   15AA0: 06 5F 00 40 00 32 00 80 0C 7E 00 60 00 64 00 00  // ._.@.2...~.`.d..
   15AB0: 32 7F 00 7F 00 64 00 37 6C 01 00 00 6C 01 00 66  // 2....d.7l...l..f
   15AC0: 6C 01 00 37 6E 01 00 00 6E 01 00 66 6E 01 00 00  // l..7n...n..fn...
   15AD0: 00 00 00 00 00 00 00 00 00 00 00 37 70 01 00 00  // ...........7p...
   15AE0: 70 01 00 66 70 01 00 37 72 01 00 00 72 01 00 66  // p..fp..7r...r..f
   15AF0: 72 01 00 00 D5 00 03 03 0C 00 37 00 00 66 04 03  // r.........7..f..
   15B00: 04 46 28 00 3E 05 46 00 00 00 00 49 3C 00 03 01  // .F(.>.F....I<...
   15B10: 00 00 03 01 01 01 03 01 02 02 52 16 03 01 46 00  // ..........R...F.
   15B20: 1B 05 46 08 02 02 00 00 02 02 01 01 02 02 02 02  // ..F.............
   15B30: 3D 65 02 00 49 47 00 2C 22 02 46 3D E5 02 00 49  // =e..IG.,".F=...I
   15B40: 52 00 2C A2 02 46 03 01 40 03 09 05 40 00 00 00  // R.,..F..@...@...
   15B50: FC 3E 05 40 00 00 00 D0 49 75 00 01 05 63 C0 00  // .>.@....Iu...c..
   15B60: 00 00 40 55 20 02 43 79 00 54 00 63 C0 01 01 64  // ..@U .Cy.T.c...d
   15B70: C0 00 56 00 40 03 21 40 02 01 02 65 C0 40 01 01  // ..V.@.!@...e.@..
   15B80: 66 C0 01 03 31 40 02 01 02 67 C0 40 01 01 E8 C0  // f...1@...g.@....
   15B90: 03 3D 65 02 01 44 CC 00 3D E5 02 01 44 CC 00 51  // .=e..D..=...D..Q
   15BA0: 02 56 00 40 4A E5 A0 21 80 44 D4 00 51 14 2D 05  // .V.@J..!.D..Q.-.
   15BB0: 40 01 00 00 00 3E 05 40 A0 86 01 00 45 B0 00 5B  // @....>.@....E..[
   15BC0: 4A E5 A0 21 80 49 CC 00 5B FF FF FF FF FF FF FF  // J..!.I..[.......
   15BD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   15BE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   15BF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   15C00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   15C10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   15C20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   15C30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   15C40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   15C50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   15C60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   15C70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   15C80: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   15C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


WSMT
----
[000h 0000 004h]                   Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 95
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]            Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 95 41 4C 41 53 4B 41  // WSMT(.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 13 00 01 00 07 00 00 00                          // ........


