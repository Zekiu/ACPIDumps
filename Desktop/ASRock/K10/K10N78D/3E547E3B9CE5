
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20201113
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000458  0x01  "A M I "  "POWERNOW"  0x00000001  "AMD "   0x00000001
 02)  AAFT  0x00000027  0x01  "052110"  "OEMAAFT "  0x20100521  "MSFT"   0x00000097
 03)  MCFG  0x0000003C  0x01  "052110"  "OEMMCFG "  0x20100521  "MSFT"   0x00000097
 04)  APIC  0x00000090  0x01  "052110"  "APIC1021"  0x20100521  "MSFT"   0x00000097
 05)  OEMB  0x00000072  0x01  "052110"  "OEMB1021"  0x20100521  "MSFT"   0x00000097
 06)  DSDT  0x00006917  0x01  "AS231 "  "AS231171"  0x00000171  "INTL"   0x20051117
 07)  SRAT  0x000000C8  0x03  "AMD   "  "FAM_F_10"  0x00000002  "AMD "   0x00000001
 08)  FACP  0x00000084  0x01  "A_M_I "  "OEMFACP "  0x12000601  "MSFT"   0x00000097
 09)  INFO  0x00000124  0x01  "052110"  "AMDINFO "  0x20100521  "MSFT"   0x00000097
 10)  FACS  0x00000040  0x01

Found 10 ACPI tables in acpidump

AAFT
----
[000h 0000   4]                    Signature : "AAFT"    
[004h 0004   4]                 Table Length : 00000027
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 49
[00Ah 0010   6]                       Oem ID : "052110"
[010h 0016   8]                 Oem Table ID : "OEMAAFT "
[018h 0024   4]                 Oem Revision : 20100521
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097


**** Unknown ACPI table signature [AAFT]


Raw Table Data: Length 39 (0x27)

    0000: 41 41 46 54 27 00 00 00 01 49 30 35 32 31 31 30  // AAFT'....I052110
    0010: 4F 45 4D 41 41 46 54 20 21 05 10 20 4D 53 46 54  // OEMAAFT !.. MSFT
    0020: 97 00 00 00 03 03 00                             // .......


APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000090
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 8A
[00Ah 0010   6]                       Oem ID : "052110"
[010h 0016   8]                 Oem Table ID : "APIC1021"
[018h 0024   4]                 Oem Revision : 20100521
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 82
[040h 0064   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 83
[048h 0072   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 05
[04Fh 0079   1]                Local Apic ID : 84
[050h 0080   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 06
[057h 0087   1]                Local Apic ID : 85
[058h 0088   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 01 [I/O APIC]
[05Dh 0093   1]                       Length : 0C
[05Eh 0094   1]                  I/O Apic ID : 02
[05Fh 0095   1]                     Reserved : 00
[060h 0096   4]                      Address : FEC00000
[064h 0100   4]                    Interrupt : 00000000

[068h 0104   1]                Subtable Type : 02 [Interrupt Source Override]
[069h 0105   1]                       Length : 0A
[06Ah 0106   1]                          Bus : 00
[06Bh 0107   1]                       Source : 00
[06Ch 0108   4]                    Interrupt : 00000002
[070h 0112   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[072h 0114   1]                Subtable Type : 02 [Interrupt Source Override]
[073h 0115   1]                       Length : 0A
[074h 0116   1]                          Bus : 00
[075h 0117   1]                       Source : 09
[076h 0118   4]                    Interrupt : 00000009
[07Ah 0122   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[07Ch 0124   1]                Subtable Type : 02 [Interrupt Source Override]
[07Dh 0125   1]                       Length : 0A
[07Eh 0126   1]                          Bus : 00
[07Fh 0127   1]                       Source : 0E
[080h 0128   4]                    Interrupt : 0000000E
[084h 0132   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1

[086h 0134   1]                Subtable Type : 02 [Interrupt Source Override]
[087h 0135   1]                       Length : 0A
[088h 0136   1]                          Bus : 00
[089h 0137   1]                       Source : 0F
[08Ah 0138   4]                    Interrupt : 0000000F
[08Eh 0142   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1

Raw Table Data: Length 144 (0x90)

    0000: 41 50 49 43 90 00 00 00 01 8A 30 35 32 31 31 30  // APIC......052110
    0010: 41 50 49 43 31 30 32 31 21 05 10 20 4D 53 46 54  // APIC1021!.. MSFT
    0020: 97 00 00 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 01 01 00 00 00 00 08 03 82  // ................
    0040: 00 00 00 00 00 08 04 83 00 00 00 00 00 08 05 84  // ................
    0050: 00 00 00 00 00 08 06 85 00 00 00 00 01 0C 02 00  // ................
    0060: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0070: 00 00 02 0A 00 09 09 00 00 00 0D 00 02 0A 00 0E  // ................
    0080: 0E 00 00 00 05 00 02 0A 00 0F 0F 00 00 00 05 00  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 1, "AS231", "AS231171", 0x00000171)
{
    Name (FZTF, Buffer (0x07)
    {
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5         // .......
    })
    Name (DP80, 0x80)
    Name (DP90, 0x90)
    Name (SPIO, 0x2E)
    Name (IOSB, 0x0280)
    Name (IOSL, 0x10)
    Name (IOHB, 0x0290)
    Name (IOHL, 0x10)
    Name (SSMI, 0x242E)
    Name (SHPB, 0xFED00000)
    Name (SHPL, 0x1000)
    Name (GPBS, 0x24C0)
    Name (PMBS, 0x2000)
    Name (PMLN, 0x0100)
    Name (SCBS, 0x2400)
    Name (SCLN, 0x0100)
    Name (ACBS, 0x2800)
    Name (ACLN, 0x0100)
    Name (MTAB, 0x2F00)
    Name (MTAL, 0x0100)
    Name (ACA4, 0x20A4)
    Name (SCIO, 0x2400)
    Name (SCTL, 0x2090)
    Name (SNAS, One)
    Name (SNAM, 0xFED04000)
    Name (SNAL, 0x1000)
    Name (SPAS, Zero)
    Name (SPAM, Zero)
    Name (SPAL, Zero)
    Name (MUAE, Zero)
    Name (APIC, One)
    Name (AWAY, 0x02)
    Name (PCIB, 0xE0000000)
    Name (PCIL, 0x10000000)
    Name (WKTP, One)
    Name (SL2P, One)
    OperationRegion (BIOS, SystemMemory, 0xCFFA0064, 0xFF)
    Field (BIOS, ByteAcc, NoLock, Preserve)
    {
        SS1,    1, 
        SS2,    1, 
        SS3,    1, 
        SS4,    1, 
        Offset (0x01), 
        IOST,   16, 
        TOPM,   32, 
        ROMS,   32, 
        MG1B,   32, 
        MG1L,   32, 
        MG2B,   32, 
        MG2L,   32, 
        Offset (0x1C), 
        DMAX,   8, 
        HPTA,   32, 
        CPB0,   32, 
        CPB1,   32, 
        CPB2,   32, 
        CPB3,   32, 
        ASSB,   8, 
        AOTB,   8, 
        AAXB,   32, 
        SMIF,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        MPEN,   8, 
        TPMF,   8, 
        MG3B,   32, 
        MG3L,   32, 
        MH1B,   32, 
        MH1L,   32, 
        OSTP,   8
    }

    Method (RRIO, 4, NotSerialized)
    {
        Debug = "RRIO"
    }

    Method (RDMA, 3, NotSerialized)
    {
        Debug = "rDMA"
    }

    Name (PICM, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
        _T_0 = OSYS ()
        If ((_T_0 == One))
        {
            OSVR = 0x03
        }
        ElseIf ((_T_0 == 0x10))
        {
            OSVR = One
        }
        ElseIf ((_T_0 == 0x11))
        {
            OSVR = 0x02
        }
        ElseIf ((_T_0 == 0x12))
        {
            OSVR = 0x04
        }
        ElseIf ((_T_0 == 0x13))
        {
            OSVR = Zero
        }
        ElseIf ((_T_0 == 0x14))
        {
            OSVR = Zero
        }
        ElseIf ((_T_0 == 0x15))
        {
            OSVR = Zero
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    OperationRegion (DEB0, SystemIO, DP80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, DP90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Method (OSYS, 0, NotSerialized)
    {
        Local0 = 0x10
        If (CondRefOf (_OSI, Local1))
        {
            If (_OSI ("Windows 2000"))
            {
                Local0 = 0x12
            }

            If (_OSI ("Windows 2001"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001.1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2001.1 SP1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2006"))
            {
                Local0 = 0x15
            }
        }
        ElseIf (MCTH (_OS, "Microsoft Windows NT"))
        {
            Local0 = 0x12
        }
        Else
        {
            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                Local0 = 0x11
            }

            If (MCTH (_OS, "Linux"))
            {
                Local0 = One
            }
        }

        Return (Local0)
    }

    Scope (_PR)
    {
        Processor (P001, 0x01, 0x00002010, 0x06){}
        Processor (P002, 0x02, 0x00000000, 0x00){}
        Processor (P003, 0x03, 0x00000000, 0x00){}
        Processor (P004, 0x04, 0x00000000, 0x00){}
        Processor (P005, 0x05, 0x00000000, 0x00){}
        Processor (P006, 0x06, 0x00000000, 0x00){}
        Alias (P001, CPU1)
        Alias (P002, CPU2)
        Alias (P003, CPU3)
        Alias (P004, CPU4)
        Alias (P005, CPU5)
        Alias (P006, CPU6)
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x2A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LSMB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LPMU, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LUB0, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LUB2, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                UB11, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                UB12, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                LMAC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                LSA0, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LAZA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                Zero, 
                SGRU, 
                Zero
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                LN0A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                One, 
                LN0B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                LN0C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                LN0D, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                LN1A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                One, 
                LN1B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                LN1C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                LN1D, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LN2A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                LN2B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                LN2C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                LN2D, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                LN3A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                LN3B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                LN3C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                LN3D, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LN4A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LN4B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LN4C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LN4D, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                LN5A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                LN5B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                LN5C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                LN5D, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LN6A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LN6B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LN6C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LN6D, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                LN7A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                One, 
                LN7B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                LN7C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                LN7D, 
                Zero
            }
        })
        Name (AR00, Package (0x2A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LSMB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LPMU, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LUB0, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LUB2, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                UB11, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                UB12, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                LMAC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                LSA0, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LAZA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                Zero, 
                SGRU, 
                Zero
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                LN0A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                One, 
                LN0B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                LN0C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                LN0D, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                LN1A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                One, 
                LN1B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                LN1C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                LN1D, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LN2A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                LN2B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                LN2C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                LN2D, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                LN3A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                LN3B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                LN3C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                LN3D, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LN4A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LN4B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LN4C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LN4D, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                LN5A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                LN5B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                LN5C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                LN5D, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LN6A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LN6B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LN6C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LN6D, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                LN7A, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                One, 
                LN7B, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                LN7C, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                LN7D, 
                Zero
            }
        })
        Name (PR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN0A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN0B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN0C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN0D, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN0A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN0B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN0C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN0D, 
                Zero
            }
        })
        Name (PR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN1A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN1B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN1C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN1D, 
                Zero
            }
        })
        Name (AR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN1A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN1B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN1C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN1D, 
                Zero
            }
        })
        Name (PR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN2A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN2B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN2C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN2D, 
                Zero
            }
        })
        Name (AR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN2A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN2B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN2C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN2D, 
                Zero
            }
        })
        Name (PR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN3A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN3B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN3C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN3D, 
                Zero
            }
        })
        Name (AR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN3A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN3B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN3C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN3D, 
                Zero
            }
        })
        Name (PR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN4A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN4B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN4C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN4D, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN4A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN4B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN4C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN4D, 
                Zero
            }
        })
        Name (PR15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN5A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN5B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN5C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN5D, 
                Zero
            }
        })
        Name (AR15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN5A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN5B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN5C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN5D, 
                Zero
            }
        })
        Name (PR16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN6A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN6B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN6C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN6D, 
                Zero
            }
        })
        Name (AR16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN6A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN6B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN6C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN6D, 
                Zero
            }
        })
        Name (PR17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN7A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN7B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN7C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN7D, 
                Zero
            }
        })
        Name (AR17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN7A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN7B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN7C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN7D, 
                Zero
            }
        })
        Name (PR01, Package (0x0C)
        {
            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x0C)
        {
            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, RS0A)
        Alias (PRSA, RS0B)
        Alias (PRSA, RS0C)
        Alias (PRSA, RS0D)
        Alias (PRSA, RS1A)
        Alias (PRSA, RS1B)
        Alias (PRSA, RS1C)
        Alias (PRSA, RS1D)
        Alias (PRSA, RS2A)
        Alias (PRSA, RS2B)
        Alias (PRSA, RS2C)
        Alias (PRSA, RS2D)
        Alias (PRSA, RS3A)
        Alias (PRSA, RS3B)
        Alias (PRSA, RS3C)
        Alias (PRSA, RS3D)
        Alias (PRSA, RS4A)
        Alias (PRSA, RS4B)
        Alias (PRSA, RS4C)
        Alias (PRSA, RS4D)
        Alias (PRSA, RS5A)
        Alias (PRSA, RS5B)
        Alias (PRSA, RS5C)
        Alias (PRSA, RS5D)
        Alias (PRSA, RS6A)
        Alias (PRSA, RS6B)
        Alias (PRSA, RS6C)
        Alias (PRSA, RS6D)
        Alias (PRSA, RS7A)
        Alias (PRSA, RS7B)
        Alias (PRSA, RS7C)
        Alias (PRSA, RS7D)
        Name (RSA0, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5}
        })
        Alias (PRSA, RSAC)
        Alias (PRSA, RSB0)
        Alias (PRSA, RSB2)
        Alias (PRSA, RS11)
        Alias (PRSA, RS12)
        Alias (PRSA, RSMB)
        Alias (PRSA, RSMU)
        Alias (PRSA, RSZA)
        Alias (PRSA, RSRU)
        Alias (PRSA, RSTA)
        Name (RSIR, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000010,
                0x00000011,
                0x00000012,
                0x00000013,
            }
        })
        Name (RSII, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000014,
                0x00000015,
                0x00000016,
                0x00000017,
            }
        })
        Alias (RSII, RSIG)
        Alias (RSII, RSU1)
        Alias (RSII, RSU2)
        Alias (RSII, RSI1)
        Alias (RSII, RSI2)
        Alias (RSII, RSSA)
        Alias (RSII, RSMA)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_ADR, 0x00180000)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Method (NPTS, 1, NotSerialized)
            {
            }

            Method (NWAK, 1, NotSerialized)
            {
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (SPTS, 1, NotSerialized)
                {
                    ^^IDE0.PTS0 = Arg0
                    ^^IDE0.SID0 = ^^IDE0.ID20 /* \_SB_.PCI0.IDE0.ID20 */
                    ^^IDE0.SID1 = ^^IDE0.IDTS /* \_SB_.PCI0.IDE0.IDTS */
                    ^^IDE0.SID2 = ^^IDE0.IDTP /* \_SB_.PCI0.IDE0.IDTP */
                    ^^IDE0.SID3 = ^^IDE0.ID22 /* \_SB_.PCI0.IDE0.ID22 */
                    ^^IDE0.SID4 = ^^IDE0.UMSS /* \_SB_.PCI0.IDE0.UMSS */
                    ^^IDE0.SID5 = ^^IDE0.UMSP /* \_SB_.PCI0.IDE0.UMSP */
                    PS1S = One
                    PS1E = One
                }

                Method (SWAK, 1, NotSerialized)
                {
                    PS1E = Zero
                    S1CT = 0x02
                    S3CT = 0x02
                    S4CT = 0x02
                    S5CT = 0x02
                }

                OperationRegion (SMIE, SystemIO, SCIO, 0x08)
                Field (SMIE, ByteAcc, NoLock, Preserve)
                {
                        ,   15, 
                    PS1S,   1, 
                        ,   31, 
                    PS1E,   1, 
                    Offset (0x08)
                }

                OperationRegion (SXCT, SystemIO, SCTL, 0x10)
                Field (SXCT, ByteAcc, NoLock, Preserve)
                {
                    S1CT,   2, 
                    Offset (0x04), 
                    S3CT,   2, 
                    Offset (0x08), 
                    S4CT,   2, 
                    Offset (0x0C), 
                    S5CT,   2, 
                    Offset (0x10)
                }

                OperationRegion (GPB0, SystemIO, GPBS, 0x28)
                Field (GPB0, ByteAcc, NoLock, Preserve)
                {
                    GP01,   8, 
                    GP02,   8, 
                    GP03,   8, 
                    GP04,   8, 
                    GP05,   8, 
                    GP06,   8, 
                    GP07,   8, 
                    GP08,   8, 
                    GP09,   8, 
                    GP10,   8, 
                    GP11,   8, 
                    GP12,   8, 
                    GP13,   8, 
                    GP14,   8, 
                    GP15,   8, 
                    GP16,   8, 
                    GP17,   8, 
                    GP18,   8, 
                    GP19,   8, 
                    GP20,   8, 
                    GP21,   8, 
                    GP22,   8, 
                    GP23,   8, 
                    GP24,   8, 
                    GP25,   8, 
                    GP26,   8, 
                    GP27,   8, 
                    GP28,   8, 
                    GP29,   8, 
                    GP30,   8, 
                    GP31,   8, 
                    GP32,   8, 
                    GP33,   8, 
                    GP34,   8, 
                    GP35,   8, 
                    GP36,   8, 
                    GP37,   8, 
                    GP38,   8, 
                    GP39,   8, 
                    GP40,   8
                }

                OperationRegion (MM90, SystemMemory, 0xE0080000, 0xFF)
                Field (MM90, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x90), 
                        ,   4, 
                    CSLD,   1, 
                        ,   22, 
                    CSLT,   1, 
                        ,   1, 
                    SDLA,   1
                }

                OperationRegion (RTCO, SystemIO, 0x72, 0x02)
                Field (RTCO, ByteAcc, NoLock, Preserve)
                {
                    CIND,   8, 
                    CDAT,   8
                }

                IndexField (CIND, CDAT, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xD0), 
                    CMO1,   4
                }

                Scope (\_SB)
                {
                    OperationRegion (\SCPP, SystemIO, SSMI, One)
                    Field (SCPP, ByteAcc, NoLock, Preserve)
                    {
                        SMIP,   8
                    }

                    Scope (PCI0)
                    {
                        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                        {
                            If ((OSFL () == 0x02))
                            {
                                Return (0x02)
                            }
                            Else
                            {
                                Return (0x03)
                            }
                        }

                        Name (_S1D, One)  // _S1D: S1 Device State
                        Name (NATA, Package (0x01)
                        {
                            0x00090000
                        })
                        Device (NVRB)
                        {
                            Name (_HID, "NVRAID20")  // _HID: Hardware ID
                            Name (FNVR, 0xFF)
                            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                            {
                                FNVR = Zero
                            }

                            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                            {
                                FNVR = 0xFF
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                If ((CPB0 & One))
                                {
                                    If ((FNVR == 0xFF))
                                    {
                                        Return (0x0F)
                                    }
                                    Else
                                    {
                                        Return (0x0D)
                                    }
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                            {
                                IO (Decode16,
                                    0x04D2,             // Range Minimum
                                    0x04D2,             // Range Maximum
                                    0x01,               // Alignment
                                    0x01,               // Length
                                    )
                            })
                        }

                        Method (\_GPE._L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                        {
                            \_SB.PCI0.SBRG.SIOH ()
                        }
                    }
                }

                OperationRegion (UCFG, PCI_Config, 0x78, One)
                Field (UCFG, ByteAcc, NoLock, Preserve)
                {
                    U1CF,   8
                }

                Device (MUAR)
                {
                    Name (_UID, 0xFF)  // _UID: Unique ID
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (MUAE)
                        {
                            Local0 = (U1CF & 0x83)
                            If ((Local0 == 0x82))
                            {
                                Return (0x0F)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((U1CF == 0xC2))
                        {
                            UIO1 = 0x03F8
                            UIRQ = (One << 0x04)
                            _UID = One
                        }

                        If ((U1CF == 0xA6))
                        {
                            UIO1 = 0x02F8
                            UIRQ = (One << 0x03)
                            _UID = 0x02
                        }

                        UIO2 = UIO1 /* \_SB_.PCI0.SBRG.MUAR.UIO1 */
                        Return (UCRS) /* \_SB_.PCI0.SBRG.MUAR.UCRS */
                    }

                    Name (UCRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            _Y01)
                        IRQNoFlags (_Y00)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {}
                    })
                    CreateWordField (UCRS, \_SB.PCI0.SBRG.MUAR._Y00._INT, UIRQ)  // _INT: Interrupts
                    CreateWordField (UCRS, \_SB.PCI0.SBRG.MUAR._Y01._MIN, UIO1)  // _MIN: Minimum Base Address
                    CreateWordField (UCRS, \_SB.PCI0.SBRG.MUAR._Y01._MAX, UIO2)  // _MAX: Maximum Base Address
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (FDC)
                {
                    Name (_HID, EisaId ("PNP0700"))  // _HID: Hardware ID
                    Method (_FDE, 0, NotSerialized)  // _FDE: Floppy Disk Enumerate
                    {
                        Name (FDEP, Package (0x05)
                        {
                            Zero, 
                            Zero, 
                            0x02, 
                            0x02, 
                            0x02
                        })
                        If (_STA ())
                        {
                            FDEP [Zero] = One
                        }

                        Return (FDEP) /* \_SB_.PCI0.SBRG.FDC_._FDE.FDEP */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (DSTA (0x03))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        DCNT (0x03, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        DCRS (0x03, One)
                        IRQE = IRQM /* \_SB_.PCI0.SBRG.IRQM */
                        DMAE = DMAM /* \_SB_.PCI0.SBRG.DMAM */
                        IO21 = IO11 /* \_SB_.PCI0.SBRG.IO11 */
                        IO22 = IO12 /* \_SB_.PCI0.SBRG.IO12 */
                        LEN2 = 0x06
                        IO31 = (IO21 + 0x07)
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.IO31 */
                        LEN3 = One
                        Return (CRS2) /* \_SB_.PCI0.SBRG.CRS2 */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        DSRS (Arg0, 0x03)
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        ENFG (CGLD (0x03))
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F0,             // Range Minimum
                                0x03F0,             // Range Maximum
                                0x01,               // Alignment
                                0x06,               // Length
                                )
                            IO (Decode16,
                                0x03F7,             // Range Minimum
                                0x03F7,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {6}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {2}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F0,             // Range Minimum
                                0x03F0,             // Range Maximum
                                0x01,               // Alignment
                                0x06,               // Length
                                )
                            IO (Decode16,
                                0x03F7,             // Range Minimum
                                0x03F7,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0370,             // Range Minimum
                                0x0370,             // Range Maximum
                                0x01,               // Alignment
                                0x06,               // Length
                                )
                            IO (Decode16,
                                0x0377,             // Range Minimum
                                0x0377,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        EndDependentFn ()
                    })
                }

                Device (RMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x00000000,         // Granularity
                            0x000D0000,         // Range Minimum
                            0x000D3FFF,         // Range Maximum
                            0x00000000,         // Translation Offset
                            0x00004000,         // Length
                            ,, , AddressRangeMemory, TypeStatic)
                        DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x00000000,         // Granularity
                            0x000D4000,         // Range Minimum
                            0x000D7FFF,         // Range Maximum
                            0x00000000,         // Translation Offset
                            0x00004000,         // Length
                            ,, , AddressRangeMemory, TypeStatic)
                        DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x00000000,         // Granularity
                            0x000DE000,         // Range Minimum
                            0x000DFFFF,         // Range Maximum
                            0x00000000,         // Translation Offset
                            0x00002000,         // Length
                            ,, , AddressRangeMemory, TypeStatic)
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x0A,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y02)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y03)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y04)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y05)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y06)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y07)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0A)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y08)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y09)
                        Memory32Fixed (ReadOnly,
                            0xFEE01000,         // Address Base
                            0x000FF000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y02._MIN, GP00)  // _MIN: Minimum Base Address
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y02._MAX, GP01)  // _MAX: Maximum Base Address
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y02._LEN, GP0L)  // _LEN: Length
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y03._MIN, GP10)  // _MIN: Minimum Base Address
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y03._MAX, GP11)  // _MAX: Maximum Base Address
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y03._LEN, GP1L)  // _LEN: Length
                        GP00 = PMBS /* \PMBS */
                        GP01 = PMBS /* \PMBS */
                        If ((PMLN >= 0x0100))
                        {
                            GP0L = (PMLN >> One)
                            GP10 = (GP00 + GP0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.GP0L */
                            GP11 = (GP01 + GP0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.GP0L */
                            GP1L = (PMLN - GP0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.GP0L */
                        }
                        Else
                        {
                            GP0L = PMLN /* \PMLN */
                        }

                        If (SCBS)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y04._MIN, SC00)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y04._MAX, SC01)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y04._LEN, SC0L)  // _LEN: Length
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y05._MIN, SC10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y05._MAX, SC11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y05._LEN, SC1L)  // _LEN: Length
                            SC00 = SCBS /* \SCBS */
                            SC01 = SCBS /* \SCBS */
                            If ((SCLN >= 0x0100))
                            {
                                SC0L = (SCLN >> One)
                                SC10 = (SC00 + SC0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.SC0L */
                                SC11 = (SC01 + SC0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.SC0L */
                                SC1L = (SCLN - SC0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.SC0L */
                            }
                            Else
                            {
                                SC0L = SCLN /* \SCLN */
                            }
                        }

                        If (ACBS)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y06._MIN, AC00)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y06._MAX, AC01)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y06._LEN, AC0L)  // _LEN: Length
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y07._MIN, AC10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y07._MAX, AC11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y07._LEN, AC1L)  // _LEN: Length
                            AC00 = ACBS /* \ACBS */
                            AC01 = ACBS /* \ACBS */
                            If ((ACLN >= 0x0100))
                            {
                                AC0L = (ACLN >> One)
                                AC10 = (AC00 + AC0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.AC0L */
                                AC11 = (AC01 + AC0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.AC0L */
                                AC1L = (ACLN - AC0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.AC0L */
                            }
                            Else
                            {
                                AC0L = ACLN /* \ACLN */
                            }
                        }

                        If (SPAS)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y08._BAS, BB01)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y08._LEN, BL01)  // _LEN: Length
                            BB01 = SPAM /* \SPAM */
                            BL01 = SPAL /* \SPAL */
                        }

                        If (SNAS)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y09._BAS, AB01)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y09._LEN, AL01)  // _LEN: Length
                            AB01 = SNAM /* \SNAM */
                            AL01 = SNAL /* \SNAL */
                        }

                        CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0A._BAS, MB01)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0A._LEN, ML01)  // _LEN: Length
                        MB01 = CPB1 /* \CPB1 */
                        ML01 = CPB2 /* \CPB2 */
                        Return (CRS) /* \_SB_.PCI0.SBRG.RMSC.CRS_ */
                    }
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS0, Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0B)
                        IRQNoFlags (_Y0C)
                            {0}
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSFL () == Zero))
                        {
                            If ((NVID == 0x10DE))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS1, \_SB.PCI0.SBRG.HPET._Y0B._BAS, HPX1)  // _BAS: Base Address
                        CreateDWordField (CRS1, \_SB.PCI0.SBRG.HPET._Y0B._LEN, HPX2)  // _LEN: Length
                        CreateWordField (CRS1, \_SB.PCI0.SBRG.HPET._Y0C._INT, TIRQ)  // _INT: Interrupts
                        If ((NVID == 0x10DE))
                        {
                            Local0 = Zero
                            If (P2IR)
                            {
                                Local0 = 0x02
                            }

                            TIRQ = (One << Local0)
                            HPX1 = SHPB /* \SHPB */
                            HPX2 = SHPL /* \SHPL */
                            Return (CRS1) /* \_SB_.PCI0.SBRG.HPET.CRS1 */
                        }
                        Else
                        {
                            Return (CRS0) /* \_SB_.PCI0.SBRG.HPET.CRS0 */
                        }
                    }

                    OperationRegion (CF29, PCI_Config, 0x74, One)
                    Field (CF29, ByteAcc, NoLock, Preserve)
                    {
                            ,   1, 
                            ,   1, 
                        P2IR,   1
                    }

                    OperationRegion (HPTE, SystemMemory, SHPB, 0x04)
                    Field (HPTE, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x02), 
                        NVID,   16
                    }
                }

                OperationRegion (LPDC, PCI_Config, 0xA0, 0x06)
                Field (LPDC, ByteAcc, NoLock, Preserve)
                {
                    S3F8,   1, 
                    S2F8,   1, 
                        ,   3, 
                    S2E8,   1, 
                        ,   1, 
                    S3E8,   1, 
                        ,   4, 
                    M300,   1, 
                        ,   2, 
                    M330,   1, 
                        ,   4, 
                    FDC0,   1, 
                    Offset (0x03), 
                    P378,   1, 
                    P278,   1, 
                    P3BC,   1, 
                    Offset (0x04), 
                    G200,   8, 
                    G208,   8
                }

                Method (RRIO, 4, NotSerialized)
                {
                    If (((Arg0 == Zero) || (Arg0 == One)))
                    {
                        If ((Arg2 == 0x03F8))
                        {
                            S3F8 = Arg1
                        }

                        If ((Arg2 == 0x02F8))
                        {
                            S2F8 = Arg1
                        }

                        If ((Arg2 == 0x03E8))
                        {
                            S3E8 = Arg1
                        }

                        If ((Arg2 == 0x02E8))
                        {
                            S2E8 = Arg1
                        }
                    }

                    If ((Arg0 == 0x02))
                    {
                        If ((Arg2 == 0x0378))
                        {
                            P378 = Arg1
                        }

                        If ((Arg2 == 0x0278))
                        {
                            P278 = Arg1
                        }

                        If ((Arg2 == 0x03BC))
                        {
                            P3BC = Arg1
                        }
                    }

                    If ((Arg0 == 0x03))
                    {
                        FDC0 = Arg1
                    }

                    If ((Arg0 == 0x05))
                    {
                        If ((Arg2 == 0x0330))
                        {
                            M330 = Arg1
                        }

                        If ((Arg2 == 0x0300))
                        {
                            M300 = Arg1
                        }
                    }

                    If ((Arg0 == 0x08))
                    {
                        Local0 = Zero
                        If (Arg1)
                        {
                            Local0 = 0xFF
                        }

                        If ((Arg2 == 0x0200))
                        {
                            G200 = Local0
                        }

                        If ((Arg2 == 0x0208))
                        {
                            G208 = Local0
                        }
                    }
                }

                Method (RDMA, 3, NotSerialized)
                {
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (CRS0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((^^HPET.NVID == 0x10DE))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.TMR_.CRS1 */
                        }

                        Return (CRS0) /* \_SB_.PCI0.SBRG.TMR_.CRS0 */
                    }
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (CRS0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((^^HPET.NVID == 0x10DE))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.RTC0.CRS1 */
                        }

                        Return (CRS0) /* \_SB_.PCI0.SBRG.RTC0.CRS0 */
                    }
                }

                Scope (\_SB)
                {
                    Device (AWY)
                    {
                        Name (_HID, "AWY0001")  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((AWAY == One))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (SMOD, 1, NotSerialized)
                        {
                            If (Arg0)
                            {
                                DBG8 = 0x60
                                ^^PCI0.SBRG.SLED (Zero)
                            }
                            Else
                            {
                                DBG8 = 0x06
                                ^^PCI0.SBRG.SLED (Ones)
                            }
                        }
                    }
                }

                Device (^PCIE)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x11)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xE0000000,         // Address Base
                            0x10000000,         // Address Length
                            _Y0D)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y0D._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y0D._LEN, LEN1)  // _LEN: Length
                        BAS1 = PCIB /* \PCIB */
                        LEN1 = PCIL /* \PCIL */
                        Return (CRS) /* \_SB_.PCI0.PCIE.CRS_ */
                    }
                }

                Device (OMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0E)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0F)
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        FixedIO (
                            0x0060,             // Address
                            0x01,               // Length
                            )
                        FixedIO (
                            0x0064,             // Address
                            0x01,               // Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y10)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y11)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (APIC)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y0E._LEN, ML01)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y0E._BAS, MB01)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y0F._LEN, ML02)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y0F._BAS, MB02)  // _BAS: Base Address
                            MB01 = 0xFEC00000
                            ML01 = 0x1000
                            MB02 = 0xFEE00000
                            ML02 = 0x1000
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y10._LEN, ML03)  // _LEN: Length
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y10._BAS, MB03)  // _BAS: Base Address
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y11._LEN, ML04)  // _LEN: Length
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y11._BAS, MB04)  // _BAS: Base Address
                            MB03 = 0xFEC00000
                            ML03 = 0x1000
                            MB04 = 0xFEE00000
                            ML04 = 0x1000
                        }

                        Local0 = (0x05 << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (CRS) /* \_SB_.PCI0.SBRG.OMSC.CRS_ */
                        }
                        Else
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.OMSC.CRS1 */
                        }
                    }
                }

                Device (^^RMEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x000A0000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y12)
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            _Y13)
                        Memory32Fixed (ReadWrite,
                            0x00100000,         // Address Base
                            0x00000000,         // Address Length
                            _Y14)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y15)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.RMEM._Y12._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y12._LEN, LEN1)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y13._BAS, BAS2)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y13._LEN, LEN2)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y14._LEN, LEN3)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y15._BAS, BAS4)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y15._LEN, LEN4)  // _LEN: Length
                        If (OSFL ()){}
                        Else
                        {
                            If (MG1B)
                            {
                                If ((MG1B > 0x000C0000))
                                {
                                    BAS1 = 0x000C0000
                                    LEN1 = (MG1B - BAS1) /* \_SB_.RMEM._CRS.BAS1 */
                                }
                            }
                            Else
                            {
                                BAS1 = 0x000C0000
                                LEN1 = 0x00020000
                            }

                            If (Local0 = (MG1B + MG1L) /* \MG1L */)
                            {
                                BAS2 = Local0
                                LEN2 = (0x00100000 - BAS2) /* \_SB_.RMEM._CRS.BAS2 */
                            }
                        }

                        LEN3 = (MG2B - 0x00100000)
                        BAS4 = MH1B /* \MH1B */
                        LEN4 = (Zero - BAS4) /* \_SB_.RMEM._CRS.BAS4 */
                        Return (CRS) /* \_SB_.RMEM.CRS_ */
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Method (PS2K._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x10, 0x04))
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0C)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (M2R0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (M2R1, ResourceTemplate ()
                    {
                        FixedIO (
                            0x0060,             // Address
                            0x01,               // Length
                            )
                        FixedIO (
                            0x0064,             // Address
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = (One << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (M2R0) /* \_SB_.PCI0.SBRG.PS2M.M2R0 */
                        }
                        Else
                        {
                            Return (M2R1) /* \_SB_.PCI0.SBRG.PS2M.M2R1 */
                        }
                    }
                }

                Method (PS2M._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x10, 0x04))
                }

                Device (UAR1)
                {
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        DSRS (Arg0, Zero)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (CMPR) /* \_SB_.PCI0.SBRG.UAR1.CMPR */
                    }

                    Name (CMPR, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Method (UAR1._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x03, 0x04))
                }

                Device (SIOR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Method (_UID, 0, NotSerialized)  // _UID: Unique ID
                    {
                        Return (SPIO) /* \SPIO */
                    }

                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y16)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y17)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SPIO != 0x03F0) && (SPIO > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y16._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y16._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y16._LEN, GPL1)  // _LEN: Length
                            GP10 = SPIO /* \SPIO */
                            GP11 = SPIO /* \SPIO */
                            GPL1 = 0x02
                        }

                        If (IOSB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y17._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y17._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y17._LEN, GPL2)  // _LEN: Length
                            GP20 = IOSB /* \IOSB */
                            GP21 = IOSB /* \IOSB */
                            GPL2 = IOSL /* \IOSL */
                        }

                        If (IOHB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y18._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y18._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y18._LEN, GPL3)  // _LEN: Length
                            GP30 = IOHB /* \IOHB */
                            GP31 = IOHB /* \IOHB */
                            GPL3 = IOHL /* \IOHL */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIOR.CRS_ */
                    }
                }

                Name (DCAT, Package (0x16)
                {
                    0x02, 
                    0x03, 
                    One, 
                    Zero, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0x07, 
                    0x09, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF
                })
                Method (ENFG, 1, NotSerialized)
                {
                    INDX = 0x87
                    INDX = 0x87
                    LDN = Arg0
                }

                Method (EXFG, 0, NotSerialized)
                {
                    INDX = 0xAA
                }

                Method (LPTM, 1, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local0 = (OPT0 & 0x02)
                    EXFG ()
                    Return (Local0)
                }

                Method (UHID, 1, NotSerialized)
                {
                    If ((Arg0 == One))
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT1 & 0x38)
                        EXFG ()
                        If (Local0)
                        {
                            Return (0x1005D041)
                        }
                    }

                    Return (0x0105D041)
                }

                Method (SIOK, 1, NotSerialized)
                {
                    ENFG (0x0A)
                    While (OPT3)
                    {
                        Stall (0x80)
                        OPT3 = 0xFF
                    }

                    Local0 = (Arg0 & One)
                    Local1 = (OPT2 & 0xFE)
                    OPT2 = (Local0 | Local1)
                    ACTR = (Arg0 & One)
                    EXFG ()
                }

                Method (SLED, 1, NotSerialized)
                {
                    If ((SL2P == One))
                    {
                        ENFG (0x09)
                        If (Arg0)
                        {
                            Local0 = (OPT3 & 0x3F)
                            OPT3 = (Local0 | 0x80)
                        }
                        Else
                        {
                            Local0 = (OPT5 & 0x3F)
                            OPT3 = (Local0 | 0x40)
                        }

                        EXFG ()
                    }
                    Else
                    {
                        ENFG (0x08)
                        If (Arg0)
                        {
                            Local0 = (OPT5 & 0x3F)
                            OPT5 = (Local0 | 0x80)
                        }
                        Else
                        {
                            Local0 = (OPT5 & 0x3F)
                            OPT5 = (Local0 | 0x40)
                        }

                        EXFG ()
                    }
                }

                Name (KBFG, One)
                Name (MSFG, One)
                Name (U1FG, One)
                Name (U2FG, One)
                Method (PS2K._PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (!((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        If (Arg0)
                        {
                            KBFG = One
                        }
                        Else
                        {
                            KBFG = Zero
                        }
                    }
                }

                Method (PS2M._PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (!((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        If (Arg0)
                        {
                            MSFG = One
                        }
                        Else
                        {
                            MSFG = Zero
                        }
                    }
                }

                Method (SIOS, 1, NotSerialized)
                {
                    OperationRegion (KBIO, SystemIO, 0x60, 0x05)
                    Field (KBIO, ByteAcc, NoLock, Preserve)
                    {
                        KBDT,   8, 
                        Offset (0x02), 
                        Offset (0x03), 
                        Offset (0x04), 
                        KBST,   8
                    }

                    Debug = "SIOS"
                    Sleep (0xC8)
                    Local0 = (KBST & One)
                    While (Local0)
                    {
                        Local0 = KBDT /* \_SB_.PCI0.SBRG.SIOS.KBDT */
                        Sleep (0xC8)
                        Local0 = (KBST & One)
                    }

                    If ((Arg0 == One))
                    {
                        SIOK (Ones)
                        ENFG (0x0A)
                        If (KBFG)
                        {
                            OPT6 |= 0x10
                        }

                        If (MSFG)
                        {
                            OPT6 |= 0x20
                        }

                        EXFG ()
                    }

                    If ((Arg0 >= 0x03))
                    {
                        ENFG (0x0A)
                        CRE0 = Zero
                        CRE1 = Zero
                        CRE2 = Zero
                        Local0 = CRE3 /* \_SB_.PCI0.SBRG.CRE3 */
                        Sleep (0xC8)
                        If (KBFG)
                        {
                            CRE0 |= 0x41
                        }

                        If (MSFG)
                        {
                            CRE0 |= 0x22
                        }

                        EXFG ()
                    }

                    If (((Arg0 == One) | (Arg0 == 0x03)))
                    {
                        SLED (Ones)
                    }
                }

                Method (SIOW, 1, NotSerialized)
                {
                    Debug = "SIOW"
                    SIOK (Zero)
                    ENFG (0x0A)
                    While (OPT3)
                    {
                        Stall (0x80)
                        OPT3 = 0xFF
                    }

                    CRE0 &= 0x9F
                    OPT6 &= 0xCF
                    OPT2 &= 0xFE
                    EXFG ()
                    SLED (Zero)
                    If (((OSFL () == 0x04) && (Arg0 == 0x03)))
                    {
                        Sleep (0x07D0)
                    }
                }

                Method (SIOH, 0, NotSerialized)
                {
                    Notify (PWRB, 0x02) // Device Wake
                }

                OperationRegion (IOID, SystemIO, SPIO, 0x02)
                Field (IOID, ByteAcc, NoLock, Preserve)
                {
                    INDX,   8, 
                    DATA,   8
                }

                IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                    LDN,    8, 
                    Offset (0x22), 
                    FDCP,   1, 
                        ,   2, 
                    LPTP,   1, 
                    URAP,   1, 
                    URBP,   1, 
                    Offset (0x30), 
                    ACTR,   8, 
                    Offset (0x60), 
                    IOAH,   8, 
                    IOAL,   8, 
                    IOH2,   8, 
                    IOL2,   8, 
                    Offset (0x70), 
                    INTR,   8, 
                    Offset (0x74), 
                    DMCH,   8, 
                    Offset (0xE0), 
                    CRE0,   8, 
                    CRE1,   8, 
                    CRE2,   8, 
                    CRE3,   8, 
                    CRE4,   8, 
                    CRE5,   8, 
                    CRE6,   8, 
                    Offset (0xF0), 
                    OPT0,   8, 
                    OPT1,   8, 
                    OPT2,   8, 
                    OPT3,   8, 
                    OPT4,   8, 
                    OPT5,   8, 
                    OPT6,   8
                }

                Method (CGLD, 1, NotSerialized)
                {
                    Return (DerefOf (DCAT [Arg0]))
                }

                Method (DSTA, 1, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local0 = ACTR /* \_SB_.PCI0.SBRG.ACTR */
                    EXFG ()
                    If ((Local0 == 0xFF))
                    {
                        Return (Zero)
                    }

                    Local0 &= One
                    IOST |= (Local0 << Arg0)
                    If (Local0)
                    {
                        Return (0x0F)
                    }
                    ElseIf (((One << Arg0) & IOST))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (DCNT, 2, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local1 = (IOAH << 0x08)
                    Local1 |= IOAL
                    If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                    {
                        RDMA (Arg0, Arg1, Local1++)
                    }

                    ACTR = Arg1
                    RRIO (Arg0, Arg1, Local1, 0x08)
                    EXFG ()
                }

                Name (CRS1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y1B)
                    IRQNoFlags (_Y19)
                        {}
                    DMA (Compatibility, NotBusMaster, Transfer8, _Y1A)
                        {}
                })
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y19._INT, IRQM)  // _INT: Interrupts
                CreateByteField (CRS1, \_SB.PCI0.SBRG._Y1A._DMA, DMAM)  // _DMA: Direct Memory Access
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y1B._MIN, IO11)  // _MIN: Minimum Base Address
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y1B._MAX, IO12)  // _MAX: Maximum Base Address
                CreateByteField (CRS1, \_SB.PCI0.SBRG._Y1B._LEN, LEN1)  // _LEN: Length
                Name (CRS2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y1E)
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y1F)
                    IRQNoFlags (_Y1C)
                        {6}
                    DMA (Compatibility, NotBusMaster, Transfer8, _Y1D)
                        {2}
                })
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1C._INT, IRQE)  // _INT: Interrupts
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y1D._DMA, DMAE)  // _DMA: Direct Memory Access
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1E._MIN, IO21)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1E._MAX, IO22)  // _MAX: Maximum Base Address
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y1E._LEN, LEN2)  // _LEN: Length
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1F._MIN, IO31)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1F._MAX, IO32)  // _MAX: Maximum Base Address
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y1F._LEN, LEN3)  // _LEN: Length
                Method (DCRS, 2, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    IO11 = (IOAH << 0x08)
                    IO11 |= IOAL /* \_SB_.PCI0.SBRG.IO11 */
                    IO12 = IO11 /* \_SB_.PCI0.SBRG.IO11 */
                    Local0 = (FindSetRightBit (IO11) - One)
                    LEN1 = (One << Local0)
                    If (INTR)
                    {
                        IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.INTR */
                    }
                    Else
                    {
                        IRQM = Zero
                    }

                    If (((DMCH > 0x03) || (Arg1 == Zero)))
                    {
                        DMAM = Zero
                    }
                    Else
                    {
                        Local1 = (DMCH & 0x03)
                        DMAM = (One << Local1)
                    }

                    EXFG ()
                    Return (CRS1) /* \_SB_.PCI0.SBRG.CRS1 */
                }

                Method (DSRS, 2, NotSerialized)
                {
                    CreateWordField (Arg0, 0x09, IRQM)
                    CreateByteField (Arg0, 0x0C, DMAM)
                    CreateWordField (Arg0, 0x02, IO11)
                    ENFG (CGLD (Arg1))
                    Local1 = (IOAH << 0x08)
                    Local1 |= IOAL
                    RRIO (Arg1, Zero, Local1, 0x08)
                    RRIO (Arg1, One, IO11, 0x08)
                    IOAL = (IO11 & 0xFF)
                    IOAH = (IO11 >> 0x08)
                    If (IRQM)
                    {
                        FindSetRightBit (IRQM, Local0)
                        INTR = (Local0 - One)
                    }
                    Else
                    {
                        INTR = Zero
                    }

                    If (DMAM)
                    {
                        FindSetRightBit (DMAM, Local0)
                        DMCH = (Local0 - One)
                    }
                    Else
                    {
                        DMCH = 0x04
                    }

                    EXFG ()
                    DCNT (Arg1, One)
                }
            }

            Device (SMB0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (SMAD, PCI_Config, 0x20, 0x08)
                Field (SMAD, DWordAcc, NoLock, Preserve)
                {
                    SB1,    32, 
                    SB2,    32
                }

                OperationRegion (SMCF, PCI_Config, 0x48, 0x10)
                Field (SMCF, DWordAcc, NoLock, Preserve)
                {
                    SMPM,   4, 
                    SMT1,   28, 
                    SMT2,   32
                }

                OperationRegion (SME4, PCI_Config, 0xE4, 0x04)
                Field (SME4, AnyAcc, NoLock, Preserve)
                {
                        ,   17, 
                    XPME,   1
                }

                Method (GPMD, 1, NotSerialized)
                {
                    XPME = Arg0
                }

                Method (SMBB, 1, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        Local0 = (SB1 & 0xFFFE)
                    }
                    Else
                    {
                        Local0 = (SB2 & 0xFFFE)
                    }

                    Return (Local0)
                }

                Scope (^^PCI0)
                {
                    OperationRegion (SM00, SystemIO, SMB0.SMBB (One), 0x40)
                    Field (SM00, ByteAcc, NoLock, Preserve)
                    {
                        CTLR,   8, 
                        HSTS,   8, 
                        ADDR,   8, 
                        CMDR,   8, 
                        DAT0,   8, 
                        DAT1,   8, 
                        Offset (0x25), 
                        ALAD,   8, 
                        ALDL,   8, 
                        ALDH,   8
                    }

                    Field (SM00, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        SB32,   256
                    }

                    Method (SWFS, 0, NotSerialized)
                    {
                        Local0 = 0x0A
                        While (Local0)
                        {
                            If ((HSTS & 0x80))
                            {
                                Break
                            }

                            Sleep (One)
                            Local0--
                        }
                    }

                    Method (SRBY, 2, NotSerialized)
                    {
                        ADDR = Arg0
                        CMDR = Arg1
                        CTLR = 0x04
                        SWFS ()
                    }

                    Method (WBYT, 3, NotSerialized)
                    {
                        ADDR = Arg0
                        CMDR = Arg1
                        DAT0 = Arg2
                        CTLR = 0x06
                        SWFS ()
                    }

                    Method (CLAR, 0, NotSerialized)
                    {
                        Local0 = (HSTS & 0x40)
                        If ((Local0 == 0x40))
                        {
                            CTLR = 0x05
                            Stall (0x64)
                            Local1 = DAT0 /* \_SB_.PCI0.DAT0 */
                            HSTS = Zero
                            Stall (0x64)
                        }

                        SWFS ()
                    }

                    Method (SMWW, 4, NotSerialized)
                    {
                        ADDR = Arg0
                        CMDR = Arg1
                        DAT0 = Arg2
                        DAT1 = Arg3
                        CTLR = 0x08
                        SWFS ()
                    }

                    Method (RBYT, 2, NotSerialized)
                    {
                        ADDR = Arg0
                        CMDR = Arg1
                        CTLR = 0x07
                        SWFS ()
                        Return (DAT0) /* \_SB_.PCI0.DAT0 */
                    }

                    Method (SMRW, 2, NotSerialized)
                    {
                        ADDR = Arg0
                        CMDR = Arg1
                        CTLR = 0x09
                        SWFS ()
                        Local0 = DAT0 /* \_SB_.PCI0.DAT0 */
                        Local1 = (DAT1 << 0x08)
                        Local2 = (Local0 | Local1)
                        Return (Local2)
                    }

                    Method (SMRB, 2, NotSerialized)
                    {
                        ADDR = Arg0
                        CMDR = Arg1
                        CTLR = 0x0B
                        SWFS ()
                        Return (SB32) /* \_SB_.PCI0.SB32 */
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (IMAP)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                OperationRegion (PIMC, PCI_Config, 0x60, 0x54)
                Field (PIMC, ByteAcc, NoLock, Preserve)
                {
                    PIID,   8, 
                    Offset (0x04), 
                    PILN,   8, 
                    Offset (0x08), 
                    PIU0,   8, 
                    PIU2,   8, 
                    UBR1,   8, 
                    UBR2,   8, 
                    Offset (0x0D), 
                    Offset (0x0E), 
                    PIRM,   8, 
                    PMUD,   8, 
                    PAZA,   8, 
                    GPUR,   8, 
                    PR0E,   8, 
                    Offset (0x14), 
                    PIRA,   8, 
                    PIRB,   8, 
                    PIRC,   8, 
                    PIRD,   8, 
                    Offset (0x1C), 
                    P0EA,   8, 
                    P0EB,   8, 
                    P0EC,   8, 
                    P0ED,   8, 
                    P1EA,   8, 
                    P1EB,   8, 
                    P1EC,   8, 
                    P1ED,   8, 
                    P2EA,   8, 
                    P2EB,   8, 
                    P2EC,   8, 
                    P2ED,   8, 
                    P3EA,   8, 
                    P3EB,   8, 
                    P3EC,   8, 
                    P3ED,   8, 
                    P4EA,   8, 
                    P4EB,   8, 
                    P4EC,   8, 
                    P4ED,   8, 
                    P5EA,   8, 
                    P5EB,   8, 
                    P5EC,   8, 
                    P5ED,   8, 
                    P6EA,   8, 
                    P6EB,   8, 
                    P6EC,   8, 
                    P6ED,   8, 
                    P7EA,   8, 
                    P7EB,   8, 
                    P7EC,   8, 
                    P7ED,   8, 
                    Offset (0x4C), 
                    XVE0,   8, 
                    XVE1,   8, 
                    XVE2,   8, 
                    XVE3,   8, 
                    XVE4,   8, 
                    XVE5,   8, 
                    XVE6,   8, 
                    XVE7,   8
                }
            }

            Device (USB0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Name (_S1D, One)  // _S1D: S1 Device State
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Name (_S1D, One)  // _S1D: S1 Device State
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x05, 0x04))
                }
            }

            Device (US15)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Name (_S1D, One)  // _S1D: S1 Device State
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (US12)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Name (_S1D, One)  // _S1D: S1 Device State
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x17, 0x04))
                }
            }

            Device (NMAC)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x05
                })
                Scope (\_GPE)
                {
                    Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                    {
                        Notify (\_SB.PCI0.NMAC, 0x02) // Device Wake
                        Notify (\_SB.PWRB, 0x02) // Device Wake
                    }
                }
            }

            Device (IDE0)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Name (PTS0, Zero)
                Name (SID0, Zero)
                Name (SID1, Zero)
                Name (SID2, Zero)
                Name (SID3, Zero)
                Name (SID4, Zero)
                Name (SID5, Zero)
                OperationRegion (IRQM, SystemIO, 0x21, One)
                Field (IRQM, ByteAcc, NoLock, Preserve)
                {
                    IR0M,   1
                }

                Name (REGF, One)
                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        REGF = Arg1
                    }
                }

                OperationRegion (A090, PCI_Config, 0x50, 0x18)
                Field (A090, DWordAcc, NoLock, Preserve)
                {
                    ID20,   16, 
                    Offset (0x08), 
                    IDTS,   16, 
                    IDTP,   16, 
                    ID22,   32, 
                    UMSS,   16, 
                    UMSP,   16
                }

                Name (TIM0, Package (0x07)
                {
                    Package (0x05)
                    {
                        0x3C, 
                        0x78, 
                        0xB4, 
                        0xF0, 
                        0x0384
                    }, 

                    Package (0x05)
                    {
                        0x11, 
                        0x20, 
                        0x22, 
                        0x47, 
                        0xA8
                    }, 

                    Package (0x07)
                    {
                        0x78, 
                        0x49, 
                        0x3C, 
                        0x2D, 
                        0x1E, 
                        0x14, 
                        0x0F
                    }, 

                    Package (0x05)
                    {
                        0x05, 
                        0x04, 
                        0x03, 
                        0x02, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x02, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        0x02, 
                        One, 
                        Zero, 
                        Zero, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06
                    }, 

                    Package (0x07)
                    {
                        0x02, 
                        One, 
                        Zero, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07
                    }
                })
                Name (TMD0, Buffer (0x14){})
                CreateDWordField (TMD0, Zero, PIO0)
                CreateDWordField (TMD0, 0x04, DMA0)
                CreateDWordField (TMD0, 0x08, PIO1)
                CreateDWordField (TMD0, 0x0C, DMA1)
                CreateDWordField (TMD0, 0x10, CHNF)
                OperationRegion (CFG2, PCI_Config, 0x58, 0x0C)
                Field (CFG2, DWordAcc, NoLock, Preserve)
                {
                    SSPT,   8, 
                    SMPT,   8, 
                    PSPT,   8, 
                    PMPT,   8, 
                    SSAS,   2, 
                    SMAS,   2, 
                    PSAS,   2, 
                    PMAS,   2, 
                    Offset (0x06), 
                    SDDR,   4, 
                    SDDA,   4, 
                    PDDR,   4, 
                    PDDA,   4, 
                    SSUT,   3, 
                        ,   3, 
                    SSUE,   2, 
                    SMUT,   3, 
                        ,   3, 
                    SMUE,   2, 
                    PSUT,   3, 
                        ,   3, 
                    PSUE,   2, 
                    PMUT,   3, 
                        ,   3, 
                    PMUE,   2
                }

                Name (GMPT, Zero)
                Name (GMUE, Zero)
                Name (GMUT, Zero)
                Name (GSPT, Zero)
                Name (GSUE, Zero)
                Name (GSUT, Zero)
                Device (CHN0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Debug = "GTM_CHN0"
                        Return (GTM (PMPT, PMUE, PMUT, PSPT, PSUE, PSUT))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Debug = "STM_CHN0"
                        Debug = Arg0
                        TMD0 = Arg0
                        GMPT = PMPT /* \_SB_.PCI0.IDE0.PMPT */
                        GMUE = PMUE /* \_SB_.PCI0.IDE0.PMUE */
                        GMUT = PMUT /* \_SB_.PCI0.IDE0.PMUT */
                        GSPT = PSPT /* \_SB_.PCI0.IDE0.PSPT */
                        GSUE = PSUE /* \_SB_.PCI0.IDE0.PSUE */
                        GSUT = PSUT /* \_SB_.PCI0.IDE0.PSUT */
                        STM ()
                        PMPT = GMPT /* \_SB_.PCI0.IDE0.GMPT */
                        PMUE = GMUE /* \_SB_.PCI0.IDE0.GMUE */
                        PMUT = GMUT /* \_SB_.PCI0.IDE0.GMUT */
                        PSPT = GSPT /* \_SB_.PCI0.IDE0.GSPT */
                        PSUE = GSUE /* \_SB_.PCI0.IDE0.GSUE */
                        PSUT = GSUT /* \_SB_.PCI0.IDE0.GSUT */
                        ATA0 = GTF (Zero, Arg1)
                        ATA1 = GTF (One, Arg2)
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Debug = "_GTF_CHN0_DRV0"
                            Return (Concatenate (RATA (ATA0), FZTF))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Debug = "_GTF_CHN0_DRV1"
                            Return (Concatenate (RATA (ATA1), FZTF))
                        }
                    }
                }

                Device (CHN1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Debug = "GTM_CHN1"
                        Return (GTM (SMPT, SMUE, SMUT, SSPT, SSUE, SSUT))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Debug = Arg0
                        TMD0 = Arg0
                        GMPT = SMPT /* \_SB_.PCI0.IDE0.SMPT */
                        GMUE = SMUE /* \_SB_.PCI0.IDE0.SMUE */
                        GMUT = SMUT /* \_SB_.PCI0.IDE0.SMUT */
                        GSPT = SSPT /* \_SB_.PCI0.IDE0.SSPT */
                        GSUE = SSUE /* \_SB_.PCI0.IDE0.SSUE */
                        GSUT = SSUT /* \_SB_.PCI0.IDE0.SSUT */
                        STM ()
                        SMPT = GMPT /* \_SB_.PCI0.IDE0.GMPT */
                        SMUE = GMUE /* \_SB_.PCI0.IDE0.GMUE */
                        SMUT = GMUT /* \_SB_.PCI0.IDE0.GMUT */
                        SSPT = GSPT /* \_SB_.PCI0.IDE0.GSPT */
                        SSUE = GSUE /* \_SB_.PCI0.IDE0.GSUE */
                        SSUT = GSUT /* \_SB_.PCI0.IDE0.GSUT */
                        ATA2 = GTF (Zero, Arg1)
                        ATA3 = GTF (One, Arg2)
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Debug = "_GTF_CHN1_DRV0"
                            Return (Concatenate (RATA (ATA2), FZTF))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Debug = "_GTF_CHN1_DRV1"
                            Return (Concatenate (RATA (ATA3), FZTF))
                        }
                    }
                }

                Method (DRMP, 0, NotSerialized)
                {
                    Local1 = (CPB0 >> 0x04)
                    Local0 = (Local1 & 0x0F)
                    Return (Local0)
                }

                Method (GTM, 6, Serialized)
                {
                    PIO0 = Ones
                    PIO1 = Ones
                    DMA0 = Ones
                    DMA1 = Ones
                    CHNF = 0x10
                    If (REGF){}
                    Else
                    {
                        Return (TMD0) /* \_SB_.PCI0.IDE0.TMD0 */
                    }

                    If ((PTS0 == One))
                    {
                        If (OSFL ())
                        {
                            IR0M = One
                        }
                    }

                    Local6 = Match (DerefOf (TIM0 [One]), MEQ, Arg0, MTR, Zero, 
                        Zero)
                    Local7 = DerefOf (DerefOf (TIM0 [Zero]) [Local6])
                    DMA0 = Local7
                    PIO0 = Local7
                    Local6 = Match (DerefOf (TIM0 [One]), MEQ, Arg3, MTR, Zero, 
                        Zero)
                    Local7 = DerefOf (DerefOf (TIM0 [Zero]) [Local6])
                    DMA1 = Local7
                    PIO1 = Local7
                    If (Arg1)
                    {
                        Local5 = DerefOf (DerefOf (TIM0 [0x05]) [Arg2])
                        DMA0 = DerefOf (DerefOf (TIM0 [0x02]) [Local5])
                        CHNF |= One
                    }

                    If (Arg4)
                    {
                        Local5 = DerefOf (DerefOf (TIM0 [0x05]) [Arg5])
                        DMA1 = DerefOf (DerefOf (TIM0 [0x02]) [Local5])
                        CHNF |= 0x04
                    }

                    Debug = TMD0 /* \_SB_.PCI0.IDE0.TMD0 */
                    Return (TMD0) /* \_SB_.PCI0.IDE0.TMD0 */
                }

                Method (STM, 0, Serialized)
                {
                    If (REGF){}
                    Else
                    {
                        Return (Zero)
                    }

                    If (PTS0)
                    {
                        ID20 = SID0 /* \_SB_.PCI0.IDE0.SID0 */
                        IDTS = SID1 /* \_SB_.PCI0.IDE0.SID1 */
                        IDTP = SID2 /* \_SB_.PCI0.IDE0.SID2 */
                        ID22 = SID3 /* \_SB_.PCI0.IDE0.SID3 */
                        UMSS = SID4 /* \_SB_.PCI0.IDE0.SID4 */
                        UMSP = SID5 /* \_SB_.PCI0.IDE0.SID5 */
                    }
                    Else
                    {
                        SID0 = ID20 /* \_SB_.PCI0.IDE0.ID20 */
                        SID1 = IDTS /* \_SB_.PCI0.IDE0.IDTS */
                        SID2 = IDTP /* \_SB_.PCI0.IDE0.IDTP */
                        SID3 = ID22 /* \_SB_.PCI0.IDE0.ID22 */
                        SID4 = UMSS /* \_SB_.PCI0.IDE0.UMSS */
                        SID5 = UMSP /* \_SB_.PCI0.IDE0.UMSP */
                    }

                    PTS0 = Zero
                    GMUE = Zero
                    GMUT = Zero
                    GSUE = Zero
                    GSUT = Zero
                    If ((CHNF & One))
                    {
                        Local0 = Match (DerefOf (TIM0 [0x02]), MLE, DMA0, MTR, Zero, 
                            Zero)
                        If ((Local0 > 0x06))
                        {
                            Local0 = 0x06
                        }

                        GMUT = DerefOf (DerefOf (TIM0 [0x06]) [Local0])
                        GMUE |= 0x03
                    }
                    ElseIf (((PIO0 == Ones) | (PIO0 == Zero)))
                    {
                        If (((DMA0 < Ones) & (DMA0 > Zero)))
                        {
                            PIO0 = DMA0 /* \_SB_.PCI0.IDE0.DMA0 */
                        }
                    }

                    If ((CHNF & 0x04))
                    {
                        Local0 = Match (DerefOf (TIM0 [0x02]), MLE, DMA1, MTR, Zero, 
                            Zero)
                        If ((Local0 > 0x06))
                        {
                            Local0 = 0x06
                        }

                        GSUT = DerefOf (DerefOf (TIM0 [0x06]) [Local0])
                        GSUE |= 0x03
                    }
                    ElseIf (((PIO1 == Ones) | (PIO1 == Zero)))
                    {
                        If (((DMA1 < Ones) & (DMA1 > Zero)))
                        {
                            PIO1 = DMA1 /* \_SB_.PCI0.IDE0.DMA1 */
                        }
                    }

                    Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIO0, MTR, Zero, 
                        Zero) & 0x07)
                    Local1 = DerefOf (DerefOf (TIM0 [One]) [Local0])
                    GMPT = Local1
                    Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIO1, MTR, Zero, 
                        Zero) & 0x07)
                    Local1 = DerefOf (DerefOf (TIM0 [One]) [Local0])
                    GSPT = Local1
                    Return (Zero)
                }

                Name (AT01, Buffer (0x07)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF         // .......
                })
                Name (AT02, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90         // .......
                })
                Name (AT03, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6         // .......
                })
                Name (AT04, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91         // .......
                })
                Name (ATA0, Buffer (0x1D){})
                Name (ATA1, Buffer (0x1D){})
                Name (ATA2, Buffer (0x1D){})
                Name (ATA3, Buffer (0x1D){})
                Name (ATAB, Buffer (0x1D){})
                CreateByteField (ATAB, Zero, CMDC)
                Method (GTFB, 3, Serialized)
                {
                    Local0 = (CMDC * 0x38)
                    Local1 = (Local0 + 0x08)
                    CreateField (ATAB, Local1, 0x38, CMDX)
                    Local0 = (CMDC * 0x07)
                    CreateByteField (ATAB, (Local0 + 0x02), A001)
                    CreateByteField (ATAB, (Local0 + 0x06), A005)
                    CMDX = Arg0
                    A001 = Arg1
                    A005 = Arg2
                    CMDC++
                }

                Method (GTF, 2, Serialized)
                {
                    Debug = "GTF_Entry"
                    Debug = Arg1
                    CMDC = Zero
                    Name (ID49, 0x0C00)
                    Name (ID59, Zero)
                    Name (ID53, 0x04)
                    Name (ID63, 0x0F00)
                    Name (ID88, 0x0F00)
                    Name (IRDY, One)
                    Name (PIOT, Zero)
                    Name (DMAT, Zero)
                    If ((SizeOf (Arg1) == 0x0200))
                    {
                        CreateWordField (Arg1, 0x62, IW49)
                        ID49 = IW49 /* \_SB_.PCI0.IDE0.GTF_.IW49 */
                        CreateWordField (Arg1, 0x6A, IW53)
                        ID53 = IW53 /* \_SB_.PCI0.IDE0.GTF_.IW53 */
                        CreateWordField (Arg1, 0x7E, IW63)
                        ID63 = IW63 /* \_SB_.PCI0.IDE0.GTF_.IW63 */
                        CreateWordField (Arg1, 0x76, IW59)
                        ID59 = IW59 /* \_SB_.PCI0.IDE0.GTF_.IW59 */
                        CreateWordField (Arg1, 0xB0, IW88)
                        ID88 = IW88 /* \_SB_.PCI0.IDE0.GTF_.IW88 */
                    }

                    Local7 = 0xA0
                    If (Arg0)
                    {
                        Local7 = 0xB0
                        IRDY = (CHNF & 0x08)
                        If ((CHNF & 0x10))
                        {
                            PIOT = PIO1 /* \_SB_.PCI0.IDE0.PIO1 */
                        }
                        Else
                        {
                            PIOT = PIO0 /* \_SB_.PCI0.IDE0.PIO0 */
                        }

                        If ((CHNF & 0x04))
                        {
                            If ((CHNF & 0x10))
                            {
                                DMAT = DMA1 /* \_SB_.PCI0.IDE0.DMA1 */
                            }
                            Else
                            {
                                DMAT = DMA0 /* \_SB_.PCI0.IDE0.DMA0 */
                            }
                        }
                    }
                    Else
                    {
                        IRDY = (CHNF & 0x02)
                        PIOT = PIO0 /* \_SB_.PCI0.IDE0.PIO0 */
                        If ((CHNF & One))
                        {
                            DMAT = DMA0 /* \_SB_.PCI0.IDE0.DMA0 */
                        }
                    }

                    If ((((ID53 & 0x04) && (ID88 & 0xFF00)) && DMAT))
                    {
                        Local1 = Match (DerefOf (TIM0 [0x02]), MLE, DMAT, MTR, Zero, 
                            Zero)
                        If ((Local1 > 0x06))
                        {
                            Local1 = 0x06
                        }

                        GTFB (AT01, (0x40 | Local1), Local7)
                    }
                    ElseIf (((ID63 & 0xFF00) && PIOT))
                    {
                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIOT, MTR, Zero, 
                            Zero) & 0x03)
                        Local1 = (0x20 | DerefOf (DerefOf (TIM0 [0x04]) [Local0]))
                        GTFB (AT01, Local1, Local7)
                    }

                    If (IRDY)
                    {
                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIOT, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = (0x08 | DerefOf (DerefOf (TIM0 [0x03]) [Local0]))
                        GTFB (AT01, Local1, Local7)
                    }
                    ElseIf ((ID49 & 0x0400))
                    {
                        GTFB (AT01, One, Local7)
                    }

                    If (((ID59 & 0x0100) && (ID59 & 0xFF)))
                    {
                        GTFB (AT03, (ID59 & 0xFF), Local7)
                    }

                    Debug = "ATAB_GTF"
                    Debug = ATAB /* \_SB_.PCI0.IDE0.ATAB */
                    Return (ATAB) /* \_SB_.PCI0.IDE0.ATAB */
                }

                Method (RATA, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, CMDN)
                    Local0 = (CMDN * 0x38)
                    CreateField (Arg0, 0x08, Local0, RETB)
                    Debug = RETB /* \_SB_.PCI0.IDE0.RATA.RETB */
                    Return (RETB) /* \_SB_.PCI0.IDE0.RATA.RETB */
                }
            }

            Device (ATA0)
            {
                Name (_ADR, 0x00090000)  // _ADR: Address
                Device (PRI0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x17, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.ATA0.PRI0.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Device (MAST)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Concatenate (Local0, FZTF))
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xB0, 0xEF         // .F.....
                                }
                            Return (Concatenate (Local0, FZTF))
                        }
                    }
                }

                Device (SEC0)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Name (SSTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x17, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SSTM) /* \_SB_.PCI0.ATA0.SEC0.SSTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SSTM = Arg0
                    }

                    Device (MAST)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Concatenate (Local0, FZTF))
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xB0, 0xEF         // .F.....
                                }
                            Return (Concatenate (Local0, FZTF))
                        }
                    }
                }

                Method (DRMP, 0, NotSerialized)
                {
                    Local0 = 0x08
                    Local1 = (CPB0 >> Local0)
                    Local0 = (Local1 & 0x3F)
                    Return (Local0)
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (Zero, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PR01) /* \_SB_.PR01 */
                }
            }

            Device (HDAC)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Name (SCID, Zero)
                Name (SACW, Zero)
                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    If (SCID)
                    {
                        PMDS = Zero
                        PMEN = Zero
                        CDID = SCID /* \_SB_.PCI0.HDAC.SCID */
                        AOCW = SACW /* \_SB_.PCI0.HDAC.SACW */
                    }
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SACW = AOCW /* \_SB_.PCI0.HDAC.AOCW */
                    SCID = CDID /* \_SB_.PCI0.HDAC.CDID */
                    PMST = One
                    PMDS = 0x03
                    PMEN = One
                }

                OperationRegion (PMCF, PCI_Config, 0x48, 0x02)
                Field (PMCF, ByteAcc, NoLock, Preserve)
                {
                    PMDS,   2, 
                    Offset (0x01), 
                    PMEN,   1, 
                        ,   6, 
                    PMST,   1
                }

                OperationRegion (DCF2, PCI_Config, 0xE0, 0x08)
                Field (DCF2, ByteAcc, NoLock, Preserve)
                {
                    AOCW,   32, 
                    Offset (0x06), 
                    CDID,   8
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x15, 0x04))
                }
            }

            Device (IXVE)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
            }

            Device (MXR0)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10) /* \_SB_.AR10 */
                    }

                    Return (PR10) /* \_SB_.PR10 */
                }
            }

            Device (BR11)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR11) /* \_SB_.AR11 */
                    }

                    Return (PR11) /* \_SB_.PR11 */
                }
            }

            Device (BR12)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR12) /* \_SB_.AR12 */
                    }

                    Return (PR12) /* \_SB_.PR12 */
                }
            }

            Device (BR13)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR13) /* \_SB_.AR13 */
                    }

                    Return (PR13) /* \_SB_.PR13 */
                }
            }

            Device (BR14)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PR14) /* \_SB_.PR14 */
                }
            }

            Device (BR15)
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR15) /* \_SB_.AR15 */
                    }

                    Return (PR15) /* \_SB_.PR15 */
                }
            }

            Device (BR16)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR16) /* \_SB_.AR16 */
                    }

                    Return (PR16) /* \_SB_.PR16 */
                }
            }

            Device (BR17)
            {
                Name (_ADR, 0x00170000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR17) /* \_SB_.AR17 */
                    }

                    Return (PR17) /* \_SB_.PR17 */
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L10, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                \_SB.PCI0.SBRG.SIOH ()
            }

            Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                \_SB.PCI0.SBRG.SIOH ()
            }

            Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.SMB0, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB0, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.US15, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L17, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.US12, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L00, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.P0P1, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L15, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.HDAC, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L11, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.MXR0, 0x02) // Device Wake
                Notify (\_SB.PCI0.BR11, 0x02) // Device Wake
                Notify (\_SB.PCI0.BR12, 0x02) // Device Wake
                Notify (\_SB.PCI0.BR13, 0x02) // Device Wake
                Notify (\_SB.PCI0.BR14, 0x02) // Device Wake
                Notify (\_SB.PCI0.BR15, 0x02) // Device Wake
                Notify (\_SB.PCI0.BR16, 0x02) // Device Wake
                Notify (\_SB.PCI0.BR17, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Scope (_SB)
    {
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        CreateWordField (BUFA, One, ICRS)
        Method (LSTA, 1, NotSerialized)
        {
            If (Arg0)
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (LPRS, 2, NotSerialized)
        {
            If (PICM)
            {
                Return (Arg1)
            }
            Else
            {
                Return (Arg0)
            }
        }

        Method (LCRS, 1, NotSerialized)
        {
            If (PICM)
            {
                Name (BUFB, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y20)
                    {
                        0x00000011,
                    }
                })
                CreateByteField (BUFB, \_SB.LCRS._Y20._INT, AIRQ)  // _INT: Interrupts
                AIRQ = Arg0
                If ((Arg0 == One))
                {
                    AIRQ = 0x17
                }

                If ((Arg0 == 0x02))
                {
                    AIRQ = 0x16
                }

                If ((Arg0 == 0x0D))
                {
                    AIRQ = 0x15
                }

                If ((Arg0 == 0x08))
                {
                    AIRQ = 0x14
                }

                If ((Arg0 == 0x0C))
                {
                    AIRQ = 0x13
                }

                If ((Arg0 == 0x06))
                {
                    AIRQ = 0x12
                }

                If ((Arg0 == 0x04))
                {
                    AIRQ = 0x11
                }

                If ((Arg0 == 0x03))
                {
                    AIRQ = 0x10
                }

                If ((Arg0 == 0x0F))
                {
                    AIRQ = 0x0F
                }

                If ((Arg0 == 0x0E))
                {
                    AIRQ = 0x0E
                }

                If ((Arg0 == 0x0B))
                {
                    AIRQ = 0x0B
                }

                If ((Arg0 == 0x0A))
                {
                    AIRQ = 0x0A
                }

                If ((Arg0 == 0x09))
                {
                    AIRQ = 0x09
                }

                If ((Arg0 == 0x07))
                {
                    AIRQ = 0x07
                }

                If ((Arg0 == 0x05))
                {
                    AIRQ = 0x05
                }

                Return (BUFB) /* \_SB_.LCRS.BUFB */
            }
            Else
            {
                ICRS = (One << Arg0)
                Return (BUFA) /* \_SB_.BUFA */
            }
        }

        Method (LCRO, 1, NotSerialized)
        {
            If (PICM)
            {
                Name (BUFB, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y21)
                    {
                        0x00000014,
                    }
                })
                CreateByteField (BUFB, \_SB.LCRO._Y21._INT, AIRQ)  // _INT: Interrupts
                AIRQ = Arg0
                If ((Arg0 == One))
                {
                    AIRQ = 0x17
                }

                If ((Arg0 == 0x02))
                {
                    AIRQ = 0x16
                }

                If ((Arg0 == 0x0D))
                {
                    AIRQ = 0x15
                }

                If ((Arg0 == 0x08))
                {
                    AIRQ = 0x14
                }

                If ((Arg0 == 0x0C))
                {
                    AIRQ = 0x13
                }

                If ((Arg0 == 0x06))
                {
                    AIRQ = 0x12
                }

                If ((Arg0 == 0x04))
                {
                    AIRQ = 0x11
                }

                If ((Arg0 == 0x03))
                {
                    AIRQ = 0x10
                }

                If ((Arg0 == 0x0F))
                {
                    AIRQ = 0x0F
                }

                If ((Arg0 == 0x0E))
                {
                    AIRQ = 0x0E
                }

                If ((Arg0 == 0x0B))
                {
                    AIRQ = 0x0B
                }

                If ((Arg0 == 0x0A))
                {
                    AIRQ = 0x0A
                }

                If ((Arg0 == 0x09))
                {
                    AIRQ = 0x09
                }

                If ((Arg0 == 0x07))
                {
                    AIRQ = 0x07
                }

                If ((Arg0 == 0x05))
                {
                    AIRQ = 0x05
                }

                Return (BUFB) /* \_SB_.LCRO.BUFB */
            }
            Else
            {
                ICRS = (One << Arg0)
                Return (BUFA) /* \_SB_.BUFA */
            }
        }

        Method (LSRS, 1, NotSerialized)
        {
            If (PICM)
            {
                CreateByteField (Arg0, 0x05, SAIR)
                Local0 = SAIR /* \_SB_.LSRS.SAIR */
                If ((Local0 == 0x17))
                {
                    Local0 = One
                }

                If ((Local0 == 0x16))
                {
                    Local0 = 0x02
                }

                If ((Local0 == 0x15))
                {
                    Local0 = 0x0D
                }

                If ((Local0 == 0x14))
                {
                    Local0 = 0x08
                }

                If ((Local0 == 0x13))
                {
                    Local0 = 0x0C
                }

                If ((Local0 == 0x12))
                {
                    Local0 = 0x06
                }

                If ((Local0 == 0x11))
                {
                    Local0 = 0x04
                }

                If ((Local0 == 0x10))
                {
                    Local0 = 0x03
                }

                If ((Local0 == 0x0F))
                {
                    Local0 = 0x0F
                }

                If ((Local0 == 0x0E))
                {
                    Local0 = 0x0E
                }

                If ((Local0 == 0x0B))
                {
                    Local0 = 0x0B
                }

                If ((Local0 == 0x0A))
                {
                    Local0 = 0x0A
                }

                If ((Local0 == 0x09))
                {
                    Local0 = 0x09
                }

                If ((Local0 == 0x07))
                {
                    Local0 = 0x07
                }

                If ((Local0 == 0x05))
                {
                    Local0 = 0x05
                }

                Return (Local0)
            }
            Else
            {
                CreateWordField (Arg0, One, ISRS)
                FindSetRightBit (ISRS, Local0)
                Return (Local0--)
            }
        }

        Method (LSRO, 1, NotSerialized)
        {
            If (PICM)
            {
                CreateByteField (Arg0, 0x05, SAIR)
                Local0 = SAIR /* \_SB_.LSRO.SAIR */
                If ((Local0 == 0x17))
                {
                    Local0 = One
                }

                If ((Local0 == 0x16))
                {
                    Local0 = 0x02
                }

                If ((Local0 == 0x15))
                {
                    Local0 = 0x0D
                }

                If ((Local0 == 0x14))
                {
                    Local0 = 0x08
                }

                If ((Local0 == 0x13))
                {
                    Local0 = 0x0C
                }

                If ((Local0 == 0x12))
                {
                    Local0 = 0x06
                }

                If ((Local0 == 0x11))
                {
                    Local0 = 0x04
                }

                If ((Local0 == 0x10))
                {
                    Local0 = 0x03
                }

                If ((Local0 == 0x0F))
                {
                    Local0 = 0x0F
                }

                If ((Local0 == 0x0E))
                {
                    Local0 = 0x0E
                }

                If ((Local0 == 0x0B))
                {
                    Local0 = 0x0B
                }

                If ((Local0 == 0x0A))
                {
                    Local0 = 0x0A
                }

                If ((Local0 == 0x09))
                {
                    Local0 = 0x09
                }

                If ((Local0 == 0x07))
                {
                    Local0 = 0x07
                }

                If ((Local0 == 0x05))
                {
                    Local0 = 0x05
                }

                Return (Local0)
            }
            Else
            {
                CreateWordField (Arg0, One, ISRS)
                FindSetRightBit (ISRS, Local0)
                Return (Local0--)
            }
        }

        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIRA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIRA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.PIRA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIRA = LSRS (Arg0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIRB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIRB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.PIRB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIRB = LSRS (Arg0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIRC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIRC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.PIRC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIRC = LSRS (Arg0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIRD))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIRD = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.PIRD))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIRD = LSRS (Arg0)
            }
        }

        Device (LN0A)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P0EA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P0EA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P0EA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P0EA = LSRS (Arg0)
            }
        }

        Device (LN0B)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P0EB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P0EB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P0EB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P0EB = LSRS (Arg0)
            }
        }

        Device (LN0C)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P0EC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P0EC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P0EC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P0EC = LSRS (Arg0)
            }
        }

        Device (LN0D)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P0ED))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P0ED = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P0ED))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P0ED = LSRS (Arg0)
            }
        }

        Device (LN1A)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x09)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P1EA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P1EA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P1EA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P1EA = LSRS (Arg0)
            }
        }

        Device (LN1B)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0A)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P1EB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P1EB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P1EB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P1EB = LSRS (Arg0)
            }
        }

        Device (LN1C)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0B)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P1EC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P1EC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P1EC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P1EC = LSRS (Arg0)
            }
        }

        Device (LN1D)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0C)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P1ED))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P1ED = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P1ED))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P1ED = LSRS (Arg0)
            }
        }

        Device (LN2A)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0D)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P2EA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P2EA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P2EA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P2EA = LSRS (Arg0)
            }
        }

        Device (LN2B)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0E)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P2EB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P2EB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P2EB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P2EB = LSRS (Arg0)
            }
        }

        Device (LN2C)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0F)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P2EC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P2EC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P2EC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P2EC = LSRS (Arg0)
            }
        }

        Device (LN2D)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x10)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P2ED))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P2ED = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P2ED))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P2ED = LSRS (Arg0)
            }
        }

        Device (LN3A)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x11)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P3EA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P3EA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P3EA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P3EA = LSRS (Arg0)
            }
        }

        Device (LN3B)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x12)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P3EB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P3EB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P3EB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P3EB = LSRS (Arg0)
            }
        }

        Device (LN3C)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x13)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P3EC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P3EC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P3EC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P3EC = LSRS (Arg0)
            }
        }

        Device (LN3D)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x14)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P3ED))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P3ED = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P3ED))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P3ED = LSRS (Arg0)
            }
        }

        Device (LN4A)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x15)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P4EA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P4EA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P4EA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P4EA = LSRS (Arg0)
            }
        }

        Device (LN4B)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x16)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P4EB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P4EB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P4EB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P4EB = LSRS (Arg0)
            }
        }

        Device (LN4C)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x17)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P4EC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P4EC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P4EC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P4EC = LSRS (Arg0)
            }
        }

        Device (LN4D)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x18)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P4ED))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P4ED = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P4ED))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P4ED = LSRS (Arg0)
            }
        }

        Device (LN5A)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x19)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P5EA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P5EA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P5EA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P5EA = LSRS (Arg0)
            }
        }

        Device (LN5B)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x1A)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P5EB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P5EB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P5EB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P5EB = LSRS (Arg0)
            }
        }

        Device (LN5C)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x1B)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P5EC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P5EC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P5EC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P5EC = LSRS (Arg0)
            }
        }

        Device (LN5D)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x1B)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P5ED))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P5ED = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P5ED))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P5ED = LSRS (Arg0)
            }
        }

        Device (LN6A)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x1C)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P6EA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P6EA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P6EA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P6EA = LSRS (Arg0)
            }
        }

        Device (LN6B)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x1D)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P6EB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P6EB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P6EB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P6EB = LSRS (Arg0)
            }
        }

        Device (LN6C)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x1E)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P6EC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P6EC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P6EC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P6EC = LSRS (Arg0)
            }
        }

        Device (LN6D)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x1F)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P6ED))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P6ED = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P6ED))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P6ED = LSRS (Arg0)
            }
        }

        Device (LN7A)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x20)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P7EA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P7EA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P7EA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P7EA = LSRS (Arg0)
            }
        }

        Device (LN7B)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x21)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P7EB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P7EB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P7EB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P7EB = LSRS (Arg0)
            }
        }

        Device (LN7C)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x22)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P7EC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P7EC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P7EC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P7EC = LSRS (Arg0)
            }
        }

        Device (LN7D)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x23)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P7ED))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P7ED = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P7ED))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P7ED = LSRS (Arg0)
            }
        }

        Device (LUB0)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x24)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIU0))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSB0, RSU1))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIU0 = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.PIU0))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIU0 = LSRO (Arg0)
            }
        }

        Device (LUB2)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x25)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIU2))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSB2, RSI1))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIU2 = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.PIU2))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIU2 = LSRO (Arg0)
            }
        }

        Device (LMAC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x26)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PILN))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSAC, RSMA))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PILN = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.PILN))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PILN = LSRO (Arg0)
            }
        }

        Device (LAZA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x27)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PAZA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSZA, RSII))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PAZA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.PAZA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PAZA = LSRO (Arg0)
            }
        }

        Device (SGRU)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x28)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.GPUR))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSRU, RSIG))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.GPUR = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.GPUR))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.GPUR = LSRO (Arg0)
            }
        }

        Device (LSMB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x29)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIRM))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSMB, RSII))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIRM = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.PIRM))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIRM = LSRO (Arg0)
            }
        }

        Device (LPMU)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x2A)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PMUD))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSMU, RSII))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PMUD = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.PMUD))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PMUD = LSRO (Arg0)
            }
        }

        Device (LSA0)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x2B)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIID))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSA0, RSSA))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIID = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.PIID))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIID = LSRO (Arg0)
            }
        }

        Device (LATA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x2C)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PR0E))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSTA, RSII))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PR0E = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If (OSFL ())
                {
                    Return (Zero)
                }
                Else
                {
                    Return (LCRO (^^PCI0.IMAP.PR0E))
                }
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PR0E = LSRO (Arg0)
            }
        }

        Device (UB11)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x2D)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.UBR1))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RS11, RSU2))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.UBR1 = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.UBR1))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.UBR1 = LSRO (Arg0)
            }
        }

        Device (UB12)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x2E)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.UBR2))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RS12, RSI2))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.UBR2 = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.UBR2))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.UBR2 = LSRO (Arg0)
            }
        }
    }

    Scope (_SB)
    {
        Name (XCPD, Zero)
        Name (XNPT, One)
        Name (XCAP, 0x02)
        Name (XDCP, 0x04)
        Name (XDCT, 0x08)
        Name (XDST, 0x0A)
        Name (XLCP, 0x0C)
        Name (XLCT, 0x10)
        Name (XLST, 0x12)
        Name (XSCP, 0x14)
        Name (XSCT, 0x18)
        Name (XSST, 0x1A)
        Name (XRCT, 0x1C)
        Mutex (MUTE, 0x00)
        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RBPE.XCFG */
        }

        Method (RWPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RWPE.XCFG */
        }

        Method (RDPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RDPE.XCFG */
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x0FFF)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WWPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WDPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (RWDP, 3, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Local1 = (XCFG & Arg2)
            XCFG = (Local1 | Arg1)
            Release (MUTE)
        }

        Method (RPME, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x84)
            Local1 = RDPE (Local0)
            If ((Local1 == Ones))
            {
                Return (Zero)
            }
            Else
            {
                If ((Local1 && 0x00010000))
                {
                    WDPE (Local0, (Local1 & 0x00010000))
                    Return (One)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Name (SUPP, Zero)
        Name (CTRL, Zero)
        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
            {
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                If (((SUPP & 0x16) != 0x16))
                {
                    CTRL &= 0x0C
                }

                CTRL &= 0x0C
                If (~(CDW1 & One))
                {
                    If ((CTRL & One)){}
                    If ((CTRL & 0x04))
                    {
                        ^SMB0.GPMD (One)
                        ^SMB0.XPME = One
                    }

                    If ((CTRL & 0x10)){}
                }

                If ((Arg1 != One))
                {
                    CDW1 |= 0x08
                }

                If ((CDW3 != CTRL))
                {
                    CDW1 |= 0x10
                }

                CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                Return (Arg3)
            }
            Else
            {
                CDW1 |= 0x04
                Return (Arg3)
            }
        }
    }

    Method (NPTS, 1, NotSerialized)
    {
    }

    Method (NWAK, 1, NotSerialized)
    {
    }

    Method (W2KW, 1, NotSerialized)
    {
        If ((OSFL () == 0x04))
        {
            Sleep (0x0BB8)
        }
    }

    Scope (_SB)
    {
        Scope (PCI0)
        {
            Name (CRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, _Y22, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y23, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y24, AddressRangeMemory, TypeStatic)
            })
            CreateDWordField (CRS, \_SB.PCI0._Y22._MIN, MIN5)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y22._MAX, MAX5)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y22._LEN, LEN5)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y23._MIN, MIN6)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y23._MAX, MAX6)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y23._LEN, LEN6)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y24._MIN, MIN7)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y24._MAX, MAX7)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y24._LEN, LEN7)  // _LEN: Length
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = MG1L /* \MG1L */
                If (Local0)
                {
                    MIN5 = MG1B /* \MG1B */
                    LEN5 = MG1L /* \MG1L */
                    MAX5 = (MIN5 + Local0--)
                }

                MIN6 = MG2B /* \MG2B */
                LEN6 = MG2L /* \MG2L */
                Local0 = MG2L /* \MG2L */
                MAX6 = (MIN6 + Local0--)
                MIN7 = MG3B /* \MG3B */
                LEN7 = MG3L /* \MG3L */
                Local0 = MG3L /* \MG3L */
                MAX7 = (MIN7 + Local0--)
                Return (CRS) /* \_SB_.PCI0.CRS_ */
            }
        }
    }

    Name (WOTB, Zero)
    Name (WSSB, Zero)
    Name (WAXB, Zero)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        DBG8 = Arg0
        PTS (Arg0)
        WAKP [Zero] = Zero
        WAKP [One] = Zero
        If (((Arg0 == 0x04) && (OSFL () == 0x02)))
        {
            Sleep (0x0BB8)
        }

        WSSB = ASSB /* \ASSB */
        WOTB = AOTB /* \AOTB */
        WAXB = AAXB /* \AAXB */
        ASSB = Arg0
        AOTB = OSFL ()
        OSTP = OSYS ()
        AAXB = Zero
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        WAK (Arg0)
        If (ASSB)
        {
            ASSB = WSSB /* \WSSB */
            AOTB = WOTB /* \WOTB */
            AAXB = WAXB /* \WAXB */
        }

        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }

        Return (WAKP) /* \WAKP */
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS1)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            \_SB.PCI0.SBRG.SIOS (Arg0)
            \_SB.PCI0.SBRG.SPTS (Arg0)
            NPTS (Arg0)
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        \_SB.PCI0.SBRG.SIOW (Arg0)
        \_SB.PCI0.SBRG.SWAK (Arg0)
        NWAK (Arg0)
        W2KW (Arg0)
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000084
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 6A
[00Ah 0010   6]                       Oem ID : "A_M_I "
[010h 0016   8]                 Oem Table ID : "OEMFACP "
[018h 0024   4]                 Oem Revision : 12000601
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]                 FACS Address : CFFA0000
[028h 0040   4]                 DSDT Address : CFF90460
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 00 [Unspecified]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 0000242E
[034h 0052   1]            ACPI Enable Value : E1
[035h 0053   1]           ACPI Disable Value : 1E
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00002000
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00002004
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00002008
[050h 0080   4]           GPE0 Block Address : 00002020
[054h 0084   4]           GPE1 Block Address : 000024A0
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 00
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 10
[05Eh 0094   1]             GPE1 Base Offset : 20
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 7D
[06Bh 0107   1]        RTC Month Alarm Index : 7E
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000000A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 00
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000000

[080h 0128   1]         Value to cause reset : 00
[081h 0129   2]                     Reserved : 0000
[083h 0131   1]                     Reserved : 00

// ACPI Warning: FADT revision 1 does not match length: found 84 expected 74

Raw Table Data: Length 132 (0x84)

    0000: 46 41 43 50 84 00 00 00 01 6A 41 5F 4D 5F 49 20  // FACP.....jA_M_I 
    0010: 4F 45 4D 46 41 43 50 20 01 06 00 12 4D 53 46 54  // OEMFACP ....MSFT
    0020: 97 00 00 00 00 00 FA CF 60 04 F9 CF 01 00 09 00  // ........`.......
    0030: 2E 24 00 00 E1 1E 00 00 00 20 00 00 00 00 00 00  // .$....... ......
    0040: 04 20 00 00 00 00 00 00 00 00 00 00 08 20 00 00  // . ........... ..
    0050: 20 20 00 00 A0 24 00 00 04 02 00 04 08 10 20 00  //   ...$........ .
    0060: 65 00 E9 03 00 04 10 00 01 00 7D 7E 32 03 00 00  // e.........}~2...
    0070: A5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


INFO
----
[000h 0000   4]                    Signature : "INFO"    
[004h 0004   4]                 Table Length : 00000124
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : A0
[00Ah 0010   6]                       Oem ID : "052110"
[010h 0016   8]                 Oem Table ID : "AMDINFO "
[018h 0024   4]                 Oem Revision : 20100521
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097


**** Unknown ACPI table signature [INFO]


Raw Table Data: Length 292 (0x124)

    0000: 49 4E 46 4F 24 01 00 00 01 A0 30 35 32 31 31 30  // INFO$.....052110
    0010: 41 4D 44 49 4E 46 4F 20 21 05 10 20 4D 53 46 54  // AMDINFO !.. MSFT
    0020: 97 00 00 00 63 0F 10 00 00 00 00 D0 00 00 00 30  // ....c..........0
    0030: 09 00 00 00 84 01 00 00 00 00 00 00 24 A4 40 04  // ............$.@.
    0040: C0 0F E0 2C 11 20 81 00 00 00 00 00 00 00 00 00  // ...,. ..........
    0050: 00 00 00 00 08 80 0F 00 89 B3 EA 99 C0 41 E7 41  // .............A.A
    0060: 13 B0 3E CC 01 00 00 00 01 01 00 00 01 02 00 00  // ..>.............
    0070: 01 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 E0 3C F8 00 E0 3C F8 00 00 00 00 00  // .....<...<......
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 06 00 08 10  // ................
    00A0: 00 00 00 00 55 00 00 00 00 00 00 00 35 FB 7D 0C  // ....U.......5.}.
    00B0: 34 63 22 01 30 00 01 00 0B 80 58 7F 00 00 00 00  // 4c".0.....X.....
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00                                      // ....


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 59
[00Ah 0010   6]                       Oem ID : "052110"
[010h 0016   8]                 Oem Table ID : "OEMMCFG "
[018h 0024   4]                 Oem Revision : 20100521
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 59 30 35 32 31 31 30  // MCFG<....Y052110
    0010: 4F 45 4D 4D 43 46 47 20 21 05 10 20 4D 53 46 54  // OEMMCFG !.. MSFT
    0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


OEMB
----


SRAT
----
[000h 0000   4]                    Signature : "SRAT"    [System Resource Affinity Table]
[004h 0004   4]                 Table Length : 000000C8
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : EA
[00Ah 0010   6]                       Oem ID : "AMD   "
[010h 0016   8]                 Oem Table ID : "FAM_F_10"
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]               Table Revision : 00000001
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[031h 0049   1]                       Length : 10

[032h 0050   1]      Proximity Domain Low(8) : 00
[033h 0051   1]                      Apic ID : 00
[034h 0052   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[038h 0056   1]              Local Sapic EID : 00
[039h 0057   3]    Proximity Domain High(24) : 000000
[03Ch 0060   4]                 Clock Domain : 00000000

[040h 0064   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[041h 0065   1]                       Length : 10

[042h 0066   1]      Proximity Domain Low(8) : 00
[043h 0067   1]                      Apic ID : 01
[044h 0068   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[048h 0072   1]              Local Sapic EID : 00
[049h 0073   3]    Proximity Domain High(24) : 000000
[04Ch 0076   4]                 Clock Domain : 00000001

[050h 0080   1]                Subtable Type : 01 [Memory Affinity]
[051h 0081   1]                       Length : 28

[052h 0082   4]             Proximity Domain : 00000000
[056h 0086   2]                    Reserved1 : 0000
[058h 0088   8]                 Base Address : 0000000000000000
[060h 0096   8]               Address Length : 00000000000A0000
[068h 0104   4]                    Reserved2 : 00000001
[06Ch 0108   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[070h 0112   8]                    Reserved3 : 0000000000000000

[078h 0120   1]                Subtable Type : 01 [Memory Affinity]
[079h 0121   1]                       Length : 28

[07Ah 0122   4]             Proximity Domain : 00000000
[07Eh 0126   2]                    Reserved1 : 0000
[080h 0128   8]                 Base Address : 0000000000100000
[088h 0136   8]               Address Length : 00000000CFF00000
[090h 0144   4]                    Reserved2 : 00000001
[094h 0148   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[098h 0152   8]                    Reserved3 : 0000000000000000

[0A0h 0160   1]                Subtable Type : 01 [Memory Affinity]
[0A1h 0161   1]                       Length : 28

[0A2h 0162   4]             Proximity Domain : 00000000
[0A6h 0166   2]                    Reserved1 : 0000
[0A8h 0168   8]                 Base Address : 0000000100000000
[0B0h 0176   8]               Address Length : 0000000130000000
[0B8h 0184   4]                    Reserved2 : 00000001
[0BCh 0188   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[0C0h 0192   8]                    Reserved3 : 0000000000000000

Raw Table Data: Length 200 (0xC8)

    0000: 53 52 41 54 C8 00 00 00 03 EA 41 4D 44 20 20 20  // SRAT......AMD   
    0010: 46 41 4D 5F 46 5F 31 30 02 00 00 00 41 4D 44 20  // FAM_F_10....AMD 
    0020: 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 10 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 10 00 01 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0050: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0060: 00 00 0A 00 00 00 00 00 01 00 00 00 01 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0080: 00 00 10 00 00 00 00 00 00 00 F0 CF 00 00 00 00  // ................
    0090: 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 01 28 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // .(..............
    00B0: 00 00 00 30 01 00 00 00 01 00 00 00 01 00 00 00  // ...0............
    00C0: 00 00 00 00 00 00 00 00                          // ........


SSDT
----
DefinitionBlock ("", "SSDT", 1, "A M I ", "POWERNOW", 0x00000001)
{
    External (_PR_.P001, DeviceObj)
    External (_PR_.P002, DeviceObj)

    Scope (\_PR.P001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x00008340, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x000076A7, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000668A, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00003EDF, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x00000AF0, 
                0x00008340, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000834, 
                0x000076A7, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x0000668A, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x00003EDF, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
    }

    Scope (\_PR.P002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x00008340, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x000076A7, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000668A, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00003EDF, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }
        })
        Name (XPSS, Package (0x04)
        {
            Package (0x08)
            {
                0x00000AF0, 
                0x00008340, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000834, 
                0x000076A7, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x0000668A, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x00003EDF, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
    }
}



