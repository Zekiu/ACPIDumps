
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20230628
Copyright (c) 2000 - 2023 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  AAFT  0x000000F1  0x01  "ALASKA"  "OEMAAFT "  0x01072009  "MSFT"   0x00000097
 02)  SSDT  0x00000024  0x01  "AMD   "  "BIXBY   "  0x00001000  "INTL"   0x20120913
 03)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00010013
 04)  APIC  0x0000015E  0x03  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 05)  CRAT  0x00000F10  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 06)  PCCT  0x0000006E  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 07)  SSDT  0x00003B45  0x02  "AMD   "  "AMD AOD "  0x00000001  "INTL"   0x20120913
 08)  TPM2  0x0000004C  0x04  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00000000
 09)  VFCT  0x0000E284  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x33504F47
 10)  CDIT  0x00000029  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 11)  DSDT  0x00006698  0x02  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20120913
 12)  SSDT  0x000010AF  0x02  "AMD   "  "QOGIRC  "  0x00000001  "INTL"   0x20120913
 13)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 14)  SSDT  0x00004043  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 15)  SSDT  0x000000FC  0x02  "ALASKA"  "CPUSSDT "  0x01072009  "AMI "   0x01072009
 16)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 17)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x01000013
 18)  SSDT  0x00008CE9  0x02  "AMD   "  "AmdTable"  0x00000002  "MSFT"   0x04000000
 19)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 20)  SSDT  0x0000382E  0x02  "AMD   "  "QOGIRN  "  0x00000001  "INTL"   0x20120913
 21)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 22)  FACS  0x00000040  0x02
 23)  BGRT  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013

Found 23 ACPI tables in acpidump

AAFT
----
[000h 0000 004h]                   Signature : "AAFT"    
[004h 0004 004h]                Table Length : 000000F1
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 5F
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "OEMAAFT "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "MSFT"
[020h 0032 004h]       Asl Compiler Revision : 00000097


**** Unknown ACPI table signature [AAFT]


Raw Table Data: Length 241 (0xF1)

    0000: 41 41 46 54 F1 00 00 00 01 5F 41 4C 41 53 4B 41  // AAFT....._ALASKA
    0010: 4F 45 4D 41 41 46 54 20 09 20 07 01 4D 53 46 54  // OEMAAFT . ..MSFT
    0020: 97 00 00 00 1B 22 00 00 00 41 53 52 5F 41 55 52  // ....."...ASR_AUR
    0030: 41 5F 44 45 46 41 55 4C 54 09 00 00 00 12 FF 00  // A_DEFAULT.......
    0040: 00 02 00 00 00 00 10 36 00 00 00 01 43 D6 87 EC  // .......6....C...
    0050: A4 EB B5 4B A1 E5 3F 3E 36 B2 0D A9 53 65 74 75  // ...K..?>6...Setu
    0060: 70 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // p...............
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 11 4D 00 00  // .............M..
    0080: 00 01 46 61 73 74 42 6F 6F 74 00 00 00 00 00 00  // ..FastBoot......
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 01 00 01 01 66 54 50 4D 53 77 69 74 63 68  // ......fTPMSwitch
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 2B 00 01 1C 28 00 00 00 01 66  // ......+...(....f
    00D0: 54 50 4D 53 77 69 74 63 68 00 00 00 00 00 00 00  // TPMSwitch.......
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  // ................
    00F0: 00                                               // .


APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 0000015E
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : DF
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 02
[037h 0055 001h]               Local Apic ID : 02
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 04
[03Fh 0063 001h]               Local Apic ID : 04
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 06
[047h 0071 001h]               Local Apic ID : 06
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 00 [Processor Local APIC]
[04Dh 0077 001h]                      Length : 08
[04Eh 0078 001h]                Processor ID : 08
[04Fh 0079 001h]               Local Apic ID : 08
[050h 0080 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084 001h]               Subtable Type : 00 [Processor Local APIC]
[055h 0085 001h]                      Length : 08
[056h 0086 001h]                Processor ID : 0A
[057h 0087 001h]               Local Apic ID : 0A
[058h 0088 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092 001h]               Subtable Type : 00 [Processor Local APIC]
[05Dh 0093 001h]                      Length : 08
[05Eh 0094 001h]                Processor ID : 0C
[05Fh 0095 001h]               Local Apic ID : 0C
[060h 0096 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100 001h]               Subtable Type : 00 [Processor Local APIC]
[065h 0101 001h]                      Length : 08
[066h 0102 001h]                Processor ID : 0E
[067h 0103 001h]               Local Apic ID : 0E
[068h 0104 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108 001h]               Subtable Type : 00 [Processor Local APIC]
[06Dh 0109 001h]                      Length : 08
[06Eh 0110 001h]                Processor ID : 01
[06Fh 0111 001h]               Local Apic ID : 01
[070h 0112 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116 001h]               Subtable Type : 00 [Processor Local APIC]
[075h 0117 001h]                      Length : 08
[076h 0118 001h]                Processor ID : 03
[077h 0119 001h]               Local Apic ID : 03
[078h 0120 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124 001h]               Subtable Type : 00 [Processor Local APIC]
[07Dh 0125 001h]                      Length : 08
[07Eh 0126 001h]                Processor ID : 05
[07Fh 0127 001h]               Local Apic ID : 05
[080h 0128 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132 001h]               Subtable Type : 00 [Processor Local APIC]
[085h 0133 001h]                      Length : 08
[086h 0134 001h]                Processor ID : 07
[087h 0135 001h]               Local Apic ID : 07
[088h 0136 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140 001h]               Subtable Type : 00 [Processor Local APIC]
[08Dh 0141 001h]                      Length : 08
[08Eh 0142 001h]                Processor ID : 09
[08Fh 0143 001h]               Local Apic ID : 09
[090h 0144 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148 001h]               Subtable Type : 00 [Processor Local APIC]
[095h 0149 001h]                      Length : 08
[096h 0150 001h]                Processor ID : 0B
[097h 0151 001h]               Local Apic ID : 0B
[098h 0152 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156 001h]               Subtable Type : 00 [Processor Local APIC]
[09Dh 0157 001h]                      Length : 08
[09Eh 0158 001h]                Processor ID : 0D
[09Fh 0159 001h]               Local Apic ID : 0D
[0A0h 0160 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164 001h]               Subtable Type : 00 [Processor Local APIC]
[0A5h 0165 001h]                      Length : 08
[0A6h 0166 001h]                Processor ID : 0F
[0A7h 0167 001h]               Local Apic ID : 0F
[0A8h 0168 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172 001h]               Subtable Type : 00 [Processor Local APIC]
[0ADh 0173 001h]                      Length : 08
[0AEh 0174 001h]                Processor ID : 10
[0AFh 0175 001h]               Local Apic ID : 00
[0B0h 0176 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0B4h 0180 001h]               Subtable Type : 00 [Processor Local APIC]
[0B5h 0181 001h]                      Length : 08
[0B6h 0182 001h]                Processor ID : 11
[0B7h 0183 001h]               Local Apic ID : 00
[0B8h 0184 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0BCh 0188 001h]               Subtable Type : 00 [Processor Local APIC]
[0BDh 0189 001h]                      Length : 08
[0BEh 0190 001h]                Processor ID : 12
[0BFh 0191 001h]               Local Apic ID : 00
[0C0h 0192 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0C4h 0196 001h]               Subtable Type : 00 [Processor Local APIC]
[0C5h 0197 001h]                      Length : 08
[0C6h 0198 001h]                Processor ID : 13
[0C7h 0199 001h]               Local Apic ID : 00
[0C8h 0200 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0CCh 0204 001h]               Subtable Type : 00 [Processor Local APIC]
[0CDh 0205 001h]                      Length : 08
[0CEh 0206 001h]                Processor ID : 14
[0CFh 0207 001h]               Local Apic ID : 00
[0D0h 0208 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212 001h]               Subtable Type : 00 [Processor Local APIC]
[0D5h 0213 001h]                      Length : 08
[0D6h 0214 001h]                Processor ID : 15
[0D7h 0215 001h]               Local Apic ID : 00
[0D8h 0216 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220 001h]               Subtable Type : 00 [Processor Local APIC]
[0DDh 0221 001h]                      Length : 08
[0DEh 0222 001h]                Processor ID : 16
[0DFh 0223 001h]               Local Apic ID : 00
[0E0h 0224 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228 001h]               Subtable Type : 00 [Processor Local APIC]
[0E5h 0229 001h]                      Length : 08
[0E6h 0230 001h]                Processor ID : 17
[0E7h 0231 001h]               Local Apic ID : 00
[0E8h 0232 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236 001h]               Subtable Type : 00 [Processor Local APIC]
[0EDh 0237 001h]                      Length : 08
[0EEh 0238 001h]                Processor ID : 18
[0EFh 0239 001h]               Local Apic ID : 00
[0F0h 0240 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244 001h]               Subtable Type : 00 [Processor Local APIC]
[0F5h 0245 001h]                      Length : 08
[0F6h 0246 001h]                Processor ID : 19
[0F7h 0247 001h]               Local Apic ID : 00
[0F8h 0248 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252 001h]               Subtable Type : 00 [Processor Local APIC]
[0FDh 0253 001h]                      Length : 08
[0FEh 0254 001h]                Processor ID : 1A
[0FFh 0255 001h]               Local Apic ID : 00
[100h 0256 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260 001h]               Subtable Type : 00 [Processor Local APIC]
[105h 0261 001h]                      Length : 08
[106h 0262 001h]                Processor ID : 1B
[107h 0263 001h]               Local Apic ID : 00
[108h 0264 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268 001h]               Subtable Type : 00 [Processor Local APIC]
[10Dh 0269 001h]                      Length : 08
[10Eh 0270 001h]                Processor ID : 1C
[10Fh 0271 001h]               Local Apic ID : 00
[110h 0272 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276 001h]               Subtable Type : 00 [Processor Local APIC]
[115h 0277 001h]                      Length : 08
[116h 0278 001h]                Processor ID : 1D
[117h 0279 001h]               Local Apic ID : 00
[118h 0280 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284 001h]               Subtable Type : 00 [Processor Local APIC]
[11Dh 0285 001h]                      Length : 08
[11Eh 0286 001h]                Processor ID : 1E
[11Fh 0287 001h]               Local Apic ID : 00
[120h 0288 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292 001h]               Subtable Type : 00 [Processor Local APIC]
[125h 0293 001h]                      Length : 08
[126h 0294 001h]                Processor ID : 1F
[127h 0295 001h]               Local Apic ID : 00
[128h 0296 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300 001h]               Subtable Type : 04 [Local APIC NMI]
[12Dh 0301 001h]                      Length : 06
[12Eh 0302 001h]                Processor ID : FF
[12Fh 0303 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305 001h]        Interrupt Input LINT : 01

[132h 0306 001h]               Subtable Type : 01 [I/O APIC]
[133h 0307 001h]                      Length : 0C
[134h 0308 001h]                 I/O Apic ID : 11
[135h 0309 001h]                    Reserved : 00
[136h 0310 004h]                     Address : FEC00000
[13Ah 0314 004h]                   Interrupt : 00000000

[13Eh 0318 001h]               Subtable Type : 01 [I/O APIC]
[13Fh 0319 001h]                      Length : 0C
[140h 0320 001h]                 I/O Apic ID : 12
[141h 0321 001h]                    Reserved : 00
[142h 0322 004h]                     Address : FEC01000
[146h 0326 004h]                   Interrupt : 00000018

[14Ah 0330 001h]               Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331 001h]                      Length : 0A
[14Ch 0332 001h]                         Bus : 00
[14Dh 0333 001h]                      Source : 00
[14Eh 0334 004h]                   Interrupt : 00000002
[152h 0338 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340 001h]               Subtable Type : 02 [Interrupt Source Override]
[155h 0341 001h]                      Length : 0A
[156h 0342 001h]                         Bus : 00
[157h 0343 001h]                      Source : 09
[158h 0344 004h]                   Interrupt : 00000009
[15Ch 0348 002h]       Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 03 DF 41 4C 41 53 4B 41  // APIC^.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 08 08  // ................
    0050: 01 00 00 00 00 08 0A 0A 01 00 00 00 00 08 0C 0C  // ................
    0060: 01 00 00 00 00 08 0E 0E 01 00 00 00 00 08 01 01  // ................
    0070: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    0080: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 09 09  // ................
    0090: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0D 0D  // ................
    00A0: 01 00 00 00 00 08 0F 0F 01 00 00 00 00 08 10 00  // ................
    00B0: 00 00 00 00 00 08 11 00 00 00 00 00 00 08 12 00  // ................
    00C0: 00 00 00 00 00 08 13 00 00 00 00 00 00 08 14 00  // ................
    00D0: 00 00 00 00 00 08 15 00 00 00 00 00 00 08 16 00  // ................
    00E0: 00 00 00 00 00 08 17 00 00 00 00 00 00 08 18 00  // ................
    00F0: 00 00 00 00 00 08 19 00 00 00 00 00 00 08 1A 00  // ................
    0100: 00 00 00 00 00 08 1B 00 00 00 00 00 00 08 1C 00  // ................
    0110: 00 00 00 00 00 08 1D 00 00 00 00 00 00 08 1E 00  // ................
    0120: 00 00 00 00 00 08 1F 00 00 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 11 00 00 00 C0 FE 00 00 00 00 01 0C  // ................
    0140: 12 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // ................
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 4E
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 00000000B8096018
[030h 0048 004h]               Image OffsetX : 0000042C
[034h 0052 004h]               Image OffsetY : 000001BE

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 4E 41 4C 41 53 4B 41  // BGRT8....NALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 01 00 01 00 18 60 09 B8 00 00 00 00  // .........`......
    0030: 2C 04 00 00 BE 01 00 00                          // ,.......


CDIT
----
[000h 0000 004h]                   Signature : "CDIT"    
[004h 0004 004h]                Table Length : 00000029
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : E7
[00Ah 0010 006h]                      Oem ID : "AMD"
[010h 0016 008h]                Oem Table ID : "AmdTable"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 E7 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000 004h]                   Signature : "CRAT"    
[004h 0004 004h]                Table Length : 00000F10
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : E9
[00Ah 0010 006h]                      Oem ID : "AMD"
[010h 0016 008h]                Oem Table ID : "AmdTable"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 3856 (0xF10)

    0000: 43 52 41 54 10 0F 00 00 01 E9 41 4D 44 00 00 00  // CRAT......AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 3D 00 00 00 01 00 00 00 00 00 00 00  // ....=...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 10 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0A 00  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 0C 00  // .(..............
    0090: 00 00 00 00 00 00 F4 BF 00 00 00 00 40 00 00 00  // ............@...
    00A0: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    00B0: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 40  // ...............@
    00C0: 07 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    00D0: 02 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0100: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0110: 02 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0140: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0150: 02 40 00 00 0F 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0180: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0190: 02 40 00 00 0F 00 00 00 00 00 00 00 FF 00 00 00  // .@..............
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00  // ................
    01C0: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    01D0: 02 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0200: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0210: 02 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0240: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0250: 02 40 00 00 0F 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0280: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0290: 02 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    02C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    02D0: 02 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0300: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0310: 02 40 00 00 0F 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0340: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0350: 02 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0380: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0390: 02 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    03C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    03D0: 02 40 00 00 0F 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0400: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0410: 02 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0440: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0450: 02 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0480: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0490: 02 40 00 00 0F 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    04A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    04C0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    04D0: 02 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0500: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0510: 02 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0540: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0550: 02 40 00 00 0F 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0580: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0590: 02 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    05A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    05C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    05D0: 02 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    05E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0600: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0610: 02 40 00 00 0F 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0640: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0650: 02 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0680: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0690: 02 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    06A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    06C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    06D0: 02 40 00 00 0F 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0700: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0710: 03 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0740: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0750: 03 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0770: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0780: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0790: 03 40 00 00 AB 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    07A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    07C0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    07D0: 03 40 00 00 AD 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0800: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0810: 03 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0840: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0850: 03 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0870: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0880: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0890: 03 40 00 00 AB 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    08A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    08C0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    08D0: 03 40 00 00 AD 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    08E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0900: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0910: 03 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0930: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0940: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0950: 03 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0970: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0980: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0990: 03 40 00 00 AB 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    09C0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    09D0: 03 40 00 00 AD 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    09E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0A00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0A10: 03 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A30: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0A40: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0A50: 03 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0A80: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0A90: 03 40 00 00 AB 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0AC0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0AD0: 03 40 00 00 AD 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0B00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0B10: 03 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B30: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0B40: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0B50: 03 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0B80: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0B90: 03 40 00 00 AB 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BB0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0BC0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0BD0: 03 40 00 00 AD 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0BE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0C00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0C10: 03 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C30: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0C40: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0C50: 03 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0C80: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0C90: 03 40 00 00 AB 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CB0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0CC0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0CD0: 03 40 00 00 AD 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0D00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0D10: 03 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0D20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D30: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0D40: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0D50: 03 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0D80: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0D90: 03 40 00 00 AB 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DB0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0DC0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0DD0: 03 40 00 00 AD 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0E00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0E10: 03 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E30: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0E40: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0E50: 03 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0E80: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0E90: 03 40 00 00 AB 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EB0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0EC0: 04 08 00 00 08 08 00 00 FF 40 00 00 00 00 00 00  // .........@......
    0ED0: 03 40 00 00 AD 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0F00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    /*
     * iASL Warning: There were 7 external control methods found during
     * disassembly, but only 0 were resolved (7 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (APTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M249, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M250, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (MPTS, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (MWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Name (ENTK, 0x87)
    Name (EXTK, 0xAA)
    Name (IO1B, 0x0280)
    Name (IO1L, 0x10)
    Name (IO2B, 0x0290)
    Name (IO2L, 0x10)
    Name (IO3B, 0x02A0)
    Name (IO3L, 0x10)
    Name (IO4B, 0x02B0)
    Name (IO4L, 0x10)
    Name (SP1O, 0x2E)
    Name (IOES, Zero)
    Name (PEBL, 0x08000000)
    Name (ACPM, One)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (NBTS, 0x5000)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, One)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF0000000)
    Name (PELN, 0x08000000)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, Zero)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, Zero)
    Name (DTPT, Zero)
    Name (TTDP, One)
    Name (TPMB, 0xBD0B8000)
    Name (TPBS, 0x4000)
    Name (TPMC, 0xBD0BC000)
    Name (TPCS, 0x4000)
    Name (TPMM, 0xFD210510)
    Name (FTPM, 0xFD210510)
    Name (PPIM, 0xBD441B18)
    Name (PPIL, 0x1C)
    Name (AMDT, One)
    Name (TPMF, One)
    Name (PPIV, One)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (ATIS, 0xB0)
    Name (MBEC, Zero)
    Name (THPN, Zero)
    Name (ALST, Zero)
    Name (NBTP, 0xFEC03000)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0001)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
    Field (PMRG, AnyAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0x78), 
            ,   20, 
        SI3V,   1, 
        Offset (0x80), 
        SI3R,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PD03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PD07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x33
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x37
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x37
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x35
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x33
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x31
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PD0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PD0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PD0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PD10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x19
            }
        })
        Name (PD11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x18
            }
        })
        Name (PD13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x20
            }
        })
        Name (PD14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x24
            }
        })
        Name (PD30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x28
            }
        })
        Name (PD31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AR31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2C
            }
        })
        Name (PD22, Package (0x00){})
        Name (AR22, Package (0x00){})
        Name (PD23, Package (0x00){})
        Name (AR23, Package (0x00){})
        Name (PD24, Package (0x00){})
        Name (AR24, Package (0x00){})
        Name (PD25, Package (0x00){})
        Name (AR25, Package (0x00){})
        Name (PD26, Package (0x00){})
        Name (AR26, Package (0x00){})
        Name (PD27, Package (0x00){})
        Name (AR27, Package (0x00){})
        Name (PD28, Package (0x00){})
        Name (AR28, Package (0x00){})
        Name (PD29, Package (0x00){})
        Name (AR29, Package (0x00){})
        Name (PD2A, Package (0x00){})
        Name (AR2A, Package (0x00){})
        Name (PD2B, Package (0x00){})
        Name (AR2B, Package (0x00){})
        Name (PD2C, Package (0x00){})
        Name (AR2C, Package (0x00){})
        Name (PD00, Package (0x13)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x13)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PD21, Package (0x00){})
        Name (AR21, Package (0x00){})
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xC0000000)
            Name (MBL, 0x3D000000)
            Name (MAB, 0x0000000840000000)
            Name (MAL, 0x00000077C0000000)
            Name (MAM, 0x0000007FFFFFFFFF)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14600000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEB80000,         // Address Base
                        0x00080000,         // Address Length
                        )
                })
            }

            Device (D002)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PD01) /* \_SB_.PD01 */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PD03) /* \_SB_.PD03 */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PD04) /* \_SB_.PD04 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PD05) /* \_SB_.PD05 */
                }

                Device (D00A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PD06) /* \_SB_.PD06 */
                }

                Device (D00C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PD07) /* \_SB_.PD07 */
                }

                Device (D00E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08) /* \_SB_.AR08 */
                    }

                    Return (PD08) /* \_SB_.PD08 */
                }

                Device (D010)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.AR09 */
                    }

                    Return (PD09) /* \_SB_.PD09 */
                }

                Device (D012)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A) /* \_SB_.AR0A */
                    }

                    Return (PD0A) /* \_SB_.PD0A */
                }

                Device (D014)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPA)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.AR0B */
                    }

                    Return (PD0B) /* \_SB_.PD0B */
                }

                Device (D016)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPB)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PD0C) /* \_SB_.PD0C */
                }

                Device (D018)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPC)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0D) /* \_SB_.AR0D */
                    }

                    Return (PD0D) /* \_SB_.PD0D */
                }

                Device (D01A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPD)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0E) /* \_SB_.AR0E */
                    }

                    Return (PD0E) /* \_SB_.PD0E */
                }

                Device (D01C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPE)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0F) /* \_SB_.AR0F */
                    }

                    Return (PD0F) /* \_SB_.PD0F */
                }

                Device (D01E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPF)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10) /* \_SB_.AR10 */
                    }

                    Return (PD10) /* \_SB_.PD10 */
                }

                Device (D020)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP10)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR11) /* \_SB_.AR11 */
                    }

                    Return (PD11) /* \_SB_.PD11 */
                }

                Device (D022)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP11)
            {
                Name (_ADR, 0x00050002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (GP12)
            {
                Name (_ADR, 0x00070001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR13) /* \_SB_.AR13 */
                    }

                    Return (PD13) /* \_SB_.PD13 */
                }

                Device (D025)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP13)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PD14) /* \_SB_.PD14 */
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xFD200000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0F)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP13.APSP._Y0F._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP13.APSP._Y0F._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP13.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP13.APSP.CRS_ */
                    }
                }
            }

            Device (GP30)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR30) /* \_SB_.AR30 */
                    }

                    Return (PD30) /* \_SB_.PD30 */
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP31)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR31) /* \_SB_.AR31 */
                    }

                    Return (PD31) /* \_SB_.PD31 */
                }

                Device (SAT1)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (D02C)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y10)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y13)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y10._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y17)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1B)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        If (IO4B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._LEN, GPL4)  // _LEN: Length
                            GP40 = IO4B /* \IO4B */
                            GP41 = IO4B /* \IO4B */
                            GPL4 = IO4L /* \IO4L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x02, 
                        0x03, 
                        One, 
                        Zero, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = ENTK /* \ENTK */
                        INDX = ENTK /* \ENTK */
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = EXTK /* \EXTK */
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    Method (UHID, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x10)
                        EXFG ()
                        If (Local0)
                        {
                            Return (0x1005D041)
                        }
                        Else
                        {
                            Return (0x0105D041)
                        }
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        SCF7,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2F), 
                        SCFF,   8, 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        RGEA,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        Local1 = ((IOAH << 0x08) | IOAL) /* \_SB_.PCI0.SBRG.SIO1.IOAL */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1E)
                        IRQNoFlags (_Y1C)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1D)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y21)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y22)
                        IRQNoFlags (_Y1F)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y20)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._LEN, LEN3)  // _LEN: Length
                    Name (CRS3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y25)
                        IRQ (Level, ActiveLow, Shared, _Y23)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y24)
                            {}
                    })
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y23._INT, IRQT)  // _INT: Interrupts
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y23._HE, IRQS)  // _HE_: High-Edge
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y24._DMA, DMAT)  // _DMA: Direct Memory Access
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._MIN, IO41)  // _MIN: Minimum Base Address
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._MAX, IO42)  // _MAX: Maximum Base Address
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._LEN, LEN4)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DCR3, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO41 = (IOAH << 0x08)
                        IO41 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        IO42 = IO41 /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        LEN4 = 0x08
                        If (INTR)
                        {
                            IRQT = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQT = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAT = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAT = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS3) /* \_SB_.PCI0.SBRG.SIO1.CRS3 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Local2 = Arg1
                            If ((Local2 > Zero))
                            {
                                Local2 -= One
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Method (DSR3, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IO41)
                        CreateWordField (Arg0, 0x09, IRQT)
                        CreateByteField (Arg0, 0x0B, IRQS)
                        CreateByteField (Arg0, 0x0D, DMAT)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO41 & 0xFF)
                        IOAH = (IO41 >> 0x08)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x0A)
                            If ((Arg0 == One))
                            {
                                OPT6 &= 0xCF
                                If (KBFG)
                                {
                                    OPT6 |= 0x10
                                }
                                Else
                                {
                                    OPT6 &= 0xEF
                                }

                                If (MSFG)
                                {
                                    OPT6 |= 0x20
                                }
                                Else
                                {
                                    OPT6 &= 0xDF
                                }

                                OPT3 = 0xFF
                                OPT4 = 0xFF
                                OPT2 |= One
                            }

                            If ((Arg0 >= 0x03))
                            {
                                RGE0 &= 0x9F
                                Local0 = RGE3 /* \_SB_.PCI0.SBRG.SIO1.RGE3 */
                                Sleep (0xC8)
                                If (KBFG)
                                {
                                    RGE0 |= 0x41
                                }
                                Else
                                {
                                    RGE0 &= 0xBE
                                }

                                If (MSFG)
                                {
                                    RGE0 |= 0x22
                                }
                                Else
                                {
                                    RGE0 &= 0xDD
                                }

                                RGE4 |= One
                            }

                            If ((Arg0 == 0x03))
                            {
                                LDN = 0x0A
                                OPT0 |= 0x20
                                RGE4 |= 0x10
                                LDN = 0x0B
                                OPT7 = 0x45
                                If ((OPT7 == 0x87))
                                {
                                    OPT7 = 0x45
                                }
                            }

                            If ((Arg0 == 0x03))
                            {
                                LDN = 0x09
                                OPT0 &= 0xFE
                                OPT1 &= 0xFE
                            }

                            If ((Arg0 == 0x04))
                            {
                                LDN = 0x09
                                OPT0 &= 0xFE
                                OPT1 &= 0xFE
                            }

                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x0A)
                        If ((Arg0 == One))
                        {
                            PMFG = OPT3 /* \_SB_.PCI0.SBRG.SIO1.OPT3 */
                            OPT3 = 0xFF
                            OPT6 &= 0xCF
                            OPT2 &= 0xFE
                        }

                        If ((Arg0 >= 0x03))
                        {
                            PMFG = RGE3 /* \_SB_.PCI0.SBRG.SIO1.RGE3 */
                            Local0 = RGE3 /* \_SB_.PCI0.SBRG.SIO1.RGE3 */
                            RGE0 &= 0x9F
                            RGE4 &= 0xFE
                        }

                        LDN = 0x0B
                        If ((OPT7 != Zero))
                        {
                            OPT7 = 0x87
                        }

                        LDN = 0x09
                        ACTR |= 0x08
                        OPT5 &= 0xFF
                        LDN = 0x0F
                        RGE5 &= 0xDF
                        SCFF &= 0xF7
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                        If ((PMFG & 0x08)){}
                        If ((PMFG & 0x10)){}
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x02)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, Zero)
                    }

                    Name (_DDN, "COM1")  // _DDN: DOS Device Name
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (KBFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (MSFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x0B)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SGPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x09)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (CIRW)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (LDN, 0x0E)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (BXBR)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR20) /* \_SB_.AR20 */
                    }

                    Return (PD20) /* \_SB_.PD20 */
                }

                Device (BYUP)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (BYD0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (BYS0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD1)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                        Device (BYS1)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD2)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Device (BYS2)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD3)
                    {
                        Name (_ADR, 0x00030000)  // _ADR: Address
                        Device (BYS3)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD4)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Device (BYS4)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD5)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                        Device (BYS5)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD6)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                        Device (BYS6)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD7)
                    {
                        Name (_ADR, 0x00070000)  // _ADR: Address
                        Device (BYS7)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD8)
                    {
                        Name (_ADR, 0x00080000)  // _ADR: Address
                        Device (XHC1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Device (RHUB)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Device (PRT1)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x09, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "RIGHT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x1,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT2)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "OVAL",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x2,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT3)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "RIGHT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x3,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT4)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "OVAL",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x4,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT5)
                                {
                                    Name (_ADR, 0x05)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "UNKNOWN",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x5,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x0,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT6)
                                {
                                    Name (_ADR, 0x06)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "UNKNOWN",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x6,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x0,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT7)
                                {
                                    Name (_ADR, 0x07)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "OVAL",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x21,
                                            PLD_GroupPosition      = 0x4,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT8)
                                {
                                    Name (_ADR, 0x08)  // _ADR: Address
                                    Name (_UPC, Package (0x08)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "RIGHT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x6,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT9)
                                {
                                    Name (_ADR, 0x09)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x09, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "RIGHT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x1,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PT10)
                                {
                                    Name (_ADR, 0x0A)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "OVAL",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x2,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }
                            }
                        }

                        Device (XHC0)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Device (RHUB)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Device (PRT1)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x1,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT2)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x2,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT3)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x3,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT4)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x4,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT5)
                                {
                                    Name (_ADR, 0x05)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "OVAL",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x21,
                                            PLD_GroupPosition      = 0x4,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT6)
                                {
                                    Name (_ADR, 0x06)  // _ADR: Address
                                    Name (_UPC, Package (0x08)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "RIGHT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x6,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT7)
                                {
                                    Name (_ADR, 0x07)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x1,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT8)
                                {
                                    Name (_ADR, 0x08)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x2,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT9)
                                {
                                    Name (_ADR, 0x09)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x3,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PT10)
                                {
                                    Name (_ADR, 0x0A)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x4,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP7, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP8, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP9, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPA, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPB, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPC, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPD, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPE, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPF, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP10, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP11, 0x02) // Device Wake
            Notify (\_SB.PCI0.BXBR, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP12, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP13, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP13.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP30, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP31, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0, \_SB.PCI0.SBRG.SIO1.SIOS (Arg0), \_SB.PCI0.GPTS (Arg0), \_SB.PCI0.NPTS (Arg0), SPTS (Arg0))
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        MWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x04)
    Name (UR2I, 0x03)
    Name (UR3I, 0x04)
    Name (IC0I, 0x04)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x0A)
    Name (IC3I, 0x06)
    Name (IC4I, 0x0E)
    Name (IC5I, 0x0F)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   4, 
            LPCE,   1, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR0I & 0x0F))
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If (IER0)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR1I & 0x0F))
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If (UOL1)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR2I & 0x0F))
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If (UOL2)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR3I & 0x0F))
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If (UOL3)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {14}
                    Memory32Fixed (ReadWrite,
                        0xFEDC6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC4I & 0x0F))
                Return (BUF0) /* \_SB_.I2CE._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {15}
                    Memory32Fixed (ReadWrite,
                        0xFEDCB000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC5I & 0x0F))
                Return (BUF0) /* \_SB_.I2CF._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC5E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = Zero
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM1F = One
            If ((EMMD != One))
            {
                IM4A = One
                IM58 = One
                IM4B = One
                IM57 = One
                IM6D = One
            }

            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCICC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If (EMMD)
                {
                    Return (SHID) /* \_SB_.SHID */
                }
                Else
                {
                    Return (AHID) /* \_SB_.AHID */
                }
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If (EMMD)
                {
                    Return (SCID) /* \_SB_.SCID */
                }
                Else
                {
                    Return (ACID) /* \_SB_.ACID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    Return (DCRS) /* \_SB_.DCRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }
        }

        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER0)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y26)
                    IRQNoFlags (_Y27)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y26._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y26._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR1._CRS._Y27._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR0, IRQL)
                Return (BUF0) /* \_SB_.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER1)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y28)
                    IRQNoFlags (_Y29)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y28._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y28._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR2._CRS._Y29._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR1, IRQL)
                Return (BUF0) /* \_SB_.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER2)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2A)
                    IRQNoFlags (_Y2B)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y2A._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y2A._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR3._CRS._Y2B._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR2, IRQL)
                Return (BUF0) /* \_SB_.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER3)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2C)
                    IRQNoFlags (_Y2D)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y2C._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y2C._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR4._CRS._Y2D._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR3, IRQL)
                Return (BUF0) /* \_SB_.UAR4._CRS.BUF0 */
            }
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y2E)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y2F)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y30)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y31)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y32,
                )
                {   // Pin list
                    0x0000
                }
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y2E._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2E._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y2F._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2F._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y30._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y30._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) && (TMRQ != 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y31._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y31._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y32._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y2F._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                CreateWordField (Arg0, 0x23, IRQ0)
                CreateWordField (CREI, 0x23, LIRQ)
                LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                CreateBitField (Arg0, 0x98, ITRG)
                CreateBitField (CREI, \_SB.TPM._Y32._MOD, LTRG)  // _MOD: Mode
                LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                CreateBitField (Arg0, 0x99, ILVL)
                CreateBitField (CREI, \_SB.TPM._Y32._POL, LLVL)  // _POL: Polarity
                LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRG == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVL == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Device (RHUB)
    {
        Name (_ADR, Zero)  // _ADR: Address
        Device (PRT1)
        {
            Name (_ADR, One)  // _ADR: Address
            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
            {
                0xFF, 
                0x03, 
                Zero, 
                Zero
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "BACK",
                    PLD_VerticalPosition   = "CENTER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x1,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x0,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
        }

        Device (PRT2)
        {
            Name (_ADR, 0x02)  // _ADR: Address
            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
            {
                0xFF, 
                0x03, 
                Zero, 
                Zero
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "BACK",
                    PLD_VerticalPosition   = "CENTER",
                    PLD_HorizontalPosition = "RIGHT",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x2,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x0,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
        }

        Device (PRT3)
        {
            Name (_ADR, 0x03)  // _ADR: Address
            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
            {
                0xFF, 
                0x03, 
                Zero, 
                Zero
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "BACK",
                    PLD_VerticalPosition   = "CENTER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x3,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x0,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
        }

        Device (PRT4)
        {
            Name (_ADR, 0x04)  // _ADR: Address
            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
            {
                0xFF, 
                0x03, 
                Zero, 
                Zero
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "BACK",
                    PLD_VerticalPosition   = "CENTER",
                    PLD_HorizontalPosition = "RIGHT",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x4,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x0,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
        }

        Device (PRT5)
        {
            Name (_ADR, 0x05)  // _ADR: Address
            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
            {
                0xFF, 
                0x03, 
                Zero, 
                Zero
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "BACK",
                    PLD_VerticalPosition   = "CENTER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x1,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x0,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
        }

        Device (PRT6)
        {
            Name (_ADR, 0x06)  // _ADR: Address
            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
            {
                0xFF, 
                0x03, 
                Zero, 
                Zero
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "BACK",
                    PLD_VerticalPosition   = "CENTER",
                    PLD_HorizontalPosition = "RIGHT",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x2,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x0,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
        }

        Device (PRT7)
        {
            Name (_ADR, 0x07)  // _ADR: Address
            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
            {
                0xFF, 
                0x03, 
                Zero, 
                Zero
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "BACK",
                    PLD_VerticalPosition   = "CENTER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x3,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x0,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
        }

        Device (PRT8)
        {
            Name (_ADR, 0x08)  // _ADR: Address
            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
            {
                0xFF, 
                0x03, 
                Zero, 
                Zero
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "BACK",
                    PLD_VerticalPosition   = "CENTER",
                    PLD_HorizontalPosition = "RIGHT",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x4,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x0,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (_AEI, 0, NotSerialized)  // _AEI: ACPI Event Interrupts
        {
            Name (BUF0, ResourceTemplate ()
            {
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003D
                    }
            })
            Return (BUF0) /* \_SB_.GPIO._AEI.BUF0 */
        }

        Method (_EVT, 1, Serialized)  // _EVT: Event
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x3D)
                {
                    M000 (0x393D)
                    0x10800054 = M249 (Zero, Zero, Zero)
                    Local0
                    Local1 = (Local0 | 0x0100)
                    M250 (Zero, Zero, Zero, 0x10800054, Local1)
                    0x10834904 = M249 (Zero, Zero, Zero)
                    Local1
                    Local1 |= 0x0101
                    M250 (Zero, Zero, Zero, 0x10834904, Local1)
                    M250 (Zero, Zero, Zero, 0x10800054, Local0)
                    Notify (\_SB.PCI0.GP13.AZAL, 0x02) // Device Wake
                }

            }
        }
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 00000114
[008h 0008 001h]                    Revision : 06
[009h 0009 001h]                    Checksum : 33
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]                FACS Address : BD429000
[028h 0040 004h]                DSDT Address : BD110000
[02Ch 0044 001h]                       Model : 00
[02Dh 0045 001h]                  PM Profile : 01 [Desktop]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00000800
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000804
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 000000B4
[04Ch 0076 004h]      PM Timer Block Address : 00000808
[050h 0080 004h]          GPE0 Block Address : 00000820
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 08
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0400
[066h 0102 002h]          Cache Flush Stride : 0010
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120 008h]                     Address : 00000000000000B2

[080h 0128 001h]        Value to cause reset : BE
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 00000000BD110000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 02 [Word Access:16]
[098h 0152 008h]                     Address : 0000000000000800

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 01 [SystemIO]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 02 [Word Access:16]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000804

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 01 [SystemIO]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 02 [Word Access:16]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 00000000000000B4

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000808

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 40
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224 008h]                     Address : 0000000000000820

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 01 [SystemIO]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 00
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248 008h]                     Address : 0000000000000000

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 00 [SystemMemory]
[101h 0257 001h]                   Bit Width : 00
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260 008h]                     Address : 0000000000000000

[10Ch 0268 008h]               Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 33 41 4C 41 53 4B 41  // FACP.....3ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 90 42 BD 00 00 11 BD 00 01 09 00  // ......B.........
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 B4 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 01 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 00 00 00 00 00 00 00 00 00 00 00 11 BD  // ................
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 B4 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : DCEE0D9B
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 9B 0D EE DC 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000 004h]                   Signature : "FIDT"    
[004h 0004 004h]                Table Length : 0000009C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 87
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 87 41 4C 41 53 4B 41  // FIDT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 31 41 56 57 57  // ....$FID.x.1AVWW
    0030: 35 36 30 00 B0 D2 A3 0A CD 9B E9 9A 9A DB 36 CD  // 560...........6.
    0040: 08 19 80 3B 30 35 00 31 37 00 30 35 00 36 30 00  // ...;05.17.05.60.
    0050: E8 07 01 12 12 24 31 FF FF 41 4C 41 53 4B 41 41  // .....$1..ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000044
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 1E
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 00000000BC062000

[034h 0052 002h]               Subtable Type : 0001
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01
[038h 0056 004h]                    Reserved : 00000000
[03Ch 0060 008h]         S3PT Record Address : 00000000BD0D8000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 1E 41 4C 41 53 4B 41  // FPDTD.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 20 06 BC  // ............. ..
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 80 0D BD  // ................
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : BD
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00000005

[024h 0036 004h]           Hardware Block ID : 10228201

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 40
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 37EE
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 BD 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : F4
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "MSFT"
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000F0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : 7F
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 F4 41 4C 41 53 4B 41  // MCFG<.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 7F 00 00 00 00              // ............


PCCT
----
[000h 0000 004h]                   Signature : "PCCT"    [Platform Communications Channel Table]
[004h 0004 004h]                Table Length : 0000006E
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : 10
[00Ah 0010 006h]                      Oem ID : "AMD"
[010h 0016 008h]                Oem Table ID : "AmdTable"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h]       Flags (decoded below) : 00000000
                                    Platform : 0
[028h 0040 008h]                    Reserved : 0000000000000000

[030h 0048 001h]               Subtable Type : 00 [Generic Communications Subspace]
[031h 0049 001h]                      Length : 3E

[032h 0050 006h]                    Reserved : 000000000000
[038h 0056 008h]                Base Address : 00000000BD1D0000
[040h 0064 008h]              Address Length : 0000000000010000

[048h 0072 00Ch]           Doorbell Register : [Generic Address Structure]
[048h 0072 001h]                    Space ID : 00 [SystemMemory]
[049h 0073 001h]                   Bit Width : 40
[04Ah 0074 001h]                  Bit Offset : 00
[04Bh 0075 001h]        Encoded Access Width : 04 [QWord Access:64]
[04Ch 0076 008h]                     Address : 00000000FD010540

[054h 0084 008h]               Preserve Mask : FFFFFFFF00000000
[05Ch 0092 008h]                  Write Mask : 0000000000000001
[064h 0100 004h]             Command Latency : 00000FA0
[068h 0104 004h]         Maximum Access Rate : 0000EA60
[06Ch 0108 002h]     Minimum Turnaround Time : 0000

Raw Table Data: Length 110 (0x6E)

    0000: 50 43 43 54 6E 00 00 00 02 10 41 4D 44 00 00 00  // PCCTn.....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 3E 00 00 00 00 00 00 00 00 1D BD 00 00 00 00  // .>..............
    0040: 00 00 01 00 00 00 00 00 00 40 00 04 40 05 01 FD  // .........@..@...
    0050: 00 00 00 00 00 00 00 00 FF FF FF FF 01 00 00 00  // ................
    0060: 00 00 00 00 A0 0F 00 00 60 EA 00 00 00 00        // ........`.....


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "BIXBY", 0x00001000)
{


SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AMD AOD", 0x00000001)
{
    Scope (\)
    {
        Device (AOD)
        {
            Name (DBG, Zero)
            Name (GDBG, Zero)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
            OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
            Field (PSMI, ByteAcc, NoLock, Preserve)
            {
                APMC,   8, 
                APMD,   8
            }

            Method (ASMI, 1, NotSerialized)
            {
                APMC = Arg0
                Sleep (0x0A)
            }

            Name (OBID, Package (0xC1)
            {
                0x40, 
                0x00010001, 
                0x00020001, 
                0x00020002, 
                0x00020003, 
                0x00020004, 
                0x00020005, 
                0x00020006, 
                0x00020007, 
                0x00020008, 
                0x00020009, 
                0x0002000A, 
                0x0002000B, 
                0x0002000C, 
                0x0002000D, 
                0x0002000E, 
                0x0002000F, 
                0x00020010, 
                0x00020011, 
                0x00020012, 
                0x00020013, 
                0x00020014, 
                0x00020015, 
                0x00020016, 
                0x00020017, 
                0x00020018, 
                0x00020019, 
                0x0002001A, 
                0x0002001B, 
                0x0002001C, 
                0x0002001D, 
                0x0002001E, 
                0x0002001F, 
                0x00020020, 
                0x00020021, 
                0x00020022, 
                0x00020023, 
                0x00020024, 
                0x00020025, 
                0x00020026, 
                0x00020027, 
                0x00020028, 
                0x00020029, 
                0x0002002A, 
                0x0002002B, 
                0x0002002C, 
                0x0002002D, 
                0x0002002E, 
                0x0002002F, 
                0x00020030, 
                0x00020031, 
                0x00020032, 
                0x00020033, 
                0x00020034, 
                0x00020035, 
                0x00020036, 
                0x00020037, 
                0x00020038, 
                0x00020039, 
                0x0002003A, 
                0x00040001, 
                0x00040002, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                "Get APCB Config", 
                "Set memory clock frequency", 
                "Set Tcl", 
                "Set Trcdrd", 
                "Set Trcdwr", 
                "Set Tras", 
                "Set Trp", 
                "Set ProcODT", 
                "Set Trcpage", 
                "Set Trc", 
                "Set Trfc", 
                "Set Trfc2", 
                "Set Trfc4", 
                "Set Tfaw", 
                "Set TrrdS", 
                "Set TrrdL", 
                "Set Twr", 
                "Set TwtrS", 
                "Set TwtrL", 
                "Set TCke", 
                "Set Tcwl", 
                "Set Trtp", 
                "Set TrdrdSc", 
                "Set TrdrdScL", 
                "Set TrdrdSd", 
                "Set TrdrdDd", 
                "Set TwrwrSc", 
                "Set TwrwrScL", 
                "Set TwrwrSd", 
                "Set TwrwrDd", 
                "Set Trdwr", 
                "Set Twrrd", 
                "Set GearDownEn", 
                "Set Cmd2t", 
                "Set RttNom", 
                "Set RttWR", 
                "Set RttPark", 
                "Set PowerDownEn", 
                "Set SMT EN", 
                "Software Downcore Config", 
                "Set EDC Throttler Control", 
                "Set AddrCmdSetup", 
                "Set CsOdtSetup", 
                "Set CkeSetup", 
                "Set CadBusClkDrvStren", 
                "Set CadBusAddrCmdDrvStren", 
                "Set CadBusCsOdtCmdDrvStren", 
                "Set CadBusCkeDrvStren", 
                "Set CLDO_VDDP", 
                "Set Interleave Mode", 
                "Set Interleave Size", 
                "Set FCLK OC Mode", 
                "Set SOC VID", 
                "Set FCLK Frequency", 
                "Set CCLK Fmax", 
                "Set GFXCLK Fmax", 
                "Set CLDO_VDDG", 
                "Get ECO Mode", 
                "Set ECO Mode", 
                "Command Buffer Start", 
                "Command Buffer End", 
                "", 
                "", 
                ""
            })
            Name (OBIE, Package (0xC1)
            {
                0x40, 
                0x00050001, 
                0x00050002, 
                0x00050003, 
                0x00050004, 
                0x00050005, 
                0x0005000A, 
                0x0005000B, 
                0x0005000C, 
                0x0005000D, 
                0x0005000E, 
                0x0005000F, 
                0x00050010, 
                0x00020043, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "Set PPT Limit", 
                "Set TDC Limit", 
                "Set EDC Limit", 
                "Set Scalar", 
                "Set DRAM Map Inversion", 
                "Set Curve Optimizer", 
                "Set IOD VDDG", 
                "Set Soc TDC Limit", 
                "Set Soc EDC Limit", 
                "Set Dram Latency Enhance", 
                "Get Dram Latency Enhance", 
                "Set GFX Curve Optimizer", 
                "Set LCLK Freq", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIT, Package (0xF5)
            {
                0x00020001, 
                0x014D, 
                0x0FA0, 
                0x21, 
                0x00020002, 
                0x08, 
                0x21, 
                One, 
                0x00020003, 
                0x08, 
                0x3F, 
                One, 
                0x00020004, 
                0x08, 
                0x3F, 
                One, 
                0x00020005, 
                0x15, 
                0x3A, 
                One, 
                0x00020006, 
                0x08, 
                0x3F, 
                One, 
                0x00020007, 
                Zero, 
                0x3F, 
                One, 
                0x00020008, 
                Zero, 
                0x03FF, 
                One, 
                0x00020009, 
                0x1D, 
                0x87, 
                One, 
                0x0002000A, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000B, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000C, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000D, 
                0x06, 
                0x36, 
                One, 
                0x0002000E, 
                0x04, 
                0x0C, 
                One, 
                0x0002000F, 
                0x04, 
                0x0C, 
                One, 
                0x00020010, 
                0x0A, 
                0x51, 
                One, 
                0x00020011, 
                0x02, 
                0x0E, 
                One, 
                0x00020012, 
                0x02, 
                0x0E, 
                One, 
                0x00020013, 
                One, 
                0x1F, 
                One, 
                0x00020014, 
                0x09, 
                0x16, 
                One, 
                0x00020015, 
                0x05, 
                0x0E, 
                One, 
                0x00020016, 
                One, 
                0x0F, 
                One, 
                0x00020017, 
                One, 
                0x0F, 
                One, 
                0x00020018, 
                One, 
                0x0F, 
                One, 
                0x00020019, 
                One, 
                0x0F, 
                One, 
                0x0002001A, 
                One, 
                0x0F, 
                One, 
                0x0002001B, 
                One, 
                0x3F, 
                One, 
                0x0002001C, 
                One, 
                0x0F, 
                One, 
                0x0002001D, 
                One, 
                0x0F, 
                One, 
                0x0002001E, 
                One, 
                0x1F, 
                One, 
                0x0002001F, 
                One, 
                0x0F, 
                One, 
                0x00020020, 
                Zero, 
                One, 
                One, 
                0x00020021, 
                Zero, 
                One, 
                One, 
                0x00020022, 
                Zero, 
                0x07, 
                One, 
                0x00020023, 
                Zero, 
                0x04, 
                One, 
                0x00020024, 
                Zero, 
                0x07, 
                One, 
                0x00020025, 
                Zero, 
                One, 
                One, 
                0x00020026, 
                Zero, 
                One, 
                One, 
                0x00020027, 
                Zero, 
                0xFFFFFFFF, 
                One, 
                0x00020028, 
                Zero, 
                0x0F, 
                One, 
                0x00020029, 
                Zero, 
                0x3F, 
                One, 
                0x0002002A, 
                Zero, 
                0x3F, 
                One, 
                0x0002002B, 
                Zero, 
                0x3F, 
                One, 
                0x0002002C, 
                Zero, 
                0x1F, 
                One, 
                0x0002002D, 
                Zero, 
                0x1F, 
                One, 
                0x0002002E, 
                Zero, 
                0x1F, 
                One, 
                0x0002002F, 
                Zero, 
                0x1F, 
                One, 
                0x00020030, 
                Zero, 
                0x05DC, 
                One, 
                0x00020031, 
                Zero, 
                0xFFFFFFFF, 
                One, 
                0x00020032, 
                Zero, 
                0x07, 
                One, 
                0x00020033, 
                Zero, 
                One, 
                One, 
                0x00020034, 
                Zero, 
                0xFF, 
                One, 
                0x00020035, 
                0x014D, 
                0x0FA0, 
                0x21, 
                0x00020036, 
                0x0E42, 
                0x12F2, 
                One, 
                0x00020037, 
                0x04B0, 
                0x09C4, 
                One, 
                0x00020038, 
                0x0258, 
                0x05DC, 
                One, 
                0x00050001, 
                Zero, 
                0x000000B4, 
                One, 
                0x00050002, 
                Zero, 
                0x000000B4, 
                One, 
                0x00050003, 
                Zero, 
                0x000000C8, 
                One, 
                0x00050004, 
                0x64, 
                0x03E8, 
                0x64, 
                0x00050005, 
                Zero, 
                0xFF, 
                One, 
                Zero
            })
            Name (OBIU, Package (0x19)
            {
                0x0005000A, 
                Zero, 
                0x1E, 
                One, 
                0x0005000B, 
                0x0258, 
                0x05DC, 
                One, 
                0x0005000C, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x0005000D, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050010, 
                Zero, 
                0x1E, 
                One, 
                0x00020043, 
                0x96, 
                0x09C4, 
                One, 
                Zero
            })
            Name (OBD1, Package (0xCF)
            {
                0x00020001, 
                0x4A, 
                0x014D, 
                0x0190, 
                0x0215, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x00020002, 
                0x1A, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x00020005, 
                0x26, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x00020007, 
                0x12, 
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3E, 
                0x3F, 
                0x00020014, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x0002002C, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002D, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002E, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002F, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                Zero
            })
            Name (OBD2, Package (0x52)
            {
                0x00020035, 
                0x46, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x0002003A, 
                0x03, 
                Zero, 
                One, 
                0x02, 
                0x0005000E, 
                0x02, 
                Zero, 
                One, 
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (SBSL, 1, NotSerialized)
            {
                Field (PMRG, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x2E), 
                    SBSL,   8
                }

                Local0 = (Arg0 | One)
                SBSL = Local0
            }

            Method (SETV, 2, NotSerialized)
            {
            }

            Method (GETV, 1, NotSerialized)
            {
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        Break
                    }

                    Local0 += 0x04
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Local0 = Zero
                    LOID = DerefOf (OBIU [Local0])
                    While (LOID)
                    {
                        If ((LOID == Arg0))
                        {
                            BUF0 = DerefOf (OBIU [(Local0 + Zero)])
                            BUF1 = DerefOf (OBIU [(Local0 + One)])
                            BUF2 = DerefOf (OBIU [(Local0 + 0x02)])
                            BUF3 = DerefOf (OBIU [(Local0 + 0x03)])
                            Break
                        }

                        Local0 += 0x04
                        LOID = DerefOf (OBIU [Local0])
                    }
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Name (GF01, Zero)
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM02, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Package (0x66)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD1 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD1 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD1 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD1 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD1 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD2 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD2 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD2 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD2 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD2 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            Method (AM05, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ACMD)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateWordField (OBUF, Zero, BSCD)
                CreateDWordField (OBUF, 0x02, BSTS)
                CreateWordField (OBUF, 0x06, BSD1)
                CreateDWordField (OBUF, 0x08, BBSN)
                CreateDWordField (OBUF, 0x0C, BBVS)
                CreateDWordField (OBUF, 0x10, BBCB)
                CreateWordField (OBUF, 0x14, BBMC)
                CreateByteField (OBUF, 0x16, BTCL)
                CreateByteField (OBUF, 0x17, BTRR)
                CreateByteField (OBUF, 0x18, BTRW)
                CreateByteField (OBUF, 0x19, BRAS)
                CreateByteField (OBUF, 0x1A, BTRP)
                CreateWordField (OBUF, 0x1B, BVIO)
                CreateWordField (OBUF, 0x1D, BVTT)
                CreateWordField (OBUF, 0x1F, BVPP)
                CreateWordField (OBUF, 0x21, BODT)
                CreateWordField (OBUF, 0x23, BRPG)
                CreateByteField (OBUF, 0x25, BTRC)
                CreateWordField (OBUF, 0x26, BRFC)
                CreateWordField (OBUF, 0x28, BRF2)
                CreateWordField (OBUF, 0x2A, BRF4)
                CreateByteField (OBUF, 0x2C, BFAW)
                CreateByteField (OBUF, 0x2D, BRRS)
                CreateByteField (OBUF, 0x2E, BRRL)
                CreateByteField (OBUF, 0x2F, BTWR)
                CreateByteField (OBUF, 0x30, BWTS)
                CreateByteField (OBUF, 0x31, BWTL)
                CreateByteField (OBUF, 0x32, BCKE)
                CreateByteField (OBUF, 0x33, BCWL)
                CreateByteField (OBUF, 0x34, BRTP)
                CreateByteField (OBUF, 0x35, BRSC)
                CreateByteField (OBUF, 0x36, BRSL)
                CreateByteField (OBUF, 0x37, BRSD)
                CreateByteField (OBUF, 0x38, BRDD)
                CreateByteField (OBUF, 0x39, BWSC)
                CreateByteField (OBUF, 0x3A, BWSL)
                CreateByteField (OBUF, 0x3B, BWSD)
                CreateByteField (OBUF, 0x3C, BWDD)
                CreateByteField (OBUF, 0x3D, BRWR)
                CreateByteField (OBUF, 0x3E, BWRD)
                CreateByteField (OBUF, 0x3F, BRDN)
                CreateByteField (OBUF, 0x40, BM2T)
                CreateByteField (OBUF, 0x41, RBNM)
                CreateByteField (OBUF, 0x42, RBWR)
                CreateByteField (OBUF, 0x43, RBPK)
                CreateByteField (OBUF, 0x44, BPWD)
                CreateByteField (OBUF, 0x45, BOCD)
                CreateDWordField (OBUF, 0x46, BOCV)
                CreateDWordField (OBUF, 0x4A, BOCF)
                CreateByteField (OBUF, 0x4E, BSMT)
                CreateDWordField (OBUF, 0x4F, BTOF)
                CreateByteField (OBUF, 0x53, BEDC)
                CreateWordField (OBUF, 0x54, BCNT)
                CreateByteField (OBUF, 0x56, BACS)
                CreateByteField (OBUF, 0x57, BCOS)
                CreateByteField (OBUF, 0x58, BCES)
                CreateByteField (OBUF, 0x59, BCBC)
                CreateByteField (OBUF, 0x5A, BCBA)
                CreateByteField (OBUF, 0x5B, BCBO)
                CreateByteField (OBUF, 0x5C, BCBE)
                CreateDWordField (OBUF, 0x5D, BCVP)
                CreateByteField (OBUF, 0x5F, BEDO)
                CreateDWordField (OBUF, 0x60, BNLC)
                CreateDWordField (OBUF, 0x64, BNLM)
                CreateDWordField (OBUF, 0x68, BNLS)
                CreateDWordField (OBUF, 0x6C, BPPL)
                CreateDWordField (OBUF, 0x70, BTDL)
                CreateDWordField (OBUF, 0x74, BEDL)
                CreateByteField (OBUF, 0x78, BFOC)
                CreateByteField (OBUF, 0x79, BSVD)
                CreateWordField (OBUF, 0x7A, BFCK)
                CreateByteField (OBUF, 0x7C, BDPC)
                CreateByteField (OBUF, 0x7D, BCPS)
                CreateWordField (OBUF, 0x7E, BFMX)
                CreateWordField (OBUF, 0x80, BGMX)
                CreateWordField (OBUF, 0x82, BVDG)
                CreateDWordField (OBUF, 0x84, BEOG)
                CreateDWordField (OBUF, 0x88, BEOS)
                CreateDWordField (OBUF, 0x8C, BPPT)
                CreateDWordField (OBUF, 0x90, BTDC)
                CreateDWordField (OBUF, 0x94, BEDM)
                CreateDWordField (OBUF, 0x98, BSCA)
                CreateByteField (OBUF, 0x9C, BDMI)
                CreateByteField (OBUF, 0x9D, BGAS)
                CreateByteField (OBUF, 0x9E, BGAG)
                CreateByteField (OBUF, 0x9F, BNPS)
                CreateByteField (OBUF, 0xA0, BNPG)
                CreateDWordField (OBUF, 0xA1, BPCS)
                CreateWordField (OBUF, 0xA5, BIOD)
                CreateWordField (OBUF, 0xA7, BGFV)
                CreateWordField (OBUF, 0xA9, BGFX)
                CreateDWordField (OBUF, 0xAB, BSTD)
                CreateDWordField (OBUF, 0xAF, BSED)
                CreateByteField (OBUF, 0xB3, BSLC)
                CreateByteField (OBUF, 0xB4, BGLC)
                If ((ACMD == 0x00010001))
                {
                    R101 (Arg0)
                }
                ElseIf ((ACMD == 0x00010002))
                {
                    R102 (Arg0)
                }
                ElseIf ((ACMD == 0x00020001))
                {
                    R201 (Arg0)
                }
                ElseIf ((ACMD == 0x00020002))
                {
                    R202 (Arg0)
                }
                ElseIf ((ACMD == 0x00020003))
                {
                    R203 (Arg0)
                }
                ElseIf ((ACMD == 0x00020004))
                {
                    R204 (Arg0)
                }
                ElseIf ((ACMD == 0x00020005))
                {
                    R205 (Arg0)
                }
                ElseIf ((ACMD == 0x00020006))
                {
                    R206 (Arg0)
                }
                ElseIf ((ACMD == 0x00020007))
                {
                    R207 (Arg0)
                }
                ElseIf ((ACMD == 0x00020008))
                {
                    R208 (Arg0)
                }
                ElseIf ((ACMD == 0x00020009))
                {
                    R209 (Arg0)
                }
                ElseIf ((ACMD == 0x0002000A))
                {
                    R20A (Arg0)
                }
                ElseIf ((ACMD == 0x0002000B))
                {
                    R20B (Arg0)
                }
                ElseIf ((ACMD == 0x0002000C))
                {
                    R20C (Arg0)
                }
                ElseIf ((ACMD == 0x0002000D))
                {
                    R20D (Arg0)
                }
                ElseIf ((ACMD == 0x0002000E))
                {
                    R20E (Arg0)
                }
                ElseIf ((ACMD == 0x0002000F))
                {
                    R20F (Arg0)
                }
                ElseIf ((ACMD == 0x00020010))
                {
                    R210 (Arg0)
                }
                ElseIf ((ACMD == 0x00020011))
                {
                    R211 (Arg0)
                }
                ElseIf ((ACMD == 0x00020012))
                {
                    R212 (Arg0)
                }
                ElseIf ((ACMD == 0x00020013))
                {
                    R213 (Arg0)
                }
                ElseIf ((ACMD == 0x00020014))
                {
                    R214 (Arg0)
                }
                ElseIf ((ACMD == 0x00020015))
                {
                    R215 (Arg0)
                }
                ElseIf ((ACMD == 0x00020016))
                {
                    R216 (Arg0)
                }
                ElseIf ((ACMD == 0x00020017))
                {
                    R217 (Arg0)
                }
                ElseIf ((ACMD == 0x00020018))
                {
                    R218 (Arg0)
                }
                ElseIf ((ACMD == 0x00020019))
                {
                    R219 (Arg0)
                }
                ElseIf ((ACMD == 0x0002001A))
                {
                    R21A (Arg0)
                }
                ElseIf ((ACMD == 0x0002001B))
                {
                    R21B (Arg0)
                }
                ElseIf ((ACMD == 0x0002001C))
                {
                    R21C (Arg0)
                }
                ElseIf ((ACMD == 0x0002001D))
                {
                    R21D (Arg0)
                }
                ElseIf ((ACMD == 0x0002001E))
                {
                    R21E (Arg0)
                }
                ElseIf ((ACMD == 0x0002001F))
                {
                    R21F (Arg0)
                }
                ElseIf ((ACMD == 0x00020020))
                {
                    R220 (Arg0)
                }
                ElseIf ((ACMD == 0x00020021))
                {
                    R221 (Arg0)
                }
                ElseIf ((ACMD == 0x00020022))
                {
                    R222 (Arg0)
                }
                ElseIf ((ACMD == 0x00020023))
                {
                    R223 (Arg0)
                }
                ElseIf ((ACMD == 0x00020024))
                {
                    R224 (Arg0)
                }
                ElseIf ((ACMD == 0x00020025))
                {
                    R225 (Arg0)
                }
                ElseIf ((ACMD == 0x00020026))
                {
                    R226 (Arg0)
                }
                ElseIf ((ACMD == 0x00020027))
                {
                    R227 (Arg0)
                }
                ElseIf ((ACMD == 0x00020028))
                {
                    R228 (Arg0)
                }
                ElseIf ((ACMD == 0x00020029))
                {
                    R229 (Arg0)
                }
                ElseIf ((ACMD == 0x0002002A))
                {
                    R22A (Arg0)
                }
                ElseIf ((ACMD == 0x0002002B))
                {
                    R22B (Arg0)
                }
                ElseIf ((ACMD == 0x0002002C))
                {
                    R22C (Arg0)
                }
                ElseIf ((ACMD == 0x0002002D))
                {
                    R22D (Arg0)
                }
                ElseIf ((ACMD == 0x0002002E))
                {
                    R22E (Arg0)
                }
                ElseIf ((ACMD == 0x0002002F))
                {
                    R22F (Arg0)
                }
                ElseIf ((ACMD == 0x00020030))
                {
                    R230 (Arg0)
                }
                ElseIf ((ACMD == 0x00020031))
                {
                    R231 (Arg0)
                }
                ElseIf ((ACMD == 0x00020032))
                {
                    R232 (Arg0)
                }
                ElseIf ((ACMD == 0x00020033))
                {
                    R233 (Arg0)
                }
                ElseIf ((ACMD == 0x00020034))
                {
                    R234 (Arg0)
                }
                ElseIf ((ACMD == 0x00020035))
                {
                    R235 (Arg0)
                }
                ElseIf ((ACMD == 0x00020036))
                {
                    R236 (Arg0)
                }
                ElseIf ((ACMD == 0x00020037))
                {
                    R237 (Arg0)
                }
                ElseIf ((ACMD == 0x00020038))
                {
                    R238 (Arg0)
                }
                ElseIf ((ACMD == 0x00020039))
                {
                    R239 (Arg0)
                }
                ElseIf ((ACMD == 0x0002003A))
                {
                    R23A (Arg0)
                }
                ElseIf ((ACMD == 0x00050001))
                {
                    R23B (Arg0)
                }
                ElseIf ((ACMD == 0x00050002))
                {
                    R23C (Arg0)
                }
                ElseIf ((ACMD == 0x00050003))
                {
                    R23D (Arg0)
                }
                ElseIf ((ACMD == 0x00050004))
                {
                    R23E (Arg0)
                }
                ElseIf ((ACMD == 0x00050005))
                {
                    R23F (Arg0)
                }
                ElseIf ((ACMD == 0x00030001))
                {
                    R301 (Arg0)
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00050006))
                {
                    R304 (Arg0)
                }
                ElseIf ((ACMD == 0x00050007))
                {
                    R305 (Arg0)
                }
                ElseIf ((ACMD == 0x00050008))
                {
                    R306 (Arg0)
                }
                ElseIf ((ACMD == 0x00050009))
                {
                    R307 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000A))
                {
                    R308 (Arg0)
                }
                ElseIf ((ACMD == 0x00050010))
                {
                    R510 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000B))
                {
                    R309 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000C))
                {
                    R30A (Arg0)
                }
                ElseIf ((ACMD == 0x0005000D))
                {
                    R30B (Arg0)
                }
                ElseIf ((ACMD == 0x0005000E))
                {
                    R30C (Arg0)
                }
                ElseIf ((ACMD == 0x0005000F))
                {
                    R30D (Arg0)
                }
                ElseIf ((ACMD == 0x00020043))
                {
                    R243 (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                }

                BSCD = ASCD /* \AOD_.ASCD */
                BSTS = ASTS /* \AOD_.ASTS */
                BSD1 = RSD1 /* \AOD_.RSD1 */
                BBSN = MBSN /* \AOD_.MBSN */
                BBVS = MBVS /* \AOD_.MBVS */
                BBCB = MBCB /* \AOD_.MBCB */
                BBMC = MBMC /* \AOD_.MBMC */
                BTCL = TTCL /* \AOD_.TTCL */
                BTRR = TRCR /* \AOD_.TRCR */
                BTRW = TRCW /* \AOD_.TRCW */
                BRAS = TRAS /* \AOD_.TRAS */
                BTRP = TTRP /* \AOD_.TTRP */
                BVIO = VDIO /* \AOD_.VDIO */
                BVTT = VMTT /* \AOD_.VMTT */
                BVPP = VMPP /* \AOD_.VMPP */
                BODT = PODT /* \AOD_.PODT */
                BRPG = TRPG /* \AOD_.TRPG */
                BTRC = TTRC /* \AOD_.TTRC */
                BRFC = TRFC /* \AOD_.TRFC */
                BRF2 = TRF2 /* \AOD_.TRF2 */
                BRF4 = TRF4 /* \AOD_.TRF4 */
                BFAW = TFAW /* \AOD_.TFAW */
                BRRS = TRRS /* \AOD_.TRRS */
                BRRL = TRRL /* \AOD_.TRRL */
                BTWR = TTWR /* \AOD_.TTWR */
                BWTS = TWTS /* \AOD_.TWTS */
                BWTL = TWTL /* \AOD_.TWTL */
                BCKE = TCKE /* \AOD_.TCKE */
                BCWL = TCWL /* \AOD_.TCWL */
                BRTP = TRTP /* \AOD_.TRTP */
                BRSC = TRSC /* \AOD_.TRSC */
                BRSL = TRSL /* \AOD_.TRSL */
                BRSD = TRSD /* \AOD_.TRSD */
                BRDD = TRDD /* \AOD_.TRDD */
                BWSC = TWSC /* \AOD_.TWSC */
                BWSL = TWSL /* \AOD_.TWSL */
                BWSD = TWSD /* \AOD_.TWSD */
                BWDD = TWDD /* \AOD_.TWDD */
                BRWR = TRWR /* \AOD_.TRWR */
                BWRD = TWRD /* \AOD_.TWRD */
                BRDN = GRDN /* \AOD_.GRDN */
                BM2T = CM2T /* \AOD_.CM2T */
                RBNM = RTNM /* \AOD_.RTNM */
                RBWR = RTWR /* \AOD_.RTWR */
                RBPK = RTPK /* \AOD_.RTPK */
                BPWD = PWDE /* \AOD_.PWDE */
                BOCD = OCDS /* \AOD_.OCDS */
                BOCV = OCVM /* \AOD_.OCVM */
                BOCF = OCFM /* \AOD_.OCFM */
                BSMT = SMTE /* \AOD_.SMTE */
                BTOF = TOFF /* \AOD_.TOFF */
                BEDC = EDCT /* \AOD_.EDCT */
                BCNT = ACNT /* \AOD_.ACNT */
                BACS = ACSP /* \AOD_.ACSP */
                BCOS = COSP /* \AOD_.COSP */
                BCES = CESP /* \AOD_.CESP */
                BCBC = CBCK /* \AOD_.CBCK */
                BCBA = CBAC /* \AOD_.CBAC */
                BCBO = CBCO /* \AOD_.CBCO */
                BCBE = CBCE /* \AOD_.CBCE */
                BCVP = CDVP /* \AOD_.CDVP */
                BEDO = EDCO /* \AOD_.EDCO */
                BNLC = INLC /* \AOD_.INLC */
                BNLM = INLM /* \AOD_.INLM */
                BNLS = INLS /* \AOD_.INLS */
                BPPL = PPTL /* \AOD_.PPTL */
                BTDL = TDCL /* \AOD_.TDCL */
                BEDL = EDCL /* \AOD_.EDCL */
                BFOC = FCOC /* \AOD_.FCOC */
                BSVD = SVID /* \AOD_.SVID */
                BFCK = FCLK /* \AOD_.FCLK */
                BDPC = MDPC /* \AOD_.MDPC */
                BCPS = MCPS /* \AOD_.MCPS */
                BFMX = FMAX /* \AOD_.FMAX */
                BGMX = GMAX /* \AOD_.GMAX */
                BVDG = CVDG /* \AOD_.CVDG */
                BEOG = ECOG /* \AOD_.ECOG */
                BEOS = ECOS /* \AOD_.ECOS */
                BPPT = PPTS /* \AOD_.PPTS */
                BTDC = TDCS /* \AOD_.TDCS */
                BEDM = EDCS /* \AOD_.EDCS */
                BSCA = SCAS /* \AOD_.SCAS */
                BDMI = DMIS /* \AOD_.DMIS */
                BGAS = GAMS /* \AOD_.GAMS */
                BGAG = GAMG /* \AOD_.GAMG */
                BNPS = NPSS /* \AOD_.NPSS */
                BNPG = NPSG /* \AOD_.NPSG */
                BPCS = COPS /* \AOD_.COPS */
                BIOD = IVDG /* \AOD_.IVDG */
                BGFV = OGFV /* \AOD_.OGFV */
                BGFX = OGFX /* \AOD_.OGFX */
                BSTD = OTDC /* \AOD_.OTDC */
                BSED = OEDC /* \AOD_.OEDC */
                BSLC = DMLC /* \AOD_.DMLC */
                BGLC = DMLG /* \AOD_.DMLG */
                Return (OBUF) /* \AOD_.OBUF */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CPTB (Arg0, INFO)
                Return (INFO) /* \AOD_.AM06.INFO */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \AOD_.DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (OBIE) /* \AOD_.OBIE */
            }

            Name (CMDV, 0x05)
            Name (OBUF, Buffer (0xC8){})
            OperationRegion (AODT, SystemMemory, 0xBD42B018, 0x220C)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                RSD1,   16, 
                MBSN,   32, 
                MBVS,   32, 
                MBCB,   32, 
                MBMC,   16, 
                TTCL,   8, 
                TRCR,   8, 
                TRCW,   8, 
                TRAS,   8, 
                TTRP,   8, 
                VDIO,   16, 
                VMTT,   16, 
                VMPP,   16, 
                PODT,   16, 
                TRPG,   16, 
                TTRC,   8, 
                TRFC,   16, 
                TRF2,   16, 
                TRF4,   16, 
                TFAW,   8, 
                TRRS,   8, 
                TRRL,   8, 
                TTWR,   8, 
                TWTS,   8, 
                TWTL,   8, 
                TCKE,   8, 
                TCWL,   8, 
                TRTP,   8, 
                TRSC,   8, 
                TRSL,   8, 
                TRSD,   8, 
                TRDD,   8, 
                TWSC,   8, 
                TWSL,   8, 
                TWSD,   8, 
                TWDD,   8, 
                TRWR,   8, 
                TWRD,   8, 
                GRDN,   8, 
                CM2T,   8, 
                RTNM,   8, 
                RTWR,   8, 
                RTPK,   8, 
                PWDE,   8, 
                OCDS,   8, 
                OCVM,   32, 
                OCFM,   32, 
                SMTE,   8, 
                TOFF,   32, 
                EDCT,   8, 
                ACNT,   16, 
                ACSP,   8, 
                COSP,   8, 
                CESP,   8, 
                CBCK,   8, 
                CBAC,   8, 
                CBCO,   8, 
                CBCE,   8, 
                CDVP,   16, 
                EDCO,   8, 
                INLC,   32, 
                INLM,   32, 
                INLS,   32, 
                PPTL,   32, 
                TDCL,   32, 
                EDCL,   32, 
                FCOC,   8, 
                SVID,   8, 
                FCLK,   16, 
                MDPC,   8, 
                MCPS,   8, 
                FMAX,   16, 
                GMAX,   16, 
                CVDG,   16, 
                ECOG,   32, 
                ECOS,   32, 
                PPTS,   32, 
                TDCS,   32, 
                EDCS,   32, 
                SCAS,   32, 
                DMIS,   8, 
                GAMS,   8, 
                GAMG,   8, 
                NPSS,   8, 
                NPSG,   8, 
                COPS,   32, 
                IVDG,   16, 
                OGFV,   16, 
                OGFX,   16, 
                OTDC,   32, 
                OEDC,   32, 
                DMLC,   8, 
                DMLG,   8, 
                GPSM,   8, 
                TPMS,   32, 
                DMTP,   8, 
                OCFX,   8, 
                MRSD,   32, 
                RSD2,   64, 
                NDPC,   8, 
                NCPS,   8, 
                RSD3,   16, 
                DSPD,   68096
            }

            Method (R101, 1, NotSerialized)
            {
                MBVS = 0x05
                MBCB = 0x80000000
                ASMI (0x9D)
            }

            Method (R102, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x40000000
                MBCB = Local0
                ASMI (0x9E)
            }

            Method (R201, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MCLK)
                MBVS = 0x05
                MBMC = MCLK /* \AOD_.R201.MCLK */
                MBCB = One
                ASMI (0x9D)
            }

            Method (R202, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTCL)
                MBVS = 0x05
                TTCL = MTCL /* \AOD_.R202.MTCL */
                MBCB = 0x02
                ASMI (0x9D)
            }

            Method (R203, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDD)
                MBVS = 0x05
                TRCR = MRDD /* \AOD_.R203.MRDD */
                MBCB = 0x04
                ASMI (0x9D)
            }

            Method (R204, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDW)
                MBVS = 0x05
                TRCW = MRDW /* \AOD_.R204.MRDW */
                MBCB = 0x08
                ASMI (0x9D)
            }

            Method (R205, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRS)
                MBVS = 0x05
                TRAS = MTRS /* \AOD_.R205.MTRS */
                MBCB = 0x20
                ASMI (0x9D)
            }

            Method (R206, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRP)
                MBVS = 0x05
                TTRP = MTRP /* \AOD_.R206.MTRP */
                MBCB = 0x10
                ASMI (0x9D)
            }

            Method (R207, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MPOT)
                MBVS = 0x05
                PODT = MPOT /* \AOD_.R207.MPOT */
                MBCB = 0x3000
                ASMI (0x9D)
            }

            Method (R208, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MRPG)
                MBVS = 0x05
                TRPG = MRPG /* \AOD_.R208.MRPG */
                MBCB = 0x4000
                ASMI (0x9D)
            }

            Method (R209, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTRC = SVAL /* \AOD_.R209.SVAL */
                MBCB = 0x5000
                ASMI (0x9D)
            }

            Method (R20A, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRFC = SVAL /* \AOD_.R20A.SVAL */
                MBCB = 0x6000
                ASMI (0x9D)
            }

            Method (R20B, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF2 = SVAL /* \AOD_.R20B.SVAL */
                MBCB = 0x7000
                ASMI (0x9D)
            }

            Method (R20C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF4 = SVAL /* \AOD_.R20C.SVAL */
                MBCB = 0x8000
                ASMI (0x9D)
            }

            Method (R20D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TFAW = SVAL /* \AOD_.R20D.SVAL */
                MBCB = 0x9000
                ASMI (0x9D)
            }

            Method (R20E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRS = SVAL /* \AOD_.R20E.SVAL */
                MBCB = 0xA000
                ASMI (0x9D)
            }

            Method (R20F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRL = SVAL /* \AOD_.R20F.SVAL */
                MBCB = 0xB000
                ASMI (0x9D)
            }

            Method (R210, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTWR = SVAL /* \AOD_.R210.SVAL */
                MBCB = 0xC000
                ASMI (0x9D)
            }

            Method (R211, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTS = SVAL /* \AOD_.R211.SVAL */
                MBCB = 0xD000
                ASMI (0x9D)
            }

            Method (R212, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTL = SVAL /* \AOD_.R212.SVAL */
                MBCB = 0xE000
                ASMI (0x9D)
            }

            Method (R213, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCKE = SVAL /* \AOD_.R213.SVAL */
                MBCB = 0xF000
                ASMI (0x9D)
            }

            Method (R214, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCWL = SVAL /* \AOD_.R214.SVAL */
                MBCB = 0x00010000
                ASMI (0x9D)
            }

            Method (R215, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRTP = SVAL /* \AOD_.R215.SVAL */
                MBCB = 0x00020000
                ASMI (0x9D)
            }

            Method (R216, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSC = SVAL /* \AOD_.R216.SVAL */
                MBCB = 0x00030000
                ASMI (0x9D)
            }

            Method (R217, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSL = SVAL /* \AOD_.R217.SVAL */
                MBCB = 0x00040000
                ASMI (0x9D)
            }

            Method (R218, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSD = SVAL /* \AOD_.R218.SVAL */
                MBCB = 0x00050000
                ASMI (0x9D)
            }

            Method (R219, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRDD = SVAL /* \AOD_.R219.SVAL */
                MBCB = 0x00060000
                ASMI (0x9D)
            }

            Method (R21A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSC = SVAL /* \AOD_.R21A.SVAL */
                MBCB = 0x00070000
                ASMI (0x9D)
            }

            Method (R21B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSL = SVAL /* \AOD_.R21B.SVAL */
                MBCB = 0x00080000
                ASMI (0x9D)
            }

            Method (R21C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSD = SVAL /* \AOD_.R21C.SVAL */
                MBCB = 0x00090000
                ASMI (0x9D)
            }

            Method (R21D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWDD = SVAL /* \AOD_.R21D.SVAL */
                MBCB = 0x000A0000
                ASMI (0x9D)
            }

            Method (R21E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRWR = SVAL /* \AOD_.R21E.SVAL */
                MBCB = 0x000B0000
                ASMI (0x9D)
            }

            Method (R21F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWRD = SVAL /* \AOD_.R21F.SVAL */
                MBCB = 0x000C0000
                ASMI (0x9D)
            }

            Method (R220, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GRDN = SVAL /* \AOD_.R220.SVAL */
                MBCB = 0x000D0000
                ASMI (0x9D)
            }

            Method (R221, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CM2T = SVAL /* \AOD_.R221.SVAL */
                MBCB = 0x000E0000
                ASMI (0x9D)
            }

            Method (R222, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTNM = SVAL /* \AOD_.R222.SVAL */
                MBCB = 0x000F0000
                ASMI (0x9D)
            }

            Method (R223, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTWR = SVAL /* \AOD_.R223.SVAL */
                MBCB = 0x00100000
                ASMI (0x9D)
            }

            Method (R224, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTPK = SVAL /* \AOD_.R224.SVAL */
                MBCB = 0x00200000
                ASMI (0x9D)
            }

            Method (R225, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PWDE = SVAL /* \AOD_.R225.SVAL */
                MBCB = 0x00300000
                ASMI (0x9D)
            }

            Method (R226, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SMTE = SVAL /* \AOD_.R226.SVAL */
                MBCB = 0x00400000
                ASMI (0x9D)
            }

            Method (R227, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACNT = SVAL /* \AOD_.R227.SVAL */
                MBCB = 0x00500000
                ASMI (0x9D)
            }

            Method (R228, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCT = SVAL /* \AOD_.R228.SVAL */
                MBCB = 0x00600000
                ASMI (0x9D)
            }

            Method (R229, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACSP = SVAL /* \AOD_.R229.SVAL */
                MBCB = 0x00800000
                ASMI (0x9D)
            }

            Method (R22A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COSP = SVAL /* \AOD_.R22A.SVAL */
                MBCB = 0x00900000
                ASMI (0x9D)
            }

            Method (R22B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CESP = SVAL /* \AOD_.R22B.SVAL */
                MBCB = 0x00A00000
                ASMI (0x9D)
            }

            Method (R22C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCK = SVAL /* \AOD_.R22C.SVAL */
                MBCB = 0x00B00000
                ASMI (0x9D)
            }

            Method (R22D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBAC = SVAL /* \AOD_.R22D.SVAL */
                MBCB = 0x00C00000
                ASMI (0x9D)
            }

            Method (R22E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCO = SVAL /* \AOD_.R22E.SVAL */
                MBCB = 0x00D00000
                ASMI (0x9D)
            }

            Method (R22F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCE = SVAL /* \AOD_.R22F.SVAL */
                MBCB = 0x00E00000
                ASMI (0x9D)
            }

            Method (R230, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CDVP = SVAL /* \AOD_.R230.SVAL */
                MBCB = 0x00700000
                ASMI (0x9D)
            }

            Method (R231, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLM = SVAL /* \AOD_.R231.SVAL */
                MBCB = 0x00100001
                ASMI (0x9D)
            }

            Method (R232, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLS = SVAL /* \AOD_.R232.SVAL */
                MBCB = 0x00100002
                ASMI (0x9D)
            }

            Method (R233, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCOC = SVAL /* \AOD_.R233.SVAL */
                MBCB = 0x00100003
                ASMI (0x9D)
            }

            Method (R234, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SVID = SVAL /* \AOD_.R234.SVAL */
                MBCB = 0x00100004
                ASMI (0x9D)
            }

            Method (R235, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCLK = SVAL /* \AOD_.R235.SVAL */
                MBCB = 0x00100005
                ASMI (0x9D)
            }

            Method (R236, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FMAX = SVAL /* \AOD_.R236.SVAL */
                MBCB = 0x00100006
                ASMI (0x9D)
            }

            Method (R237, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GMAX = SVAL /* \AOD_.R237.SVAL */
                MBCB = 0x00100007
                ASMI (0x9D)
            }

            Method (R238, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CVDG = SVAL /* \AOD_.R238.SVAL */
                MBCB = 0x00100008
                ASMI (0x9D)
            }

            Method (R239, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100009
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R23A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ECOS = SVAL /* \AOD_.R23A.SVAL */
                MBCB = 0x0010000A
                ASMI (0x9D)
            }

            Method (R23B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PPTS = SVAL /* \AOD_.R23B.SVAL */
                MBCB = 0x0010000B
                ASMI (0x9D)
            }

            Method (R23C, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TDCS = SVAL /* \AOD_.R23C.SVAL */
                MBCB = 0x0010000C
                ASMI (0x9D)
            }

            Method (R23D, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCS = SVAL /* \AOD_.R23D.SVAL */
                MBCB = 0x0010000D
                ASMI (0x9D)
            }

            Method (R23E, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SCAS = SVAL /* \AOD_.R23E.SVAL */
                MBCB = 0x0010000E
                ASMI (0x9D)
            }

            Method (R23F, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMIS = SVAL /* \AOD_.R23F.SVAL */
                MBCB = 0x0010000F
                ASMI (0x9D)
            }

            Method (R301, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVIO)
                MBVS = 0x05
                VDIO = MVIO /* \AOD_.R301.MVIO */
                MBCB = 0x0100
                ASMI (0x9E)
            }

            Method (R302, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVTT)
                MBVS = 0x05
                VMTT = MVTT /* \AOD_.R302.MVTT */
                MBCB = 0x0200
                ASMI (0x9E)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                VMPP = MVPP /* \AOD_.R303.MVPP */
                MBCB = 0x2000
                ASMI (0x9E)
            }

            Method (R304, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GAMS = SVAL /* \AOD_.R304.SVAL */
                MBCB = 0x00100010
                ASMI (0x9D)
            }

            Method (R305, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100020
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R306, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                NPSS = SVAL /* \AOD_.R306.SVAL */
                MBCB = 0x00100030
                ASMI (0x9D)
            }

            Method (R307, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100031
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R308, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COPS = SVAL /* \AOD_.R308.SVAL */
                MBCB = 0x00100032
                ASMI (0x9D)
            }

            Method (R309, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                IVDG = SVAL /* \AOD_.R309.SVAL */
                MBCB = 0x00100033
                ASMI (0x9D)
            }

            Method (R30A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OTDC = SVAL /* \AOD_.R30A.SVAL */
                MBCB = 0x00100034
                ASMI (0x9D)
            }

            Method (R30B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OEDC = SVAL /* \AOD_.R30B.SVAL */
                MBCB = 0x00100035
                ASMI (0x9D)
            }

            Method (R30C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMLC = SVAL /* \AOD_.R30C.SVAL */
                MBCB = 0x00100036
                ASMI (0x9D)
            }

            Method (R30D, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100037
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R401, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x01000000
                ASMI (0x9E)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x02000000
                ASMI (0x9E)
            }

            Method (R505, 1, NotSerialized)
            {
                MBVS = 0x05
            }

            Method (R510, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GPSM = SVAL /* \AOD_.R510.SVAL */
                MBCB = 0x00100038
                ASMI (0x9D)
            }

            Method (R243, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TPMS = SVAL /* \AOD_.R243.SVAL */
                MBCB = 0x0010003A
                ASMI (0x9D)
            }

            Name (WQBA, Buffer (0x0A57)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x47, 0x0A, 0x00, 0x00, 0x38, 0x37, 0x00, 0x00,  // G...87..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xDB, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0F, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x50, 0x1A, 0x40,  // x\.A.P.@
                /* 00A8 */  0x98, 0xFC, 0x21, 0x2B, 0x06, 0x0C, 0x4A, 0xC2,  // ..!+..J.
                /* 00B0 */  0x58, 0xA8, 0x8B, 0x51, 0xA3, 0x46, 0xCA, 0x06,  // X..Q.F..
                /* 00B8 */  0x64, 0x88, 0xD2, 0x46, 0x8D, 0x1E, 0xD0, 0xF9,  // d..F....
                /* 00C0 */  0x1D, 0xC9, 0xD9, 0x1D, 0xDD, 0x91, 0x24, 0x30,  // ......$0
                /* 00C8 */  0xEA, 0x31, 0x1D, 0x63, 0x61, 0x33, 0x12, 0x6A,  // .1.ca3.j
                /* 00D0 */  0x8C, 0xE6, 0xA0, 0x48, 0xB8, 0x41, 0xA3, 0x25,  // ...H.A.%
                /* 00D8 */  0xC2, 0x6A, 0x5C, 0xB1, 0xCF, 0xCC, 0xC2, 0x87,  // .j\.....
                /* 00E0 */  0x25, 0x8C, 0x23, 0x38, 0xB0, 0x83, 0xB5, 0x68,  // %.#8...h
                /* 00E8 */  0x18, 0xA1, 0x15, 0x04, 0xA7, 0x41, 0x1C, 0x45,  // .....A.E
                /* 00F0 */  0x94, 0x30, 0x0C, 0xCF, 0x98, 0x81, 0x8E, 0x92,  // .0......
                /* 00F8 */  0x21, 0x85, 0x09, 0x7A, 0x02, 0x41, 0x4E, 0x9E,  // !..z.AN.
                /* 0100 */  0x61, 0x19, 0xE2, 0x0C, 0x38, 0x56, 0x8C, 0x50,  // a...8V.P
                /* 0108 */  0x21, 0x31, 0x03, 0x09, 0xFE, 0xFF, 0x3F, 0x81,  // !1....?.
                /* 0110 */  0xAE, 0x31, 0xE4, 0x19, 0x88, 0xDC, 0x03, 0x4E,  // .1.....N
                /* 0118 */  0x20, 0x48, 0xF4, 0x28, 0xC1, 0x8D, 0x6B, 0x54,  //  H.(..kT
                /* 0120 */  0x36, 0xA6, 0xB3, 0xC1, 0x0D, 0xCC, 0x04, 0x71,  // 6......q
                /* 0128 */  0x0E, 0x0F, 0x23, 0x03, 0x42, 0x13, 0x88, 0x1F,  // ..#.B...
                /* 0130 */  0x3B, 0x7C, 0x02, 0xBB, 0x3F, 0x0E, 0x48, 0x21,  // ;|..?.H!
                /* 0138 */  0x82, 0x2E, 0x04, 0x67, 0x5A, 0xA3, 0x80, 0x77,  // ...gZ..w
                /* 0140 */  0xC4, 0xB3, 0x43, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  // ..C[.:..
                /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  // j.E...F1
                /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  // ^.P!.D=.
                /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  //  ..P.".`
                /* 0160 */  0x46, 0x60, 0xF6, 0xCF, 0x00, 0xCC, 0x02, 0xC4,  // F`......
                /* 0168 */  0x1F, 0x81, 0x25, 0x9C, 0x08, 0x64, 0x64, 0x34,  // ..%..dd4
                /* 0170 */  0xF4, 0xB0, 0xE0, 0x93, 0x00, 0x3B, 0x20, 0x78,  // .....; x
                /* 0178 */  0x3E, 0xA7, 0x66, 0x02, 0x07, 0x86, 0x10, 0xAF,  // >.f.....
                /* 0180 */  0x04, 0x88, 0x3A, 0x5A, 0x50, 0x02, 0x4B, 0x39,  // ..:ZP.K9
                /* 0188 */  0x1A, 0x10, 0xDB, 0x03, 0xD3, 0x3D, 0xE0, 0x08,  // .....=..
                /* 0190 */  0xCF, 0xDD, 0x97, 0x83, 0x53, 0xF3, 0x4F, 0xC3,  // ....S.O.
                /* 0198 */  0xD3, 0x7C, 0x48, 0xC0, 0x0C, 0xD1, 0x63, 0x3D,  // .|H...c=
                /* 01A0 */  0x88, 0x80, 0x87, 0xC8, 0x4E, 0x09, 0x06, 0xC4,  // ....N...
                /* 01A8 */  0x7B, 0xBF, 0x16, 0x90, 0x11, 0xBC, 0x24, 0x18,  // {.....$.
                /* 01B0 */  0xD0, 0x93, 0x78, 0x40, 0x00, 0xCB, 0x41, 0xE3,  // ..x@..A.
                /* 01B8 */  0xC0, 0x4F, 0xA8, 0xE2, 0x3B, 0x00, 0x3D, 0x12,  // .O..;.=.
                /* 01C0 */  0xB0, 0x19, 0xC5, 0x37, 0x41, 0x59, 0xC7, 0x07,  // ...7AY..
                /* 01C8 */  0xF4, 0x9C, 0xA3, 0x3D, 0x3B, 0xBC, 0x2C, 0x34,  // ...=;.,4
                /* 01D0 */  0x7B, 0xC5, 0x20, 0x04, 0xAF, 0x01, 0xBE, 0x29,  // {. ....)
                /* 01D8 */  0xF8, 0x34, 0x62, 0x51, 0xAB, 0x93, 0x93, 0x55,  // .4bQ...U
                /* 01E0 */  0x79, 0xC4, 0x14, 0xDC, 0x43, 0xE0, 0x32, 0xE0,  // y...C.2.
                /* 01E8 */  0x34, 0x74, 0x8F, 0x17, 0x1C, 0x0A, 0xC6, 0x4B,  // 4t.....K
                /* 01F0 */  0xFF, 0xFF, 0xE3, 0x05, 0xF7, 0xBC, 0x8E, 0x17,  // ........
                /* 01F8 */  0x2C, 0xC7, 0x84, 0x87, 0x8D, 0xAA, 0x20, 0x34,  // ,..... 4
                /* 0200 */  0x88, 0x03, 0x6E, 0x7E, 0x00, 0xE4, 0x6A, 0xE1,  // ..n~..j.
                /* 0208 */  0x11, 0xB3, 0xB9, 0x9C, 0x15, 0x3B, 0xA2, 0xF0,  // .....;..
                /* 0210 */  0xE1, 0xF1, 0x61, 0x78, 0xC4, 0xEF, 0x0D, 0xC5,  // ..ax....
                /* 0218 */  0x82, 0x48, 0x20, 0x84, 0xCE, 0x0C, 0x47, 0x0E,  // .H ...G.
                /* 0220 */  0x16, 0x67, 0x27, 0x08, 0x11, 0x58, 0xDA, 0xD0,  // .g'..X..
                /* 0228 */  0xD1, 0x43, 0xF6, 0xA8, 0x5E, 0x62, 0x8C, 0xF1,  // .C..^b..
                /* 0230 */  0x44, 0x60, 0xD4, 0x53, 0x3A, 0x7A, 0xF0, 0x01,  // D`.S:z..
                /* 0238 */  0x7A, 0xF4, 0x80, 0xCF, 0xFF, 0xFF, 0xE8, 0x71,  // z......q
                /* 0240 */  0x92, 0xC6, 0x2C, 0x11, 0xA3, 0x47, 0x9F, 0x23,  // ..,..G.#
                /* 0248 */  0x3C, 0x9D, 0xB7, 0x1F, 0x7E, 0x14, 0x49, 0xE0,  // <...~.I.
                /* 0250 */  0xF8, 0x10, 0x1A, 0x3D, 0x78, 0x4E, 0x3F, 0x1E,  // ...=xN?.
                /* 0258 */  0x3D, 0xF8, 0xC7, 0xE8, 0xD1, 0x83, 0x67, 0x0C,  // =.....g.
                /* 0260 */  0xE7, 0x86, 0xBB, 0xDA, 0x78, 0xE4, 0x60, 0x1F,  // ....x.`.
                /* 0268 */  0x2F, 0x5E, 0xDE, 0x71, 0x0B, 0x14, 0x3E, 0x67,  // /^.q..>g
                /* 0270 */  0x4F, 0x06, 0xF0, 0x1E, 0x84, 0x3B, 0x6F, 0x01,  // O....;o.
                /* 0278 */  0x97, 0x11, 0x70, 0xC1, 0x4F, 0x1D, 0x9F, 0xAB,  // ..p.O...
                /* 0280 */  0xA8, 0x44, 0x18, 0xD4, 0xD1, 0x0A, 0x5C, 0xFF,  // .D....\.
                /* 0288 */  0xFF, 0xA3, 0x15, 0xC0, 0x84, 0xFB, 0xC3, 0xAB,  // ........
                /* 0290 */  0xD5, 0xA3, 0x15, 0xD8, 0x43, 0xBE, 0x24, 0xF4,  // ....C.$.
                /* 0298 */  0x23, 0x70, 0x6C, 0x08, 0x39, 0x39, 0x5A, 0xA1,  // #pl.99Z.
                /* 02A0 */  0x4E, 0x46, 0xB8, 0xA0, 0x07, 0x2B, 0xA0, 0x7B,  // NF...+.{
                /* 02A8 */  0xD0, 0xC0, 0x1D, 0x0F, 0xE0, 0xFC, 0xFF, 0x8F,  // ........
                /* 02B0 */  0x07, 0x7C, 0x60, 0xFC, 0xF4, 0x02, 0x3E, 0x11,  // .|`...>.
                /* 02B8 */  0x47, 0x21, 0x9F, 0xCA, 0xA0, 0x9F, 0x20, 0x3D,  // G!.... =
                /* 02C0 */  0x5A, 0xF0, 0x1C, 0xAB, 0x80, 0xC3, 0xA9, 0x0C,  // Z.......
                /* 02C8 */  0x38, 0x0C, 0x19, 0x7C, 0xF2, 0x0E, 0x53, 0xE8,  // 8..|..S.
                /* 02D0 */  0x03, 0x89, 0xA7, 0x50, 0xEB, 0x2D, 0x84, 0xC0,  // ...P.-..
                /* 02D8 */  0x1E, 0x90, 0x8F, 0x12, 0x41, 0x4E, 0x24, 0xC2,  // ....AN$.
                /* 02E0 */  0xB9, 0xF8, 0x38, 0x05, 0x98, 0xF8, 0xFF, 0x8F,  // ..8.....
                /* 02E8 */  0x1A, 0x7F, 0xCB, 0x60, 0xD7, 0x29, 0x30, 0x9C,  // ...`.)0.
                /* 02F0 */  0x82, 0xE0, 0x4D, 0xCA, 0xE3, 0x07, 0xDF, 0xB1,  // ..M.....
                /* 02F8 */  0x07, 0x77, 0x0A, 0x82, 0xE7, 0x71, 0x48, 0x42,  // .w...qHB
                /* 0300 */  0x3E, 0x8F, 0x97, 0x00, 0xDC, 0x45, 0x08, 0x7F,  // >....E..
                /* 0308 */  0x10, 0x02, 0x3E, 0xB2, 0x16, 0x4A, 0x4F, 0x41,  // ..>..JOA
                /* 0310 */  0x16, 0x02, 0x83, 0x3A, 0x08, 0x01, 0x2E, 0xFF,  // ...:....
                /* 0318 */  0xFF, 0x07, 0x21, 0x60, 0xE7, 0xED, 0xB6, 0xA1,  // ..!`....
                /* 0320 */  0x6B, 0x90, 0x6F, 0x03, 0x4F, 0x03, 0xAF, 0x11,  // k.o.O...
                /* 0328 */  0x51, 0x1E, 0x84, 0x7C, 0x13, 0x7A, 0x21, 0x88,  // Q..|.z!.
                /* 0330 */  0x10, 0xE5, 0x78, 0x4F, 0x20, 0xC2, 0xD3, 0x90,  // ..xO ...
                /* 0338 */  0x27, 0x1C, 0x26, 0xDC, 0xC9, 0x46, 0x79, 0x69,  // '.&..Fyi
                /* 0340 */  0x08, 0x63, 0xE8, 0x58, 0x81, 0x22, 0xC7, 0x0F,  // .c.X."..
                /* 0348 */  0xE1, 0x4B, 0x85, 0x0F, 0x42, 0x2C, 0xCA, 0x79,  // .K..B,.y
                /* 0350 */  0x40, 0x3F, 0x02, 0x9F, 0x3F, 0x6C, 0xE4, 0x2C,  // @?..?l.,
                /* 0358 */  0x82, 0x3A, 0x09, 0xF8, 0xD0, 0xE1, 0x41, 0x3D,  // .:....A=
                /* 0360 */  0x21, 0x60, 0x42, 0x9F, 0xEC, 0x40, 0x75, 0x14,  // !`B..@u.
                /* 0368 */  0x02, 0xCE, 0x07, 0x10, 0x78, 0x21, 0x0F, 0xAD,  // ....x!..
                /* 0370 */  0xA0, 0x3B, 0x92, 0x83, 0xE3, 0x50, 0x17, 0x39,  // .;...P.9
                /* 0378 */  0xEE, 0x03, 0x0D, 0xF6, 0xEC, 0xC1, 0xFF, 0xFF,  // ........
                /* 0380 */  0x67, 0x0F, 0xE0, 0x21, 0xED, 0xE0, 0x81, 0x12,  // g..!....
                /* 0388 */  0x73, 0xF6, 0x00, 0x48, 0x73, 0xD9, 0x78, 0xF7,  // s..Hs.x.
                /* 0390 */  0xF0, 0xA5, 0xE7, 0x4C, 0x9F, 0x3D, 0x3C, 0xD7,  // ...L.=<.
                /* 0398 */  0x77, 0x0E, 0x1F, 0xEB, 0x8C, 0x62, 0x88, 0xF7,  // w....b..
                /* 03A0 */  0x0F, 0x1F, 0x0A, 0xA2, 0x44, 0x3C, 0xD7, 0x28,  // ....D<.(
                /* 03A8 */  0x87, 0x1C, 0x25, 0x6E, 0x84, 0x30, 0xCF, 0x77,  // ..%n.0.w
                /* 03B0 */  0xC6, 0x89, 0x11, 0x2A, 0x02, 0x03, 0x7D, 0xF6,  // ...*..}.
                /* 03B8 */  0x60, 0x71, 0xCE, 0x1E, 0x50, 0xB1, 0xCF, 0xE6,  // `q..P...
                /* 03C0 */  0x8D, 0x23, 0xC2, 0x6B, 0xC0, 0x39, 0xFE, 0xFF,  // .#.k.9..
                /* 03C8 */  0xCF, 0xC7, 0x67, 0x0F, 0xC0, 0x9B, 0x94, 0xB7,  // ..g.....
                /* 03D0 */  0x9B, 0xCE, 0x1E, 0xE0, 0x3A, 0xC2, 0xE2, 0xCE,  // ....:...
                /* 03D8 */  0x1E, 0xF0, 0xC6, 0x8D, 0x3D, 0x7D, 0x00, 0x3B,  // ....=}.;
                /* 03E0 */  0x19, 0xAF, 0x01, 0x1F, 0x3D, 0x68, 0xF0, 0x03,  // ....=h..
                /* 03E8 */  0x2A, 0xD0, 0xFE, 0xFF, 0x1F, 0x50, 0x01, 0x97,  // *....P..
                /* 03F0 */  0x87, 0x8F, 0x07, 0x54, 0xB0, 0x4B, 0x7F, 0x0E,  // ...T.K..
                /* 03F8 */  0xE8, 0x53, 0xE0, 0xE0, 0x07, 0x54, 0xF4, 0x70,  // .S...T.p
                /* 0400 */  0x7C, 0x9C, 0xC3, 0x9C, 0x50, 0x01, 0x9B, 0xFF,  // |...P...
                /* 0408 */  0x7F, 0x02, 0x1F, 0x6E, 0xE1, 0x00, 0x87, 0xF4,  // ...n....
                /* 0410 */  0x58, 0xC1, 0x76, 0x3E, 0x05, 0x0E, 0x63, 0x05,  // X.v>..c.
                /* 0418 */  0xCF, 0xC0, 0xF8, 0x58, 0x81, 0xC5, 0xC4, 0x9E,  // ...X....
                /* 0420 */  0x3D, 0x8E, 0x15, 0x6C, 0xA7, 0x52, 0xE0, 0x30,  // =..l.R.0
                /* 0428 */  0x56, 0x30, 0x0D, 0x8C, 0x8D, 0x15, 0x7C, 0x12,  // V0....|.
                /* 0430 */  0xCE, 0xC5, 0xE8, 0x31, 0xFA, 0xDA, 0x72, 0x40,  // ...1..r@
                /* 0438 */  0x9E, 0x47, 0x84, 0xA7, 0x7C, 0xF6, 0xFF, 0x27,  // .G..|..'
                /* 0440 */  0x70, 0xDC, 0xE1, 0x82, 0xEA, 0x5C, 0xE3, 0xE1,  // p....\..
                /* 0448 */  0x82, 0x5F, 0xDE, 0x70, 0x41, 0x33, 0x36, 0x38,  // ._.pA368
                /* 0450 */  0x23, 0x06, 0xDF, 0xD1, 0xC9, 0xE7, 0x58, 0xB0,  // #.....X.
                /* 0458 */  0x5C, 0x22, 0xD8, 0x59, 0x80, 0x4D, 0x07, 0x7F,  // \".Y.M..
                /* 0460 */  0x95, 0xC5, 0x9F, 0x99, 0x80, 0x91, 0xE4, 0xC7,  // ........
                /* 0468 */  0x92, 0x09, 0x14, 0xE0, 0x74, 0x20, 0x51, 0x2F,  // ....t Q/
                /* 0470 */  0x02, 0x0A, 0xE3, 0x43, 0x8D, 0xCF, 0x4C, 0x70,  // ...C..Lp
                /* 0478 */  0x25, 0xC1, 0xA1, 0xCE, 0x69, 0xEC, 0x74, 0x7C,  // %...i.t|
                /* 0480 */  0x72, 0x27, 0xF2, 0x7A, 0xE0, 0xC9, 0x3D, 0x3C,  // r'.z..=<
                /* 0488 */  0xC1, 0x38, 0x26, 0x78, 0x5A, 0x27, 0x65, 0xED,  // .8&xZ'e.
                /* 0490 */  0x47, 0x20, 0xF2, 0xFF, 0xBF, 0x66, 0xB1, 0xB3,  // G ...f..
                /* 0498 */  0x02, 0x47, 0xE3, 0x27, 0x29, 0xB0, 0x5E, 0x18,  // .G.').^.
                /* 04A0 */  0x7C, 0x4C, 0x00, 0xC7, 0xAC, 0x5F, 0xA3, 0x30,  // |L..._.0
                /* 04A8 */  0x58, 0xA1, 0x62, 0x34, 0x7A, 0x0D, 0x22, 0xA0,  // X.b4z.".
                /* 04B0 */  0xC7, 0xD7, 0xD7, 0x30, 0x74, 0x27, 0x30, 0x54,  // ...0t'0T
                /* 04B8 */  0xC4, 0x10, 0x6F, 0x06, 0x76, 0x79, 0x1E, 0x42,  // ..o.vy.B
                /* 04C0 */  0x1E, 0x9A, 0xC0, 0x85, 0xFD, 0xD0, 0x04, 0xF6,  // ........
                /* 04C8 */  0x50, 0x67, 0x32, 0x1A, 0x69, 0x34, 0xA8, 0x73,  // Pg2.i4.s
                /* 04D0 */  0x3A, 0x3F, 0x10, 0x3C, 0x72, 0xF9, 0xD8, 0x61,  // :?.<r..a
                /* 04D8 */  0x90, 0x13, 0x3D, 0xAD, 0xC7, 0x85, 0xA7, 0x01,  // ..=.....
                /* 04E0 */  0x8F, 0x9B, 0x5D, 0x13, 0xFC, 0x41, 0xF0, 0xF1,  // ..]..A..
                /* 04E8 */  0x00, 0x7F, 0x80, 0x08, 0x78, 0xA2, 0x4F, 0x1E,  // ....x.O.
                /* 04F0 */  0xB0, 0x4E, 0x20, 0xF8, 0xA3, 0x06, 0xFC, 0xF1,  // .N .....
                /* 04F8 */  0xF8, 0x18, 0xE0, 0x63, 0x07, 0x97, 0x3F, 0x08,  // ...c..?.
                /* 0500 */  0xD4, 0x51, 0x91, 0x8F, 0xF4, 0xB4, 0xDE, 0x06,  // .Q......
                /* 0508 */  0x7C, 0x48, 0x38, 0x2C, 0x76, 0xE6, 0xF0, 0xC9,  // |H8,v...
                /* 0510 */  0x08, 0xFF, 0xFF, 0x1F, 0x0F, 0x38, 0x8F, 0xED,  // .....8..
                /* 0518 */  0x0F, 0x19, 0xBE, 0x32, 0x78, 0xBE, 0x3E, 0xD1,  // ...2x.>.
                /* 0520 */  0x82, 0xE5, 0xD6, 0xE1, 0x43, 0x43, 0xA8, 0xA7,  // ....CC..
                /* 0528 */  0x0E, 0xCF, 0xE0, 0xFD, 0xC2, 0x27, 0x10, 0x60,  // .....'.`
                /* 0530 */  0x22, 0xCA, 0xCC, 0x10, 0x98, 0xD0, 0x75, 0xCA,  // ".....u.
                /* 0538 */  0xC6, 0x59, 0x93, 0x9E, 0x07, 0x2C, 0xF7, 0x80,  // .Y...,..
                /* 0540 */  0xA0, 0x6B, 0x04, 0xE6, 0x06, 0x11, 0xC4, 0xC3,  // .k......
                /* 0548 */  0x7F, 0xA3, 0xE0, 0x87, 0x46, 0x01, 0xEA, 0x60,  // ....F..`
                /* 0550 */  0x66, 0x08, 0x4B, 0xA3, 0x90, 0x30, 0x08, 0x8D,  // f.K..0..
                /* 0558 */  0xC8, 0x47, 0x0F, 0x02, 0x47, 0x41, 0x3C, 0x7A,  // .G..GA<z
                /* 0560 */  0xC7, 0x3C, 0x3E, 0xA1, 0x87, 0xEA, 0x63, 0x80,  // .<>...c.
                /* 0568 */  0x27, 0x81, 0x0B, 0x75, 0xF0, 0xA1, 0xC7, 0x05,  // '..u....
                /* 0570 */  0x3C, 0xDE, 0x03, 0xB1, 0xCF, 0x01, 0x6C, 0xEC,  // <.....l.
                /* 0578 */  0xB8, 0x93, 0x07, 0xDC, 0x71, 0xE0, 0x4F, 0x9C,  // ....q.O.
                /* 0580 */  0xF8, 0xB3, 0x1A, 0x3F, 0xF5, 0x80, 0xF3, 0xC8,  // ...?....
                /* 0588 */  0x89, 0xFB, 0xFF, 0x1F, 0x0E, 0xE0, 0x01, 0xF9,  // ........
                /* 0590 */  0x3E, 0x60, 0xA5, 0x67, 0x02, 0x3A, 0x87, 0x10,  // >`.g.:..
                /* 0598 */  0x61, 0xA2, 0x19, 0x1E, 0x13, 0xF8, 0xF8, 0x44,  // a......D
                /* 05A0 */  0x4F, 0xA4, 0x1E, 0x17, 0x1F, 0xA5, 0xCF, 0x30,  // O......0
                /* 05A8 */  0x0C, 0xFB, 0x11, 0xC5, 0xC7, 0xC4, 0x03, 0x7C,  // .......|
                /* 05B0 */  0x39, 0x78, 0xE6, 0xC3, 0xC0, 0x7A, 0xDC, 0x1C,  // 9x...z..
                /* 05B8 */  0xD6, 0x68, 0x61, 0x0F, 0xF7, 0x19, 0xC2, 0xF7,  // .ha.....
                /* 05C0 */  0x0F, 0xCF, 0xCC, 0xD7, 0x46, 0x9F, 0x3C, 0xC0,  // ....F.<.
                /* 05C8 */  0x72, 0x94, 0x82, 0x3F, 0x54, 0xDC, 0x59, 0x00,  // r..?T.Y.
                /* 05D0 */  0xEE, 0x81, 0x89, 0xCD, 0xE1, 0x69, 0x00, 0x2F,  // .....i./
                /* 05D8 */  0xF3, 0x10, 0x81, 0x1A, 0x88, 0x45, 0x2E, 0x50,  // .....E.P
                /* 05E0 */  0xC7, 0x15, 0x8F, 0xC4, 0x04, 0x96, 0x77, 0x80,  // ......w.
                /* 05E8 */  0x40, 0x9D, 0x1F, 0x2C, 0xEB, 0x00, 0x81, 0x12,  // @..,....
                /* 05F0 */  0x02, 0x47, 0x41, 0x7C, 0x80, 0xF0, 0x31, 0xDD,  // .GA|..1.
                /* 05F8 */  0x46, 0x0E, 0x10, 0xE8, 0x03, 0x0C, 0x83, 0x78,  // F......x
                /* 0600 */  0xE8, 0x34, 0x81, 0x8F, 0x32, 0x3E, 0x40, 0x00,  // .4..2>@.
                /* 0608 */  0x8F, 0x71, 0xE0, 0x0F, 0x10, 0xF0, 0xFE, 0xFF,  // .q......
                /* 0610 */  0x04, 0x3E, 0x01, 0x03, 0x9F, 0xF3, 0x03, 0x38,  // .>.....8
                /* 0618 */  0x4E, 0xA2, 0x3E, 0x3F, 0x80, 0xEB, 0x04, 0xE0,  // N.>?....
                /* 0620 */  0xF3, 0x03, 0x70, 0x1D, 0xE0, 0xA3, 0x00, 0x58,  // ..p....X
                /* 0628 */  0xCE, 0x64, 0x6C, 0x0E, 0x2F, 0x35, 0x67, 0xFE,  // .dl./5g.
                /* 0630 */  0xCA, 0xE4, 0x13, 0x2F, 0xE6, 0xD4, 0xCB, 0x75,  // .../...u
                /* 0638 */  0x8D, 0x80, 0x44, 0x3C, 0x43, 0xA0, 0x06, 0xE1,  // ..D<C...
                /* 0640 */  0x83, 0xB9, 0x8F, 0x13, 0xCC, 0xE7, 0x21, 0x48,  // ......!H
                /* 0648 */  0xAA, 0x51, 0x04, 0xEF, 0x5B, 0x01, 0x8B, 0x70,  // .Q..[..p
                /* 0650 */  0x8C, 0x40, 0x89, 0xA7, 0x90, 0xF4, 0x63, 0x04,  // .@....c.
                /* 0658 */  0x4A, 0x2C, 0x1C, 0x05, 0xF1, 0xA8, 0x7D, 0x90,  // J,....}.
                /* 0660 */  0xB0, 0x8D, 0xB3, 0x2D, 0xFA, 0x30, 0xCC, 0x8F,  // ...-.0..
                /* 0668 */  0x02, 0xFC, 0x14, 0x01, 0xF7, 0xFF, 0x3F, 0x0B,  // ......?.
                /* 0670 */  0x9F, 0xC2, 0x70, 0x47, 0x0F, 0x70, 0x5C, 0xC4,  // ..pG.p\.
                /* 0678 */  0x0E, 0xED, 0xEC, 0x1E, 0x12, 0xA2, 0xC4, 0x3C,  // .......<
                /* 0680 */  0x83, 0x37, 0x3F, 0x03, 0x86, 0x8D, 0xE6, 0x31,  // .7?....1
                /* 0688 */  0xE2, 0x70, 0xCE, 0xD1, 0x17, 0x35, 0xCF, 0x29,  // .p...5.)
                /* 0690 */  0xD6, 0xE3, 0x1B, 0x3F, 0x52, 0xC0, 0x45, 0xF1,  // ...?R.E.
                /* 0698 */  0x91, 0x02, 0xEE, 0x4C, 0xCE, 0x03, 0xA3, 0x6E,  // ...L...n
                /* 06A0 */  0x2C, 0x82, 0xF7, 0xB5, 0x10, 0x7F, 0xB0, 0x00,  // ,.......
                /* 06A8 */  0x1E, 0xC7, 0x25, 0x1F, 0x2C, 0xC0, 0x05, 0xE9,  // ..%.,...
                /* 06B0 */  0x83, 0x05, 0x70, 0x3D, 0x1F, 0xF8, 0x74, 0x00,  // ..p=..t.
                /* 06B8 */  0xD6, 0x0B, 0x19, 0xBF, 0x1F, 0xB0, 0xFF, 0xFF,  // ........
                /* 06C0 */  0xFD, 0x00, 0x77, 0xC2, 0x80, 0x71, 0x3E, 0xC0,  // ..w..q>.
                /* 06C8 */  0xDC, 0x30, 0x1C, 0x6B, 0xA5, 0x3A, 0x61, 0xE0,  // .0.k.:a.
                /* 06D0 */  0x62, 0x3D, 0x28, 0x34, 0x10, 0x36, 0xBC, 0xE7,  // b=(4.6..
                /* 06D8 */  0x9F, 0x27, 0x43, 0x7E, 0x98, 0x61, 0x51, 0xE0,  // .'C~.aQ.
                /* 06E0 */  0x74, 0xB4, 0xF0, 0xC9, 0xC2, 0x21, 0x28, 0x74,  // t....!(t
                /* 06E8 */  0x10, 0xF3, 0x09, 0x83, 0x8B, 0x39, 0x61, 0x50,  // .....9aP
                /* 06F0 */  0x10, 0x03, 0x3A, 0xE9, 0x39, 0x0C, 0x7D, 0xDA,  // ..:.9.}.
                /* 06F8 */  0xF4, 0xB1, 0x81, 0xDD, 0xEE, 0x7D, 0xBF, 0xF0,  // .....}..
                /* 0700 */  0x5C, 0x3C, 0x67, 0x8E, 0xE7, 0xF3, 0x32, 0x43,  // \<g...2C
                /* 0708 */  0x7D, 0x33, 0x01, 0xCF, 0x95, 0x82, 0x1D, 0xE7,  // }3......
                /* 0710 */  0x31, 0xB7, 0x49, 0x76, 0xE0, 0x64, 0xC7, 0x02,  // 1.Iv.d..
                /* 0718 */  0xA3, 0x1C, 0xEF, 0x6B, 0xA1, 0xD5, 0xDC, 0x15,  // ...k....
                /* 0720 */  0x50, 0x33, 0xC2, 0x10, 0x78, 0xC0, 0x3E, 0x89,  // P3..x.>.
                /* 0728 */  0x81, 0x49, 0xDF, 0x8D, 0x02, 0xE4, 0xE8, 0x5C,  // .I.....\
                /* 0730 */  0xE8, 0xE8, 0x51, 0x07, 0x00, 0x1F, 0xED, 0xF8,  // ..Q.....
                /* 0738 */  0xE8, 0x7D, 0xC4, 0xF6, 0x71, 0x05, 0xEE, 0xE1,  // .}..q...
                /* 0740 */  0xCE, 0x67, 0x28, 0x70, 0xFC, 0xFF, 0xCF, 0x50,  // .g(p...P
                /* 0748 */  0xC0, 0x65, 0x60, 0x9E, 0xE1, 0x13, 0x0A, 0xB8,  // .e`.....
                /* 0750 */  0xEE, 0x0F, 0xFC, 0xA2, 0x8A, 0x99, 0xC8, 0xB3,  // ........
                /* 0758 */  0x30, 0x8C, 0x53, 0x0A, 0xF0, 0x18, 0xBD, 0x4F,  // 0.S....O
                /* 0760 */  0x29, 0xE0, 0x3A, 0x00, 0xF8, 0x94, 0x02, 0x5C,  // ).:....\
                /* 0768 */  0xE7, 0xF8, 0x50, 0x00, 0x96, 0x33, 0x4A, 0x14,  // ..P..3J.
                /* 0770 */  0xDF, 0x7F, 0x3D, 0x11, 0x1B, 0x1F, 0x3E, 0xBD,  // ..=...>.
                /* 0778 */  0xA0, 0x78, 0x2C, 0xCF, 0xE6, 0xEC, 0x4C, 0xA9,  // .x,...L.
                /* 0780 */  0xB3, 0x09, 0x3A, 0xDA, 0xEB, 0x41, 0x83, 0x7E,  // ..:..A.~
                /* 0788 */  0x50, 0xF1, 0xEC, 0xC3, 0x1F, 0x5F, 0x84, 0xE7,  // P...._..
                /* 0790 */  0x53, 0x03, 0xFF, 0xFF, 0x13, 0x38, 0xCE, 0xD9,  // S....8..
                /* 0798 */  0x04, 0x15, 0x84, 0x42, 0xC7, 0x4E, 0x1F, 0x27,  // ...B.N.'
                /* 07A0 */  0xB8, 0xA4, 0xE3, 0x04, 0x05, 0x31, 0xA0, 0xF3,  // .....1..
                /* 07A8 */  0x1E, 0xF1, 0x3C, 0x0C, 0x7A, 0x9C, 0xE0, 0xA7,  // ..<.z...
                /* 07B0 */  0x3E, 0xDF, 0x12, 0x8E, 0xE3, 0x09, 0x24, 0xC1,  // >.....$.
                /* 07B8 */  0x7C, 0x27, 0x01, 0x7A, 0x39, 0x81, 0x77, 0x5E,  // |'.z9.w^
                /* 07C0 */  0x07, 0xCF, 0x28, 0xBC, 0x93, 0xB3, 0x60, 0x08,  // ..(...`.
                /* 07C8 */  0x6F, 0xD6, 0xEC, 0x38, 0x81, 0xBF, 0x1C, 0x3C,  // o..8...<
                /* 07D0 */  0x2B, 0x3C, 0xA8, 0xF3, 0xEB, 0x09, 0xCC, 0x7B,  // +<.....{
                /* 07D8 */  0x1E, 0xB8, 0x8E, 0x27, 0xC0, 0x42, 0xE6, 0x01,  // ...'.B..
                /* 07E0 */  0x00, 0x75, 0x6C, 0xF4, 0xC1, 0x91, 0x1F, 0x00,  // .ul.....
                /* 07E8 */  0x1C, 0xFA, 0x78, 0x82, 0x9E, 0x89, 0x8F, 0x45,  // ..x....E
                /* 07F0 */  0x4F, 0x25, 0xBE, 0x00, 0xF0, 0xB3, 0x9B, 0xCE,  // O%......
                /* 07F8 */  0x27, 0xA0, 0x38, 0x67, 0x82, 0x67, 0x1C, 0xEC,  // '.8g.g..
                /* 0800 */  0x0A, 0x80, 0x3F, 0x03, 0x60, 0xFE, 0xFF, 0x27,  // ..?.`..'
                /* 0808 */  0x14, 0x38, 0x47, 0x32, 0xF0, 0x4D, 0xC4, 0xA7,  // .8G2.M..
                /* 0810 */  0x8A, 0x03, 0xC1, 0x9E, 0x64, 0x81, 0x37, 0x2C,  // ....d.7,
                /* 0818 */  0x3F, 0xC9, 0x02, 0x3E, 0x6E, 0x23, 0xD8, 0x59,  // ?..>n#.Y
                /* 0820 */  0x3C, 0x93, 0x30, 0x82, 0x91, 0x8F, 0x26, 0xA8,  // <.0...&.
                /* 0828 */  0x23, 0xB2, 0x83, 0x9E, 0xC2, 0x10, 0xE3, 0x7C,  // #......|
                /* 0830 */  0xAC, 0x30, 0x46, 0xE4, 0xE2, 0x47, 0xAD, 0xC9,  // .0F..G..
                /* 0838 */  0xF8, 0x6C, 0xE6, 0xCB, 0x3A, 0x3B, 0xFC, 0xE0,  // .l..:;..
                /* 0840 */  0x08, 0x06, 0x3A, 0xA0, 0xA0, 0x8E, 0x63, 0x3E,  // ..:...c>
                /* 0848 */  0x8B, 0x81, 0xEB, 0xFF, 0x7F, 0x16, 0x03, 0x78,  // .......x
                /* 0850 */  0x70, 0x76, 0xF7, 0xE8, 0xF9, 0xB1, 0x9D, 0x83,  // pv......
                /* 0858 */  0x78, 0xF4, 0x0E, 0x7F, 0x16, 0x83, 0x1E, 0xF6,  // x.......
                /* 0860 */  0x2C, 0x06, 0xB4, 0x05, 0x9F, 0xC5, 0x40, 0x79,  // ,.....@y
                /* 0868 */  0x8B, 0xC0, 0xFF, 0xFF, 0x6F, 0x11, 0xB8, 0x33,  // ....o..3
                /* 0870 */  0x28, 0xF0, 0x5A, 0x9B, 0x4F, 0x28, 0xE0, 0xBA,  // (.Z.O(..
                /* 0878 */  0x33, 0xF8, 0x84, 0x02, 0x5C, 0x8F, 0x00, 0xB8,  // 3...\...
                /* 0880 */  0x33, 0x28, 0x38, 0x4E, 0x00, 0xCC, 0xD7, 0x0D,  // 3(8N....
                /* 0888 */  0x80, 0x82, 0x3C, 0x02, 0xE0, 0xAF, 0xF0, 0x3E,  // ..<....>
                /* 0890 */  0x98, 0xE0, 0xE2, 0x9D, 0x54, 0x50, 0x1C, 0x8E,  // ....TP..
                /* 0898 */  0x77, 0x52, 0x41, 0x4C, 0x25, 0xF2, 0x5B, 0x8B,  // wRAL%.[.
                /* 08A0 */  0x27, 0x10, 0xFE, 0xE0, 0xE2, 0xBC, 0x9F, 0xF1,  // '.......
                /* 08A8 */  0x53, 0x19, 0x0C, 0x51, 0x07, 0x0B, 0x94, 0x8C,  // S..Q....
                /* 08B0 */  0x83, 0x05, 0x05, 0x31, 0xA0, 0x33, 0x9E, 0x52,  // ...1.3.R
                /* 08B8 */  0xD0, 0xA7, 0x32, 0x7E, 0x19, 0xF1, 0xC0, 0x12,  // ..2~....
                /* 08C0 */  0xCC, 0x74, 0x4D, 0x81, 0xFA, 0xFF, 0x47, 0xF6,  // .tM...G.
                /* 08C8 */  0x05, 0x04, 0x37, 0x60, 0xB8, 0x60, 0x0F, 0x12,  // ..7`.`..
                /* 08D0 */  0x46, 0x78, 0x4D, 0xF6, 0x3C, 0x30, 0x47, 0x14,  // FxM.<0G.
                /* 08D8 */  0xC0, 0x86, 0xE4, 0xA1, 0xA3, 0x44, 0x0E, 0x9D,  // .....D..
                /* 08E0 */  0x82, 0x78, 0xE8, 0xA6, 0xF1, 0x11, 0x05, 0x37,  // .x.....7
                /* 08E8 */  0x56, 0x76, 0x21, 0x80, 0x15, 0xF5, 0x94, 0x02,  // Vv!.....
                /* 08F0 */  0x0A, 0x91, 0xC3, 0x07, 0xCD, 0x38, 0x8E, 0xEE,  // .....8..
                /* 08F8 */  0xA9, 0xC7, 0xF3, 0xE0, 0x77, 0x62, 0x1F, 0xF3,  // ....wb..
                /* 0900 */  0xE0, 0x9E, 0x54, 0x70, 0xA7, 0x46, 0xDC, 0x49,  // ..Tp.F.I
                /* 0908 */  0x05, 0x0C, 0x73, 0xC4, 0x9E, 0xCA, 0xC0, 0xF1,  // ..s.....
                /* 0910 */  0xFF, 0x3F, 0x82, 0x02, 0x47, 0x0F, 0x47, 0x50,  // .?..G.GP
                /* 0918 */  0x40, 0xCB, 0x21, 0x85, 0x1F, 0x33, 0x30, 0x57,  // @.!..30W
                /* 0920 */  0x03, 0x7E, 0x04, 0xC5, 0xC4, 0x7C, 0x3E, 0xE8,  // .~...|>.
                /* 0928 */  0x7C, 0xC2, 0x8F, 0x06, 0x0E, 0xF4, 0x2A, 0x10,  // |.....*.
                /* 0930 */  0x38, 0x3B, 0xEB, 0xE3, 0x2E, 0x07, 0x3E, 0x61,  // 8;....>a
                /* 0938 */  0x98, 0x60, 0x84, 0xD3, 0x04, 0x85, 0xB0, 0x78,  // .`.....x
                /* 0940 */  0x0A, 0x49, 0x3F, 0x54, 0xA0, 0xC4, 0xC2, 0x51,  // .I?T...Q
                /* 0948 */  0x10, 0x1F, 0x2A, 0x2C, 0xE4, 0x50, 0x81, 0x3E,  // ..*,.P.>
                /* 0950 */  0x46, 0xE1, 0x83, 0x9F, 0x28, 0x40, 0x71, 0x01,  // F...(@q.
                /* 0958 */  0x78, 0x64, 0x07, 0xEF, 0x7D, 0x9D, 0xFD, 0xFF,  // xd..}...
                /* 0960 */  0xEF, 0xEB, 0x98, 0x41, 0xE2, 0x2E, 0x2A, 0x1E,  // ...A..*.
                /* 0968 */  0xB2, 0x0F, 0xEC, 0x98, 0x79, 0xFA, 0x68, 0x01,  // ....y.h.
                /* 0970 */  0x8F, 0xC0, 0xA7, 0x47, 0xF0, 0xC1, 0xFB, 0x30,  // ...G...0
                /* 0978 */  0x05, 0xBC, 0xCE, 0x7A, 0x3E, 0x58, 0x80, 0x0B,  // ...z>X..
                /* 0980 */  0xDC, 0x07, 0x0B, 0xE0, 0x7A, 0xFB, 0xF1, 0xE9,  // ....z...
                /* 0988 */  0x00, 0xAC, 0xA3, 0x3D, 0xE6, 0xF3, 0x8D, 0xF3,  // ...=....
                /* 0990 */  0x7E, 0x00, 0xE3, 0xA6, 0xF2, 0x10, 0xE9, 0x7B,  // ~......{
                /* 0998 */  0x80, 0xF1, 0xD9, 0xF9, 0x00, 0x7B, 0x25, 0xF2,  // .....{%.
                /* 09A0 */  0xF1, 0x59, 0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5,  // .Y6}j4j.
                /* 09A8 */  0xA0, 0x4C, 0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9,  // .L.2.j..
                /* 09B0 */  0xD4, 0x98, 0x31, 0x4F, 0x50, 0xFA, 0xFF, 0x47,  // ..1OP..G
                /* 09B8 */  0x58, 0xB8, 0x46, 0xEE, 0x50, 0x4F, 0x09, 0x81,  // X.F.PO..
                /* 09C0 */  0x38, 0xEE, 0xF2, 0x35, 0x7A, 0xF2, 0x3A, 0x11,  // 8..5z.:.
                /* 09C8 */  0x88, 0x85, 0xA8, 0x00, 0x61, 0x62, 0x16, 0x29,  // ....ab.)
                /* 09D0 */  0x10, 0x4B, 0x5D, 0xA4, 0x40, 0x1C, 0xC5, 0x07,  // .K].@...
                /* 09D8 */  0x08, 0x0B, 0xA8, 0x04, 0x84, 0x45, 0xB5, 0x02,  // .....E..
                /* 09E0 */  0x44, 0xB5, 0x80, 0xB0, 0x58, 0x5E, 0x40, 0x58,  // D...X^@X
                /* 09E8 */  0xB0, 0x85, 0x0A, 0xC4, 0x61, 0xDC, 0x80, 0x30,  // ....a..0
                /* 09F0 */  0x29, 0x2F, 0x08, 0x0D, 0x86, 0xD8, 0x39, 0x42,  // )/....9B
                /* 09F8 */  0xEB, 0xAC, 0x6B, 0x10, 0x01, 0x39, 0xB4, 0x1F,  // ..k..9..
                /* 0A00 */  0x20, 0x26, 0x61, 0xFD, 0x02, 0xB2, 0x70, 0x45,  //  &a...pE
                /* 0A08 */  0x40, 0x2C, 0x06, 0x88, 0x80, 0xAC, 0xC3, 0x12,  // @,......
                /* 0A10 */  0x10, 0x13, 0x05, 0x22, 0x20, 0x4B, 0xD3, 0x04,  // ..." K..
                /* 0A18 */  0xC4, 0x84, 0x82, 0x08, 0xC8, 0x21, 0x45, 0x01,  // .....!E.
                /* 0A20 */  0xB1, 0xC4, 0x20, 0x02, 0x72, 0x78, 0x53, 0x40,  // .. .rxS@
                /* 0A28 */  0x4C, 0x8A, 0x2A, 0x20, 0xA6, 0xFE, 0xA1, 0x20,  // L.* ... 
                /* 0A30 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0xD9, 0x02,  //  G......
                /* 0A38 */  0x62, 0xF1, 0x40, 0x04, 0x64, 0x85, 0xEF, 0x51,  // b.@.d..Q
                /* 0A40 */  0x01, 0x59, 0x2E, 0x88, 0x80, 0x1C, 0xC1, 0x18,  // .Y......
                /* 0A48 */  0x10, 0x0B, 0x04, 0x22, 0x20, 0xCB, 0x92, 0x06,  // ..." ...
                /* 0A50 */  0xC4, 0x44, 0x82, 0x08, 0xC8, 0xFF, 0x7F         // .D.....
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "QOGIRC", 0x00000001)
{
    External (_SB_.I2CA, DeviceObj)
    External (_SB_.I2CB, DeviceObj)
    External (_SB_.I2CC, DeviceObj)
    External (_SB_.I2CD, DeviceObj)

    Name (MWTT, 0xFF)
    Scope (\_SB.I2CA)
    {
        Device (WT1A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT1A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1A)
        {
            Name (_HID, "STK0001A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT1A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT2A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2A)
        {
            Name (_HID, "STK0002A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT2A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT3A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3A)
        {
            Name (_HID, "STK0003A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT3A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT4A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4A)
        {
            Name (_HID, "STK0004A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT4A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5A)
        {
            Name (_HID, "STK0005A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT5A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.I2CB)
    {
        Device (WT1B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT1B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1B)
        {
            Name (_HID, "STK0001B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT1B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT2B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2B)
        {
            Name (_HID, "STK0002B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT2B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT3B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3B)
        {
            Name (_HID, "STK0003B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT3B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT4B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4B)
        {
            Name (_HID, "STK0004B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT4B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5B)
        {
            Name (_HID, "STK0005B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT5B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.I2CC)
    {
        Device (WT1C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT1C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1C)
        {
            Name (_HID, "STK0001C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT1C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT2C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2C)
        {
            Name (_HID, "STK0002C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT2C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT3C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3C)
        {
            Name (_HID, "STK0003C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT3C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT4C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4C)
        {
            Name (_HID, "STK0004C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT4C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5C)
        {
            Name (_HID, "STK0005C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT5C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.I2CD)
    {
        Device (WT1D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT1D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1D)
        {
            Name (_HID, "STK0001D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT1D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT2D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2D)
        {
            Name (_HID, "STK0002D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT2D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT3D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3D)
        {
            Name (_HID, "STK0003D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT3D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT4D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4D)
        {
            Name (_HID, "STK0004D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT4D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5D)
        {
            Name (_HID, "STK0005D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT5D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)
    External (_PR_.C002, DeviceObj)
    External (_PR_.C003, DeviceObj)
    External (_PR_.C004, DeviceObj)
    External (_PR_.C005, DeviceObj)
    External (_PR_.C006, DeviceObj)
    External (_PR_.C007, DeviceObj)
    External (_PR_.C008, DeviceObj)
    External (_PR_.C009, DeviceObj)
    External (_PR_.C00A, DeviceObj)
    External (_PR_.C00B, DeviceObj)
    External (_PR_.C00C, DeviceObj)
    External (_PR_.C00D, DeviceObj)
    External (_PR_.C00E, DeviceObj)
    External (_PR_.C00F, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C000.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000004, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000008, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000000C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000014, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000018, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000001C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000040, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000044, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000048, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000050, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C001.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000100, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000104, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000108, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000010C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000114, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000118, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000011C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000140, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000144, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000148, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000150, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Scope (\_PR.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C002.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000200, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000204, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000208, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000020C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000214, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000218, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000021C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000240, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000244, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000248, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000250, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Scope (\_PR.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C003.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000300, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000304, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000308, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000030C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000314, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000318, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000031C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000340, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000344, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000348, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000350, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Scope (\_PR.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C004.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000400, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000404, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000408, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000040C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000414, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000418, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000041C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000440, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000444, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000448, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000450, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Scope (\_PR.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C005.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000500, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000504, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000508, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000050C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000514, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000518, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000051C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000540, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000544, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000548, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000550, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Scope (\_PR.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C006.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000600, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000604, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000608, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000060C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000614, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000618, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000061C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000640, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000644, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000648, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000650, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Scope (\_PR.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C007.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000700, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000704, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000708, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000070C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000714, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000718, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000071C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000740, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000744, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000748, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000750, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Scope (\_PR.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C008.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000800, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000804, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000808, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000080C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000814, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000818, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000081C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000840, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000844, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000848, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000850, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Scope (\_PR.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C009.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000900, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000904, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000908, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000090C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000914, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000918, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000091C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000940, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000944, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000948, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000950, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Scope (\_PR.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00A.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Scope (\_PR.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00B.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Scope (\_PR.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00C.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Scope (\_PR.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00D.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Scope (\_PR.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00E.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Scope (\_PR.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000E9C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00F.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000D49
        })
    }

    Method (NFPR, 0, NotSerialized)
    {
        Local0 = 0xBD1D0000
        OperationRegion (SHRM, SystemMemory, Local0, 0x1008)
        Field (SHRM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x48), 
            V000,   1, 
            Offset (0x148), 
            V001,   1, 
            Offset (0x248), 
            V002,   1, 
            Offset (0x348), 
            V003,   1, 
            Offset (0x448), 
            V004,   1, 
            Offset (0x548), 
            V005,   1, 
            Offset (0x648), 
            V006,   1, 
            Offset (0x748), 
            V007,   1, 
            Offset (0x848), 
            V008,   1, 
            Offset (0x948), 
            V009,   1, 
            Offset (0xA48), 
            V00A,   1, 
            Offset (0xB48), 
            V00B,   1, 
            Offset (0xC48), 
            V00C,   1, 
            Offset (0xD48), 
            V00D,   1, 
            Offset (0xE48), 
            V00E,   1, 
            Offset (0xF48), 
            V00F,   1
        }

        If ((V000 == One))
        {
            Notify (\_PR.C000, 0x84) // Reserved
        }

        If ((V001 == One))
        {
            Notify (\_PR.C001, 0x84) // Reserved
        }

        If ((V002 == One))
        {
            Notify (\_PR.C002, 0x84) // Reserved
        }

        If ((V003 == One))
        {
            Notify (\_PR.C003, 0x84) // Reserved
        }

        If ((V004 == One))
        {
            Notify (\_PR.C004, 0x84) // Reserved
        }

        If ((V005 == One))
        {
            Notify (\_PR.C005, 0x84) // Reserved
        }

        If ((V006 == One))
        {
            Notify (\_PR.C006, 0x84) // Reserved
        }

        If ((V007 == One))
        {
            Notify (\_PR.C007, 0x84) // Reserved
        }

        If ((V008 == One))
        {
            Notify (\_PR.C008, 0x84) // Reserved
        }

        If ((V009 == One))
        {
            Notify (\_PR.C009, 0x84) // Reserved
        }

        If ((V00A == One))
        {
            Notify (\_PR.C00A, 0x84) // Reserved
        }

        If ((V00B == One))
        {
            Notify (\_PR.C00B, 0x84) // Reserved
        }

        If ((V00C == One))
        {
            Notify (\_PR.C00C, 0x84) // Reserved
        }

        If ((V00D == One))
        {
            Notify (\_PR.C00D, 0x84) // Reserved
        }

        If ((V00E == One))
        {
            Notify (\_PR.C00E, 0x84) // Reserved
        }

        If ((V00F == One))
        {
            Notify (\_PR.C00F, 0x84) // Reserved
        }
    }

    Method (NFPC, 0, NotSerialized)
    {
        Notify (\_PR.C000, 0x85) // Device-Specific
        Notify (\_PR.C001, 0x85) // Device-Specific
        Notify (\_PR.C002, 0x85) // Device-Specific
        Notify (\_PR.C003, 0x85) // Device-Specific
        Notify (\_PR.C004, 0x85) // Device-Specific
        Notify (\_PR.C005, 0x85) // Device-Specific
        Notify (\_PR.C006, 0x85) // Device-Specific
        Notify (\_PR.C007, 0x85) // Device-Specific
        Notify (\_PR.C008, 0x85) // Device-Specific
        Notify (\_PR.C009, 0x85) // Device-Specific
        Notify (\_PR.C00A, 0x85) // Device-Specific
        Notify (\_PR.C00B, 0x85) // Device-Specific
        Notify (\_PR.C00C, 0x85) // Device-Specific
        Notify (\_PR.C00D, 0x85) // Device-Specific
        Notify (\_PR.C00E, 0x85) // Device-Specific
        Notify (\_PR.C00F, 0x85) // Device-Specific
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "CPUSSDT", 0x01072009)
{
    Scope (\_PR)
    {
        Processor (C000, 0x00, 0x00000810, 0x06){}
        Processor (C001, 0x01, 0x00000810, 0x06){}
        Processor (C002, 0x02, 0x00000810, 0x06){}
        Processor (C003, 0x03, 0x00000810, 0x06){}
        Processor (C004, 0x04, 0x00000810, 0x06){}
        Processor (C005, 0x05, 0x00000810, 0x06){}
        Processor (C006, 0x06, 0x00000810, 0x06){}
        Processor (C007, 0x07, 0x00000810, 0x06){}
        Processor (C008, 0x08, 0x00000810, 0x06){}
        Processor (C009, 0x09, 0x00000810, 0x06){}
        Processor (C00A, 0x0A, 0x00000810, 0x06){}
        Processor (C00B, 0x0B, 0x00000810, 0x06){}
        Processor (C00C, 0x0C, 0x00000810, 0x06){}
        Processor (C00D, 0x0D, 0x00000810, 0x06){}
        Processor (C00E, 0x0E, 0x00000810, 0x06){}
        Processor (C00F, 0x0F, 0x00000810, 0x06){}
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF0000000)
        Name (ADBG, Buffer (0x0100){})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10,  // ........
            /* 0028 */  0x1F, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x07, 0xFF, 0xFF, 0x01,  // ........
            /* 0040 */  0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A005)
                CreateWordField (Arg1, 0x02, A006)
                CreateDWordField (Arg1, 0x04, A007)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A008)
                A008 = A005 /* \_SB_.ALIB.A005 */
                CreateWordField (Local0, 0x02, A009)
                A009 = A006 /* \_SB_.ALIB.A006 */
                CreateDWordField (Local0, 0x04, A010)
                A010 = A007 /* \_SB_.ALIB.A007 */
                A010 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A010 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A011 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A014 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A015 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A016 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                Return (A017 (Arg1))
            }

            Return (0x00)
        }

        Method (A014, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A065 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local1 = A066 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A008)
            CreateByteField (Local7, 0x02, A019)
            CreateByteField (Local7, 0x03, A067)
            A008 = 0x04
            A019 = 0x00
            A067 = Local1
            Return (Local7)
        }

        Method (A065, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A060 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A060 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A060 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A060 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A060 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A060 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A060 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A060 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A060 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A060 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A060 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A060 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A060 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A060 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A060 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A060 (Arg1))
            }
        }

        Method (A066, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A061 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A061 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A061 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A061 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A061 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A061 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A061 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A061 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A061 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A061 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A061 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A061 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A061 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A061 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A061 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A061 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A011, 1, NotSerialized)
        {
            If ((AD00 == Arg0))
            {
                Return (0x00)
            }

            AD00 = Arg0
            A003 ()
        }

        Method (A015, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A016, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A018, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A008)
            A008 = 0x03
            CreateByteField (Local7, 0x02, A019)
            A019 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A019 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A019 = 0x01
                Return (Local7)
            }

            A020 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A021 ()
            A019 = 0x02
            Return (Local7)
        }

        Method (A022, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A021 ()
        }

        Method (A023, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A024, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A025, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x10))
                {
                    A026 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A021 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A027, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A020, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                If ((A028 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A029 (Local0)
                        A030 (Local0, Local1)
                    }
                    Else
                    {
                        A030 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A031, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A033, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A034 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A021, 0, NotSerialized)
        {
            A033 ()
            A031 ()
            If ((AP02 != AP01))
            {
                A004 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                Local2 = A035 (Local0)
                If ((Local1 != Local2))
                {
                    A036 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A036 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A036, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A037 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A037 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A037 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A037 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A037 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A037 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A037 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A037 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A037 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A037 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A037 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A037 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A037 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A037 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A037 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A037 (Arg1))
            }
        }

        Method (A035, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A038 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A038 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A038 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A038 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A038 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A038 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A038 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A038 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A038 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A038 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A038 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A038 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A038 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A038 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A038 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A038 ())
            }
        }

        Method (A032, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A039 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A039 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A039 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A039 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A039 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A039 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A039 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A039 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A039 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A039 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A039 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A039 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A039 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A039 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A039 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A039 ())
            }
        }

        Method (A034, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A040 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A040 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A040 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A040 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A040 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A040 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A040 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A040 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A040 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A040 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A040 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A040 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A040 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A040 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A040 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A040 ())
            }
        }

        Method (A029, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A041 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A041 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A041 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A041 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A041 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A041 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A041 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A041 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A041 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A041 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A041 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A041 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A041 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A041 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A041 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A041 ())
            }
        }

        Method (A030, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A042 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A042 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A042 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A042 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A042 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A042 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A042 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A042 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A042 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A042 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A042 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A042 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A042 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A042 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A042 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A042 (Arg1))
            }
        }

        Method (A028, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A043 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A043 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A043 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A043 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A043 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A043 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A043 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A043 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A043 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A043 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A043 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A043 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A043 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A043 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A043 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A043 (Arg1))
            }
        }

        Method (A026, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A044 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A044 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A044 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A044 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A044 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A044 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A044 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A044 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A044 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A044 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A044 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A044 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A044 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A044 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A044 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A044 ())
            }
        }

        OperationRegion (A095, SystemMemory, AGRB, 0x1000)
        Field (A095, ByteAcc, NoLock, Preserve)
        {
            Offset (0xB8), 
            A096,   32
        }

        BankField (A095, A096, 0x03B10530, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A082,   32
        }

        BankField (A095, A096, 0x03B1057C, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A075,   32
        }

        BankField (A095, A096, 0x03B109C4, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A076,   32
        }

        BankField (A095, A096, 0x03B109C8, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A077,   32
        }

        BankField (A095, A096, 0x03B109CC, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A078,   32
        }

        BankField (A095, A096, 0x03B109D0, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A079,   32
        }

        BankField (A095, A096, 0x03B109D4, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A080,   32
        }

        BankField (A095, A096, 0x03B109D8, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A081,   32
        }

        Method (A068, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A069)
            CreateDWordField (Arg1, 0x04, A070)
            CreateDWordField (Arg1, 0x08, A071)
            CreateDWordField (Arg1, 0x0C, A072)
            CreateDWordField (Arg1, 0x10, A073)
            CreateDWordField (Arg1, 0x14, A074)
            A075 = 0x00
            While ((A075 != 0x00)){}
            A076 = A069 /* \_SB_.A068.A069 */
            A077 = A070 /* \_SB_.A068.A070 */
            A078 = A071 /* \_SB_.A068.A071 */
            A079 = A072 /* \_SB_.A068.A072 */
            A080 = A073 /* \_SB_.A068.A073 */
            A081 = A074 /* \_SB_.A068.A074 */
            A082 = Arg0
            While ((A075 == 0x00)){}
        }

        Method (A083, 5, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A084)
                CreateDWordField (Local7, 0x04, A085)
                CreateDWordField (Local7, 0x08, A086)
                CreateDWordField (Local7, 0x0C, A087)
                CreateDWordField (Local7, 0x10, A088)
                CreateDWordField (Local7, 0x14, A089)
                A084 = Arg0
                A085 = Arg1
                A086 = Arg2
                A087 = Arg3
                A068 (0x0F, Local7)
            }
        }

        Method (A090, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)){}
            Else
            {
            }

            Return (Local0)
        }

        Method (A091, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)){}
        }

        Method (A017, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A092)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A084)
            CreateDWordField (Local7, 0x04, A085)
            CreateDWordField (Local7, 0x08, A086)
            CreateDWordField (Local7, 0x0C, A087)
            CreateDWordField (Local7, 0x10, A088)
            CreateDWordField (Local7, 0x14, A089)
            Local0 = 0x02
            While ((Local0 < A092))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A084 = 0x00
                A085 = 0x00
                A086 = 0x00
                A087 = 0x00
                A088 = 0x00
                A089 = 0x00
                If ((Local1 == 0x04))
                {
                    A084 = Local2
                    A068 (0x3D, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A084 = Local2
                    A068 (0x3B, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A084 = Local2
                    A068 (0x3C, Local7)
                }

                If ((Local1 == 0x10))
                {
                    A084 = Local2
                    A068 (0x3E, Local7)
                }

                If ((Local1 == 0x11))
                {
                    A084 = Local2
                    A068 (0x2F, Local7)
                }

                If ((Local1 == 0x30))
                {
                    A084 = Local2
                    A068 (0x4F, Local7)
                    Local3 = Buffer (0x08){}
                    CreateDWordField (Local3, 0x00, A093)
                    CreateDWordField (Local3, 0x04, A094)
                    A093 = A076 /* \_SB_.A076 */
                    A094 = A077 /* \_SB_.A077 */
                    Return (Local3)
                }

                If ((Local1 == 0x31))
                {
                    A084 = Local2
                    A068 (0x50, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR0.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR0.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR1.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR1.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR2.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR2.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR3.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR3.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR4.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR4.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR5.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR5.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR6.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR6.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR7.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR7.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x91)  // _UID: Unique ID
            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR8.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR8.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR9.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR9.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRA.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRA.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRB)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8B)  // _UID: Unique ID
                Name (AB12, 0xFC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRB.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRB.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRB.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRB.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRB.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8C)  // _UID: Unique ID
                Name (AB12, 0x0110)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRC.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRC.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRC.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRC.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRC.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRD)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8D)  // _UID: Unique ID
                Name (AB12, 0x0124)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRD.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRD.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRD.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRD.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRD.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRE)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8E)  // _UID: Unique ID
                Name (AB12, 0x0138)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRE.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRE.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRE.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRE.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRE.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRF)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8F)  // _UID: Unique ID
                Name (AB12, 0x014C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRF.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRF.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRF.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRF.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRF.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (A003, 0, NotSerialized)
        {
        }

        Method (A004, 2, NotSerialized)
        {
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "QOGIRN", 0x00000001)
{
    /*
     * iASL Warning: There were 19 external control methods found during
     * disassembly, but only 0 were resolved (19 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE.SP00, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP01, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP02, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP03, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP04, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP05, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP06, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP07, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.ALIB, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.M263, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M264, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M284, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M038, IntObj)
    External (M039, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (MOEM, IntObj)

    OperationRegion (CPNV, SystemMemory, 0xBD430018, 0x000100D8)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, Zero, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If ((ToInteger (M286) == One))
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == One))
        {
            Local2 = ToInteger (M452)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == 0xFFFFFFFF))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != 0xFFFFFFFF))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFFFFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, Zero)
        Local3 >>= Local2
        Local3 &= One
        Return (Local3)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, One)
        Local3 &= (0xFFFFFFFF ^ (One << Local2))
        Local3 |= (Arg1 << Local2)
        M410 (Local0, Local1, One, Local3)
    }

    Method (M440, 1, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, Zero)
        Local0 = M011 (0xFEC30000, 0x04, Arg0, One)
        Return (Local0)
    }

    Method (M441, 2, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, One)
        M012 (0xFEC30000, 0x08, Arg0, One, Arg1)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                (Local1 + 0x08) = M038 /* External reference */
                Local2
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Local1)
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Local1, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0xFF
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M011 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)){}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        If (((Local7 >> 0x10) > Zero))
                                        {
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                            }
                                            Else
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            }

                                            Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << One)))
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                            }
                                            Else
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                            }
                                        }
                                        ElseIf ((Local2 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                ), 0x02, Zero)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                        }
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            If (((Local7 >> 0x10) > Zero))
                                            {
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                }
                                                Else
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                }

                                                Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << One)))
                                                Local6 |= (0x03 << (Local2 << One))
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                }
                                                Else
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                }
                                            }
                                            ElseIf ((Local2 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                    ), 0x02, 0x03)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                            }
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                If (((Local7 >> 0x10) > Zero))
                                                {
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                    }
                                                    Else
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                    }

                                                    Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << One)))
                                                    Local6 |= (Local3 << (Local2 << One))
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                    }
                                                    Else
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                    }
                                                }
                                                ElseIf ((Local2 >= 0x04))
                                                {
                                                    M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                        ), 0x02, Local3)
                                                }
                                                Else
                                                {
                                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Local3)
                                                }
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                                Local7 = M009 (Local5)
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 (Local5)
                                }
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 (Local5) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06)
                    M115
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06)
                    M115
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (0xFFFFFFFF)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local2 = M011 (Arg0, (Arg1 + 0x02), Zero, 0x08)
            Local3 = M011 (Arg0, (Arg1 + 0x03), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
            Local0 |= (Local2 << 0x10)
            Local0 |= (Local3 << 0x18)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM) /* External reference */
            Arg0
            Arg1
            Arg2
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 2, NotSerialized)
    {
        Local0 = (Arg0 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg1 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x07
            Local3 = 0x14301000
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x10
            Local3 = 0x14601000
        }
        ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            Local2 = 0x0A
            Local3 = 0x14301000
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x0B
            Local3 = 0x14301000
        }
        Else
        {
            Local2 = 0x10
            Local3 = 0x14301000
        }

        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M402, 2, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x09) && (M085 <= 0x0A)))
            {
                Local6 = (0x11140294 + (Local4 << 0x0C))
                Local7 = 0x11180188
            }
            ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                If ((Local4 >= 0x08))
                {
                    Local6 = (0x11840294 + ((Local4 - 0x08) << 0x0C))
                    Local7 = 0x11880188
                }
                Else
                {
                    Local6 = (0x11440294 + (Local4 << 0x0C))
                    Local7 = 0x11480188
                }
            }
            ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local6 = (0x11240294 + ((Local4 - 0x03) << 0x0C))
                    Local7 = 0x11280188
                }
                Else
                {
                    Local6 = (0x11140294 + (Local4 << 0x0C))
                    Local7 = 0x11180188
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local6 = (0x11240294 + ((Local4 - 0x05) << 0x0C))
                    Local7 = 0x11280188
                }
                Else
                {
                    Local6 = (0x11140294 + (Local4 << 0x0C))
                    Local7 = 0x11180188
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local6 = (0x11240294 + ((Local4 - 0x08) << 0x0C))
                Local7 = 0x11280188
            }
            Else
            {
                Local6 = (0x11140294 + (Local4 << 0x0C))
                Local7 = 0x11180188
            }

            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local0 = M249 (Zero, Zero, Zero, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg0 << 0x13) | (Arg1 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                }
            }

            Local3 = M249 (Zero, Zero, Zero, Local6)
            Local5 = 0x4EEA
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                Local3 = M249 (Zero, Zero, Zero, Local6)
            }

            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, Local7, Local0)
            }
        }
    }

    Method (M403, 3, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x09) && (M085 <= 0x0A)))
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }
            ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                If ((Local4 >= 0x08))
                {
                    Local2 = (0x11840280 + ((Local4 - 0x08) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11440280 + (Local4 << 0x0C))
                }
            }
            ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local2 = (0x11240280 + ((Local4 - 0x03) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11140280 + (Local4 << 0x0C))
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local2 = (0x11240280 + ((Local4 - 0x05) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11140280 + (Local4 << 0x0C))
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local2 = (0x11240280 + ((Local4 - 0x08) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }

            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg2
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 <<= (Local1 * 0x02)
                Local0 &= 0x03
            }
            ElseIf ((Local1 >= 0x04))
            {
                Local0 = M011 ((M084 + 0x0E00), One, ((Local1 - 0x04
                    ) * 0x02), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 
                    0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 / 0x02), (
                (Arg4 & One) * 0x04), 0x04)
        }

        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 &= (0xFFFFFFFF ^ (0x03 << (Local1 << One)))
                Local0 |= (Arg5 << (Local1 << One))
                If ((Arg3 == 0x02))
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D02300, Local0)
                }
                Else
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
            }
            ElseIf ((Local1 >= 0x04))
            {
                M012 ((M084 + 0x0E00), One, ((Local1 - 0x04) * 0x02
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 / 0x02), ((Arg4 & 
                One) * 0x04), 0x04, Arg5)
        }
    }

    Mutex (M408, 0x00)
    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS)){}
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK)){}
            }
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            If ((\_GPE.M420 != 0xFF))
            {
                Local0 = (\_GPE.M415 & One)
                Local1 = (\_GPE.M416 & 0x07)
                Local1 += \_GPE.M411
                \_GPE.M419 = M409 (Local0, Local1, Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Name (M411, 0x20)
        Name (M415, One)
        Name (M416, 0x04)
        Name (M417, 0x40)
        Name (M418, 0x40)
        Name (M419, 0xFF)
        Name (M420, 0xFF)
        Method (XL0A, 0, NotSerialized)
        {
            Local0 = (\_GPE.M415 & One)
            Local1 = (\_GPE.M416 & 0x07)
            Local1 += \_GPE.M411
            Local2 = \_GPE.M419
            Local3 = M409 (Local0, Local1, Zero)
            \_GPE.M419 = Local3
            Local3 ^= Local2
            Local3 |= \_GPE.M418
            Local3 &= \_GPE.M417
            If (((Local3 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    \_GPE.SP00 ()
                }
            }

            If (((Local3 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    \_GPE.SP01 ()
                }
            }

            If (((Local3 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    \_GPE.SP02 ()
                }
            }

            If (((Local3 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    \_GPE.SP03 ()
                }
            }

            If (((Local3 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    \_GPE.SP04 ()
                }
            }

            If (((Local3 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    \_GPE.SP05 ()
                }
            }

            If (((Local3 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    \_GPE.SP06 ()
                }
            }

            If (((Local3 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    \_GPE.SP07 ()
                }
            }
        }

        Method (XL0B, 0, NotSerialized)
        {
            Name (M448, Package (0x02)
            {
                One, 
                One
            })
            Local0 = M04A (M128, 0x91)
            If (((Local0 & 0xC0) == 0xC0))
            {
                Local3 = Buffer (0x08){}
                CreateWordField (Local3, Zero, M254)
                CreateByteField (Local3, 0x02, M255)
                CreateDWordField (Local3, 0x03, M256)
                M256 = Zero
                M254 = 0x07
                M255 = 0x30
                If ((M085 == 0x0E))
                {
                    If (CondRefOf (\_SB.ALIB))
                    {
                        Local3 = \_SB.ALIB (0x0C)
                        Local4
                    }
                }
                ElseIf (CondRefOf (\_SB.ALIB))
                {
                    Local3 = \_SB.ALIB (0x0C)
                    M448
                }

                If (CondRefOf (\_SB.APAD))
                {
                    If ((M085 == 0x0E))
                    {
                        \_SB.APAD.M446 [One] = Local4
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                    Else
                    {
                        Local1 = Zero
                        Local2 = Zero
                        Local1 = M448 [Zero]
                        Local2 = M448 [One]
                        \_SB.APAD.M446 [One] = Local2
                        If ((Local1 == 0x02))
                        {
                            Notify (\_SB.APAD, 0x85) // Device-Specific
                        }
                        ElseIf ((Local1 == One))
                        {
                            Notify (\_SB.APAD, 0x84) // Reserved
                        }
                        Else
                        {
                            Notify (\_SB.APAD, 0x80) // Status Change
                        }
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Local0 = M04A (M128, 0x91)
                If (((Local0 & 0xC0) == 0xC0))
                {
                    Local3 = Buffer (0x08){}
                    CreateWordField (Local3, Zero, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        \_SB.ALIB (0x0C)
                        Local3
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



TPM2
----
[000h 0000 004h]                   Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004 004h]                Table Length : 0000004C
[008h 0008 001h]                    Revision : 04
[009h 0009 001h]                    Checksum : ED
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 002h]              Platform Class : 0000
[026h 0038 002h]                    Reserved : 0000
[028h 0040 008h]             Control Address : 00000000FD210510
[030h 0048 004h]                Start Method : 02 [ACPI Start Method]

[034h 0052 00Ch]           Method Parameters : 00 00 00 00 00 00 00 00 00 00 00 00
[040h 0064 004h]          Minimum Log Length : 00010000
[044h 0068 008h]                 Log Address : 00000000BD419000

Raw Table Data: Length 76 (0x4C)

    0000: 54 50 4D 32 4C 00 00 00 04 ED 41 4C 41 53 4B 41  // TPM2L.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 00 00 00 00 00 00 00 00 10 05 21 FD 00 00 00 00  // ..........!.....
    0030: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 01 00 00 90 41 BD 00 00 00 00              // ......A.....


VFCT
----
[000h 0000 004h]                   Signature : "VFCT"    
[004h 0004 004h]                Table Length : 0000E284
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : AE
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 33504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 57988 (0xE284)

    0000: 56 46 43 54 84 E2 00 00 01 AE 41 4C 41 53 4B 41  // VFCT......ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 20  // A M I ......AMD 
    0020: 47 4F 50 33 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP32..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 0B 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 7E 74 00 00 00 00  // ..........~t....
    0060: 01 00 00 00 00 E2 00 00 55 AA 71 E9 FA 5F 00 00  // ........U.q.._..
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: B8 03 00 00 00 00 49 42 4D 92 16 DD 00 00 00 00  // ......IBM.......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 8C 03 00 00 00 00 00 00 31 32 2F 30 34 2F 32 33  // ........12/04/23
    00C0: 2C 32 32 3A 32 31 3A 31 36 00 00 00 E9 EF 60 00  // ,22:21:16.....`.
    00D0: E9 F9 60 00 00 00 6C 02 0B 00 00 00 01 03 40 00  // ..`...l.......@.
    00E0: 00 C8 7E 74 00 00 00 00 6E 00 5F 00 90 01 00 00  // ..~t....n._.....
    00F0: 50 00 00 00 00 00 00 00 4C 9A 05 00 00 00 00 00  // P.......L.......
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0160: 2C 00 50 06 1E C0 0F 14 00 00 00 00 80 00 80 00  // ,.P.............
    0170: 80 00 18 C4 96 47 E1 A1 E6 51 08 40 F4 06 EF 1F  // .....G...Q.@....
    0180: CF F9 FF 15 00 00 00 00 00 00 E2 37 FE 0F FB 07  // ...........7....
    0190: 88 00 00 C0 02 08 00 C8 12 80 00 00 00 00 80 87  // ................
    01A0: 02 00 00 20 00 00 14 10 F8 D1 C1 AC 9A D1 91 D1  // ... ............
    01B0: 31 00 20 00 C0 0C 40 18 DD 54 01 1B 10 42 08 FE  // 1. ...@..T...B..
    01C0: 79 00 80 45 04 44 83 01 CC AA 19 1D 00 00 C4 03  // y..E.D..........
    01D0: 15 C0 3F 00 20 02 BC CF 29 1A 0D 41 08 40 08 40  // ..?. ...)..A.@.@
    01E0: 08 40 00 00 B0 00 94 40 64 80 00 E0 00 00 60 00  // .@.....@d.....`.
    01F0: 00 06 06 00 07 08 18 18 00 04 20 04 20 04 20 04  // .......... . . .
    0200: 20 3C D4 43 3D D4 43 3D D4 43 3D D4 43 C1 43 3D  //  <.C=.C=.C=.C.C=
    0210: D4 43 3D 54 01 15 50 01 15 D0 43 3D D4 43 3D 14  // .C=T..P...C=.C=.
    0220: 3C D4 43 3D D4 43 15 50 01 15 50 01 41 04 00 00  // <.C=.C.P..P.A...
    0230: 00 00 00 00 1E 11 87 29 40 0C 06 0F 09 00 00 00  // .......)@.......
    0240: 07 F8 02 00 00 00 04 00 C0 00 03 00 04 20 0C 08  // ............. ..
    0250: 22 00 00 00 10 00 00 00 02 00 00 00 0E 82 00 00  // "...............
    0260: 64 00 00 00 18 00 10 0C 00 00 7C 04 20 00 00 00  // d.........|. ...
    0270: 00 00 00 02 00 00 00 00 0E 19 00 86 20 1A 0C 00  // ............ ...
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 00 00 00 F2 93 04 20 08 0C 00 32 08  // .......... ...2.
    02A0: 00 00 00 30 E6 31 00 00 20 FD 00 50 00 52 00 84  // ...0.1.. ..P.R..
    02B0: 00 00 00 E0 86 1B 00 C8 00 30 00 00 04 00 C0 C0  // .........0......
    02C0: A3 00 00 00 00 88 08 18 00 00 00 00 02 00 A4 01  // ................
    02D0: 40 9A 00 04 31 31 35 2D 44 37 31 32 42 50 32 2D  // @...115-D712BP2-
    02E0: 31 30 30 00 4E 41 56 49 33 32 00 50 43 49 5F 45  // 100.NAVI32.PCI_E
    02F0: 58 50 52 45 53 53 00 47 44 44 52 36 00 0D 0A 37  // XPRESS.GDDR6...7
    0300: 34 37 45 48 42 2E 32 32 2E 32 2E 31 2E 32 35 2E  // 47EHB.22.2.1.25.
    0310: 41 53 30 31 50 20 20 20 20 20 20 20 20 20 20 20  // AS01P           
    0320: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0330: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0340: 20 20 20 20 20 20 20 20 20 20 20 0D 0A 00 0D 0A  //            .....
    0350: 20 0D 0A 00 28 43 29 20 31 39 38 38 2D 32 30 32  //  ...(C) 1988-202
    0360: 32 2C 20 41 64 76 61 6E 63 65 64 20 4D 69 63 72  // 2, Advanced Micr
    0370: 6F 20 44 65 76 69 63 65 73 2C 20 49 6E 63 2E 00  // o Devices, Inc..
    0380: 41 54 4F 4D 42 49 4F 53 42 4B 2D 41 4D 44 20 56  // ATOMBIOSBK-AMD V
    0390: 45 52 30 32 32 2E 30 30 32 2E 30 30 31 2E 30 32  // ER022.002.001.02
    03A0: 35 2E 30 30 30 30 30 31 00 4E 41 56 49 33 32 2E  // 5.000001.NAVI32.
    03B0: 62 69 6E 20 20 00 30 30 30 30 30 30 30 30 00 30  // bin  .00000000.0
    03C0: 30 30 38 35 31 33 35 00 74 61 2D 79 75 6D 61 72  // 0085135.ta-yumar
    03D0: 00 41 53 55 53 5F 44 37 31 32 42 50 32 5F 45 33  // .ASUS_D712BP2_E3
    03E0: 5F 4F 31 36 47 42 5F 41 50 4D 37 31 36 34 5F 50  // _O16GB_APM7164_P
    03F0: 00 00 00 00 2C 00 02 03 41 54 4F 4D 00 C0 FE 60  // ....,...ATOM...`
    0400: 41 03 DD 03 95 02 34 61 00 00 00 00 43 10 0D 06  // A.....4a....C...
    0410: B8 03 60 41 00 04 04 00 F8 21 00 00 00 02 03 00  // ..`A.....!......
    0420: 50 43 49 52 02 10 7E 74 00 00 18 00 00 00 00 03  // PCIR..~t........
    0430: 71 00 02 16 00 00 00 00 41 4D 44 20 41 54 4F 4D  // q.......AMD ATOM
    0440: 42 49 4F 53 00 D7 8B 2D A1 00 00 00 00 00 00 00  // BIOS...-........
    0450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0460: 00 00 00 00 00 00 00 00 4A 00 02 01 00 00 00 00  // ........J.......
    0470: 80 28 84 1F 14 28 F4 20 E4 1C 4C 04 4C 2A E4 21  // .(...(. ..L.L*.!
    0480: 00 00 F8 24 08 1E 28 21 6C 2B 00 00 00 00 CC 21  // ...$..(!l+.....!
    0490: F4 2B 00 00 00 00 00 00 B4 1E 7C 1F 5C 2C 84 06  // .+........|.\,..
    04A0: 00 00 34 1D A0 2C 00 00 00 00 00 00 8C 3E 58 3F  // ..4..,.......>X?
    04B0: 00 00 00 00 38 02 05 04 10 00 38 00 7C 00 90 01  // ....8.....8.|...
    04C0: D8 01 48 00 30 75 00 00 0C 00 0F 05 3E 00 00 00  // ..H.0u......>...
    04D0: 40 9C 00 00 0C 00 0F 05 3E 00 00 00 FF FF FF 00  // @.......>.......
    04E0: 0C 00 0F 05 77 21 00 00 00 00 00 00 FF FF FF 00  // ....w!..........
    04F0: 0C 00 0F 04 3E 00 00 00 00 00 00 00 0A 8B 02 00  // ....>...........
    0500: 0C 00 0F 04 3E 00 00 00 15 16 05 00 0C 00 0F 04  // ....>...........
    0510: 3E 00 00 00 1C C8 06 00 0C 00 0F 04 3E 00 00 00  // >...........>...
    0520: 23 7A 08 00 0C 00 0F 04 3E 00 00 00 00 00 00 00  // #z......>.......
    0530: 48 3F 00 00 0F 00 44 00 00 16 00 00 00 04 01 1F  // H?....D.........
    0540: 00 00 00 04 02 2C 00 00 00 04 03 3E 00 00 00 04  // .....,.....>....
    0550: 08 1B 50 00 00 04 09 25 60 00 00 04 0A 35 90 00  // ..P....%`....5..
    0560: 00 04 10 21 B0 00 00 04 11 2F F0 00 00 04 18 2A  // ...!...../.....*
    0570: 40 01 00 04 78 69 00 00 0F 00 44 00 00 16 00 00  // @...xi....D.....
    0580: 00 04 01 1F 00 00 00 04 02 2C 00 00 00 04 03 3E  // .........,.....>
    0590: 00 00 00 04 08 1B 50 00 00 04 09 25 60 00 00 04  // ......P....%`...
    05A0: 0A 35 90 00 00 04 10 21 B0 00 00 04 11 2F F0 00  // .5.....!...../..
    05B0: 00 04 18 2A 40 01 00 04 F0 D2 00 00 0F 00 44 00  // ...*@.........D.
    05C0: 00 1D 00 00 00 04 01 26 00 00 00 04 02 30 00 00  // .......&.....0..
    05D0: 00 04 03 3E 00 00 00 04 08 22 40 00 00 04 09 2C  // ...>....."@....,
    05E0: 60 00 00 04 0A 37 70 00 00 04 10 27 90 00 00 04  // `....7p....'....
    05F0: 11 32 C0 00 00 04 18 2E 00 01 00 04 68 3C 01 00  // .2..........h<..
    0600: 0F 00 44 00 00 1D 00 00 00 04 01 26 00 00 00 04  // ..D........&....
    0610: 02 30 00 00 00 04 03 3E 00 00 00 04 08 22 40 00  // .0.....>....."@.
    0620: 00 04 09 2C 60 00 00 04 0A 37 70 00 00 04 10 27  // ...,`....7p....'
    0630: 90 00 00 04 11 32 C0 00 00 04 18 2E 00 01 00 04  // .....2..........
    0640: 00 00 00 00 00 01 02 03 02 03 00 01 00 07 05 00  // ................
    0650: 00 01 02 03 02 03 00 01 00 07 05 00 00 01 02 03  // ................
    0660: 02 03 00 01 00 07 05 00 00 01 02 03 02 03 00 01  // ................
    0670: 00 07 05 00 00 01 02 03 02 03 00 01 00 07 05 00  // ................
    0680: 00 01 02 03 02 03 00 01 00 07 05 00 08 30 00 00  // .............0..
    0690: 9B 00 00 00 07 30 00 00 46 25 00 00 08 31 00 00  // .....0..F%...1..
    06A0: 9B 00 00 00 07 31 00 00 46 25 00 00 08 32 00 00  // .....1..F%...2..
    06B0: 9B 00 00 00 07 32 00 00 46 25 00 00 08 33 00 00  // .....2..F%...3..
    06C0: 9B 00 00 00 07 33 00 00 46 25 00 00 56 00 00 00  // .....3..F%..V...
    06D0: 05 00 00 00 46 00 00 00 30 00 00 00 50 00 00 00  // ....F...0...P...
    06E0: 30 00 00 00 FF FF FF FF 00 00 00 00 60 16 01 00  // 0...........`...
    06F0: 00 1F 08 00 00 00 00 00 48 3F 00 00 06 02 00 05  // ........H?......
    0700: 03 00 00 15 04 00 00 00 00 00 00 00 00 00 00 00  // ................
    0710: 00 00 00 00 00 1F 00 00 00 00 00 00 48 3F 00 00  // ............H?..
    0720: 06 02 00 05 03 00 00 11 00 00 00 00 00 00 00 00  // ................
    0730: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
    0740: 48 3F 00 00 06 02 00 05 03 00 00 1A 09 00 00 00  // H?..............
    0750: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    0760: 00 00 00 00 48 3F 00 00 06 02 00 05 03 00 00 20  // ....H?......... 
    0770: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0780: 00 1F 01 00 00 00 00 00 48 3F 00 00 06 02 00 05  // ........H?......
    0790: 03 00 00 18 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07A0: 00 00 00 00 00 1F 09 00 00 00 00 00 48 3F 00 00  // ............H?..
    07B0: 06 02 00 05 03 00 00 1D 05 00 00 00 00 00 00 00  // ................
    07C0: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    07D0: 48 3F 00 00 06 02 00 05 03 00 00 24 0C 00 00 00  // H?.........$....
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
    07F0: 00 00 00 00 48 3F 00 00 06 02 00 05 03 00 00 22  // ....H?........."
    0800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 1F 0A 00 00 00 00 00 48 3F 00 00 06 02 00 05  // ........H?......
    0820: 03 00 00 29 07 00 00 00 00 00 00 00 00 00 00 00  // ...)............
    0830: 00 00 00 00 00 1F 03 00 00 00 00 00 48 3F 00 00  // ............H?..
    0840: 06 02 00 05 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0850: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
    0860: 78 69 00 00 06 02 00 05 03 00 00 30 00 00 00 00  // xi.........0....
    0870: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
    0880: 00 00 00 00 78 69 00 00 06 02 00 05 03 00 00 22  // ....xi........."
    0890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08A0: 00 1F 0A 00 00 00 00 00 78 69 00 00 06 02 00 05  // ........xi......
    08B0: 03 00 00 29 07 00 00 00 00 00 00 00 00 00 00 00  // ...)............
    08C0: 00 00 00 00 00 1F 00 00 00 00 00 00 78 69 00 00  // ............xi..
    08D0: 06 02 00 05 03 00 00 11 00 00 00 00 00 00 00 00  // ................
    08E0: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    08F0: 78 69 00 00 06 02 00 05 03 00 00 15 04 00 00 00  // xi..............
    0900: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    0910: 00 00 00 00 78 69 00 00 06 02 00 05 03 00 00 1A  // ....xi..........
    0920: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0930: 00 1F 18 00 00 00 00 00 78 69 00 00 06 02 00 05  // ........xi......
    0940: 03 00 00 20 10 00 00 00 00 00 00 00 00 00 00 00  // ... ............
    0950: 00 00 00 00 00 1F 01 00 00 00 00 00 78 69 00 00  // ............xi..
    0960: 06 02 00 05 03 00 00 18 00 00 00 00 00 00 00 00  // ................
    0970: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    0980: 78 69 00 00 06 02 00 05 03 00 00 1D 05 00 00 00  // xi..............
    0990: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
    09A0: 00 00 00 00 78 69 00 00 06 02 00 05 03 00 00 24  // ....xi.........$
    09B0: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09C0: 04 1F 02 00 00 00 00 00 30 75 00 00 05 02 00 07  // ........0u......
    09D0: 03 00 04 22 0A 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    09E0: 00 00 00 00 04 1F 03 00 00 00 00 00 30 75 00 00  // ............0u..
    09F0: 05 02 00 07 03 00 04 20 0C 00 00 00 00 00 00 00  // ....... ........
    0A00: 00 00 00 00 00 00 00 00 04 1F 01 00 00 00 00 00  // ................
    0A10: 30 75 00 00 05 02 00 07 03 00 04 24 08 00 00 00  // 0u.........$....
    0A20: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 00 00  // ................
    0A30: 00 00 00 00 30 75 00 00 05 02 00 07 03 00 04 26  // ....0u.........&
    0A40: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A50: 03 1F 00 00 00 00 00 00 30 75 00 00 05 02 00 07  // ........0u......
    0A60: 03 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    0A70: 00 00 00 00 03 1F 00 00 00 00 00 00 40 9C 00 00  // ............@...
    0A80: 05 02 00 01 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0A90: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    0AA0: F0 D2 00 00 06 02 00 05 03 00 00 1A 03 00 00 00  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    0AC0: 00 00 00 00 F0 D2 00 00 06 02 00 05 03 00 00 1E  // ................
    0AD0: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AE0: 00 1F 18 00 00 00 00 00 F0 D2 00 00 06 02 00 05  // ................
    0AF0: 03 00 00 23 0C 00 00 00 00 00 00 00 00 00 00 00  // ...#............
    0B00: 00 00 00 00 00 1F 01 00 00 00 00 00 F0 D2 00 00  // ................
    0B10: 06 02 00 05 03 00 00 1D 00 00 00 00 00 00 00 00  // ................
    0B20: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    0B30: F0 D2 00 00 06 02 00 05 03 00 00 22 05 00 00 00  // ..........."....
    0B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
    0B50: 00 00 00 00 F0 D2 00 00 06 02 00 05 03 00 00 26  // ...............&
    0B60: 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B70: 00 1F 02 00 00 00 00 00 F0 D2 00 00 06 02 00 05  // ................
    0B80: 03 00 00 25 00 00 00 00 00 00 00 00 00 00 00 00  // ...%............
    0B90: 00 00 00 00 00 1F 00 00 00 00 00 00 F0 D2 00 00  // ................
    0BA0: 06 02 00 05 03 00 00 17 00 00 00 00 00 00 00 00  // ................
    0BB0: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    0BC0: F0 D2 00 00 06 02 00 05 03 00 00 2A 06 00 00 00  // ...........*....
    0BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    0BE0: 00 00 00 00 F0 D2 00 00 06 02 00 05 03 00 00 30  // ...............0
    0BF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C00: 04 1F 00 00 00 00 00 00 60 EA 00 00 05 02 00 07  // ........`.......
    0C10: 03 00 04 26 06 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    0C20: 00 00 00 00 04 1F 01 00 00 00 00 00 60 EA 00 00  // ............`...
    0C30: 05 02 00 07 03 00 04 24 08 00 00 00 00 00 00 00  // .......$........
    0C40: 00 00 00 00 00 00 00 00 04 1F 02 00 00 00 00 00  // ................
    0C50: 60 EA 00 00 05 02 00 07 03 00 04 22 0A 00 00 00  // `.........."....
    0C60: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 03 00  // ................
    0C70: 00 00 00 00 60 EA 00 00 05 02 00 07 03 00 04 20  // ....`.......... 
    0C80: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C90: 03 1F 00 00 00 00 00 00 60 EA 00 00 05 02 00 01  // ........`.......
    0CA0: 03 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    0CB0: 00 00 00 00 04 1F 00 00 00 00 00 00 80 38 01 00  // .............8..
    0CC0: 05 02 00 07 03 00 04 26 06 00 00 00 00 00 00 00  // .......&........
    0CD0: 00 00 00 00 00 00 00 00 04 1F 01 00 00 00 00 00  // ................
    0CE0: 80 38 01 00 05 02 00 07 03 00 04 24 08 00 00 00  // .8.........$....
    0CF0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 03 00  // ................
    0D00: 00 00 00 00 80 38 01 00 05 02 00 07 03 00 04 20  // .....8......... 
    0D10: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D20: 04 1F 02 00 00 00 00 00 80 38 01 00 05 02 00 07  // .........8......
    0D30: 03 00 04 22 0A 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    0D40: 00 00 00 00 00 1F 00 00 00 00 00 00 68 3C 01 00  // ............h<..
    0D50: 06 02 00 05 03 00 00 17 00 00 00 00 00 00 00 00  // ................
    0D60: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    0D70: 68 3C 01 00 06 02 00 05 03 00 00 1A 03 00 00 00  // h<..............
    0D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    0D90: 00 00 00 00 68 3C 01 00 06 02 00 05 03 00 00 1E  // ....h<..........
    0DA0: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DB0: 00 1F 18 00 00 00 00 00 68 3C 01 00 06 02 00 05  // ........h<......
    0DC0: 03 00 00 23 0C 00 00 00 00 00 00 00 00 00 00 00  // ...#............
    0DD0: 00 00 00 00 00 1F 01 00 00 00 00 00 68 3C 01 00  // ............h<..
    0DE0: 06 02 00 05 03 00 00 1D 00 00 00 00 00 00 00 00  // ................
    0DF0: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    0E00: 68 3C 01 00 06 02 00 05 03 00 00 22 05 00 00 00  // h<........."....
    0E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
    0E20: 00 00 00 00 68 3C 01 00 06 02 00 05 03 00 00 26  // ....h<.........&
    0E30: 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E40: 00 1F 02 00 00 00 00 00 68 3C 01 00 06 02 00 05  // ........h<......
    0E50: 03 00 00 25 00 00 00 00 00 00 00 00 00 00 00 00  // ...%............
    0E60: 00 00 00 00 00 1F 0A 00 00 00 00 00 68 3C 01 00  // ............h<..
    0E70: 06 02 00 05 03 00 00 2A 06 00 00 00 00 00 00 00  // .......*........
    0E80: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
    0E90: 68 3C 01 00 06 02 00 05 03 00 00 30 00 00 00 00  // h<.........0....
    0EA0: 00 00 00 00 00 00 00 00 00 00 00 00 08 01 0D 00  // ................
    0EB0: 00 00 00 00 A0 86 01 00 07 02 00 07 03 00 04 21  // ...............!
    0EC0: 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0ED0: 08 01 0E 00 00 00 00 00 A0 86 01 00 07 02 00 07  // ................
    0EE0: 03 00 08 28 00 00 00 00 00 00 00 00 00 00 00 00  // ...(............
    0EF0: 00 00 00 00 08 01 0F 00 00 00 00 00 A0 86 01 00  // ................
    0F00: 07 02 00 07 03 00 02 1C 02 00 00 00 00 00 00 00  // ................
    0F10: 00 00 00 00 00 00 00 00 08 01 0C 00 00 00 00 00  // ................
    0F20: A0 86 01 00 07 02 00 07 03 00 04 25 07 00 00 00  // ...........%....
    0F30: 00 00 00 00 00 00 00 00 00 00 00 00 08 01 0B 00  // ................
    0F40: 00 00 00 00 A0 86 01 00 07 02 00 07 03 00 04 28  // ...............(
    0F50: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F60: 08 01 09 00 00 00 00 00 A0 86 01 00 07 02 00 07  // ................
    0F70: 03 00 02 21 0D 00 00 00 00 00 00 00 00 00 00 00  // ...!............
    0F80: 00 00 00 00 08 01 0A 00 00 00 00 00 A0 86 01 00  // ................
    0F90: 07 02 00 07 03 00 04 2C 00 00 00 00 00 00 00 00  // .......,........
    0FA0: 00 00 00 00 00 00 00 00 08 01 00 00 00 00 00 00  // ................
    0FB0: A0 86 01 00 07 02 00 07 03 00 00 30 00 00 00 00  // ...........0....
    0FC0: 00 00 00 00 00 00 00 00 00 00 00 00 08 01 02 00  // ................
    0FD0: 00 00 00 00 A0 86 01 00 07 02 00 07 03 00 00 28  // ...............(
    0FE0: 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FF0: 08 01 03 00 00 00 00 00 A0 86 01 00 07 02 00 07  // ................
    1000: 03 00 00 25 0B 00 00 00 00 00 00 00 00 00 00 00  // ...%............
    1010: 00 00 00 00 08 01 04 00 00 00 00 00 A0 86 01 00  // ................
    1020: 07 02 00 07 03 00 00 21 0F 00 00 00 00 00 00 00  // .......!........
    1030: 00 00 00 00 00 00 00 00 08 01 05 00 00 00 00 00  // ................
    1040: A0 86 01 00 07 02 00 07 03 00 02 2E 00 00 00 00  // ................
    1050: 00 00 00 00 00 00 00 00 00 00 00 00 08 01 06 00  // ................
    1060: 00 00 00 00 A0 86 01 00 07 02 00 07 03 00 02 2A  // ...............*
    1070: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1080: 08 01 07 00 00 00 00 00 A0 86 01 00 07 02 00 07  // ................
    1090: 03 00 02 26 08 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    10A0: 00 00 00 00 08 01 08 00 00 00 00 00 A0 86 01 00  // ................
    10B0: 07 02 00 07 03 00 02 23 0B 00 00 00 00 00 00 00  // .......#........
    10C0: 00 00 00 00 00 00 00 00 08 01 01 00 00 00 00 00  // ................
    10D0: A0 86 01 00 07 02 00 07 03 00 00 2B 05 00 00 00  // ...........+....
    10E0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 00 00  // ................
    10F0: 00 00 00 00 A0 86 01 00 07 02 00 07 03 00 04 26  // ...............&
    1100: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1110: 04 1F 01 00 00 00 00 00 A0 86 01 00 07 02 00 07  // ................
    1120: 03 00 04 24 08 00 00 00 00 00 00 00 00 00 00 00  // ...$............
    1130: 00 00 00 00 04 1F 02 00 00 00 00 00 A0 86 01 00  // ................
    1140: 07 02 00 07 03 00 04 22 0A 00 00 00 00 00 00 00  // ......."........
    1150: 00 00 00 00 00 00 00 00 04 1F 03 00 00 00 00 00  // ................
    1160: A0 86 01 00 07 02 00 07 03 00 04 20 0C 00 00 00  // ........... ....
    1170: 00 00 00 00 00 00 00 00 00 00 00 00 08 1E 00 00  // ................
    1180: 00 00 00 00 A0 86 01 00 06 02 00 05 03 00 00 30  // ...............0
    1190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    11A0: 08 1E 01 00 00 00 00 00 A0 86 01 00 06 02 00 05  // ................
    11B0: 03 00 00 2B 05 00 00 00 00 00 00 00 00 00 00 00  // ...+............
    11C0: 00 00 00 00 08 1E 02 00 00 00 00 00 A0 86 01 00  // ................
    11D0: 06 02 00 05 03 00 00 28 08 00 00 00 00 00 00 00  // .......(........
    11E0: 00 00 00 00 00 00 00 00 08 1E 03 00 00 00 00 00  // ................
    11F0: A0 86 01 00 06 02 00 05 03 00 00 25 0B 00 00 00  // ...........%....
    1200: 00 00 00 00 00 00 00 00 00 00 00 00 08 1E 04 00  // ................
    1210: 00 00 00 00 A0 86 01 00 06 02 00 05 03 00 00 21  // ...............!
    1220: 0F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1230: 08 1E 05 00 00 00 00 00 A0 86 01 00 06 02 00 05  // ................
    1240: 03 00 02 2E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1250: 00 00 00 00 08 1E 06 00 00 00 00 00 A0 86 01 00  // ................
    1260: 06 02 00 05 03 00 02 2A 04 00 00 00 00 00 00 00  // .......*........
    1270: 00 00 00 00 00 00 00 00 08 1E 07 00 00 00 00 00  // ................
    1280: A0 86 01 00 06 02 00 05 03 00 02 26 08 00 00 00  // ...........&....
    1290: 00 00 00 00 00 00 00 00 00 00 00 00 08 1E 08 00  // ................
    12A0: 00 00 00 00 A0 86 01 00 06 02 00 05 03 00 02 23  // ...............#
    12B0: 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    12C0: 08 1E 0A 00 00 00 00 00 A0 86 01 00 06 02 00 05  // ................
    12D0: 03 00 04 2C 00 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    12E0: 00 00 00 00 08 1E 0B 00 00 00 00 00 A0 86 01 00  // ................
    12F0: 06 02 00 05 03 00 04 28 04 00 00 00 00 00 00 00  // .......(........
    1300: 00 00 00 00 00 00 00 00 08 1E 0C 00 00 00 00 00  // ................
    1310: A0 86 01 00 06 02 00 05 03 00 04 25 07 00 00 00  // ...........%....
    1320: 00 00 00 00 00 00 00 00 00 00 00 00 08 1E 0D 00  // ................
    1330: 00 00 00 00 A0 86 01 00 06 02 00 05 03 00 04 21  // ...............!
    1340: 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1350: 08 1E 0E 00 00 00 00 00 A0 86 01 00 06 02 00 05  // ................
    1360: 03 00 08 28 00 00 00 00 00 00 00 00 00 00 00 00  // ...(............
    1370: 00 00 00 00 08 1E 0F 00 00 00 00 00 A0 86 01 00  // ................
    1380: 06 02 00 05 03 00 02 1C 02 00 00 00 00 00 00 00  // ................
    1390: 00 00 00 00 00 00 00 00 08 1E 09 00 00 00 00 00  // ................
    13A0: A0 86 01 00 06 02 00 05 03 00 02 21 0D 00 00 00  // ...........!....
    13B0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 00 00  // ................
    13C0: 00 00 00 00 C0 D4 01 00 07 02 00 07 03 00 04 26  // ...............&
    13D0: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    13E0: 04 1F 01 00 00 00 00 00 C0 D4 01 00 07 02 00 07  // ................
    13F0: 03 00 04 24 08 00 00 00 00 00 00 00 00 00 00 00  // ...$............
    1400: 00 00 00 00 04 1F 02 00 00 00 00 00 C0 D4 01 00  // ................
    1410: 07 02 00 07 03 00 04 22 0A 00 00 00 00 00 00 00  // ......."........
    1420: 00 00 00 00 00 00 00 00 04 1F 03 00 00 00 00 00  // ................
    1430: C0 D4 01 00 07 02 00 07 03 00 04 20 0C 00 00 00  // ........... ....
    1440: 00 00 00 00 00 00 00 00 00 00 00 00 08 01 00 00  // ................
    1450: 00 00 00 00 58 0F 02 00 07 02 00 07 03 00 00 30  // ....X..........0
    1460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1470: 08 01 01 00 00 00 00 00 58 0F 02 00 07 02 00 07  // ........X.......
    1480: 03 00 00 2B 05 00 00 00 00 00 00 00 00 00 00 00  // ...+............
    1490: 00 00 00 00 08 01 02 00 00 00 00 00 58 0F 02 00  // ............X...
    14A0: 07 02 00 07 03 00 00 28 08 00 00 00 00 00 00 00  // .......(........
    14B0: 00 00 00 00 00 00 00 00 08 01 03 00 00 00 00 00  // ................
    14C0: 58 0F 02 00 07 02 00 07 03 00 00 25 0B 00 00 00  // X..........%....
    14D0: 00 00 00 00 00 00 00 00 00 00 00 00 08 01 04 00  // ................
    14E0: 00 00 00 00 58 0F 02 00 07 02 00 07 03 00 00 21  // ....X..........!
    14F0: 0F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1500: 08 01 06 00 00 00 00 00 58 0F 02 00 07 02 00 07  // ........X.......
    1510: 03 00 02 2A 04 00 00 00 00 00 00 00 00 00 00 00  // ...*............
    1520: 00 00 00 00 08 01 07 00 00 00 00 00 58 0F 02 00  // ............X...
    1530: 07 02 00 07 03 00 02 26 08 00 00 00 00 00 00 00  // .......&........
    1540: 00 00 00 00 00 00 00 00 08 01 08 00 00 00 00 00  // ................
    1550: 58 0F 02 00 07 02 00 07 03 00 02 23 0B 00 00 00  // X..........#....
    1560: 00 00 00 00 00 00 00 00 00 00 00 00 08 01 09 00  // ................
    1570: 00 00 00 00 58 0F 02 00 07 02 00 07 03 00 02 21  // ....X..........!
    1580: 0D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1590: 08 01 0A 00 00 00 00 00 58 0F 02 00 07 02 00 07  // ........X.......
    15A0: 03 00 04 2C 00 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    15B0: 00 00 00 00 08 01 0B 00 00 00 00 00 58 0F 02 00  // ............X...
    15C0: 07 02 00 07 03 00 04 28 04 00 00 00 00 00 00 00  // .......(........
    15D0: 00 00 00 00 00 00 00 00 08 01 0C 00 00 00 00 00  // ................
    15E0: 58 0F 02 00 07 02 00 07 03 00 04 25 07 00 00 00  // X..........%....
    15F0: 00 00 00 00 00 00 00 00 00 00 00 00 08 01 05 00  // ................
    1600: 00 00 00 00 58 0F 02 00 07 02 00 07 03 00 02 2E  // ....X...........
    1610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1620: 08 01 0D 00 00 00 00 00 58 0F 02 00 07 02 00 07  // ........X.......
    1630: 03 00 04 21 0B 00 00 00 00 00 00 00 00 00 00 00  // ...!............
    1640: 00 00 00 00 08 01 0E 00 00 00 00 00 58 0F 02 00  // ............X...
    1650: 07 02 00 07 03 00 08 28 00 00 00 00 00 00 00 00  // .......(........
    1660: 00 00 00 00 00 00 00 00 08 01 0F 00 00 00 00 00  // ................
    1670: 58 0F 02 00 07 02 00 07 03 00 02 1C 02 00 00 00  // X...............
    1680: 00 00 00 00 00 00 00 00 00 00 00 00 08 1E 05 00  // ................
    1690: 00 00 00 00 58 0F 02 00 06 02 00 05 03 00 02 2E  // ....X...........
    16A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    16B0: 08 1E 06 00 00 00 00 00 58 0F 02 00 06 02 00 05  // ........X.......
    16C0: 03 00 02 2A 04 00 00 00 00 00 00 00 00 00 00 00  // ...*............
    16D0: 00 00 00 00 08 1E 07 00 00 00 00 00 58 0F 02 00  // ............X...
    16E0: 06 02 00 05 03 00 02 26 08 00 00 00 00 00 00 00  // .......&........
    16F0: 00 00 00 00 00 00 00 00 08 1E 08 00 00 00 00 00  // ................
    1700: 58 0F 02 00 06 02 00 05 03 00 02 23 0B 00 00 00  // X..........#....
    1710: 00 00 00 00 00 00 00 00 00 00 00 00 08 1E 09 00  // ................
    1720: 00 00 00 00 58 0F 02 00 06 02 00 05 03 00 02 21  // ....X..........!
    1730: 0D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1740: 08 1E 0A 00 00 00 00 00 58 0F 02 00 06 02 00 05  // ........X.......
    1750: 03 00 04 2C 00 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    1760: 00 00 00 00 08 1E 0B 00 00 00 00 00 58 0F 02 00  // ............X...
    1770: 06 02 00 05 03 00 04 28 04 00 00 00 00 00 00 00  // .......(........
    1780: 00 00 00 00 00 00 00 00 08 1E 04 00 00 00 00 00  // ................
    1790: 58 0F 02 00 06 02 00 05 03 00 00 21 0F 00 00 00  // X..........!....
    17A0: 00 00 00 00 00 00 00 00 00 00 00 00 08 1E 0C 00  // ................
    17B0: 00 00 00 00 58 0F 02 00 06 02 00 05 03 00 04 25  // ....X..........%
    17C0: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17D0: 08 1E 0E 00 00 00 00 00 58 0F 02 00 06 02 00 05  // ........X.......
    17E0: 03 00 08 28 00 00 00 00 00 00 00 00 00 00 00 00  // ...(............
    17F0: 00 00 00 00 08 1E 0F 00 00 00 00 00 58 0F 02 00  // ............X...
    1800: 06 02 00 05 03 00 02 1C 02 00 00 00 00 00 00 00  // ................
    1810: 00 00 00 00 00 00 00 00 08 1E 0D 00 00 00 00 00  // ................
    1820: 58 0F 02 00 06 02 00 05 03 00 04 21 0B 00 00 00  // X..........!....
    1830: 00 00 00 00 00 00 00 00 00 00 00 00 08 1E 03 00  // ................
    1840: 00 00 00 00 58 0F 02 00 06 02 00 05 03 00 00 25  // ....X..........%
    1850: 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1860: 08 1E 01 00 00 00 00 00 58 0F 02 00 06 02 00 05  // ........X.......
    1870: 03 00 00 2B 05 00 00 00 00 00 00 00 00 00 00 00  // ...+............
    1880: 00 00 00 00 08 1E 02 00 00 00 00 00 58 0F 02 00  // ............X...
    1890: 06 02 00 05 03 00 00 28 08 00 00 00 00 00 00 00  // .......(........
    18A0: 00 00 00 00 00 00 00 00 08 1E 00 00 00 00 00 00  // ................
    18B0: 58 0F 02 00 06 02 00 05 03 00 00 30 00 00 00 00  // X..........0....
    18C0: 00 00 00 00 00 00 00 00 00 00 00 00 08 1E 09 00  // ................
    18D0: 00 00 00 00 40 0D 03 00 06 02 00 05 03 00 02 21  // ....@..........!
    18E0: 0D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18F0: 08 1E 0A 00 00 00 00 00 40 0D 03 00 06 02 00 05  // ........@.......
    1900: 03 00 04 2C 00 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    1910: 00 00 00 00 08 1E 0B 00 00 00 00 00 40 0D 03 00  // ............@...
    1920: 06 02 00 05 03 00 04 28 04 00 00 00 00 00 00 00  // .......(........
    1930: 00 00 00 00 00 00 00 00 08 1E 0C 00 00 00 00 00  // ................
    1940: 40 0D 03 00 06 02 00 05 03 00 04 25 07 00 00 00  // @..........%....
    1950: 00 00 00 00 00 00 00 00 00 00 00 00 08 1E 0D 00  // ................
    1960: 00 00 00 00 40 0D 03 00 06 02 00 05 03 00 04 21  // ....@..........!
    1970: 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1980: 08 1E 0E 00 00 00 00 00 40 0D 03 00 06 02 00 05  // ........@.......
    1990: 03 00 08 28 00 00 00 00 00 00 00 00 00 00 00 00  // ...(............
    19A0: 00 00 00 00 08 1E 0F 00 00 00 00 00 40 0D 03 00  // ............@...
    19B0: 06 02 00 05 03 00 02 1C 02 00 00 00 00 00 00 00  // ................
    19C0: 00 00 00 00 00 00 00 00 08 1E 08 00 00 00 00 00  // ................
    19D0: 40 0D 03 00 06 02 00 05 03 00 02 23 0B 00 00 00  // @..........#....
    19E0: 00 00 00 00 00 00 00 00 00 00 00 00 08 01 00 00  // ................
    19F0: 00 00 00 00 40 0D 03 00 07 02 00 07 03 00 00 30  // ....@..........0
    1A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A10: 08 01 01 00 00 00 00 00 40 0D 03 00 07 02 00 07  // ........@.......
    1A20: 03 00 00 2B 05 00 00 00 00 00 00 00 00 00 00 00  // ...+............
    1A30: 00 00 00 00 08 01 02 00 00 00 00 00 40 0D 03 00  // ............@...
    1A40: 07 02 00 07 03 00 00 28 08 00 00 00 00 00 00 00  // .......(........
    1A50: 00 00 00 00 00 00 00 00 08 01 03 00 00 00 00 00  // ................
    1A60: 40 0D 03 00 07 02 00 07 03 00 00 25 0B 00 00 00  // @..........%....
    1A70: 00 00 00 00 00 00 00 00 00 00 00 00 08 01 04 00  // ................
    1A80: 00 00 00 00 40 0D 03 00 07 02 00 07 03 00 00 21  // ....@..........!
    1A90: 0F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AA0: 08 01 05 00 00 00 00 00 40 0D 03 00 07 02 00 07  // ........@.......
    1AB0: 03 00 02 2E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AC0: 00 00 00 00 08 01 06 00 00 00 00 00 40 0D 03 00  // ............@...
    1AD0: 07 02 00 07 03 00 02 2A 04 00 00 00 00 00 00 00  // .......*........
    1AE0: 00 00 00 00 00 00 00 00 08 01 07 00 00 00 00 00  // ................
    1AF0: 40 0D 03 00 07 02 00 07 03 00 02 26 08 00 00 00  // @..........&....
    1B00: 00 00 00 00 00 00 00 00 00 00 00 00 08 01 08 00  // ................
    1B10: 00 00 00 00 40 0D 03 00 07 02 00 07 03 00 02 23  // ....@..........#
    1B20: 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B30: 08 01 0A 00 00 00 00 00 40 0D 03 00 07 02 00 07  // ........@.......
    1B40: 03 00 04 2C 00 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    1B50: 00 00 00 00 08 01 0B 00 00 00 00 00 40 0D 03 00  // ............@...
    1B60: 07 02 00 07 03 00 04 28 04 00 00 00 00 00 00 00  // .......(........
    1B70: 00 00 00 00 00 00 00 00 08 01 0C 00 00 00 00 00  // ................
    1B80: 40 0D 03 00 07 02 00 07 03 00 04 25 07 00 00 00  // @..........%....
    1B90: 00 00 00 00 00 00 00 00 00 00 00 00 08 01 0D 00  // ................
    1BA0: 00 00 00 00 40 0D 03 00 07 02 00 07 03 00 04 21  // ....@..........!
    1BB0: 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BC0: 08 01 0E 00 00 00 00 00 40 0D 03 00 07 02 00 07  // ........@.......
    1BD0: 03 00 08 28 00 00 00 00 00 00 00 00 00 00 00 00  // ...(............
    1BE0: 00 00 00 00 08 01 0F 00 00 00 00 00 40 0D 03 00  // ............@...
    1BF0: 07 02 00 07 03 00 02 1C 02 00 00 00 00 00 00 00  // ................
    1C00: 00 00 00 00 00 00 00 00 08 01 09 00 00 00 00 00  // ................
    1C10: 40 0D 03 00 07 02 00 07 03 00 02 21 0D 00 00 00  // @..........!....
    1C20: 00 00 00 00 00 00 00 00 00 00 00 00 08 1E 07 00  // ................
    1C30: 00 00 00 00 40 0D 03 00 06 02 00 05 03 00 02 26  // ....@..........&
    1C40: 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C50: 08 1E 05 00 00 00 00 00 40 0D 03 00 06 02 00 05  // ........@.......
    1C60: 03 00 02 2E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C70: 00 00 00 00 08 1E 06 00 00 00 00 00 40 0D 03 00  // ............@...
    1C80: 06 02 00 05 03 00 02 2A 04 00 00 00 00 00 00 00  // .......*........
    1C90: 00 00 00 00 00 00 00 00 08 1E 00 00 00 00 00 00  // ................
    1CA0: 40 0D 03 00 06 02 00 05 03 00 00 30 00 00 00 00  // @..........0....
    1CB0: 00 00 00 00 00 00 00 00 00 00 00 00 08 1E 01 00  // ................
    1CC0: 00 00 00 00 40 0D 03 00 06 02 00 05 03 00 00 2B  // ....@..........+
    1CD0: 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CE0: 08 1E 02 00 00 00 00 00 40 0D 03 00 06 02 00 05  // ........@.......
    1CF0: 03 00 00 28 08 00 00 00 00 00 00 00 00 00 00 00  // ...(............
    1D00: 00 00 00 00 08 1E 03 00 00 00 00 00 40 0D 03 00  // ............@...
    1D10: 06 02 00 05 03 00 00 25 0B 00 00 00 00 00 00 00  // .......%........
    1D20: 00 00 00 00 00 00 00 00 08 1E 04 00 00 00 00 00  // ................
    1D30: 40 0D 03 00 06 02 00 05 03 00 00 21 0F 00 00 00  // @..........!....
    1D40: 00 00 00 00 00 00 00 00 00 00 00 00 50 00 03 01  // ............P...
    1D50: E8 03 00 00 B8 0B 00 00 00 00 00 00 7D 00 00 01  // ............}...
    1D60: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D70: E8 03 00 00 B8 0B 00 00 00 00 00 00 7D 00 00 01  // ............}...
    1D80: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D90: 00 00 00 00 00 00 00 00 00 00 00 00 D4 00 04 05  // ................
    1DA0: 00 01 00 00 24 F4 00 00 10 27 88 13 00 00 00 00  // ....$....'......
    1DB0: 00 00 00 00 5E 01 4E 0C 01 01 00 00 55 00 00 00  // ....^.N.....U...
    1DC0: 10 27 7E 74 02 03 04 01 00 05 05 00 B0 8F 06 00  // .'~t............
    1DD0: 2B 77 B7 2A 00 00 00 00 00 00 00 00 00 00 00 00  // +w.*............
    1DE0: 00 00 00 00 10 11 3D 10 7A 1C 02 00 00 45 00 00  // ......=.z....E..
    1DF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 AA 0A  // ................
    1E00: 22 22 02 00 00 F0 01 00 00 00 00 00 00 00 00 00  // ""..............
    1E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E70: AC 00 02 01 B5 5D 00 00 00 00 01 00 B5 5D 00 00  // .....].......]..
    1E80: 08 08 02 00 B5 5D 00 00 10 10 03 00 B5 5D 00 00  // .....].......]..
    1E90: 18 14 04 00 B5 5D 00 00 1A 18 05 00 91 5D 00 00  // .....].......]..
    1EA0: 08 08 90 00 95 5D 00 00 08 08 91 00 99 5D 00 00  // .....].......]..
    1EB0: 08 08 92 00 9D 5D 00 00 08 08 93 00 A1 5D 00 00  // .....].......]..
    1EC0: 08 08 94 00 A9 5D 00 00 08 08 97 00 89 5D 00 00  // .....].......]..
    1ED0: 00 00 08 00 89 5D 00 00 08 04 09 00 89 5D 00 00  // .....].......]..
    1EE0: 10 08 0A 00 89 5D 00 00 14 0C 0B 00 89 5D 00 00  // .....].......]..
    1EF0: 15 10 0C 00 89 5D 00 00 16 14 0D 00 B1 5D 00 00  // .....].......]..
    1F00: 00 00 10 00 B1 5D 00 00 08 08 11 00 B1 5D 00 00  // .....].......]..
    1F10: 10 10 13 00 B1 5D 00 00 18 18 14 00 C8 00 01 05  // .....]..........
    1F20: 88 06 04 00 13 31 48 00 21 21 00 00 00 00 00 00  // .....1H.!!......
    1F30: 08 00 00 00 13 32 68 00 1E 21 00 00 00 00 00 00  // .....2h..!......
    1F40: 80 00 00 00 13 33 88 00 1E 22 00 00 00 00 00 00  // .....3..."......
    1F50: 00 02 00 00 0C 34 A8 00 20 22 00 00 00 00 00 00  // .....4.. "......
    1F60: 00 04 00 00 01 04 94 00 02 04 05 00 03 04 00 00  // ................
    1F70: 04 08 BC 34 00 00 00 00 19 08 12 09 01 00 00 00  // ...4............
    1F80: FF 00 00 00 01 04 93 00 02 04 04 00 03 04 00 00  // ................
    1F90: 04 08 BC 34 00 00 00 00 19 08 12 09 02 00 00 00  // ...4............
    1FA0: FF 00 00 00 01 04 92 00 02 04 03 00 03 04 00 00  // ................
    1FB0: 04 08 BC 34 00 00 00 00 19 08 12 09 03 00 00 00  // ...4............
    1FC0: FF 00 00 00 01 04 90 00 02 04 01 00 03 04 00 00  // ................
    1FD0: 04 08 E0 2E 00 00 00 00 19 08 0F 07 04 00 00 00  // ................
    1FE0: FF 00 00 00 08 00 01 01 00 00 00 00 70 01 02 01  // ............p...
    1FF0: D6 09 80 02 A0 00 E0 01 2D 00 10 00 60 00 0A 00  // ........-...`...
    2000: 02 00 00 00 00 00 08 08 06 00 12 3C A0 0F 20 03  // ...........<.. .
    2010: 00 01 58 02 1C 00 28 00 80 00 01 00 04 00 00 00  // ..X...(.........
    2020: 00 00 00 00 00 00 6A 3C 64 19 00 04 40 01 00 03  // ......j<d...@...
    2030: 26 00 18 00 88 00 03 00 06 00 00 00 00 00 00 00  // &...............
    2040: 06 00 55 3C 01 1D 00 05 72 01 D0 02 1E 00 6E 00  // ..U<....r.....n.
    2050: 28 00 05 00 05 00 00 00 00 00 00 00 00 00 E8 3C  // (..............<
    2060: 30 2A 00 05 08 02 C0 03 28 00 60 00 70 00 01 00  // 0*......(.`.p...
    2070: 03 00 00 00 00 00 00 00 00 00 E9 3C 30 2A 00 05  // ...........<0*..
    2080: 98 01 00 04 2A 00 30 00 70 00 01 00 03 00 00 00  // ....*.0.p.......
    2090: 00 00 00 00 00 00 EA 3C 66 21 56 05 AA 01 00 03  // .......<f!V.....
    20A0: 1E 00 46 00 8F 00 03 00 03 00 00 00 00 00 00 00  // ..F.............
    20B0: 02 00 ED 3C 8F 2F 78 05 D0 01 1A 04 27 00 58 00  // ...<./x.....'.X.
    20C0: 90 00 03 00 04 00 00 00 00 00 00 00 02 00 EB 3C  // ...............<
    20D0: 48 3F 40 06 30 02 B0 04 32 00 40 00 C0 00 01 00  // H?@.0...2.@.....
    20E0: 03 00 00 00 00 00 00 00 00 00 EC 3C 02 3A 80 07  // ...........<.:..
    20F0: 18 01 38 04 2D 00 58 00 2C 00 04 00 05 00 00 00  // ..8.-.X.,.......
    2100: 00 00 00 00 02 00 F3 3C 7D 4B 80 07 A0 02 B0 04  // .......<}K......
    2110: 2D 00 88 00 C8 00 03 00 06 00 00 00 00 00 00 00  // -...............
    2120: 02 00 F0 3C 68 5B 80 07 A8 02 A0 05 3C 00 80 00  // ...<h[......<...
    2130: D0 00 01 00 03 00 00 00 00 00 00 00 02 00 F1 3C  // ...............<
    2140: 32 96 00 0A B0 03 40 06 3A 00 C0 00 18 01 03 00  // 2.....@.:.......
    2150: 06 00 00 00 00 00 00 00 02 00 F2 3C 34 00 02 01  // ...........<4...
    2160: 00 00 00 00 00 2A 00 2A 00 00 2A 2A 2A 00 00 2A  // .....*.*..***..*
    2170: 00 2A 2A 15 00 2A 2A 2A 15 15 15 15 15 3F 15 3F  // .**..***.....?.?
    2180: 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F 15 3F 3F 3F  // ..???..?.???.???
    2190: A4 00 01 01 10 01 06 12 11 01 16 12 21 01 0A 12  // ............!...
    21A0: 13 01 06 6A 14 01 16 6A 22 01 0A 6A 16 01 06 55  // ...j...j"..j...U
    21B0: 17 01 16 55 23 01 0A 55 63 01 16 E8 64 01 0A E8  // ...U#..Uc...d...
    21C0: 65 01 16 E9 66 01 0A E9 19 01 06 EA 1A 01 16 EA  // e...f...........
    21D0: 24 01 0A EA 47 01 16 ED 48 01 0A ED 45 01 16 EB  // $...G...H...E...
    21E0: 46 01 0A EB 75 01 16 EC 76 01 0A EC A5 01 16 F3  // F...u...v.......
    21F0: A6 01 0A F3 A0 01 16 F0 A1 01 0A F0 A2 01 16 F1  // ................
    2200: A3 01 0A F1 A4 01 16 F2 A5 01 0A F2 D2 01 16 70  // ...............p
    2210: D4 01 0A 70 D8 01 16 71 D9 01 0A 71 E2 01 16 72  // ...p...q...q...r
    2220: E4 01 0A 72 E8 01 16 73 E9 01 0A 73 F5 01 16 74  // ...r...s...s...t
    2230: F6 01 0A 74 18 00 02 02 02 00 20 00 08 00 80 00  // ...t...... .....
    2240: 00 02 00 04 00 08 40 00 FF FF FF FF 14 03 03 02  // ......@.........
    2250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C4 02  // ................
    2260: 24 50 53 50 D5 CB 63 C4 20 00 00 00 00 00 00 00  // $PSP..c. .......
    2270: 39 01 00 00 40 04 00 00 00 05 00 00 00 00 00 C0  // 9...@...........
    2280: 01 00 00 00 00 38 00 00 00 E0 03 00 00 00 00 C0  // .....8..........
    2290: 02 00 00 00 00 54 01 00 00 18 04 00 00 00 00 C0  // .....T..........
    22A0: 37 01 00 00 00 E2 00 00 00 00 02 00 00 00 00 C0  // 7...............
    22B0: 47 01 00 00 50 1B 00 00 00 26 02 00 00 00 00 C0  // G...P....&......
    22C0: 41 01 00 00 00 01 00 00 00 0F 00 00 00 00 00 C0  // A...............
    22D0: 01 10 00 00 00 20 01 00 00 5C 07 00 00 00 00 C0  // ..... ...\......
    22E0: 32 01 00 00 40 04 00 00 00 11 00 00 00 00 00 C0  // 2...@...........
    22F0: 42 01 00 00 08 00 00 00 08 24 02 00 00 00 00 C0  // B........$......
    2300: 09 10 00 00 00 C2 00 00 00 1A 00 00 00 00 00 C0  // ................
    2310: 0A 10 00 00 00 C2 00 00 00 DC 00 00 00 00 00 C0  // ................
    2320: 4B 00 00 00 00 80 00 00 00 CC 08 00 00 00 00 C0  // K...............
    2330: 0B 00 00 00 00 30 00 00 00 6C 05 00 00 00 00 C0  // .....0...l......
    2340: 3B 01 00 00 C0 00 00 00 00 10 00 00 00 00 00 C0  // ;...............
    2350: 40 00 00 00 00 D0 00 00 00 2C 06 00 00 00 00 C0  // @........,......
    2360: 1D 10 00 00 00 A4 00 00 00 8C 0B 00 00 00 00 C0  // ................
    2370: 5B 00 00 00 98 00 00 00 10 24 02 00 00 00 00 C0  // [........$......
    2380: 07 10 00 00 00 10 00 00 00 4C 09 00 00 00 00 C0  // .........L......
    2390: 3A 01 00 00 40 04 00 00 00 0A 00 00 00 00 00 C0  // :...@...........
    23A0: 4E 00 00 00 00 20 00 00 00 9C 05 00 00 00 00 C0  // N.... ..........
    23B0: 59 00 00 00 00 30 00 00 00 FC 05 00 00 00 00 C0  // Y....0..........
    23C0: 1B 10 00 00 00 00 01 00 00 30 0C 00 00 00 00 C0  // .........0......
    23D0: 5C 00 00 00 00 60 00 00 00 FC 06 00 00 00 00 C0  // \....`..........
    23E0: 33 01 00 00 00 18 00 00 00 30 0D 00 00 00 00 C0  // 3........0......
    23F0: 55 00 00 00 00 10 00 00 00 BC 05 00 00 00 00 C0  // U...............
    2400: 5E 00 00 00 00 30 00 00 00 CC 05 00 00 00 00 C0  // ^....0..........
    2410: 05 10 00 00 00 30 02 00 00 5C 09 00 00 00 00 C0  // .....0...\......
    2420: 31 01 00 00 00 50 00 00 00 7C 08 00 00 00 00 C0  // 1....P...|......
    2430: 44 01 00 00 00 00 01 00 00 00 1E 00 00 00 00 00  // D...............
    2440: 45 01 00 00 00 04 00 00 00 16 00 00 00 00 00 C0  // E...............
    2450: 46 01 00 00 00 18 00 00 00 48 0D 00 00 00 00 C0  // F........H......
    2460: 3A 20 00 00 00 50 00 00 00 9E 01 00 00 00 00 C0  // : ...P..........
    2470: 01 00 00 00 00 00 00 00 00 02 00 00 00 05 10 00  // ................
    2480: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    2490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2510: 4E 41 56 49 33 32 5F 50 52 4F 44 55 43 54 49 4F  // NAVI32_PRODUCTIO
    2520: 4E 5F 41 4D 44 5F 50 52 44 30 30 37 5F 45 5F 30  // N_AMD_PRD007_E_0
    2530: 30 30 32 31 31 2E 73 62 69 6E 00 00 00 00 00 00  // 00211.sbin......
    2540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2560: 30 00 02 02 00 00 00 00 00 00 00 00 00 00 00 00  // 0...............
    2570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    25F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2660: 00 00 00 00 00 00 00 00 56 42 4C 5F 44 41 54 41  // ........VBL_DATA
    2670: 5F 54 41 42 4C 45 00 00 41 54 4F 4D 50 19 00 00  // _TABLE..ATOMP...
    2680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2690: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    26A0: 6D C3 6D 53 00 95 47 2C 99 53 EB 8E B8 43 19 39  // m.mS..G,.S...C.9
    26B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26C0: 47 01 00 01 00 00 00 00 19 01 02 16 00 00 00 00  // G...............
    26D0: 00 00 00 00 50 1B 00 00 00 00 00 00 00 00 00 00  // ....P...........
    26E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2700: 00 00 00 00 00 00 00 00 31 32 2F 30 34 2F 32 33  // ........12/04/23
    2710: 2C 32 32 3A 32 31 3A 31 36 00 00 00 00 00 00 00  // ,22:21:16.......
    2720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2730: 00 00 00 00 00 00 00 00 BE B8 31 CA 0F D0 14 E7  // ..........1.....
    2740: 54 84 3B 89 0D 8D A6 70 B0 43 F0 7D B7 0A 55 78  // T.;....p.C.}..Ux
    2750: BD 1A 07 9D FE 3D E1 F5 00 00 00 00 00 00 00 00  // .....=..........
    2760: 00 00 00 00 00 00 00 00 4A 00 02 01 00 00 00 00  // ........J.......
    2770: 80 01 00 00 14 01 00 00 00 00 00 00 4C 03 00 00  // ............L...
    2780: 00 00 00 00 00 00 00 00 6C 04 00 00 00 00 00 00  // ........l.......
    2790: F4 04 00 00 00 00 00 00 4C 00 00 00 5C 05 00 00  // ........L...\...
    27A0: 00 00 00 00 A0 05 00 00 00 00 00 00 8C 17 58 18  // ..............X.
    27B0: 00 00 00 00 C8 00 01 05 88 06 04 00 13 31 48 00  // .............1H.
    27C0: 21 21 00 00 00 00 00 00 08 00 00 00 13 32 68 00  // !!...........2h.
    27D0: 1E 21 00 00 00 00 00 00 80 00 00 00 13 33 88 00  // .!...........3..
    27E0: 1E 22 00 00 00 00 00 00 00 02 00 00 0C 34 A8 00  // ."...........4..
    27F0: 20 22 00 00 00 00 00 00 00 04 00 00 01 04 94 00  //  "..............
    2800: 02 04 05 00 03 04 00 00 04 08 BC 34 00 00 00 00  // ...........4....
    2810: 19 08 12 09 01 00 00 00 FF 00 00 00 01 04 93 00  // ................
    2820: 02 04 04 00 03 04 00 00 04 08 BC 34 00 00 00 00  // ...........4....
    2830: 19 08 12 09 02 00 00 00 FF 00 00 00 01 04 92 00  // ................
    2840: 02 04 03 00 03 04 00 00 04 08 BC 34 00 00 00 00  // ...........4....
    2850: 19 08 12 09 03 00 00 00 FF 00 00 00 01 04 90 00  // ................
    2860: 02 04 01 00 03 04 00 00 04 08 E0 2E 00 00 00 00  // ................
    2870: 19 08 0F 07 04 00 00 00 FF 00 00 00 6C 00 03 04  // ............l...
    2880: 19 01 02 16 00 00 00 00 84 B2 00 00 01 40 10 00  // .............@..
    2890: 00 00 00 00 4C 00 00 00 BC 02 EE 02 46 05 00 00  // ....L.......F...
    28A0: 00 00 01 00 80 00 00 00 00 00 00 00 02 97 CE 00  // ................
    28B0: 00 00 00 00 00 00 00 00 B0 10 00 00 E8 03 00 00  // ................
    28C0: 84 03 84 03 46 05 84 03 00 00 00 00 00 00 00 00  // ....F...........
    28D0: 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    28E0: 00 00 20 00 88 06 60 16 CC 01 05 00 60 38 00 00  // .. ...`.....`8..
    28F0: 00 01 00 00 00 01 00 00 00 01 00 00 01 02 00 00  // ................
    2900: 00 01 00 00 02 03 00 00 00 01 00 00 03 04 00 00  // ................
    2910: 00 01 00 00 04 05 00 00 00 01 00 00 05 06 00 00  // ................
    2920: 00 01 00 00 08 0A 02 00 00 01 00 01 07 08 04 00  // ................
    2930: 00 00 00 00 00 00 00 00 05 01 04 03 02 02 03 03  // ................
    2940: 03 03 00 00 00 00 00 01 01 01 01 01 00 00 00 00  // ................
    2950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2960: 00 00 01 00 00 00 01 00 00 00 01 00 00 00 01 00  // ................
    2970: 00 00 01 00 00 00 00 00 00 FF 22 29 FF 00 FF 00  // ..........")....
    2980: FF 00 FF FF FF 00 FF FF 00 00 1F 00 10 10 00 00  // ................
    2990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00  // ................
    29A0: 10 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    29B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    29C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    29D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    29E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    29F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2AB0: 00 00 00 00 20 01 04 00 C0 D4 01 00 A0 86 01 00  // .... ...........
    2AC0: 40 9C 00 00 10 27 00 00 B0 8F 06 00 A0 68 06 00  // @....'.......h..
    2AD0: FF 00 EE 02 D0 DD 06 00 50 C3 00 00 60 EA 00 00  // ........P...`...
    2AE0: 40 19 01 00 D4 C6 00 00 F8 F2 00 00 98 02 01 00  // @...............
    2AF0: 00 00 00 00 00 00 00 00 D0 DD 06 00 A0 86 01 00  // ................
    2B00: 00 00 00 00 02 08 00 00 00 00 00 00 F3 17 01 00  // ................
    2B10: 80 06 01 00 00 00 00 00 33 33 81 01 7D 1A 09 96  // ........33..}...
    2B20: 30 14 C9 02 00 00 00 00 00 00 00 00 00 00 00 00  // 0...............
    2B30: 88 13 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2B40: 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00  // ................
    2B50: 7D 1F 1E 96 05 80 00 00 FF FF 0F 00 71 00 FF 2F  // }...........q../
    2B60: 4D 00 00 A5 70 3D 29 0A 9C A4 0D 20 20 95 87 00  // M...p=)....  ...
    2B70: 19 04 00 00 50 C3 00 00 30 75 00 00 C8 AF 00 00  // ....P...0u......
    2B80: 30 75 00 00 C8 AF 00 00 40 9C 00 00 C0 D4 01 00  // 0u......@.......
    2B90: 70 11 01 00 00 00 00 00 00 00 00 00 00 00 00 00  // p...............
    2BA0: 00 00 00 00 00 00 00 00 FF FF FF FF 64 00 00 00  // ............d...
    2BB0: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2BD0: 00 00 00 00 88 00 03 00 00 0B 03 00 0A 02 04 02  // ................
    2BE0: 83 14 01 00 84 14 01 00 85 14 01 00 86 14 01 00  // ................
    2BF0: 6F 14 01 00 32 14 01 00 2E 6A 01 00 10 27 00 00  // o...2....j...'..
    2C00: 0A 04 03 00 FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    2C10: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C50: 00 00 00 00 00 00 00 00 00 00 00 00 68 00 02 03  // ............h...
    2C60: 00 00 00 00 00 00 00 00 08 00 00 00 08 00 00 00  // ................
    2C70: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2CB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2CC0: 00 00 00 00 44 00 03 03 00 00 00 00 00 1A 00 00  // ....D...........
    2CD0: 00 C2 00 00 00 00 00 00 00 00 4E 0C 0A 08 70 00  // ..........N...p.
    2CE0: 10 27 00 00 84 B2 00 00 84 B2 00 00 84 B2 00 00  // .'..............
    2CF0: 84 B2 00 00 00 00 00 00 03 F1 88 00 00 00 00 00  // ................
    2D00: FF FF FF FF 00 00 00 00 EA 11 03 00 F8 07 C8 00  // ................
    2D10: 00 10 16 10 1A 10 00 00 00 00 00 00 02 0A 08 08  // ................
    2D20: 70 10 04 00 FF FF 00 00 00 00 00 00 00 00 00 00  // p...............
    2D30: 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00  // ................
    2D40: 00 00 00 00 00 00 00 00 72 00 00 01 C8 00 F8 07  // ........r.......
    2D50: 00 10 00 00 00 04 00 00 00 00 00 00 00 00 00 00  // ................
    2D60: 00 00 00 00 4B 34 5A 41 46 33 32 35 42 43 00 00  // ....K4ZAF325BC..
    2D70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2D80: 00 00 00 00 00 00 00 00 00 00 00 00 72 01 01 06  // ............r...
    2D90: E0 04 FC 0B 00 00 00 00 00 04 00 00 00 00 00 00  // ................
    2DA0: 00 00 00 00 00 00 00 00 48 35 36 47 34 32 41 53  // ........H56G42AS
    2DB0: 38 44 58 30 31 34 00 00 00 00 00 00 00 00 00 00  // 8DX014..........
    2DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2DD0: 00 03 18 04 10 00 91 02 00 00 00 04 00 00 04 00  // ................
    2DE0: C0 00 0A 08 00 00 40 00 A8 61 00 00 09 05 08 0D  // ......@..a......
    2DF0: DC 02 22 11 03 05 05 05 02 02 05 03 03 08 02 02  // ..".............
    2E00: 01 0A 0A 0A 0A 02 02 0A 0A 22 03 22 48 E8 01 00  // ........."."H...
    2E10: 0A 0C 0A 02 02 04 0A 10 15 01 08 09 04 04 01 00  // ................
    2E20: 00 00 00 7D 00 00 00 00 50 C3 00 00 0B 05 0F 17  // ...}....P.......
    2E30: B8 05 3C 1E 04 08 08 08 02 02 08 04 04 08 02 02  // ..<.............
    2E40: 01 0A 0A 0A 0A 02 02 0A 0A 3C 05 3C 90 D0 03 00  // .........<.<....
    2E50: 0A 0C 0A 02 02 04 0A 12 1B 01 07 09 04 07 01 00  // ................
    2E60: 00 00 00 87 00 00 00 00 CC 55 01 00 10 06 1B 29  // .........U.....)
    2E70: 02 0A 6A 35 07 0E 0E 0E 03 03 0E 06 06 0C 02 02  // ..j5............
    2E80: 02 0B 0A 0A 0A 02 02 0A 0A 6A 09 6A FC AC 06 00  // .........j.j....
    2E90: 0A 0C 0A 02 02 04 0A 18 28 01 09 0A 04 0C 01 00  // ........(.......
    2EA0: 00 00 00 87 00 00 00 00 A0 86 01 00 11 06 1E 2D  // ...............-
    2EB0: 71 0B 78 3C 08 0F 0F 0F 03 03 0F 06 06 0C 02 02  // q.x<............
    2EC0: 02 0C 0A 0A 0A 02 02 0A 0A 78 0A 78 20 A1 07 00  // .........x.x ...
    2ED0: 0A 0C 0A 02 02 04 0A 19 2A 01 09 0A 04 0D 01 00  // ........*.......
    2EE0: 00 00 00 87 00 00 00 00 48 E8 01 00 15 08 26 39  // ........H.....&9
    2EF0: 4D 0E 96 4B 0A 13 13 13 03 03 13 07 07 0C 02 02  // M..K............
    2F00: 03 0D 0D 0A 0A 02 02 0D 0D 96 0D 96 68 89 09 00  // ............h...
    2F10: 0D 0C 0A 02 02 05 0D 1E 34 01 0E 0C 04 10 01 00  // ........4.......
    2F20: 00 00 00 87 00 00 00 00 40 13 02 00 16 08 2A 3E  // ........@.....*>
    2F30: 8F 0F A5 53 0B 15 15 15 04 04 15 08 08 10 02 02  // ...S............
    2F40: 03 0E 0E 0A 0A 02 02 0E 0E A5 0E A5 C8 73 0A 00  // .............s..
    2F50: 0E 0C 0A 02 02 06 0E 1F 38 01 0E 0C 04 12 01 00  // ........8.......
    2F60: 00 00 00 87 00 00 00 00 78 5D 02 00 18 08 2D 44  // ........x]....-D
    2F70: BB 11 B4 5A 0C 17 17 17 04 04 17 08 08 10 02 02  // ...Z............
    2F80: 03 0E 0F 0A 0A 02 02 0F 0F B4 0F B4 B0 71 0B 00  // .............q..
    2F90: 0F 0C 0A 02 02 06 0F 21 3C 01 0E 0C 04 13 01 00  // .......!<.......
    2FA0: 00 00 00 87 00 00 00 00 20 BF 02 00 1B 08 34 4E  // ........ .....4N
    2FB0: 98 14 D2 69 0E 1B 1B 1A 04 04 1B 09 09 10 02 02  // ...i............
    2FC0: 03 0F 12 0A 0A 02 02 12 12 D2 12 D2 F8 59 0D 00  // .............Y..
    2FD0: 12 0C 0A 02 02 07 12 24 43 01 0E 0C 04 16 01 00  // .......$C.......
    2FE0: 00 00 00 87 00 00 00 00 B0 24 03 00 1E 08 3C 5A  // .........$....<Z
    2FF0: 91 17 F0 78 10 1E 1E 1E 05 05 1E 0A 0A 14 02 02  // ...x............
    3000: 03 10 14 0A 0A 02 02 14 14 F0 14 F0 40 42 0F 00  // ............@B..
    3010: 14 0C 0A 02 02 08 14 27 4A 01 0E 0C 04 19 01 00  // .......'J.......
    3020: 00 00 00 87 00 00 00 00 78 89 03 00 22 09 44 66  // ........x...".Df
    3030: 85 1A 0E 87 12 22 22 22 06 06 22 0B 0B 18 02 02  // ....."""..".....
    3040: 03 12 17 0A 0A 02 02 17 17 0E 17 0E 88 2A 11 00  // .............*..
    3050: 17 0C 0A 02 02 09 17 2B 53 01 10 0D 04 1D 01 01  // .......+S.......
    3060: 01 01 00 87 00 00 00 00 78 BB 03 00 23 09 47 6B  // ........x...#.Gk
    3070: FC 1B 1D 8F 13 24 24 24 06 06 22 0C 0C 18 02 02  // .....$$$..".....
    3080: 03 13 18 0B 0B 02 02 18 18 1D 18 1D AC 1E 12 00  // ................
    3090: 18 0D 0B 02 02 09 18 2C 56 02 10 0D 04 65 01 01  // .......,V....e..
    30A0: 01 01 00 87 00 00 00 00 DC ED 03 00 25 09 4B 71  // ............%.Kq
    30B0: 76 1D 2C 96 14 26 26 26 06 06 23 0C 0C 18 02 02  // v.,..&&&..#.....
    30C0: 03 13 19 0B 0B 02 02 19 19 2C 19 2C D0 12 13 00  // .........,.,....
    30D0: 19 0D 0B 02 02 0A 19 2E 5A 02 10 0D 04 6A 01 01  // ........Z....j..
    30E0: 01 01 00 87 00 00 00 00 40 20 04 00 27 0A 4F 77  // ........@ ..'.Ow
    30F0: F0 1E 3B 9E 15 28 28 28 07 07 28 0D 0F 1C 02 04  // ..;..(((..(.....
    3100: 03 14 1B 0B 0B 02 04 1B 1B 3B 1B 3B F4 06 14 00  // .........;.;....
    3110: 1B 0D 0B 02 02 0B 1B 30 60 02 13 0E 04 70 01 01  // .......0`....p..
    3120: 01 01 00 87 00 00 00 00 A4 52 04 00 28 0A 52 7C  // .........R..(.R|
    3130: 6A 20 4A A5 16 2A 2A 2A 07 07 2A 0D 0F 1C 02 04  // j J..***..*.....
    3140: 04 14 1C 0B 0B 02 04 1C 1C 4A 1C 4A 18 FB 14 00  // .........J.J....
    3150: 1C 0D 0B 02 02 0B 1C 32 64 02 13 0E 04 75 01 01  // .......2d....u..
    3160: 01 01 00 87 00 00 00 00 A4 84 04 00 2A 0A 56 82  // ............*.V.
    3170: E1 21 59 AD 17 2C 2C 2C 07 07 2C 0E 10 1C 02 04  // .!Y..,,,..,.....
    3180: 04 15 1D 0C 0C 02 04 1D 1D 59 1D 59 3C EF 15 00  // .........Y.Y<...
    3190: 1D 0E 0C 02 02 0C 1D 34 68 02 13 0E 04 7A 01 01  // .......4h....z..
    31A0: 01 01 00 87 00 00 00 00 08 B7 04 00 2C 0A 5A 87  // ............,.Z.
    31B0: 5B 23 68 B4 18 2D 2D 2D 07 07 2D 0E 10 1C 02 04  // [#h..---..-.....
    31C0: 04 15 1E 0C 0C 02 04 1E 1E 68 1E 68 60 E3 16 00  // .........h.h`...
    31D0: 1E 0E 0C 02 02 0C 1E 36 6A 02 13 0E 04 7F 01 01  // .......6j.......
    31E0: 01 01 00 87 00 00 00 00 00 03 18 03 0C 00 16 02  // ................
    31F0: 00 00 00 04 00 00 04 00 C0 00 0A 08 00 04 40 00  // ..............@.
    3200: B0 4F 00 00 09 05 06 0A 82 01 19 0D 08 04 03 04  // .O..............
    3210: 02 02 04 04 04 08 02 03 00 00 03 0A 0A 02 03 04  // ................
    3220: 08 19 03 1C 82 8B 01 00 03 0C 0A 02 02 04 08 0D  // ................
    3230: 10 01 02 09 04 04 06 00 00 00 00 7D 00 00 00 00  // ...........}....
    3240: 50 C3 00 00 10 05 0E 16 B6 03 3C 1E 08 08 06 08  // P.........<.....
    3250: 02 02 08 05 05 08 02 03 01 0A 05 0A 0A 02 03 04  // ................
    3260: 08 3C 05 44 90 D0 03 00 05 0C 0A 02 02 04 08 15  // .<.D............
    3270: 18 01 02 0A 04 0A 06 00 00 00 00 7D 00 00 00 00  // ...........}....
    3280: CC 55 01 00 10 05 16 24 7F 06 69 35 08 0E 0B 0E  // .U.....$..i5....
    3290: 03 03 0E 07 07 0C 02 03 01 0D 09 0A 0A 02 03 04  // ................
    32A0: 08 69 09 77 FC AC 06 00 09 0C 0A 02 02 04 08 15  // .i.w............
    32B0: 24 01 02 0C 04 11 06 00 00 00 00 87 00 00 00 00  // $...............
    32C0: A0 86 01 00 12 06 19 28 6C 07 78 3C 08 0F 0C 0F  // .......(l.x<....
    32D0: 03 03 0F 07 07 0C 02 03 01 0D 0A 0A 0A 02 03 04  // ................
    32E0: 08 78 0A 87 20 A1 07 00 0A 0C 0A 02 02 04 08 17  // .x.. ...........
    32F0: 27 01 02 0D 04 13 06 00 00 00 00 87 00 00 00 00  // '...............
    3300: 48 E8 01 00 14 06 20 33 47 09 96 4B 0D 13 0F 13  // H..... 3G..K....
    3310: 04 04 13 09 09 10 02 03 02 0E 0D 0A 0A 02 03 05  // ................
    3320: 0A 96 0D A9 68 89 09 00 0D 0C 0A 02 02 05 0A 1A  // ....h...........
    3330: 2F 01 02 0F 04 18 06 00 00 00 00 87 00 00 00 00  // /...............
    3340: 1C 19 02 00 15 06 23 38 35 0A A5 53 0E 15 11 15  // ......#85..S....
    3350: 04 04 15 09 09 10 02 03 02 0E 0E 0A 0A 02 03 06  // ................
    3360: 0B A5 0E BA 8C 7D 0A 00 0E 0C 0A 02 02 06 0B 1B  // .....}..........
    3370: 34 01 02 10 04 1B 06 00 00 00 00 87 00 00 00 00  // 4...............
    3380: C4 7A 02 00 17 06 29 42 10 0C C3 62 11 19 14 19  // .z....)B...b....
    3390: 05 05 19 0B 0B 14 02 03 02 0E 11 0A 0A 02 03 07  // ................
    33A0: 0D C3 11 DC D4 65 0C 00 11 0C 0A 02 02 07 0D 1D  // .....e..........
    33B0: 3C 01 02 12 04 1F 06 00 00 00 00 87 00 00 00 00  // <...............
    33C0: 20 BF 02 00 18 06 2C 47 5C 0D D2 69 12 1B 15 1B  //  .....,G\..i....
    33D0: 05 05 1B 0B 0B 14 02 03 02 0E 12 0A 0A 02 03 07  // ................
    33E0: 0E D2 12 ED F8 59 0D 00 12 0C 0A 02 02 07 0E 1E  // .....Y..........
    33F0: 40 01 02 12 04 22 06 00 00 00 00 87 00 00 00 00  // @...."..........
    3400: B0 24 03 00 1A 06 32 50 4A 0F F0 78 14 1E 18 1E  // .$....2PJ..x....
    3410: 06 06 1E 0C 0C 18 02 03 02 0E 14 0A 0A 02 03 08  // ................
    3420: 10 F0 14 0E 40 42 0F 00 14 0C 0A 02 02 08 10 20  // ....@B......... 
    3430: 46 01 02 13 04 26 06 00 00 01 00 87 00 00 00 00  // F....&..........
    3440: 78 89 03 00 1B 06 39 5B 34 11 0E 87 17 22 1B 22  // x.....9[4...."."
    3450: 06 06 22 0E 0E 18 02 03 02 0E 17 0A 0A 02 03 09  // ..".............
    3460: 12 0E 17 30 88 2A 11 00 17 0C 0A 02 02 09 12 21  // ...0.*.........!
    3470: 4E 01 02 15 04 2B 06 01 01 01 00 87 00 00 00 00  // N....+..........
    3480: 78 BB 03 00 1C 06 3C 60 27 12 1D 8F 18 24 1D 24  // x.....<`'....$.$
    3490: 07 07 24 0E 0E 1C 02 03 02 0E 18 0A 0A 02 03 0A  // ..$.............
    34A0: 13 1D 18 41 AC 1E 12 00 18 0C 0A 02 02 0A 13 22  // ...A..........."
    34B0: 53 01 02 16 04 2E 06 01 01 01 00 87 00 00 00 00  // S...............
    34C0: DC ED 03 00 1C 06 3F 65 1D 13 2C 96 19 26 1E 26  // ......?e..,..&.&
    34D0: 07 07 26 0F 0F 1C 02 03 02 0E 19 0A 0A 02 03 0A  // ..&.............
    34E0: 14 2C 19 52 D0 12 13 00 19 0C 0A 02 02 0A 14 22  // .,.R..........."
    34F0: 57 01 02 17 04 30 06 01 01 01 00 87 00 00 00 00  // W....0..........
    3500: 00 03 04 04 00 00 0D 00 DB 00 02 00 0C 08 00 00  // ................
    3510: 23 00 00 00 00 00 09 09 00 04 00 00 00 00 00 00  // #...............
    3520: 00 00 00 00 00 00 0D 00 DB 00 02 00 0C 08 00 00  // ................
    3530: 23 00 00 00 00 00 09 09 00 04 00 00 00 00 00 00  // #...............
    3540: 00 00 00 00 00 00 0D 00 DB 00 02 00 0C 08 00 00  // ................
    3550: 23 00 00 00 00 00 09 09 00 04 00 00 00 00 00 00  // #...............
    3560: 00 00 00 00 00 00 08 00 C0 00 00 00 0C 00 00 00  // ................
    3570: 23 00 08 01 00 00 09 09 00 08 00 00 00 00 00 00  // #...............
    3580: 00 00 00 00 1B 26 20 00 00 00 00 00 00 00 00 00  // .....& .........
    3590: 00 00 00 00 00 00 00 00 00 28 E5 0F 00 14 00 00  // .........(......
    35A0: 00 14 00 00 00 14 00 00 00 14 00 00 00 14 00 00  // ................
    35B0: 00 14 00 00 00 14 00 00 00 14 00 00 00 00 00 00  // ................
    35C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    35D0: 00 00 00 00 00 00 00 00 00 00 00 00 06 B0 78 F0  // ..............x.
    35E0: 02 01 7C 78 00 00 00 00 00 00 00 00 FF FF 00 00  // ..|x............
    35F0: A1 03 67 00 00 03 63 00 00 03 63 01 00 00 20 00  // ..g...c...c... .
    3600: 9E 00 64 00 46 44 48 44 00 00 08 00 00 00 08 00  // ..d.FDHD........
    3610: 17 10 60 53 13 30 80 00 0F 00 00 40 00 00 00 00  // ..`S.0.....@....
    3620: 00 00 00 00 20 40 04 00 00 00 50 50 01 10 06 00  // .... @....PP....
    3630: 99 89 08 83 60 00 20 08 38 38 22 46 00 00 FF 6D  // ....`. .88"F...m
    3640: BB 00 00 1B 23 88 07 00 00 00 00 00 00 00 00 00  // ....#...........
    3650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3660: 00 00 00 00 00 00 00 00 00 F1 44 0D 00 00 8C C0  // ..........D.....
    3670: 00 00 03 40 C0 04 00 00 00 00 03 01 00 00 00 00  // ...@............
    3680: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    36A0: 03 58 00 00 00 00 00 00 00 00 00 00 CF 67 28 04  // .X...........g(.
    36B0: 00 00 00 00 18 00 04 50 00 00 00 00 00 00 00 00  // .......P........
    36C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    36D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    36E0: 00 00 00 00 00 00 00 00 10 10 20 20 01 01 01 01  // ..........  ....
    36F0: 3F 3F 03 00 7A 32 22 01 06 06 00 00 3C 18 10 00  // ??..z2".....<...
    3700: 00 00 00 00 01 01 00 0A 00 00 00 00 03 00 00 00  // ................
    3710: 03 03 03 03 7C 3C 3C 0C 00 00 00 02 00 00 00 00  // ....|<<.........
    3720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3770: 00 00 00 00 1C 03 8E 03 AA 02 8E 03 E3 00 AA 02  // ................
    3780: E3 00 71 00 E3 00 71 00 55 01 71 00 1C 03 55 01  // ..q...q.U.q...U.
    3790: 1C 03 8E 03 CF 00 30 FF FF 0C 00 F3 00 80 01 90  // ......0.........
    37A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    37B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    37C0: 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00  // ................
    37D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 08 80 01  // ................
    37E0: 05 00 00 00 0E 10 00 40 3F FF 3F 0F 00 00 00 00  // .......@?.?.....
    37F0: 03 00 03 00 03 00 03 00 03 00 03 00 03 00 03 00  // ................
    3800: 03 00 03 00 03 00 03 00 03 00 03 00 03 00 03 00  // ................
    3810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3820: 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3830: 02 00 00 00 29 00 00 00 1C 00 00 00 29 00 00 00  // ....).......)...
    3840: 1C 00 00 00 00 00 00 00 10 00 00 00 07 00 00 00  // ................
    3850: 07 00 00 00 38 00 00 00 1B 00 00 00 38 00 00 00  // ....8.......8...
    3860: 1B 00 00 00 22 00 00 00 16 00 00 00 00 00 00 00  // ...."...........
    3870: 00 00 00 00 07 00 3F 15 01 00 00 00 07 00 00 00  // ......?.........
    3880: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    38A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    38B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    38C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    38D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    38E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    38F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3900: 00 00 00 00 00 03 04 04 00 00 0D 00 DB 00 01 00  // ................
    3910: 0C 08 00 00 28 00 00 00 00 00 0E 0E 00 04 00 00  // ....(...........
    3920: 00 00 00 00 00 00 00 00 00 00 0D 00 DB 00 01 00  // ................
    3930: 0C 08 00 00 28 00 00 00 00 00 0E 0E 00 04 00 00  // ....(...........
    3940: 00 00 00 00 00 00 00 00 00 00 0D 00 DB 00 01 00  // ................
    3950: 0C 08 00 00 28 00 08 00 00 00 0E 0E 00 04 00 00  // ....(...........
    3960: 00 00 00 00 00 00 00 00 00 00 08 00 C0 00 00 00  // ................
    3970: 0C 00 00 00 23 00 08 01 00 00 0E 0E 00 08 00 00  // ....#...........
    3980: 00 00 00 00 00 00 00 00 1B 26 20 00 0F 00 00 00  // .........& .....
    3990: 00 00 00 00 00 00 00 00 00 00 00 00 00 28 E5 0F  // .............(..
    39A0: 00 14 00 00 00 14 00 00 00 14 00 00 00 14 00 00  // ................
    39B0: 00 14 00 00 00 14 00 00 00 14 00 00 00 14 00 00  // ................
    39C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    39D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    39E0: 06 B0 78 F0 02 01 7C 78 00 00 00 00 00 00 00 00  // ..x...|x........
    39F0: FF FF 00 00 A1 03 63 00 00 03 63 00 00 03 63 01  // ......c...c...c.
    3A00: 00 00 20 00 9E 00 64 00 46 44 48 44 00 00 08 00  // .. ...d.FDHD....
    3A10: 00 00 08 00 17 10 60 53 13 30 80 00 0E 00 00 40  // ......`S.0.....@
    3A20: 00 00 00 00 00 00 00 00 20 40 04 03 00 00 50 50  // ........ @....PP
    3A30: 01 10 06 00 99 89 08 83 60 00 20 00 3A 3A 22 41  // ........`. .::"A
    3A40: 02 04 FF 6D BB 00 00 1B 23 8F 09 00 00 00 00 00  // ...m....#.......
    3A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 F1 44 0D  // ..............D.
    3A70: 00 00 8C C0 00 00 03 40 C0 04 00 00 00 00 03 01  // .......@........
    3A80: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    3A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3AA0: 00 00 00 00 03 58 00 00 00 00 00 00 00 00 00 00  // .....X..........
    3AB0: CF 67 28 04 00 00 00 00 18 00 04 50 00 00 00 00  // .g(........P....
    3AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3AE0: 00 00 00 00 00 00 00 00 00 00 00 00 10 10 20 20  // ..............  
    3AF0: 01 01 01 01 3F 3F 03 00 7A 32 22 01 06 06 00 00  // ....??..z2".....
    3B00: 3F 18 10 00 00 00 00 00 F1 01 00 0A 00 00 00 00  // ?...............
    3B10: 03 00 00 00 03 03 03 03 3C 3C 3C 0C 00 00 00 02  // ........<<<.....
    3B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3B70: 00 00 00 00 00 00 00 00 1C 03 8E 03 AA 02 8E 03  // ................
    3B80: E3 00 AA 02 E3 00 71 00 E3 00 71 00 55 01 71 00  // ......q...q.U.q.
    3B90: 1C 03 55 01 1C 03 8E 03 CF 00 30 FF FF 0C 00 F3  // ..U.......0.....
    3BA0: 00 80 01 90 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3BC0: 00 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00  // ................
    3BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3BE0: 00 08 80 01 05 00 00 00 0E 10 00 40 3F FF 3F 0F  // ...........@?.?.
    3BF0: 00 00 00 00 00 02 00 02 00 02 00 02 00 02 00 02  // ................
    3C00: 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00 02  // ................
    3C10: 00 02 00 02 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3C20: 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00  // ................
    3C30: 00 00 00 00 02 00 00 00 29 00 00 00 1C 00 00 00  // ........).......
    3C40: 29 00 00 00 1C 00 00 00 00 00 00 00 10 00 00 00  // )...............
    3C50: 07 00 00 00 07 00 00 00 3A 00 00 00 1B 00 00 00  // ........:.......
    3C60: 3A 00 00 00 1B 00 00 00 22 00 00 00 1B 00 00 00  // :.......".......
    3C70: 00 00 00 00 00 00 00 00 07 00 3F 15 01 00 00 00  // ..........?.....
    3C80: 07 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00  // ................
    3C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3CB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3CD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3CF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3D00: 00 00 00 00 00 00 00 00 00 00 09 00 33 03 20 23  // ............3. #
    3D10: 22 26 32 26 37 23 18 27 19 27 40 13 29 F5 00 00  // "&2&7#.'.'@.)...
    3D20: 00 00 D0 01 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3D30: 00 00 01 00 00 00 32 45 76 01 54 01 32 76 88 00  // ......2Ev.T.2v..
    3D40: 00 00 94 65 73 80 21 AB 00 00 00 00 00 00 01 00  // ...es.!.........
    3D50: 00 00 37 04 62 15 26 31 05 47 88 00 00 00 14 82  // ..7.b.&1.G......
    3D60: 09 35 67 AB 00 00 00 00 00 00 01 00 00 00 05 73  // .5g............s
    3D70: 12 64 12 60 45 73 88 00 00 00 54 82 70 63 91 AB  // .d.`Es....T.pc..
    3D80: 00 00 00 00 00 00 01 00 00 00 57 12 60 34 63 47  // ..........W.`4cG
    3D90: 01 52 88 00 00 00 07 85 14 69 23 AB 00 00 00 00  // .R.......i#.....
    3DA0: 00 00 01 00 00 00 12 46 35 07 20 31 64 57 88 00  // .......F5. 1dW..
    3DB0: 00 00 21 79 53 80 46 AB 00 00 00 00 00 00 01 00  // ..!yS.F.........
    3DC0: 00 00 21 40 56 73 62 74 35 01 88 00 00 00 79 48  // ..!@Vsbt5.....yH
    3DD0: 20 65 13 AB 00 00 00 00 00 00 04 00 00 00 27 36  //  e............'6
    3DE0: 41 50 36 12 40 57 88 00 00 00 31 68 52 90 47 AB  // AP6.@W....1hR.G.
    3DF0: 00 00 00 02 00 00 01 00 00 00 53 24 10 67 05 31  // ..........S$.g.1
    3E00: 64 27 88 00 00 00 96 07 82 54 31 AB 00 00 00 00  // d'.......T1.....
    3E10: 00 00 01 00 00 00 61 02 37 54 73 42 60 15 88 00  // ......a.7TsB`...
    3E20: 00 00 14 68 20 75 39 AB 00 00 00 00 00 00 04 00  // ...h u9.........
    3E30: 00 00 54 67 20 13 76 02 43 51 88 00 00 00 63 87  // ..Tg .v.CQ....c.
    3E40: 12 09 54 AB 00 00 00 00 00 00 01 00 00 00 47 26  // ..T...........G&
    3E50: 31 05 06 24 73 15 88 00 00 00 70 39 12 64 58 AB  // 1..$s.....p9.dX.
    3E60: 00 00 00 02 00 00 01 00 00 00 32 70 64 51 17 36  // ..........2pdQ.6
    3E70: 02 45 88 00 00 00 75 24 13 08 69 AB 00 00 00 00  // .E....u$..i.....
    3E80: 00 00 01 00 00 00 14 02 73 56 45 30 16 72 88 00  // ........sVE0.r..
    3E90: 00 00 97 51 02 63 48 AB 00 00 00 00 00 00 04 00  // ...Q.cH.........
    3EA0: 00 00 31 56 27 04 40 76 51 23 88 00 00 00 84 31  // ..1V'.@vQ#.....1
    3EB0: 57 26 09 AB 00 00 00 00 00 00 04 00 00 00 67 02  // W&............g.
    3EC0: 54 13 46 20 31 75 88 00 00 00 09 26 14 75 83 AB  // T.F 1u.....&.u..
    3ED0: 00 00 00 00 00 00 04 00 00 00 72 06 14 53 53 04  // ..........r..SS.
    3EE0: 17 62 88 00 00 00 10 92 84 76 35 AB 00 00 00 02  // .b.......v5.....
    3EF0: 00 00 00 00 CC 00 05 00 05 0A 28 00 80 7E 18 00  // ..........(..~..
    3F00: 05 00 00 00 00 00 00 00 27 00 50 2C 01 04 A0 AA  // ........'.P,....
    3F10: 00 00 00 00 02 03 02 01 00 00 00 00 00 00 00 00  // ................
    3F20: 01 0A 28 00 80 7E 00 00 01 00 00 00 00 00 00 00  // ..(..~..........
    3F30: 27 00 50 37 01 04 A0 AA 00 00 00 00 00 00 03 01  // '.P7............
    3F40: 00 00 00 00 00 00 00 00 04 0A 28 00 84 62 00 00  // ..........(..b..
    3F50: 04 00 00 03 00 00 00 00 27 00 50 00 00 00 A0 AA  // ........'.P.....
    3F60: 00 00 00 00 00 00 03 01 00 00 00 00 00 00 00 00  // ................
    3F70: 02 0A 28 00 84 62 00 00 03 00 00 03 00 00 00 00  // ..(..b..........
    3F80: 27 00 A0 00 00 00 A0 AA 00 00 00 00 00 00 03 01  // '...............
    3F90: 00 00 00 00 00 00 00 00 23 0A 28 00 80 62 00 00  // ........#.(..b..
    3FA0: 02 00 00 00 00 00 00 00 27 00 50 00 00 00 A0 AA  // ........'.P.....
    3FB0: 00 00 00 00 00 00 03 01 00 00 00 00 00 00 00 00  // ................
    3FC0: DC 00 04 01 11 04 00 C4 01 00 14 00 64 00 00 00  // ............d...
    3FD0: 04 00 01 00 E0 00 00 00 12 04 00 44 04 00 2C 00  // ...........D..,.
    3FE0: 64 00 00 00 00 00 01 00 02 00 00 00 09 00 02 00  // d...............
    3FF0: 12 3A 00 00 00 00 01 00 02 00 00 00 0C 00 02 00  // .:..............
    4000: F0 B3 00 00 13 04 00 48 08 00 4C 00 64 00 00 00  // .......H..L.d...
    4010: 00 00 01 00 02 00 00 00 09 00 02 00 02 3A 00 00  // .............:..
    4020: 00 00 01 00 02 00 00 00 19 00 02 00 02 3A 00 00  // .............:..
    4030: 00 00 01 00 02 00 00 00 0C 00 02 00 F0 EB 00 00  // ................
    4040: 00 00 01 00 02 00 00 00 1C 00 02 00 F0 F3 00 00  // ................
    4050: 14 04 00 4C 08 00 4C 00 64 00 00 00 00 00 01 00  // ...L..L.d.......
    4060: 02 00 00 00 09 00 02 00 06 3A 00 00 00 00 01 00  // .........:......
    4070: 02 00 00 00 19 00 02 00 06 3A 00 00 00 00 01 00  // .........:......
    4080: 02 00 00 00 0C 00 02 00 F0 EB 00 00 00 00 01 00  // ................
    4090: 02 00 00 00 1C 00 02 00 F0 F3 00 00 00 00 00 00  // ................
    40A0: 00 00 00 00 00 00 00 00 56 42 4C 5F 44 41 54 41  // ........VBL_DATA
    40B0: 5F 54 42 5F 45 4E 44 00 41 83 01 CA B0 32 76 55  // _TB_END.A....2vU
    40C0: A3 14 9A 2C FA E7 83 7D FF 89 C5 36 97 05 72 98  // ...,...}...6..r.
    40D0: 8C 41 D5 D2 BC E8 0C B6 71 BF DA 76 57 5A 6F 77  // .A......q..vWZow
    40E0: DD 1F 5A 88 F6 A2 2C EA 0B 84 97 01 48 C5 79 1F  // ..Z...,.....H.y.
    40F0: B8 FC 07 75 1A 70 9D 6D EE 42 D9 57 51 42 97 D9  // ...u.p.m.B.WQB..
    4100: 2B 41 DE 75 9D 11 96 62 D7 58 4D F7 CB 9C EF 02  // +A.u...b.XM.....
    4110: 97 FB 4C CF 74 E5 59 E1 6A 65 3A EA 29 1B A4 D9  // ..L.t.Y.je:.)...
    4120: 3F 1A 9D 56 85 10 2C B3 E5 B1 07 DD E7 B9 94 96  // ?..V..,.........
    4130: BC 34 EA 36 09 DA C4 6F 8F C9 D5 F4 32 29 CB 0D  // .4.6...o....2)..
    4140: 04 A8 C1 D7 CB 4D 35 62 8B 00 56 77 AD D7 70 18  // .....M5b..Vw..p.
    4150: 7C 02 9F 30 D6 7D 0B A0 F0 32 49 96 47 84 82 30  // |..0.}...2I.G..0
    4160: 31 C0 2D D0 0D 23 62 83 18 58 26 4F 5C 9C AD 3B  // 1.-..#b..X&O\..;
    4170: 55 7A 9B 99 B8 AC 00 FC D7 01 48 CC DA BF 1A C1  // Uz........H.....
    4180: 0A 23 B4 B3 FB 3F 8B 29 15 1B 1B 05 E8 E8 0A 1A  // .#...?.)........
    4190: 07 76 E3 A4 42 E7 97 31 83 14 92 48 EE 8E AD C4  // .v..B..1...H....
    41A0: 36 3A D9 9B 2C EF E4 75 50 5A B4 60 2D BA 9B B1  // 6:..,..uPZ.`-...
    41B0: F5 E1 92 94 37 25 14 CD 41 54 4F 4D 5F 43 4D 44  // ....7%..ATOM_CMD
    41C0: 5F 54 41 42 4C 45 00 00 A2 00 02 01 04 42 00 00  // _TABLE.......B..
    41D0: 00 00 00 00 00 00 00 00 FC 48 00 00 00 00 00 00  // .........H......
    41E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    41F0: 00 00 00 00 00 00 00 00 84 44 00 00 00 00 00 00  // .........D......
    4200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4230: 00 00 00 00 00 00 0C 43 00 00 00 00 00 00 00 00  // .......C........
    4240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4250: C8 44 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .D..............
    4260: 00 00 00 00 00 00 00 00 00 00 00 00 07 01 02 01  // ................
    4270: 00 00 37 00 00 4B E5 00 04 49 C6 00 66 09 3E 0D  // ..7..K...I..f.>.
    4280: 42 00 00 44 C6 00 56 00 40 01 05 0C 00 84 81 05  // B..D..V.@.......
    4290: 00 3C 05 0D 00 00 00 00 80 44 C6 00 51 14 2D 05  // .<.......D..Q.-.
    42A0: 40 01 00 00 00 3E 05 40 40 0D 03 00 45 1D 00 03  // @....>.@@...E...
    42B0: 00 40 50 00 09 05 40 00 00 00 03 3E 05 40 00 00  // .@P...@....>.@..
    42C0: 00 01 49 C6 00 01 05 0C 00 8C 81 05 00 01 05 0D  // ..I.............
    42D0: 00 00 00 07 00 56 00 40 01 05 0C 00 8C 81 05 00  // .....V.@........
    42E0: 3C 05 0D 00 00 00 00 80 44 95 00 51 14 2D 05 40  // <.......D..Q.-.@
    42F0: 01 00 00 00 3E 05 40 40 0D 03 00 45 6C 00 43 C6  // ....>.@@...El.C.
    4300: 00 56 00 40 07 05 50 00 FF FF FF 00 01 05 0C 00  // .V.@..P.........
    4310: 84 81 05 00 3C 05 0D 00 00 00 00 80 44 C6 00 51  // ....<.......D..Q
    4320: 14 2D 05 40 01 00 00 00 3E 05 40 40 0D 03 00 45  // .-.@....>.@@...E
    4330: A0 00 66 16 3E 0D 42 00 00 44 E2 00 03 0C 41 04  // ..f.>.B..D....A.
    4340: 00 4C 0D 41 02 00 44 E2 00 0D 25 4C 00 02 03 00  // .L.A..D...%L....
    4350: 41 E3 0D 3E 05 41 00 00 00 00 44 06 01 33 05 41  // A..>.A....D..3.A
    4360: 01 00 00 00 1B 05 41 0B 01 02 06 00 41 0D 65 53  // ......A.....A.eS
    4370: 00 02 5B 00 76 01 04 00 0C 00 37 00 00 3D A5 04  // ..[.v.....7..=..
    4380: 01 44 E5 00 66 04 03 04 46 28 00 3E 05 46 00 00  // .D..f...F(.>.F..
    4390: 00 00 49 43 00 03 01 00 00 03 01 01 01 03 01 02  // ..IC............
    43A0: 02 52 16 03 01 46 00 1B 05 46 08 02 02 00 00 02  // .R...F...F......
    43B0: 02 01 01 02 02 02 02 3D 25 04 00 49 4E 00 2C 02  // .......=%..IN.,.
    43C0: 01 46 3D 65 04 00 49 59 00 2C 02 03 46 03 01 40  // .F=e..IY.,..F..@
    43D0: 05 09 05 40 00 00 00 FC 3E 05 40 00 00 00 80 49  // ...@....>.@....I
    43E0: 81 00 55 00 00 55 00 01 01 05 0C 00 B8 51 04 00  // ..U..U.......Q..
    43F0: 01 01 0D 00 06 01 05 0C 00 BC 51 04 00 01 05 0D  // ..........Q.....
    4400: 00 00 00 00 00 01 05 0C 00 A4 51 04 00 01 01 0D  // ..........Q.....
    4410: 00 00 01 05 0C 00 A8 51 04 00 01 01 0D 00 01 01  // .......Q........
    4420: 05 0C 00 AC 51 04 00 01 01 0D 00 02 01 05 0C 00  // ....Q...........
    4430: B0 51 04 00 01 01 0D 00 03 01 05 0C 00 B4 51 04  // .Q............Q.
    4440: 00 01 01 0D 00 05 01 05 0C 00 C8 50 04 00 4A E5  // ...........P..J.
    4450: 0D 00 80 44 D2 00 43 75 01 01 05 0C 00 84 81 05  // ...D..Cu........
    4460: 00 01 05 0D 00 00 00 0A 00 01 05 0C 00 84 81 05  // ................
    4470: 00 56 00 40 3C 05 0D 00 00 00 00 80 44 26 01 51  // .V.@<.......D&.Q
    4480: 14 2D 05 40 01 00 00 00 3E 05 40 40 0D 03 00 45  // .-.@....>.@@...E
    4490: 00 01 02 05 06 00 00 00 00 5B 01 05 0C 00 04 52  // .........[.....R
    44A0: 04 00 01 01 0D 00 00 01 05 0C 00 08 52 04 00 01  // ............R...
    44B0: 01 0D 00 01 01 05 0C 00 00 52 04 00 03 00 41 0D  // .........R....A.
    44C0: 00 09 05 41 C1 FF FF FF 0F 05 41 15 00 00 00 01  // ...A......A.....
    44D0: 05 0C 00 00 52 04 00 01 02 0D 00 41 01 05 0C 00  // ....R......A....
    44E0: A4 50 04 00 02 00 06 0D 00 5B 00 00 44 00 02 01  // .P.......[..D...
    44F0: 00 00 37 00 00 01 05 0C 00 B0 A3 06 00 02 00 00  // ..7.............
    4500: 0D 00 02 01 01 00 01 05 0C 00 B4 A3 06 00 02 00  // ................
    4510: 02 0D 00 3D 01 00 02 47 43 00 02 05 00 00 80 00  // ...=...GC.......
    4520: 00 02 05 01 90 00 00 00 02 05 02 0F 80 00 00 5B  // ...............[
    4530: 33 04 01 02 08 00 37 00 00 3D 25 00 00 44 F5 00  // 3.....7..=%..D..
    4540: 4A 05 A3 36 02 00 00 00 44 32 04 03 05 00 32 00  // J..6....D2....2.
    4550: 00 00 03 00 40 97 36 03 05 46 00 31 00 00 04 02  // ....@.6..F.1....
    4560: 04 40 03 03 41 05 3E 02 41 40 48 4C 00 33 02 40  // .@..A.>.A@HL.3.@
    4570: 41 03 03 41 06 33 02 41 40 43 50 00 33 02 41 40  // A..A.3.A@CP.3.A@
    4580: 3E 05 41 00 00 00 00 44 70 00 33 05 00 01 00 00  // >.A....Dp.3.....
    4590: 00 3E 05 00 00 00 00 00 44 32 04 51 14 43 22 00  // .>......D2.Q.C".
    45A0: 03 03 40 05 03 02 41 40 2D 05 40 00 00 00 00 03  // ..@...A@-.@.....
    45B0: 02 46 40 04 01 00 00 04 01 01 01 04 01 02 02 04  // .F@.............
    45C0: 01 03 03 04 01 04 04 04 01 05 05 04 01 06 06 2D  // ...............-
    45D0: 05 41 40 00 00 00 3E 05 41 00 20 00 00 45 B7 00  // .A@...>.A. ..E..
    45E0: 27 05 41 00 20 00 00 03 05 46 00 31 00 00 04 02  // '.A. ....F.1....
    45F0: 05 41 01 02 96 36 41 03 05 00 80 1A 06 00 03 00  // .A...6A.........
    4600: 41 97 36 03 00 40 96 36 3E 02 41 40 44 32 04 33  // A.6..@.6>.A@D2.3
    4610: 05 00 01 00 00 00 3E 05 00 00 00 00 00 44 32 04  // ......>......D2.
    4620: 51 14 43 CE 00 3D 65 00 01 44 35 01 4A 05 B6 36  // Q.C..=e..D5.J..6
    4630: 00 00 01 00 49 35 01 4A 05 C0 36 01 00 00 00 44  // ....I5.J..6....D
    4640: 35 01 01 05 0C 00 84 81 05 00 01 05 0D 00 00 00  // 5...............
    4650: 00 08 01 05 0C 00 84 81 05 00 3C 05 0D 00 00 00  // ..........<.....
    4660: 00 80 49 2A 01 4A 05 C0 36 01 00 00 00 49 D4 01  // ..I*.J..6....I..
    4670: 01 05 B8 36 00 00 02 10 03 05 41 0A 00 00 00 33  // ...6......A....3
    4680: 05 41 01 00 00 00 3E 05 41 00 00 00 00 44 92 01  // .A....>.A....D..
    4690: 51 0A 3C 05 B8 36 00 00 02 00 49 4F 01 03 05 41  // Q.<..6....IO...A
    46A0: 04 00 00 00 51 0A 33 05 41 01 00 00 00 3E 05 41  // ....Q.3.A....>.A
    46B0: 00 00 00 00 44 92 01 3C 05 AA 36 AD DE AD DE 49  // ....D..<..6....I
    46C0: 74 01 01 05 B8 36 00 00 00 00 0D 05 C0 36 01 00  // t....6.......6..
    46D0: 00 00 07 05 B6 36 FF FF FE FF 0D 05 02 38 00 01  // .....6.......8..
    46E0: 00 00 51 0A 01 05 97 36 00 00 00 00 01 05 96 36  // ..Q....6.......6
    46F0: 00 00 00 00 01 05 A3 36 00 00 00 00 07 05 02 38  // .......6.......8
    4700: FF FE FF FF 66 0B 03 04 00 04 00 03 02 01 00 15  // ....f...........
    4710: 05 00 0A 1B 05 01 16 02 05 00 00 00 00 00 02 02  // ................
    4720: 02 00 2C 05 02 00 00 02 00 02 02 03 01 02 05 04  // ..,.............
    4730: 01 00 00 00 02 05 05 00 00 05 80 52 35 02 05 00  // ...........R5...
    4740: 00 00 00 00 02 02 02 00 2C 05 02 00 00 00 00 02  // ........,.......
    4750: 02 03 01 02 05 04 01 00 00 00 02 05 05 00 20 00  // .............. .
    4760: 80 52 35 66 16 3E 0D 42 00 00 44 AD 02 56 00 41  // .R5f.>.B..D..V.A
    4770: 03 0C 41 00 00 2D 05 41 0F 00 00 00 09 05 41 F0  // ..A..-.A......A.
    4780: FF 00 00 2D 0A 41 42 03 05 46 00 A0 00 00 56 08  // ...-.AB..F....V.
    4790: 42 04 04 00 00 00 2D 05 46 04 00 00 00 2D 05 42  // B.....-.F....-.B
    47A0: 04 00 00 00 3E 02 42 41 45 61 02 02 05 00 00 A0  // ....>.BAEa......
    47B0: 00 00 2C 02 00 00 02 02 02 00 2C 05 02 00 00 02  // ..,.......,.....
    47C0: 00 02 02 03 01 02 02 01 01 02 05 04 00 00 00 00  // ................
    47D0: 02 05 05 00 00 00 40 02 0A 05 41 52 35 52 16 02  // ......@...AR5R..
    47E0: 01 02 00 14 05 00 18 1A 05 02 08 03 02 41 00 2D  // .............A.-
    47F0: 05 41 00 00 02 00 2D 01 41 00 01 02 7B 36 41 03  // .A....-.A...{6A.
    4800: 02 40 01 2D 01 40 02 01 02 7C 36 40 01 05 68 36  // .@.-.@...|6@..h6
    4810: 00 00 00 03 01 05 70 36 FF FF 01 83 03 02 41 00  // ......p6......A.
    4820: 2D 05 41 00 00 04 00 2D 01 41 00 01 02 7D 36 41  // -.A....-.A...}6A
    4830: 03 02 40 01 2D 01 40 02 01 02 7E 36 40 01 05 69  // ..@.-.@...~6@..i
    4840: 36 00 00 00 04 01 05 71 36 FF FF 00 84 03 02 41  // 6......q6......A
    4850: 00 2D 05 41 00 00 05 00 2D 01 41 00 01 02 7F 36  // .-.A....-.A....6
    4860: 41 03 02 40 01 2D 01 40 02 01 02 80 36 40 01 05  // A..@.-.@....6@..
    4870: 6A 36 00 00 00 05 01 05 72 36 FF FF 00 85 03 02  // j6......r6......
    4880: 41 00 2D 05 41 00 00 06 00 2D 01 41 00 01 02 81  // A.-.A....-.A....
    4890: 36 41 03 02 40 01 2D 01 40 02 01 02 82 36 40 01  // 6A..@.-.@....6@.
    48A0: 05 6B 36 00 00 00 06 01 05 73 36 FF FF 00 86 03  // .k6......s6.....
    48B0: 05 46 00 31 00 00 03 02 41 00 2D 05 41 00 00 00  // .F.1....A.-.A...
    48C0: 00 2D 01 41 00 03 02 40 01 2D 01 40 02 04 02 00  // .-.A...@.-.@....
    48D0: 41 04 02 01 40 04 05 04 00 00 00 00 04 05 05 00  // A...@...........
    48E0: 00 00 00 04 05 06 00 20 00 00 01 05 94 36 00 00  // ....... .....6..
    48F0: 00 80 01 05 95 36 00 20 00 00 01 02 56 36 41 01  // .....6. ....V6A.
    4900: 02 57 36 40 01 05 61 36 FF FF 00 80 01 05 97 36  // .W6@..a6.......6
    4910: 00 00 00 00 01 05 96 36 00 00 00 00 03 00 41 96  // .......6......A.
    4920: 36 01 05 B1 36 00 00 00 00 5C 05 B6 36 00 FF FF  // 6...6....\..6...
    4930: FF C6 00 09 00 07 05 C0 36 FE FF FF FF 03 05 41  // ........6......A
    4940: 50 C3 00 00 4A 05 A3 36 02 00 00 00 49 32 04 51  // P...J..6....I2.Q
    4950: 14 33 05 41 01 00 00 00 3E 05 41 00 00 00 00 49  // .3.A....>.A....I
    4960: 14 04 5B 00 4B 00 01 01 00 00 37 00 00 42 21 00  // ..[.K.....7..B!.
    4970: 63 00 1F 00 63 01 39 00 63 03 3F 00 63 02 45 00  // c...c.9.c.?.c.E.
    4980: 5A 5A 5B 03 05 40 00 00 05 04 2D 19 40 00 15 05  // ZZ[..@....-.@...
    4990: 40 02 01 02 0C 00 40 02 00 00 0D 00 5B 02 00 00  // @.....@.....[...
    49A0: E3 0D 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D 5B 00  // ..[.....[.....[.
    49B0: 41 54 4F 4D 5F 54 41 42 4C 45 5F 45 4E 44 00 00  // ATOM_TABLE_END..
    49C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    49D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    49E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    49F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4B70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4BE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4BF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4C10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4C30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4C70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4CB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4CD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4CF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4D20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4D30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4D40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4D70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4D90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4DB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4DF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4E30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4E70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4EB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4ED0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4EF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4F10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4F50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4F60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4F70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4F90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4FA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4FD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    4FF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    50A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    50B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    50C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    50D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    50E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    50F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    51A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    51B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    51C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    51D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    51E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    51F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    52A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    52B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    52C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    52D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    52E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    52F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    53A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    53B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    53C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    53D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    53E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    53F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    54A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    54B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    54C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    54D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    54E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    54F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    55A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    55B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    55C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    55D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    55E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    55F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    56A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    56B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    56C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    56D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    56E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    56F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    57A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    57B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    57C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    57D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    57E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    57F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    58A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    58B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    58C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    58D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    58E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    58F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    59A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    59B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    59C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    59D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    59E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    59F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5B70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5BE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5BF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5C10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5C30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5C70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5CB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5CD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5CF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5D20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5D30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5D40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5D70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5D90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5DB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5DF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5E30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5E70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5EB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5ED0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5EF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5F10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5F50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5F60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5F70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5F90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5FA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5FD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5FF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6060: 00 00 00 00 00 00 00 00 1E 06 66 50 66 51 66 52  // ..........fPfQfR
    6070: 66 53 66 55 66 56 66 57 0E 1F A3 14 00 8C 0E 08  // fSfUfVfW........
    6080: 00 B2 20 E8 8C 1D 0B C0 75 14 A2 02 00 66 5F 66  // .. .....u....f_f
    6090: 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F CB E8 A6  // ^f]f[fZfYfX.....
    60A0: 1E E8 78 1C 32 D2 E8 63 1C 89 55 16 E8 E9 0C E8  // ..x.2..c..U.....
    60B0: AC 0C E8 6D 1B 75 19 E8 87 0E E8 AD 02 E8 39 19  // ...m.u........9.
    60C0: 0B C0 74 0C E8 39 00 E8 02 45 E8 A3 0C E8 57 45  // ..t..9...E....WE
    60D0: E8 A9 00 B4 80 E8 6E 1C 8A C7 66 C1 E0 10 8A E3  // ......n...f.....
    60E0: B0 20 66 A3 16 DD E8 D9 02 E8 B6 0C E8 9B 1E 66  // . f............f
    60F0: 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F CB  // _f^f]f[fZfYfX...
    6100: 2E 8B 1E 08 00 83 3E 10 61 00 75 04 89 1E 0E 61  // ......>.a.u....a
    6110: 1E 2E 8E 1E 06 61 9C FA 66 C7 06 08 01 65 F0 00  // .....a..f....e..
    6120: F0 C7 06 40 00 34 61 89 1E 42 00 C7 06 B4 01 34  // ...@.4a..B.....4
    6130: 61 89 1E B6 01 C7 06 7C 00 F8 AA 89 1E 7E 00 C7  // a......|.....~..
    6140: 06 0C 01 0B AF 89 1E 0E 01 C7 06 A8 04 2A A5 89  // .............*..
    6150: 1E AA 04 2E 8E 1E 0E 61 8B C3 A3 2C A5 A3 3C A5  // .......a...,..<.
    6160: A3 4E A5 9D 1F C3 50 4D 49 44 34 61 1C 95 00 00  // .N....PMID4a....
    6170: 00 A0 00 B0 00 B8 00 C0 00 00 00 00 BB 00 00 E8  // ................
    6180: 09 0C 66 C1 E8 10 57 BF 18 00 89 45 06 5F BB 0B  // ..f...W....E._..
    6190: 00 E8 F7 0B E8 75 1B 66 89 45 18 C3 E8 C6 1D 80  // .....u.f.E......
    61A0: FC A0 75 05 E8 3D 00 EB 11 80 FC 4F 75 05 E8 F9  // ..u..=.....Ou...
    61B0: 32 EB 07 E8 8E 38 EB 02 B4 01 E8 CD 1D CF E8 A4  // 2....8..........
    61C0: 1D E8 20 00 EB 02 B4 01 E8 BF 1D CB E8 96 1D 80  // .. .............
    61D0: FC 4F 75 05 E8 D3 32 EB 07 E8 68 38 EB 02 B4 01  // .Ou...2...h8....
    61E0: E8 A7 1D CB 1E 06 66 50 66 51 66 52 66 53 66 55  // ......fPfQfRfSfU
    61F0: 66 56 66 57 0E 1F 3C 04 75 25 57 E8 0E 1B 8B 45  // fVfW..<.u%W....E
    6200: 1A 66 C1 E0 10 8B 45 18 5F B7 06 B3 02 8B EC 89  // .f....E._.......
    6210: 5E 0C 89 46 04 66 C1 E8 10 89 46 00 E9 29 01 3C  // ^..F.f....F..).<
    6220: 05 75 18 E8 20 1B E8 F3 1A 2E A1 08 00 8B EC 89  // .u.. ...........
    6230: 56 10 89 46 00 89 5E 04 E9 0D 01 3C 06 75 30 E8  // V..F..^....<.u0.
    6240: 31 0B 66 D1 E0 8B EC 89 46 14 BB 02 00 E8 3B 0B  // 1.f.....F.....;.
    6250: 88 46 18 E8 25 0B 66 89 46 0C BB 09 00 E8 2B 0B  // .F..%.f.F.....+.
    6260: 33 C0 66 89 46 00 E8 A9 1A 89 56 10 E9 D9 00 3C  // 3.f.F.....V....<
    6270: 0B 75 24 0A DB 75 11 B9 80 00 BB 02 00 8B EC 89  // .u$..u..........
    6280: 5E 0C 89 4E 14 E9 C0 00 8A C7 E8 D3 00 E8 64 01  // ^..N..........d.
    6290: 0F 84 AC 00 E9 B1 00 3C 17 75 1D E8 51 0E 74 06  // .......<.u..Q.t.
    62A0: E8 AC 09 E8 47 13 E8 3C 07 E8 A1 0A 33 C9 8B C8  // ....G..<....3...
    62B0: 8B EC 89 4E 14 E9 90 00 3C 18 75 45 0A FF 75 10  // ...N....<.uE..u.
    62C0: E8 D8 0D 8B EC 89 46 0C E8 78 07 89 4E 10 EB 78  // ......F..x..N..x
    62D0: E8 1C 0E 75 6B BB 00 4C E8 28 1C 66 0B C0 74 60  // ...uk..L.(.f..t`
    62E0: 23 C9 74 5C E8 F0 0D BE 00 4C E8 CB 0A 74 51 BE  // #.t\.....L...tQ.
    62F0: 00 4C B0 40 E8 1A 0B E8 A1 0D 8B EC 89 46 0C EB  // .L.@.........F..
    6300: 47 3C 82 75 1A 80 FB 05 75 15 0A FF 75 0A E8 E6  // G<.u....u...u...
    6310: 0C 8B EC 89 46 14 EB 30 E8 C3 0C 74 1B EB 29 3C  // ....F..0...t..)<
    6320: 8E 75 15 80 FF 01 74 08 80 FF 02 75 0B 80 C1 02  // .u....t....u....
    6330: 80 C1 02 E8 0D 0D EB 10 8B EC C6 46 19 02 EB 0F  // ...........F....
    6340: 8B EC C6 46 19 01 EB 07 32 E4 8B EC 88 66 19 66  // ...F....2....f.f
    6350: 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3  // _f^f]f[fZfYfX...
    6360: 51 8A C8 B8 01 00 D3 E0 59 C3 E8 43 1C C3 0C 01  // Q.......Y..C....
    6370: C3 66 50 66 53 66 33 C0 BB 08 00 E8 A6 14 BB 08  // .fPfSf3.........
    6380: 00 E8 97 14 66 0B C0 74 F5 66 5B 66 58 C3 00 00  // ....f..t.f[fX...
    6390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 51  // ..............PQ
    63A0: B0 B6 E6 43 B0 33 E6 42 B0 05 E6 42 E4 61 8A E0  // ...C.3.B...B.a..
    63B0: 0C 03 E6 61 8A C4 B9 C8 00 E8 EF 17 E6 61 59 58  // ...a.........aYX
    63C0: C3 00 1E 56 0E 1F 80 3E 02 00 80 76 05 C6 06 02  // ...V...>...v....
    63D0: 00 80 8A 0E 02 00 C1 E1 09 FC 33 C0 57 BF 21 00  // ..........3.W.!.
    63E0: 88 05 33 F6 AC 02 E0 E2 FB F6 D4 FE C4 88 25 5F  // ..3...........%_
    63F0: 5E 1F C3 00 57 0B C0 75 0F E8 1B 08 74 25 E8 24  // ^...W..u....t%.$
    6400: 00 F6 C3 04 74 F3 EB 11 8B C8 E8 EC 15 23 C1 74  // ....t........#.t
    6410: 12 E8 11 00 F6 C3 04 74 0A 5F 8D 5C 28 E8 8E 05  // .......t._.\(...
    6420: 0B F6 C3 5F C3 50 E8 D0 07 E8 3E 15 0A C9 74 11  // ..._.P....>...t.
    6430: E8 6A 12 3C 00 75 1F E8 CB 01 8A EB F6 C5 04 74  // .j.<.u.........t
    6440: 15 8D 9C A6 00 E8 BB 1A 0A C0 74 0A E8 85 04 74  // ..........t....t
    6450: 05 33 C9 E8 4E 05 E8 AC 01 58 C3 51 B9 5F 00 E8  // .3..N....X.Q._..
    6460: F8 16 59 C3 51 E8 1A 00 75 14 E8 69 01 3C 01 75  // ..Y.Q...u..i.<.u
    6470: 0D B9 20 00 E8 27 00 75 05 80 C9 01 EB 02 33 C9  // .. ..'.u......3.
    6480: 59 C3 53 E8 7D 1A 66 3D 00 FF FF FF 75 0E 83 C3  // Y.S.}.f=....u...
    6490: 04 E8 6F 1A 66 3D FF FF FF 00 75 00 5B C3 50 52  // ..o.f=....u.[.PR
    64A0: 32 D2 E8 5E 1A 02 D0 02 D4 66 C1 E8 10 02 D0 02  // 2..^.....f......
    64B0: D4 83 C3 04 E2 EC 0A D2 5A 58 C3 E8 3B 07 8D 9C  // ........ZX..;...
    64C0: A4 01 E8 E9 00 A9 DD 0F 74 52 E8 38 01 F6 C3 08  // ........tR.8....
    64D0: 74 0C 8D 5C 28 E8 DD 00 75 04 E8 62 00 C3 B5 02  // t..\(...u..b....
    64E0: E8 FC 00 E8 1F 01 F6 C3 04 74 21 8D 5C 28 E8 22  // .........t!.\(."
    64F0: 01 E8 6A 03 74 05 B5 03 E8 E4 00 E8 3E 04 E8 FA  // ..j.t.......>...
    6500: 00 80 FD 00 75 38 B5 02 E8 E6 00 C3 8D 9C C0 01  // ....u8..........
    6510: B8 00 55 E8 F0 0D B5 02 E8 D6 00 C3 A9 02 00 74  // ..U............t
    6520: 1D B5 04 E8 B9 00 E8 DC 00 8D 5C 28 E8 E4 00 E8  // ..........\(....
    6530: 64 17 E8 BC 00 8D 5C 28 E8 D8 00 E8 FE 03 C3 B5  // d.....\(........
    6540: 01 E8 9B 00 B5 02 E8 A8 00 E8 B9 00 F6 C3 04 75  // ...............u
    6550: 10 8D 9C C0 01 B8 00 55 E8 AB 0D B5 02 E8 17 00  // .......U........
    6560: C3 E8 AF 00 B5 02 8D 5C 28 E8 57 00 75 02 B5 01  // .......\(.W.u...
    6570: E8 04 00 E8 C6 03 C3 8D 9C AC 02 B1 02 E8 27 19  // ..............'.
    6580: B5 02 E8 6C 00 C3 8D 9C A4 01 E8 21 00 E8 75 00  // ...l.......!..u.
    6590: F6 C3 04 74 12 8D 5C 28 E8 78 00 E8 5D 00 E8 56  // ...t..\(.x..]..V
    65A0: 07 8D 5C 28 E8 FB 16 B8 02 00 E8 0E FF C3 B9 48  // ..\(...........H
    65B0: 00 E8 A6 15 C3 53 81 C3 05 01 E8 46 19 24 06 3C  // .....S.....F.$.<
    65C0: 02 5B C3 E8 10 00 3D 01 04 75 0A 53 83 C3 18 E8  // .[....=..u.S....
    65D0: 31 19 5B A8 01 C3 53 83 C3 12 E8 26 19 5B C3 8D  // 1.[...S....&.[..
    65E0: 9C AC 02 32 C9 E8 BF 18 C3 8D 9C AC 02 E8 13 19  // ...2............
    65F0: C3 8D 9C AC 02 B1 01 E8 AD 18 C3 8D 9C AC 02 B1  // ................
    6600: 01 E8 BB 18 C3 66 50 8D 9C A0 01 E8 F5 18 8A D8  // .....fP.........
    6610: 66 58 C3 55 57 51 B9 08 00 BD 00 00 BB 08 00 2B  // fX.UWQ.........+
    6620: D9 D1 E3 8D 58 4E E8 DA 18 E8 E0 01 E2 EE 8D 5C  // ....XN.........\
    6630: 4B E8 CF 18 B9 03 00 8B D0 BF 8B 66 85 55 06 74  // K..........f.U.t
    6640: 17 66 8B 05 8D 9A 4C 02 E8 18 18 8B 45 04 8D 9A  // .f....L.....E...
    6650: 50 02 E8 26 18 83 C5 08 83 C7 08 E2 DF 8D 7C 5E  // P..&..........|^
    6660: B9 04 00 33 ED 8B DF E8 99 18 0B C0 74 09 E8 5A  // ...3........t..Z
    6670: 01 E8 97 00 83 C5 1C 83 C7 12 E2 E9 55 32 ED E8  // ............U2..
    6680: 6F FF 8D 5C 28 E8 4E FF 3D 01 04 75 10 83 C3 14  // o..\(.N.=..u....
    6690: E8 70 18 24 70 C0 E8 04 8A E8 E8 54 FF 5D 8D 9C  // .p.$p......T.]..
    66A0: A6 00 E8 5E 18 0A C0 74 46 8D 9C A8 00 E8 53 18  // ...^...tF.....S.
    66B0: 3C 02 75 3B 66 C1 E8 10 3C 04 72 33 8D 9C A8 00  // <.u;f...<.r3....
    66C0: 32 E4 03 D8 8B FB B9 04 00 8B DF E8 35 18 0B C0  // 2...........5...
    66D0: 74 15 E8 F6 00 A9 80 00 75 0D E8 2E 00 83 C5 1C  // t.......u.......
    66E0: 55 58 83 F8 70 73 08 83 C7 12 49 0B C9 75 DA 59  // UX..ps....I..u.Y
    66F0: 5F 5D C3 20 03 58 02 3C 00 01 00 00 04 00 03 3C  // _]. .X.<.......<
    6700: 00 00 08 80 02 E0 01 3C 00 20 00 51 8D 1D E8 F2  // .......<. .Q....
    6710: 17 8D 9A C0 01 E8 63 17 8D 9A D2 01 66 33 C0 E8  // ......c.....f3..
    6720: 41 17 8D 5D 02 E8 DB 17 8D 9A C2 01 E8 7C 00 8D  // A..].........|..
    6730: 5D 05 E8 CE 17 8D 9A C6 01 E8 6F 00 8D 5D 08 E8  // ].........o..]..
    6740: C1 17 8B C8 8A DC 66 C1 C8 10 8A D0 80 E2 0F 8A  // ......f.........
    6750: F0 C0 EE 04 8A EC C0 ED 06 8A FC C0 EF 04 80 E7  // ................
    6760: 03 80 E4 0F C0 E4 04 0A D4 80 E2 3F 80 E4 C0 C0  // ...........?....
    6770: EC 02 0A F4 8B C3 8D 9A CC 01 E8 FE 16 8D 9A CA  // ................
    6780: 01 8B C1 E8 F5 16 8D 9A CE 01 33 C0 8A C6 E8 EA  // ..........3.....
    6790: 16 8D 9A D0 01 33 C0 8A C2 E8 DF 16 8D 5D 0F E8  // .....3.......]..
    67A0: 61 17 8D 9A D6 01 E8 D2 16 59 C3 8B C8 8A D4 66  // a........Y.....f
    67B0: C1 C8 10 8A F0 80 E6 0F 8A E8 C0 ED 04 8B C1 E8  // ................
    67C0: B9 16 83 C3 02 8B C2 E8 B1 16 C3 8D 5D 11 E8 32  // ............]..2
    67D0: 17 8A E0 BA 06 00 C0 E8 07 74 03 80 CA 80 8A C4  // .........t......
    67E0: C0 E8 03 24 03 3C 02 75 03 80 CA 40 3C 03 75 12  // ...$.<.u...@<.u.
    67F0: 8A C4 D0 E8 A8 01 74 03 80 E2 FD A8 02 74 03 80  // ......t......t..
    6800: E2 FB 8B C2 8D 9A D8 01 E8 70 16 C3 3C 01 74 3D  // .........p..<.t=
    6810: 8B D0 0F B6 C6 24 3F 04 3C 8D 9A 50 02 E8 5B 16  // .....$?.<..P..[.
    6820: 0F B6 C2 83 C0 1F C1 E0 03 8D 9A 4C 02 E8 4B 16  // ...........L..K.
    6830: 0F B6 DE C1 EB 06 C1 E3 02 2E F7 A7 E8 67 2E F7  // .............g..
    6840: B7 E6 67 8D 9A 4E 02 E8 31 16 83 C5 08 C3 10 00  // ..g..N..1.......
    6850: 0A 00 04 00 03 00 05 00 04 00 10 00 09 00 8D 9C  // ................
    6860: A6 00 E8 9E 16 0A C0 74 1F 8D 9C A8 00 51 B1 03  // .......t.....Q..
    6870: E8 18 00 59 0B DB 74 10 E8 88 16 32 C0 66 3D 00  // ...Y..t....2.f=.
    6880: 03 0C 00 75 03 0B DB C3 33 DB C3 66 50 52 E8 72  // ...u....3..fPR.r
    6890: 16 3C 02 75 39 80 FC 03 72 34 66 C1 E8 10 32 E4  // .<.u9...r4f...2.
    68A0: 3C 04 76 2A 03 C3 8B D0 83 C3 04 3B DA 73 1F E8  // <.v*.......;.s..
    68B0: 51 16 8A E0 80 E4 E0 C0 EC 05 24 1F 38 CC 74 08  // Q.........$.8.t.
    68C0: 32 E4 FE C0 03 D8 EB E3 0B DB 5A 66 58 C3 33 DB  // 2.........ZfX.3.
    68D0: 5A 66 58 C3 51 8D 9C A6 00 E8 27 16 0A C0 74 1B  // ZfX.Q.....'...t.
    68E0: 8D 9C A8 00 B1 12 E8 18 00 74 10 E8 15 16 66 C1  // .........t....f.
    68F0: E8 10 80 E4 07 75 04 B0 01 EB 02 32 C0 0A C0 59  // .....u.....2...Y
    6900: C3 66 50 52 E8 FC 15 3C 70 75 2B 66 C1 E8 10 32  // .fPR...<pu+f...2
    6910: E4 83 C3 05 03 C3 8B D0 3B DA 73 1A E8 E4 15 38  // ........;.s....8
    6920: C8 74 0D 66 C1 E8 10 32 E4 83 C0 03 03 D8 EB E8  // .t.f...2........
    6930: 0B DB 5A 66 58 C3 33 DB 5A 66 58 C3 57 66 51 8D  // ..ZfX.3.ZfX.WfQ.
    6940: 9C C0 01 8B FB 8B DF E8 3D 00 0B C9 74 0B 66 8B  // ........=...t.f.
    6950: D1 E8 60 0C 83 C7 1C EB EC 66 59 5F C3 50 53 51  // ..`......fY_.PSQ
    6960: B9 07 00 53 8B DA E8 9A 15 83 F8 00 5B 74 09 66  // ...S........[t.f
    6970: C1 E3 10 8B DA E8 F7 11 59 5B 58 C3 51 53 B9 07  // ........Y[X.QS..
    6980: 00 E8 04 12 5B 59 C3 66 50 53 83 C3 06 E8 73 15  // ....[Y.fPS....s.
    6990: 5B 8B C8 66 C1 E1 10 53 83 C3 02 E8 65 15 8B C8  // [..f...S....e...
    69A0: 5B 66 58 C3 8D 9C A0 01 32 C9 E8 FA 14 C3 57 B9  // [fX.....2.....W.
    69B0: 20 00 E8 DF 11 5F C3 53 51 E8 19 00 32 E4 8A C5  //  ...._.SQ...2...
    69C0: C1 E0 02 59 8D 9C 78 01 03 D8 E8 36 15 5B C3 B1  // ...Y..x....6.[..
    69D0: 02 E8 07 00 C3 B1 01 E8 01 00 C3 53 8D 9C 98 01  // ...........S....
    69E0: E8 DC 14 5B C3 33 C9 E8 38 12 75 3C 66 BA 22 F0  // ...[.3..8.u<f.".
    69F0: FF FF 66 33 C0 E8 3C 03 33 C0 E8 1A 02 74 1C A9  // ..f3..<.3....t..
    6A00: DD 0F 74 F6 E8 1E FA F6 C3 04 75 05 F6 C3 18 74  // ..t.......u....t
    6A10: E9 E8 1F 00 50 E8 A3 FA 58 EB DF E8 0B 00 75 08  // ....P...X.....u.
    6A20: E8 20 00 8B C1 E8 93 FA C3 66 50 E8 1F 03 8B C8  // . .......fP.....
    6A30: 66 58 C3 66 52 66 BA FF FF FF FF 33 D0 E8 F4 02  // fX.fRf.....3....
    6A40: 66 5A C3 50 53 52 E8 E0 FF 75 09 33 C0 E8 C7 01  // fZ.PSR...u.3....
    6A50: 8B C8 EB 10 83 F9 02 74 0B E8 12 07 80 FB 01 75  // .......t.......u
    6A60: 03 83 E1 FD 5A 5B 58 C3 56 66 33 C0 66 BA 00 F0  // ....Z[X.Vf3.f...
    6A70: FF FF E8 35 06 66 C1 E6 10 E8 A8 01 0B C0 74 03  // ...5.f........t.
    6A80: E8 05 00 E8 15 06 5E C3 50 51 E8 6C 01 50 32 C0  // ......^.PQ.l.P2.
    6A90: E8 90 02 E8 CC 00 E8 7F 00 8D 9C 08 03 E8 63 14  // ..............c.
    6AA0: 38 E8 74 0A 8A C5 E8 BA 13 B0 02 E8 75 02 58 E8  // 8.t.........u.X.
    6AB0: 79 00 66 51 8D 9C A4 01 E8 48 14 66 8B C8 8B D3  // y.fQ.....H.f....
    6AC0: 8D 9C D0 02 E8 3C 14 66 3B C1 75 16 53 8D 9C AA  // .....<.f;.u.S...
    6AD0: 01 E8 2F 14 8B C8 8D 9C D6 02 E8 26 14 3B C1 5B  // ../........&.;.[
    6AE0: 74 05 B0 02 E8 3C 02 66 59 E8 71 FE E8 FF 01 66  // t....<.fY.q....f
    6AF0: 25 FF 0F 00 00 59 58 66 BA FF FF FF FF 33 D0 E8  // %....YXf.....3..
    6B00: A8 05 33 D2 C3 53 66 50 8D 9C C8 02 E8 F4 13 8A  // ..3..SfP........
    6B10: C4 E8 4F 13 66 58 5B C3 53 66 50 8D 9C C8 02 E8  // ..O.fX[.SfP.....
    6B20: E1 13 8A E0 E8 3C 13 66 58 5B C3 8D 9C C8 02 E8  // .....<.fX[......
    6B30: D1 13 32 C0 E8 2C 13 C3 66 52 52 32 ED 83 C1 02  // ..2..,..fRR2....
    6B40: B8 06 00 F7 E1 66 33 C9 8B C8 5A 51 66 8B C2 8A  // .....f3...ZQf...
    6B50: CF 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66 8B C8 66  // .f..f...Yf..f..f
    6B60: 5A C3 53 E8 48 01 66 C1 E2 10 E8 36 01 8D 9C 98  // Z.S.H.f....6....
    6B70: 01 E8 8F 13 8A E8 8D 9C AC 02 E8 86 13 8A C8 E8  // ................
    6B80: 47 0C 8A EB 5B C3 57 53 53 E8 D6 FF E8 14 01 5B  // G...[.WSS......[
    6B90: E8 5E 0C 74 61 80 FD 00 75 29 53 E8 19 FE 66 8B  // .^.ta...u)S...f.
    6BA0: D0 E8 57 FA 8A CD 51 E8 25 FE 8A FD 59 E8 88 FF  // ..W...Q.%...Y...
    6BB0: 5B E8 4F 13 66 25 FF FF 00 00 66 3B C8 73 34 32  // [.O.f%....f;.s42
    6BC0: DB EB 33 80 FD 02 75 11 E8 2C 01 8D 1F E8 33 13  // ..3...u..,....3.
    6BD0: 3D 74 40 76 1E 32 DB EB 1D 80 FD 03 75 15 53 E8  // =t@v.2......u.S.
    6BE0: C1 00 B3 03 E8 C1 0B 5B E8 18 13 3B C2 76 04 32  // .......[...;.v.2
    6BF0: DB EB 03 80 CB 01 5B 5F C3 53 8B F0 E8 FA 0D 23  // ......[_.S.....#
    6C00: F0 74 09 8B C6 E8 37 0C 8B F3 0B DB 5B C3 51 E8  // .t....7.....[.Q.
    6C10: 31 FE E8 0F 00 59 C3 51 50 E8 DD 0D 8B C8 58 E8  // 1....Y.QP.....X.
    6C20: 02 00 59 C3 57 53 E8 1A 0E 0B C0 74 09 8B 1D 83  // ..Y.WS.....t....
    6C30: C7 02 3B C3 75 F7 8B 1D 83 FB FF 74 0B 83 C7 02  // ..;.u......t....
    6C40: 85 D9 74 F2 8B C3 EB 02 33 C0 0B C0 5B 5F C3 33  // ..t.....3...[_.3
    6C50: C0 E8 C3 FF 74 13 E8 A0 FF 8B DE B9 00 02 E8 F9  // ....t...........
    6C60: 0E 83 C6 08 E8 42 0D EB E8 BB F0 46 B8 5A A5 E8  // .....B.....F.Z..
    6C70: 09 12 C3 53 66 50 8D 9C 08 03 E8 86 12 8A E8 66  // ...SfP.........f
    6C80: 58 5B C3 53 66 50 8D 9C C8 02 E8 76 12 8A C8 66  // X[.SfP.....v...f
    6C90: 58 5B C3 53 66 50 8D 9C C9 02 E8 66 12 8A C8 66  // X[.SfP.....f...f
    6CA0: 58 5B C3 53 8D 5C 14 E8 59 12 8B D0 5B C3 53 66  // X[.S.\..Y...[.Sf
    6CB0: 50 8D 5C 16 E8 4C 12 8B D0 66 58 5B C3 53 66 50  // P.\..L...fX[.SfP
    6CC0: 8D 9C 18 03 E8 3C 12 66 8B D0 66 58 5B C3 53 66  // .....<.f..fX[.Sf
    6CD0: 50 8D 9C 1C 03 E8 2B 12 66 8B D0 66 58 5B C3 53  // P.....+.f..fX[.S
    6CE0: 66 50 8D 5C 10 E8 1B 12 8B C8 66 58 5B C3 53 8D  // fP.\......fX[.S.
    6CF0: 5C 08 E8 0E 12 5B C3 53 66 50 8D 5C 0C E8 03 12  // \....[.SfP.\....
    6D00: 8B D0 66 58 5B C3 8D 5C 04 E8 F7 11 C3 51 8D 5C  // ..fX[..\.....Q.\
    6D10: 04 32 C9 E8 91 11 59 C3 8D 9C 18 03 66 8B C2 E8  // .2....Y.....f...
    6D20: 41 11 C3 53 51 8A E8 E8 DC FF 24 FD 0A E8 E8 DC  // A..SQ.....$.....
    6D30: FF 59 5B C3 53 66 50 51 66 8B C8 BB 00 00 E8 DA  // .Y[.SfPQf.......
    6D40: 0A 23 C2 0B C1 E8 DC 0A 59 66 58 5B C3 BB 00 00  // .#......YfX[....
    6D50: E8 C8 0A 66 25 DF 0F 00 00 C3 80 FA 14 C3 E8 DD  // ...f%...........
    6D60: 0D E8 6B 0D E8 49 0D 75 06 E8 9F 0C E8 4D 0D C3  // ..k..I.u.....M..
    6D70: B0 01 C3 55 B3 01 E8 3D 0F 5D C3 66 53 66 BB 04  // ...U...=.].fSf..
    6D80: 00 00 00 E8 05 00 33 C0 66 5B C3 55 66 C1 E3 10  // ......3.f[.Uf...
    6D90: BB 00 00 E8 20 0F 5D C3 E8 65 0E BB 0A 00 E8 83  // .... .]..e......
    6DA0: 0A C3 BB 0A 00 E8 73 0A 66 8B C8 E8 52 0E BB 0A  // ......s.f...R...
    6DB0: 00 66 2B C1 E8 6D 0A C3 E8 29 00 0B C9 74 22 E8  // .f+..m...)...t".
    6DC0: A6 FC E8 B4 07 66 51 66 8B C8 BB 07 00 E8 4B 0A  // .....fQf......K.
    6DD0: 66 25 00 FE 00 00 66 0B C1 E8 48 0A 66 59 0C 01  // f%....f...H.fY..
    6DE0: C3 32 C0 C3 E8 E0 02 0B C9 75 06 E8 55 FC E8 E6  // .2.......u..U...
    6DF0: 02 51 E8 4E FC 66 C1 E6 10 33 C0 E8 10 FE 74 09  // .Q.N.f...3....t.
    6E00: E8 7E 03 75 F6 33 C8 EB F2 58 23 C8 66 C1 EE 10  // .~.u.3...X#.f...
    6E10: C3 66 50 66 53 66 B8 01 00 00 02 BB 08 00 E8 03  // .fPfSf..........
    6E20: 0A 66 5B 66 58 A8 10 0F 85 A1 00 E8 5D 07 66 C1  // .f[fX.......].f.
    6E30: E6 10 33 C0 E8 E0 FD 74 35 E8 BD FD 50 51 8B C8  // ..3....t5...PQ..
    6E40: E8 58 02 85 C1 59 58 74 0D 50 E8 B9 FE 24 03 3C  // .X...YXt.P...$.<
    6E50: 03 58 75 E0 EB 0C 50 E8 AC FE A8 01 58 74 D5 E8  // .Xu...P.....Xt..
    6E60: B6 FC 50 E8 18 08 58 B5 00 E8 A1 FE EB C6 66 50  // ..P...X.......fP
    6E70: 66 53 66 B8 02 00 00 02 BB 08 00 E8 A6 09 66 5B  // fSf...........f[
    6E80: 66 58 E8 16 02 E8 71 FD E8 80 01 66 50 66 53 66  // fX....q....fPfSf
    6E90: B8 03 00 00 02 BB 08 00 E8 89 09 66 5B 66 58 B1  // ...........f[fX.
    6EA0: 00 E8 96 07 66 C1 EE 10 E8 D9 06 A8 20 0F 85 8B  // ....f....... ...
    6EB0: 00 A8 40 75 17 66 50 66 53 66 B8 0C 00 00 02 BB  // ..@u.fPfSf......
    6EC0: 08 00 E8 5F 09 66 5B 66 58 E8 68 08 E8 AA 06 0A  // ..._.f[fX.h.....
    6ED0: C0 75 14 66 50 66 53 66 B8 0E 00 00 02 BB 08 00  // .u.fPfSf........
    6EE0: E8 41 09 66 5B 66 58 E8 B1 01 E8 0C FD E8 07 FE  // .A.f[fX.........
    6EF0: E8 67 FE 75 28 E8 76 02 0A DB 74 21 66 50 66 53  // .g.u(.v...t!fPfS
    6F00: 66 B8 0F 00 00 02 BB 08 00 E8 18 09 66 5B 66 58  // f...........f[fX
    6F10: E8 05 FC E8 68 07 B5 00 E8 F2 FD EB 08 E8 3B 07  // ....h.........;.
    6F20: B5 01 E8 E8 FD 66 50 66 53 66 B8 15 00 00 02 BB  // .....fPfSf......
    6F30: 08 00 E8 EF 08 66 5B 66 58 E8 D5 00 C3 E8 B9 0A  // .....f[fX.......
    6F40: C3 E8 0B FD E8 A6 06 33 C9 E8 8B 01 66 33 D2 66  // .......3....f3.f
    6F50: 33 C0 E8 DF FD E8 A1 0A 0B C0 74 1C E8 89 07 E8  // 3.........t.....
    6F60: 52 00 B1 FF E8 77 00 33 C0 E8 AB FC 74 0A E8 88  // R....w.3....t...
    6F70: FC 50 E8 27 07 58 EB F1 32 C9 E8 A6 01 E8 79 0A  // .P.'.X..2.....y.
    6F80: 0B C0 C3 E8 C9 FC E8 64 06 66 33 C0 66 BA 00 F0  // .......d.f3.f...
    6F90: FF FF E8 15 01 51 B1 01 E8 6E 01 59 E8 5C 07 33  // .....Q...n.Y.\.3
    6FA0: C0 E8 73 FC 74 0A E8 50 FC 50 E8 E0 06 58 EB F1  // ..s.t..P.P...X..
    6FB0: E8 06 07 C3 B8 02 00 E8 3F FC 74 21 B8 02 00 E8  // ........?.t!....
    6FC0: 63 F4 F6 C3 04 75 0A E8 2F 0A 83 E0 FD E8 32 0A  // c....u../.....2.
    6FD0: C3 66 B8 02 00 00 00 E8 5A FD E8 A9 F5 C3 E8 4C  // .f......Z......L
    6FE0: 08 74 13 BB 02 00 E8 32 08 8A E1 E8 36 08 E8 E0  // .t.....2....6...
    6FF0: 06 0C 01 C3 0C 01 C3 51 E8 32 08 74 0C 8A CC BB  // .......Q.2.t....
    7000: 02 00 E8 16 08 8A C4 8A E1 59 C3 B0 01 E8 08 06  // .........Y......
    7010: C3 B0 00 E8 02 06 C3 E8 08 0C 75 18 E8 7C 00 E8  // ..........u..|..
    7020: D7 FB 80 F9 01 75 0E 51 E8 30 06 B5 01 E8 DD FC  // .....u.Q.0......
    7030: 59 E8 DD FF C3 E8 D3 FF 51 E8 51 06 B5 00 E8 CC  // Y.......Q.Q.....
    7040: FC 59 C3 B8 02 00 E8 B0 FB 74 03 E8 75 06 C3 E8  // .Y.......t..u...
    7050: C6 04 3B C1 7C 35 8B C1 E8 06 05 E8 3B 07 8B C8  // ..;.|5......;...
    7060: 51 E8 36 05 E8 FA 04 59 E8 2E 07 3B C8 72 02 8B  // Q.6....Y...;.r..
    7070: C1 8D 5C 04 E8 04 0E 32 C9 E8 D8 0A FE C1 38 C1  // ..\....2......8.
    7080: 72 F7 8D 5C 04 E8 7B 0E 0B C0 C3 33 C0 C3 BB 00  // r..\..{....3....
    7090: 48 33 C0 8A C2 C1 E0 02 03 D8 C3 53 BB 03 00 E8  // H3.........S....
    70A0: 79 07 66 25 FF 0F 00 00 5B C3 53 66 50 66 51 66  // y.f%....[.SfPfQf
    70B0: 8B C8 BB 03 00 E8 63 07 66 23 C2 66 0B C1 E8 63  // ......c.f#.f...c
    70C0: 07 66 59 66 58 5B C3 66 50 BB 05 00 E8 4C 07 25  // .fYfX[.fP....L.%
    70D0: FF 0F 8B C8 66 58 C3 E8 1F 09 23 C8 66 50 BB 05  // ....fX....#.fP..
    70E0: 00 E8 37 07 25 00 F0 0B C1 E8 38 07 66 58 C3 66  // ..7.%.....8.fX.f
    70F0: 50 53 BB 06 00 E8 23 07 A8 10 75 09 BB F0 46 E8  // PS....#...u...F.
    7100: 01 0E 3D 5A A5 5B 66 58 C3 66 50 53 BB 06 00 E8  // ..=Z.[fX.fPS....
    7110: 09 07 80 F1 01 C0 E1 04 24 EF 0A C1 E8 05 07 5B  // ........$......[
    7120: 66 58 C3 53 66 50 BB F8 46 E8 D7 0D 8A C1 E8 32  // fX.SfP..F......2
    7130: 0D 66 58 5B C3 53 BB F8 46 E8 C7 0D 83 E0 01 5B  // .fX[.S..F......[
    7140: C3 53 66 50 BB 07 00 E8 D1 06 F6 C4 01 66 58 B0  // .SfP.........fX.
    7150: 06 74 02 B0 08 5B C3 53 BB 07 00 E8 BD 06 80 E4  // .t...[.S........
    7160: FE 80 FD 06 74 03 80 CC 01 E8 B8 06 5B C3 66 50  // ....t.......[.fP
    7170: BB 06 00 E8 A5 06 24 40 C0 E8 06 8A D8 66 58 C3  // ......$@.....fX.
    7180: C3 50 66 51 E8 72 FA 83 EC 04 8B EC 66 33 C0 66  // .PfQ.r......f3.f
    7190: 89 46 00 33 D2 8D BC C0 01 8D 1D E8 65 0D 0B C0  // .F.3........e...
    71A0: 74 3D 8B DF B0 00 E8 2D 01 74 2F 8B DF E8 D7 F7  // t=.....-.t/.....
    71B0: 66 8B 46 00 3B C8 7F 10 72 20 66 C1 C8 10 66 C1  // f.F.;...r f...f.
    71C0: C9 10 3B C8 7F 0E EB 12 66 C1 C8 10 66 C1 C9 10  // ..;.....f...f...
    71D0: 3B C8 72 06 8B D7 66 89 4E 00 83 C7 1C EB BA 0B  // ;.r...f.N.......
    71E0: D2 74 0A 8D 9C A4 01 E8 73 F7 E9 88 00 66 33 C0  // .t......s....f3.
    71F0: 66 89 46 00 8D BC 4C 02 33 D2 8D 1D E8 04 0D 0B  // f.F...L.3.......
    7200: C0 74 58 66 50 E8 E1 F3 3C 01 66 58 74 05 3D 40  // .tXfP...<.fXt.=@
    7210: 06 73 43 66 52 66 8B D0 8D 5D 04 E8 E5 0C E8 5D  // .sCfRf...].....]
    7220: 00 8B CA 66 5A 74 2F 56 8D 9C A4 01 8B F1 E8 4B  // ...fZt/V.......K
    7230: F7 5E B0 00 E8 9F 00 74 1D 8D 1D E8 C5 0C 8B D9  // .^.....t........
    7240: 8B 47 06 66 C1 E0 10 8B 47 02 66 3B 46 00 72 06  // .G.f....G.f;F.r.
    7250: 8B D1 66 89 46 00 83 C7 08 EB 9F 0B D2 74 16 56  // ..f.F........t.V
    7260: 8D 9C A4 01 8B F2 E8 13 F7 5E 53 8D 9C BA 01 33  // .........^S....3
    7270: C0 E8 07 0C 5B 83 C4 04 0B D2 66 59 58 C3 57 53  // ....[.....fYX.WS
    7280: 51 E8 E6 07 3B 55 02 75 18 66 C1 CA 10 8B DA 66  // Q...;U.u.f.....f
    7290: C1 CA 10 3B 5D 06 75 09 0A C0 74 0E 3A 45 1B 74  // ...;].u...t.:E.t
    72A0: 09 83 C7 1C E2 DE 33 D2 EB 02 8B D7 0B D2 59 5B  // ......3.......Y[
    72B0: 5F C3 51 66 52 E8 B2 07 3A 65 1A 75 09 0A C0 74  // _.QfR...:e.u...t
    72C0: 0E 3A 45 1B 74 09 83 C7 1C E2 ED 33 FF EB 00 0B  // .:E.t......3....
    72D0: FF 66 5A 59 C3 C3 66 51 66 52 53 53 66 C1 CE 10  // .fZY..fQfRSSf...
    72E0: 8B DE 66 C1 CE 10 E8 1A 0C 5B 66 8B D0 E8 97 F6  // ..f......[f.....
    72F0: 3B CA 72 0A 66 3B CA 72 05 E8 8A F8 75 02 32 C0  // ;.r.f;.r....u.2.
    7300: 5B 66 5A 66 59 C3 56 57 E8 A7 FF 8B F7 E8 6C F6  // [fZfY.VW......l.
    7310: 5F 5E C3 66 50 53 66 51 52 57 56 51 8B DE B9 08  // _^.fPSfQRWVQ....
    7320: 00 E8 36 08 59 8D 5C 08 8B C1 66 C1 E0 10 8A C2  // ..6.Y.\...f.....
    7330: E8 30 0B F6 C2 03 75 24 8B C1 24 7F BF F6 73 80  // .0....u$..$...s.
    7340: 3D FF 0F 84 0F 01 3A 05 75 0D 66 8B 45 01 66 B9  // =.....:.u.f.E.f.
    7350: 00 05 02 00 E9 96 00 83 C7 05 EB E3 F6 C2 01 74  // ...............t
    7360: 25 8B C1 E8 70 01 0F 84 EB 00 33 C9 8A CC 8A D0  // %...p.....3.....
    7370: 0A C0 75 12 8D 5C 08 66 25 FF FF 00 00 66 C1 E0  // ..u..\.f%....f..
    7380: 08 E8 DF 0A EB B2 8A E1 8A CA 80 E1 0C C0 E9 02  // ................
    7390: 80 E2 F0 C0 EA 04 8A EA 80 FC 70 72 2A 80 FC 75  // ..........pr*..u
    73A0: 73 25 80 EC 70 8A C4 32 E4 50 E8 30 02 8B D8 58  // s%..p..2.P.0...X
    73B0: 38 D8 72 05 33 C0 E9 9C 00 E8 28 02 E8 44 0B 0B  // 8.r.3.....(..D..
    73C0: C0 0F 84 90 00 EB 1B 32 C0 E8 E6 FE 0F 84 85 00  // .......2........
    73D0: 8D 5C 16 8B 05 E8 A3 0A 8B 45 06 66 C1 E0 10 8B  // .\.......E.f....
    73E0: 45 02 50 E8 B3 03 66 C1 E1 10 8B C8 58 8D 1C E8  // E.P...f.....X...
    73F0: 71 0A 66 50 8D 5C 04 66 8B C1 E8 66 0A 66 58 66  // q.fP.\.f...f.fXf
    7400: C1 E8 10 66 81 E1 FF FF 00 00 66 F7 E1 66 50 8D  // ...f......f..fP.
    7410: 5C 06 E8 EE 0A 8B C8 66 58 66 D3 E0 66 C1 E8 10  // \......fXf..f...
    7420: 40 8D 5C 14 E8 54 0A BF 56 74 83 F9 01 74 11 BF  // @.\..T..Vt...t..
    7430: 5E 74 81 F9 01 01 74 08 BF 66 74 83 F9 02 75 15  // ^t....t..ft...u.
    7440: 8D 5C 0C 66 8B 05 E8 1A 0A 8D 5C 10 66 8B 45 04  // .\.f......\.f.E.
    7450: E8 10 0A 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00 40  // .....^_ZfY[fX..@
    7460: 01 90 01 01 40 01 90 01 02 80 02 90 01 03 80 02  // ....@...........
    7470: 90 01 04 40 01 90 01 05 40 01 90 01 06 80 02 90  // ...@....@.......
    7480: 01 07 D0 02 5E 01 0D 40 01 90 01 0E 80 02 90 01  // ....^..@........
    7490: 0F 80 02 5E 01 10 80 02 5E 01 11 80 02 E0 01 12  // ...^....^.......
    74A0: 80 02 E0 01 13 80 02 90 01 23 20 04 90 01 32 20  // .........# ...2 
    74B0: 04 B0 02 33 20 04 C0 02 62 80 02 E0 01 FF 05 0A  // ...3 ...b.......
    74C0: 05 05 05 00 00 00 05 0B 06 05 05 00 00 00 08 10  // ................
    74D0: 08 08 08 00 00 00 56 E8 9B 07 80 E4 01 3B 04 74  // ......V......;.t
    74E0: 09 83 C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B C0 5E  // ......3....D...^
    74F0: C3 57 53 50 E8 7E 07 83 E9 0A E8 E0 00 83 F8 05  // .WSP.~..........
    7500: 76 03 B8 05 00 D1 E0 03 C8 FB A5 83 C6 02 E2 FA  // v...............
    7510: B8 FF FF AB 58 5B 5F C3 66 53 51 66 52 E8 41 00  // ....X[_.fSQfR.A.
    7520: E8 77 00 66 C1 E8 10 66 0F B7 D8 66 B8 00 00 00  // .w.f...f...f....
    7530: 03 66 D3 E8 66 33 D2 66 F7 F3 E8 5C 02 66 5A 59  // .f..f3.f...\.fZY
    7540: 66 5B C3 53 66 50 BB 07 00 E8 CF 02 0A C0 66 58  // f[.SfP........fX
    7550: 5B C3 53 66 50 BB 07 00 E8 C0 02 A8 01 66 58 5B  // [.SfP........fX[
    7560: C3 53 66 50 8D 5C 06 E8 99 09 8A C8 66 58 5B C3  // .SfP.\......fX[.
    7570: 51 B9 08 00 E8 F8 05 59 C3 53 8D 5C 08 E8 83 09  // Q......Y.S.\....
    7580: 24 03 5B C3 8D 5C 09 E8 79 09 C3 51 53 B1 01 8A  // $.[..\..y..QS...
    7590: E8 8D 5C 08 E8 10 09 5B 59 C3 53 8D 1C E8 63 09  // ..\....[Y.S...c.
    75A0: 5B C3 53 8D 5C 04 E8 5A 09 5B C3 53 8D 5C 16 E8  // [.S.\..Z.[.S.\..
    75B0: 51 09 5B C3 53 66 52 33 C0 E8 C2 FC 66 5A 75 1B  // Q.[.SfR3....fZu.
    75C0: E8 34 00 74 16 E8 15 00 40 83 F8 05 73 0D E8 92  // .4.t....@...s...
    75D0: 08 48 E8 0F 00 66 8B C2 E8 88 08 5B C3 BB 00 4E  // .H...f.....[...N
    75E0: E8 20 09 C3 BB 08 4E C1 E0 03 03 D8 C3 BB 00 4E  // . ....N........N
    75F0: B9 32 00 E8 64 05 C3 51 E8 E2 FF 0B C0 74 12 8B  // .2..d..Q.....t..
    7600: C8 BB 08 4E E8 FC 08 66 3B C2 74 07 83 C3 08 E2  // ...N...f;.t.....
    7610: F3 0B DB 59 C3 C3 C3 00 8A E8 BB 20 DF 3C 01 74  // ...Y....... .<.t
    7620: 02 32 DB E8 23 29 E8 5A F6 66 B8 80 06 00 08 66  // .2..#).Z.f.....f
    7630: 33 DB 8A D9 8A CD E8 CC 00 C3 66 51 66 52 66 57  // 3.........fQfRfW
    7640: 66 B8 80 05 00 08 66 BB 00 4C 00 00 66 33 C9 8B  // f.....f..L..f3..
    7650: CE E8 B1 00 66 5F 66 5A 66 59 C3 66 50 66 53 66  // ....f_fZfY.fPfSf
    7660: B8 10 00 00 02 BB 08 00 E8 B9 01 66 5B 66 58 66  // ...........f[fXf
    7670: B8 80 07 00 04 66 33 DB 8B DE E8 88 00 C3 66 B8  // .....f3.......f.
    7680: 80 08 00 04 66 33 DB 8B DE E8 79 00 C3 66 B8 80  // ....f3....y..f..
    7690: 09 00 04 66 33 DB 8B DE E8 6A 00 C3 C3 66 B8 80  // ...f3....j...f..
    76A0: 0A 00 04 66 33 DB 8B DE E8 5A 00 E8 57 EF F6 C3  // ...f3....Z..W...
    76B0: 02 74 03 B0 00 C3 B0 01 C3 66 B8 80 0D 00 00 E8  // .t.......f......
    76C0: 43 00 C3 66 B8 80 0F 00 04 66 33 DB 8A D9 E8 34  // C..f.....f3....4
    76D0: 00 66 B8 80 0F 00 04 66 33 DB 56 E8 59 03 03 74  // .f.....f3.V.Y..t
    76E0: 04 8B 1C 5E E8 1E 00 C3 66 B8 00 00 00 00 E8 14  // ...^....f.......
    76F0: 00 66 B8 80 0C 00 04 E8 0B 00 C3 66 B8 00 01 00  // .f.........f....
    7700: 00 E8 01 00 C3 83 EC 1C 8B EC 66 89 46 00 66 89  // ..........f.F.f.
    7710: 5E 04 66 89 4E 08 66 89 56 0C 66 89 7E 10 66 89  // ^.f.N.f.V.f.~.f.
    7720: 76 14 8C D0 66 C1 E0 10 8B C4 BB 42 00 E8 5F 03  // v...f......B.._.
    7730: 83 C4 1C C3 51 8D 5C 14 E8 C8 07 66 C1 E0 10 E8  // ....Q.\....f....
    7740: 02 00 59 C3 83 EC 1C 8B EC 66 3D F0 FF FF 03 76  // ..Y......f=....v
    7750: 06 66 B8 F0 FF FF 03 66 8B C8 66 33 C0 66 89 46  // .f.....f..f3.f.F
    7760: 08 66 89 46 0C 66 89 46 00 66 89 46 04 66 89 46  // .f.F.f.F.f.F.f.F
    7770: 10 66 89 46 18 B0 01 88 46 10 66 B8 00 00 00 80  // .f.F....F.f.....
    7780: 66 0B C1 66 89 46 14 8C D0 66 C1 E0 10 8B C4 BB  // f..f.F...f......
    7790: 35 00 E8 FA 02 83 C4 1C C3 3D C0 7F 76 04 B8 C0  // 5........=..v...
    77A0: 7F C3 83 C0 3F 24 C0 C3 53 51 66 50 B9 D0 84 80  // ....?$..SQfP....
    77B0: FB 03 74 0B B9 A0 8C 80 FB 00 75 03 B9 F0 D2 66  // ..t.......u....f
    77C0: 33 D2 8B D1 66 58 59 5B C3 66 52 B3 00 66 F7 C2  // 3...fXY[.fR..f..
    77D0: 00 00 FF FF 75 18 80 FD 13 74 13 80 FD 17 74 0E  // ....u....t....t.
    77E0: 80 FD 14 74 09 B3 03 80 F9 03 74 02 B3 02 66 5A  // ...t......t...fZ
    77F0: C3 E8 0F 07 66 C1 E8 10 0B C0 74 1C 53 83 C3 06  // ....f.....t.S...
    7800: E8 00 07 5B 3D E0 01 72 0F 53 83 C3 18 E8 F3 06  // ...[=..r.S......
    7810: 5B A8 80 75 03 0C 01 C3 32 C0 C3 53 83 C3 4C E8  // [..u....2..S..L.
    7820: AF 06 5B C3 53 83 C3 4C E8 01 06 5B C3 56 E8 06  // ..[.S..L...[.V..
    7830: 02 83 C6 04 8A 64 10 8A 44 10 83 3C 00 5E C3 BB  // .....d..D..<.^..
    7840: 00 50 83 F8 02 74 5A BB 00 58 83 F8 20 74 52 BB  // .P...tZ..X.. tR.
    7850: 00 60 83 F8 08 74 4A BB 00 68 3D 80 00 74 42 BB  // .`...tJ..h=..tB.
    7860: 00 70 3D 00 02 74 3A BB 00 78 3D 00 04 74 32 BB  // .p=..t:..x=..t2.
    7870: 00 80 3D 00 08 74 2A BB 00 88 83 F8 40 74 22 BB  // ..=..t*.....@t".
    7880: 00 90 83 F8 01 74 1A BB 00 98 83 F8 04 74 12 BB  // .....t.......t..
    7890: 00 A0 83 F8 10 74 0A BB 00 A8 3D 00 01 74 02 33  // .....t....=..t.3
    78A0: DB C3 57 E8 56 00 74 0A 8B 5D 02 E8 08 00 0B DB  // ..W.V.t..]......
    78B0: 5F C3 33 DB 5F C3 52 51 0B DB 74 1B 56 E8 58 01  // _.3._.RQ..t.V.X.
    78C0: 03 DE 5E 33 C9 8A 4F 01 80 3F FF 74 08 3A 07 74  // ..^3..O..?.t.:.t
    78D0: 06 03 D9 EB F0 33 DB 0B DB 59 5A C3 56 51 E8 37  // .....3...YZ.VQ.7
    78E0: 01 32 C9 8D 7C 08 3B 5D 04 74 0C 83 C7 10 FE C1  // .2..|.;].t......
    78F0: 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3 56 51 E8 17  // :L.r.3...Y^.VQ..
    7900: 01 32 C9 8D 7C 08 3B 1D 74 0C 83 C7 10 FE C1 3A  // .2..|.;.t......:
    7910: 4C 06 72 F2 33 FF 0B FF 59 5E C3 56 51 E8 F8 00  // L.r.3...Y^.VQ...
    7920: 32 C9 8D 7C 08 3A 1D 74 0C 83 C7 10 FE C1 3A 4C  // 2..|.:.t......:L
    7930: 06 72 F2 33 FF 0B FF 59 5E C3 56 51 E8 D9 00 32  // .r.3...Y^.VQ...2
    7940: C9 8D 7C 08 3B 45 0C 74 0C 83 C7 10 FE C1 3A 4C  // ..|.;E.t......:L
    7950: 06 72 F1 33 FF 0B FF 59 5E C3 57 50 E8 DB FF 8A  // .r.3...Y^.WP....
    7960: C3 8B 5D 02 E8 4F FF 58 5F C3 53 32 C9 B3 01 E8  // ..]..O.X_.S2....
    7970: E8 FF 74 03 8A 4F 02 0A C9 5B C3 53 32 ED B3 02  // ..t..O...[.S2...
    7980: E8 D7 FF 74 03 8A 6F 02 0A ED 5B C3 50 57 8B DA  // ...t..o...[.PW..
    7990: E8 49 FF 75 04 33 DB EB 0D B0 14 8B 5D 08 E8 15  // .I.u.3......]...
    79A0: FF 74 F2 8B 5F 02 5F 58 C3 66 50 53 51 57 8D 1C  // .t.._._X.fPSQW..
    79B0: 66 25 FF FF 00 00 E8 AA 04 8B D8 E8 3B 00 23 C3  // f%..........;.#.
    79C0: 74 31 E8 75 FF 0B FF 74 2A 66 50 66 8B 45 04 8D  // t1.u...t*fPf.E..
    79D0: 5C 0C E8 8E 04 66 33 C0 8B 05 8D 5C 04 E8 83 04  // \....f3....\....
    79E0: 66 58 E8 85 FF E8 93 FF 8D 5C 08 66 33 C0 8B C1  // fX.......\.f3...
    79F0: E8 70 04 5F 59 5B 66 58 C3 56 E8 1B 00 8B 44 04  // .p._Y[fX.V....D.
    7A00: 5E C3 56 E8 12 00 89 44 04 5E C3 C3 BF 48 00 8B  // ^.V....D.^...H..
    7A10: 3D 8B 7D 20 8B 7D 0C C3 BE 48 00 8B 34 8B 74 20  // =.} .}...H..4.t 
    7A20: 8B 74 30 C3 1E 0E 1F BF 48 00 8B 3D 8B 7D 20 8B  // .t0.....H..=.} .
    7A30: 7D 0E 83 C7 04 1F C3 BE 48 00 8B 34 8B 74 20 8B  // }.......H..4.t .
    7A40: 74 10 C3 BF 48 00 8B 3D 8B 7D 20 8B 7D 26 83 C7  // t...H..=.} .}&..
    7A50: 04 C3 BE 48 00 8B 34 8B 74 20 8B 74 1A C3 BE 48  // ...H..4.t .t...H
    7A60: 00 8B 34 8B 74 20 8B 74 3A C3 50 52 BF 48 00 8B  // ..4.t .t:.PR.H..
    7A70: 3D 8B 7D 20 8B 7D 0A 8B 05 83 E8 04 33 D2 B9 1C  // =.} .}......3...
    7A80: 00 F7 F1 8B C8 83 C7 04 5A 58 C3 E8 01 00 CB 83  // ........ZX......
    7A90: EC 06 8B EC 89 46 00 66 33 C0 C6 46 04 00 89 46  // .....F.f3..F...F
    7AA0: 02 06 52 8A D3 8B C5 E8 E0 16 5A 07 83 C4 06 C3  // ..R.......Z.....
    7AB0: E8 59 FF 66 F7 45 10 01 00 00 00 C3 50 E8 4C FF  // .Y.f.E......P.L.
    7AC0: B8 01 00 09 45 10 58 C3 E8 41 FF 88 45 10 C3 66  // ....E.X..A..E..f
    7AD0: 53 83 EC 48 8B EC 66 89 5E 00 66 89 4E 04 8C D0  // S..H..f.^.f.N...
    7AE0: 66 C1 E0 10 8B C4 BB 00 00 E8 A3 FF 83 C4 48 66  // f.............Hf
    7AF0: 5B E8 43 01 E8 7D 01 E8 0E 00 BB 04 00 E8 1B FD  // [.C..}..........
    7B00: 66 C1 E8 10 E8 C1 FF C3 83 EC 0C 8B EC 8C D0 66  // f..............f
    7B10: C1 E0 10 8B C4 BB 16 00 E8 74 FF 66 BB 00 00 00  // .........t.f....
    7B20: 00 83 C4 0C E8 E5 FE 66 8B C3 66 C1 E8 08 66 89  // .......f..f...f.
    7B30: 45 28 66 8B C3 66 C1 E0 18 66 89 45 2C C3 E8 CB  // E(f..f...f.E,...
    7B40: FE 66 8B 5D 08 66 8B 4D 0C C3 56 E8 10 FF 66 8B  // .f.].f.M..V...f.
    7B50: 44 08 5E C3 B0 01 C3 B0 08 C3 53 66 50 66 33 C0  // D.^.......SfPf3.
    7B60: E8 00 03 83 C3 04 E2 F8 66 58 5B C3 32 C0 C3 FC  // ........fX[.2...
    7B70: E8 90 03 66 C1 CB 10 E8 E9 02 66 C1 CB 10 66 81  // ...f......f...f.
    7B80: C3 04 00 04 00 E2 E9 C3 FC 66 AD E8 D5 02 83 C3  // .........f......
    7B90: 04 E2 F6 C3 FC E8 6B 03 66 AB 83 C3 04 E2 F6 C3  // ......k.f.......
    7BA0: 66 50 B8 64 00 E8 10 00 66 58 C3 66 50 B8 50 C3  // fP.d....fX.fP.P.
    7BB0: D1 E1 E8 03 00 66 58 C3 52 F7 E1 8B CA E8 5C 01  // .....fX.R.....\.
    7BC0: 66 53 8B D9 66 C1 E3 10 8B D8 66 B8 B8 A8 05 00  // fS..f.....f.....
    7BD0: B2 30 66 EF B2 34 66 ED 33 C9 66 03 D8 73 0A 66  // .0f..4f.3.f..s.f
    7BE0: ED 66 A9 00 00 00 80 75 F6 66 ED 66 3B C3 73 0C  // .f.....u.f.f;.s.
    7BF0: 66 C1 E8 10 3B C1 72 04 8B C8 EB ED 66 5B 5A C3  // f...;.r.....f[Z.
    7C00: 66 52 E8 17 01 66 B8 B8 A8 05 00 B2 30 66 EF B2  // fR...f......0f..
    7C10: 34 66 ED 66 33 D2 66 BB 64 00 00 00 66 F7 F3 66  // 4f.f3.f.d...f..f
    7C20: 5A C3 66 50 53 BB 07 00 E8 F0 FB 25 00 02 35 00  // Z.fPS......%..5.
    7C30: 02 0B C0 5B 66 58 C3 66 51 B3 01 E8 78 00 E8 11  // ...[fX.fQ...x...
    7C40: FE 66 33 C9 8B 4C 08 66 C1 E0 0A 0B C9 75 03 B9  // .f3..L.f.....u..
    7C50: 00 10 66 2B C1 E8 FA FD 66 89 44 04 89 4C 08 66  // ..f+....f.D..L.f
    7C60: 59 C3 56 1E 0E 1F E8 E9 FD 66 8B 44 04 66 C1 E0  // Y.V......f.D.f..
    7C70: 0A 1F 5E C3 C3 50 52 BE 48 00 8B 34 8B 74 20 8B  // ..^..PR.H..4.t .
    7C80: 74 1E 8B 04 83 E8 04 33 D2 B9 04 00 F7 F1 8B C8  // t......3........
    7C90: 83 C6 04 5A 58 C3 56 E8 9D FD 83 C6 04 8A 6C 0F  // ...ZX.V.......l.
    7CA0: 5E C3 56 E8 91 FD 80 FD 00 74 06 83 C6 04 88 6C  // ^.V......t.....l
    7CB0: 0F 5E C3 32 C0 C3 66 53 83 EC 04 8B EC 8C D0 66  // .^.2..fS.......f
    7CC0: C1 E0 10 8B C4 66 89 5E 00 BB 06 00 E8 C0 FD 8B  // .....f.^........
    7CD0: EC 66 8B 46 00 83 C4 04 66 5B C3 83 EC 0C 8B EC  // .f.F....f[......
    7CE0: 8C D0 66 C1 E0 10 8B C4 BB 16 00 E8 A1 FD 8B EC  // ..f.............
    7CF0: 66 8B 5E 00 66 8B 4E 00 66 8B 56 08 83 C4 0C C3  // f.^.f.N.f.V.....
    7D00: BF 48 00 8B 3D 8B 7D 20 8B 7D 12 C3 BF 48 00 8B  // .H..=.} .}...H..
    7D10: 3D C3 57 BF 18 00 2E 8B 55 06 5F C3 66 50 8C C8  // =.W.....U._.fP..
    7D20: 3D 00 C0 75 0C BA C3 03 EC 8A F0 0A F6 74 02 EB  // =..u.........t..
    7D30: 0E 53 2E 8B 1E 14 00 B2 20 E8 D6 00 8A F4 5B 32  // .S...... .....[2
    7D40: D2 66 ED 66 58 C3 2E 8B 1E 14 00 C3 0B C9 75 1A  // .f.fX.........u.
    7D50: 4B 74 16 43 3B DA 77 09 8B C8 8B C2 2B D2 F7 F3  // Kt.C;.w.....+...
    7D60: 91 F7 F3 8B DA 8B D1 2B C9 C3 3B CA 72 1A 75 10  // .......+..;.r.u.
    7D70: 3B D8 77 0C 2B C3 8B D8 2B C9 2B D2 B8 01 00 C3  // ;.w.+...+.+.....
    7D80: 2B C9 2B DB 93 87 CA C3 55 56 2B F6 8B EE 03 DB  // +.+.....UV+.....
    7D90: 13 C9 72 11 45 3B CA 72 F5 77 04 3B D8 76 EF F8  // ..r.E;.r.w.;.v..
    7DA0: 13 F6 4D 78 20 D1 D9 D1 DB 2B C3 1B D1 F5 72 F0  // ..Mx ....+....r.
    7DB0: 03 F6 4D 78 0C D1 E9 D1 DB 03 C3 13 D1 73 F1 EB  // ..Mx.........s..
    7DC0: DF 03 C3 13 D1 8B D8 8B CA 8B C6 33 D2 5E 5D C3  // ...........3.^].
    7DD0: 93 50 92 0B C0 74 02 F7 E2 91 0B C0 74 04 F7 E3  // .P...t......t...
    7DE0: 03 C8 58 F7 E3 03 D1 C3 52 66 50 B4 80 8A C7 66  // ..X.....RfP....f
    7DF0: C1 E0 10 8A E3 8A C2 24 FC BA F8 0C 66 EF 66 58  // .......$....f.fX
    7E00: 5A C3 52 BA FC 0C 66 ED 5A C3 52 BA FC 0C 66 EF  // Z.R...f.Z.R...f.
    7E10: 5A C3 E8 31 FF 9C FA E8 CE FF E8 E5 FF 9D C3 E8  // Z..1............
    7E20: 24 FF 9C FA E8 C1 FF E8 E0 FF 9D C3 52 66 53 66  // $...........RfSf
    7E30: 50 E8 06 00 66 58 66 5B 5A C3 66 C1 E3 10 66 C1  // P...fXf[Z.f...f.
    7E40: EB 0E E8 D7 FE E8 BF 01 C3 66 50 66 C1 E3 10 66  // .........fPf...f
    7E50: C1 EB 10 E8 0C FE 66 03 D8 66 81 CB 00 00 00 80  // ......f..f......
    7E60: 66 58 C3 52 66 53 E8 04 00 66 5B 5A C3 66 50 E8  // fX.RfS...f[Z.fP.
    7E70: AA FE E8 D4 FF E8 B5 01 66 58 C3 52 51 66 53 66  // ........fX.RQfSf
    7E80: 50 8A CB 80 E3 FC 80 E1 03 C0 E1 03 E8 8D FE E8  // P...............
    7E90: B7 FF E8 8C 01 66 D3 C8 58 50 66 D3 C0 E8 8D 01  // .....f..XPf.....
    7EA0: 66 58 66 5B 59 5A C3 66 50 51 C0 E1 03 E8 53 00  // fXf[YZ.fPQ....S.
    7EB0: 66 D3 C8 8A C5 66 D3 C0 E8 A8 FF 59 66 58 C3 66  // f....f.....YfX.f
    7EC0: 50 51 C0 E1 03 E8 3B 00 66 D3 C8 59 8A E8 66 58  // PQ....;.f..Y..fX
    7ED0: C3 E8 5F 00 C3 E8 44 FE 66 C1 E3 10 66 C1 EB 0E  // .._...D.f...f...
    7EE0: E8 0B 01 C3 E8 35 FE 66 C1 E3 02 E8 00 01 C3 52  // .....5.f.......R
    7EF0: 66 53 E8 04 00 66 5B 5A C3 E8 20 FE E8 4A FF E8  // fS...f[Z.. ..J..
    7F00: 1F 01 C3 51 66 52 8A EB 8A CB 80 E1 03 C0 E1 03  // ...QfR..........
    7F10: 80 E3 FC E8 D9 FF 80 F9 00 74 14 66 8B D0 83 C3  // .........t.f....
    7F20: 04 E8 CB FF 83 EB 04 66 92 66 0F AD D0 8A DD 66  // .......f.f.....f
    7F30: 5A 59 C3 52 66 53 E8 9C FF 66 5B 5A C3 52 66 53  // ZY.RfS...f[Z.RfS
    7F40: E8 A1 FF 66 5B 5A C3 66 50 55 52 66 50 8B EC 8B  // ...f[Z.fPURfP...
    7F50: 56 0C 89 56 08 E8 C4 FD B2 30 66 ED 66 89 46 0A  // V..V.....0f.f.F.
    7F60: 66 58 5A 5D C3 66 50 55 52 66 50 8B EC 8B 56 0C  // fXZ].fPURfP...V.
    7F70: 89 56 08 E8 A6 FD 2E A1 26 63 B2 18 EF B2 30 66  // .V......&c....0f
    7F80: ED 66 89 46 0A 66 58 5A 5D C3 66 50 55 52 8B EC  // .f.F.fXZ].fPUR..
    7F90: E8 89 FD B2 30 66 8B 46 0A 66 EF 8B 56 08 89 56  // ....0f.F.f..V..V
    7FA0: 0C 66 8B 46 04 66 89 46 08 5A 5D 66 58 66 58 C3  // .f.F.f.F.Z]fXfX.
    7FB0: 66 50 52 E8 66 FD B2 18 66 ED 2E A3 26 63 5A 66  // fPR.f...f...&cZf
    7FC0: 58 C3 66 52 66 53 E8 53 FD 66 81 CB 00 00 00 80  // X.fRfS.S.f......
    7FD0: E8 4E 00 66 5B 66 5A C3 66 52 66 53 E8 3D FD 66  // .N.f[fZ.fRfS.=.f
    7FE0: 81 CB 00 00 00 80 E8 44 00 66 5B 66 5A C3 66 81  // .......D.f[fZ.f.
    7FF0: FB FF 00 00 00 77 04 8A D3 EB 09 66 8B C3 B2 30  // .....w.....f...0
    8000: 66 EF B2 34 66 ED C3 66 81 FB FF 00 00 00 77 04  // f..4f..f......w.
    8010: 8A D3 EB 0A 66 93 B2 30 66 EF 66 93 B2 34 66 EF  // ....f..0f.f..4f.
    8020: C3 66 8B C3 B2 00 66 EF B2 04 66 ED C3 66 93 B2  // .f....f...f..f..
    8030: 00 66 EF 66 93 B2 04 66 EF C3 C3 C3 55 8B EC 53  // .f.f...f....U..S
    8040: 51 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28 00 8D 66  // Q..&.\.&.L..(..f
    8050: FC 59 5B 5D C3 53 51 8B F0 26 8B 5C 24 33 C9 E8  // .Y[].SQ..&.\$3..
    8060: 14 00 59 5B C3 55 8B EC 53 51 8B F0 26 8B 5C 08  // ..Y[.U..SQ..&.\.
    8070: 26 8B 4C 0A EB D5 52 56 57 C8 06 00 00 8B F0 89  // &.L...RVW.......
    8080: 4E FE 8C D0 8E C0 26 8B 7C 26 8A 45 01 32 E4 B9  // N.....&.|&.E.2..
    8090: 20 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2  //  .+.............
    80A0: FA 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1 D7 E2 FA  // ..M.2...........
    80B0: F7 D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C D0 8E C0  // ....&!D.&!|.....
    80C0: 26 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B C1 8B C8  // &.|&.M.2.. .+...
    80D0: 66 C7 46 FA FF FF FF FF E3 08 D1 6E FC D1 5E FA  // f.F........n..^.
    80E0: E2 F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3 06 D1 EA  // ...M.2....V.....
    80F0: D1 D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03 32 ED E3  // ....#F.#V..M.2..
    8100: 06 D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09 54 1E C9  // .......&.D.&.T..
    8110: 5F 5E 5A C3 55 8B EC 53 51 52 57 50 8B D8 26 8B  // _^Z.U..SQRWP..&.
    8120: 7F 26 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B  // .&.E.2.. .+.....
    8130: D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88 4E F6 C6  // ..........M..N..
    8140: 46 F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7 E2 FA  // F.....N.........
    8150: 26 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A E9 F1 FE  // &.G.&....f._Z...
    8160: 53 51 52 57 8B D8 8C D0 8E C0 26 8B 77 26 8A 4C  // SQRW......&.w&.L
    8170: 01 32 ED B8 20 00 2B C1 8B C8 BE FF FF 8B D6 E3  // .2.. .+.........
    8180: 06 D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D 02 32 ED  // .......&..&.M.2.
    8190: 8B C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21  // ..............&!
    81A0: 47 1C 26 21 57 1E 5F E9 CC 05 53 56 8B D8 8C D2  // G.&!W._...SV....
    81B0: 8E C2 26 8B 77 26 80 3C 00 74 73 80 3C 01 75 58  // ..&.w&.<.ts.<.uX
    81C0: 8A 44 01 32 E4 26 83 7F 1E 00 75 4C 26 3B 47 1C  // .D.2.&....uL&;G.
    81D0: 75 46 8A 04 6B F0 03 8A 84 4A DE 26 01 47 26 8C  // uF..k....J.&.G&.
    81E0: D0 8E C0 26 8B 77 26 80 3C 09 74 17 8A 04 32 E4  // ...&.w&.<.t...2.
    81F0: 6B F0 03 8B C3 FF 94 48 DE 26 8B 77 26 8A 04 32  // k......H.&.w&..2
    8200: E4 EB D1 8B 44 01 26 29 47 26 26 FF 47 26 26 8B  // ....D.&)G&&.G&&.
    8210: 47 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A 04 32 E4  // G.&.w...&.w&..2.
    8220: 6B F0 03 8A 84 4A DE 26 01 47 26 E9 80 FF 33 C0  // k....J.&.G&...3.
    8230: 33 F6 8B D6 5E 5B C3 53 51 52 56 8B D8 8D 77 35  // 3...^[.SQRV...w5
    8240: 26 8B 54 02 26 89 57 14 26 C7 47 16 00 00 8B F0  // &.T.&.W.&.G.....
    8250: 26 8B 47 20 33 D2 26 01 47 14 26 11 54 16 8C D1  // &.G 3.&.G.&.T...
    8260: 8E C1 26 F6 47 2F 06 0F 85 0A 05 26 80 7F 34 00  // ..&.G/.....&..4.
    8270: 75 22 26 8B 77 16 26 0B 77 14 75 10 26 D1 67 08  // u"&.w.&.w.u.&.g.
    8280: 26 D1 57 0A 26 D1 67 08 26 D1 57 0A 8B C3 E8 79  // &.W.&.g.&.W....y
    8290: 11 E9 E1 04 26 8A 47 34 32 E4 05 80 00 99 26 89  // ....&.G42.....&.
    82A0: 47 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7 04 53 56  // G.&.W.........SV
    82B0: 8B D8 8D 77 35 26 8A 44 02 32 E4 C1 E0 02 26 8B  // ...w5&.D.2....&.
    82C0: 37 26 8B 34 03 F0 26 8B 47 08 26 8B 5F 0A 26 89  // 7&.4..&.G.&._.&.
    82D0: 04 26 89 5C 02 5E 5B C3 53 52 56 8B D8 8C D0 8D  // .&.\.^[.SRV.....
    82E0: 77 35 8E C0 26 8A 54 02 80 FA 40 73 21 26 8B 77  // w5..&.T...@s!&.w
    82F0: 02 32 F6 C1 E2 02 26 8B 74 04 03 F2 26 8B 57 08  // .2....&.t...&.W.
    8300: 26 8B 47 0A 26 89 14 26 89 44 02 E9 7F 00 80 FA  // &.G.&..&.D......
    8310: 41 75 12 26 8B 47 08 26 8B 57 0A 26 89 47 10 26  // Au.&.G.&.W.&.G.&
    8320: 89 57 12 EB 68 80 FA 40 75 12 26 8B 47 08 26 8B  // .W..h..@u.&.G.&.
    8330: 57 0A 26 89 47 0C 26 89 57 0E EB 51 80 FA 42 75  // W.&.G.&.W..Q..Bu
    8340: 0A 26 8B 47 08 26 89 47 22 EB 42 80 FA 43 75 0A  // .&.G.&.G".B..Cu.
    8350: 26 8A 47 08 26 88 47 33 EB 33 80 FA 46 75 12 26  // &.G.&.G3.3..Fu.&
    8360: 8B 57 08 26 8B 47 0A 26 89 57 18 26 89 47 1A EB  // .W.&.G.&.W.&.G..
    8370: 1C 80 FA 47 75 0A 26 8B 47 08 26 89 47 24 EB 0D  // ...Gu.&.G.&.G$..
    8380: 80 FA 48 75 08 26 8B 47 08 26 89 47 20 5E 5A 5B  // ..Hu.&.G.&.G ^Z[
    8390: C3 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 26 89  // .SV...w5&.D.2.&.
    83A0: 47 14 26 C7 47 16 00 00 5E 5B C3 53 56 8B D8 26  // G.&.G...^[.SV..&
    83B0: 8B 77 02 26 8B 74 02 8A 04 32 E4 26 89 47 14 26  // .w.&.t...2.&.G.&
    83C0: C7 47 16 00 00 26 8B 5F 02 26 FF 47 02 5E 5B C3  // .G...&._.&.G.^[.
    83D0: 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B 34 26 89  // SV..&.w.&.t..4&.
    83E0: 77 14 26 C7 47 16 00 00 26 8B 5F 02 26 83 47 02  // w.&.G...&._.&.G.
    83F0: 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02  // .^[.SV..&.w.&.t.
    8400: 8B 04 8B 74 02 26 89 47 14 26 89 77 16 26 8B 5F  // ...t.&.G.&.w.&._
    8410: 02 26 83 47 02 04 5E 5B C3 53 52 56 8B D8 E8 70  // .&.G..^[.SRV...p
    8420: FF 8B F3 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1  // ...&.G.&.W......
    8430: EA D1 D8 26 01 47 14 26 11 54 16 8B C3 E8 2B 10  // ...&.G.&.T....+.
    8440: E9 4A FF 53 8B D8 26 8B 5F 02 26 FF 47 02 5B C3  // .J.S..&._.&.G.[.
    8450: 53 8B D8 26 8B 5F 02 26 83 47 02 02 5B C3 53 56  // S..&._.&.G..[.SV
    8460: 8B D8 E8 6B FF 8B F3 26 8B 57 20 33 C0 26 01 57  // ...k...&.W 3.&.W
    8470: 14 26 11 44 16 8C D2 8E C2 26 8B 47 2E 32 C0 80  // .&.D.....&.G.2..
    8480: E4 06 3D 00 02 75 07 32 E4 33 D2 5E 5B C3 26 8B  // ..=..u.2.3.^[.&.
    8490: 47 2E 32 C0 80 E4 06 3D 00 04 74 EB 26 80 7F 34  // G.2....=..t.&..4
    84A0: 00 75 08 8B C3 E8 2F 0F 5E 5B C3 26 8A 47 34 32  // .u..../.^[.&.G42
    84B0: E4 26 89 47 1C 26 C7 47 1E 00 00 8B C3 E8 EA FC  // .&.G.&.G........
    84C0: 5E 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14 C1 E0 02  // ^[.S.....&.G....
    84D0: 26 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B 57 02 5B  // &..&....&..&.W.[
    84E0: C3 E7 84 DC 84 F2 84 41 85 F8 84 10 85 2A 85 35  // .......A.....*.5
    84F0: 85 3B 85 53 51 56 8B D8 E8 B0 FE 8C D2 8E C2 26  // .;.SQV.........&
    8500: 83 7F 16 00 75 22 26 83 7F 14 40 73 1B 26 8B 77  // ....u"&...@s.&.w
    8510: 02 26 8B 5F 14 C1 E3 02 26 8B 44 04 03 D8 26 8B  // .&._....&.D...&.
    8520: 07 26 8B 57 02 E9 7B 05 26 8B 77 14 26 8B 47 16  // .&.W..{.&.w.&.G.
    8530: 83 C6 C0 83 D0 FF 75 71 83 FE 08 77 6C 03 F6 2E  // ......uq...wl...
    8540: FF A4 79 84 26 8B 47 10 26 8B 57 12 E9 54 05 26  // ..y.&.G.&.W..T.&
    8550: 8B 47 0C 26 8B 57 0E E9 49 05 26 8B 47 22 EB 4B  // .G.&.W..I.&.G".K
    8560: 26 8A 4F 33 32 ED BB 01 00 33 D2 E3 06 D1 E3 D1  // &.O32....3......
    8570: D2 E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32 ED B8 01  // ......+.&.O32...
    8580: 00 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 E9  // .3..............
    8590: 11 05 26 8B 47 18 26 8B 57 1A E9 06 05 26 8B 47  // ..&.G.&.W....&.G
    85A0: 24 EB 08 26 8B 47 20 EB 02 33 C0 33 D2 E9 F3 04  // $..&.G ..3.3....
    85B0: 53 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18 26 8B 57  // SV.......&.G.&.W
    85C0: 1A D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54  // .........&.G.&.T
    85D0: 16 8B C3 E8 16 0E 5E 5B C3 33 C0 33 D2 C3 53 56  // ......^[.3.3..SV
    85E0: 8B D8 E8 EB FD 26 8B 77 14 26 03 77 22 8B 04 8B  // .....&.w.&.w"...
    85F0: 54 02 5E 5B C3 53 8B D8 26 C6 47 2B 04 E8 AB FD  // T.^[.S..&.G+....
    8600: 26 8B 47 14 26 8B 57 16 5B C3 53 8B D8 26 C6 47  // &.G.&.W.[.S..&.G
    8610: 2B 01 E8 BB FD EB E9 53 8B D8 26 C6 47 2B 00 E8  // +......S..&.G+..
    8620: D2 FD EB DC 53 8B D8 83 C3 35 26 8A 5F 01 C0 EB  // ....S....5&._...
    8630: 03 80 E3 07 32 FF 03 DB FF 97 D8 DD 5B C3 53 52  // ....2.......[.SR
    8640: 56 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // V..&.G,2........
    8650: 94 F4 DD 26 89 47 08 26 89 57 0A 26 8A 47 2D 32  // ...&.G.&.W.&.G-2
    8660: E4 8B F0 03 F0 8B C3 FF 94 0C DE 26 89 47 04 26  // ...........&.G.&
    8670: 89 57 06 E9 17 FD 53 51 56 8B D8 26 8A 4F 2B 32  // .W....SQV..&.O+2
    8680: ED 8B F1 8A 8C 3C DE E3 0A 26 D1 6F 06 26 D1 5F  // .....<...&.o.&._
    8690: 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C  // ...&.O+2........
    86A0: 1C DE 8B B4 1E DE 26 21 4F 04 26 21 77 06 26 8A  // ......&!O.&!w.&.
    86B0: 4F 2A 32 ED 8B F1 8A 8C 44 DE E3 0A 26 D1 67 04  // O*2.....D...&.g.
    86C0: 26 D1 57 06 E2 F6 26 8B 4F 08 26 8B 77 0A 26 89  // &.W...&.O.&.w.&.
    86D0: 4F 14 26 89 77 16 E9 CA 03 53 51 52 56 57 8B D8  // O.&.w....SQRVW..
    86E0: 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26  // ....&.G+2......&
    86F0: 8A 47 2A 8B F8 8A 8D 44 DE 32 ED 8B 84 1C DE 8B  // .G*....D.2......
    8700: 94 1E DE E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26  // ...............&
    8710: 21 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A  // !G.&!W.&.G*2....
    8720: 8C 44 DE 32 ED E3 0A 26 D1 6F 0A 26 D1 5F 08 E2  // .D.2...&.o.&._..
    8730: F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 1C DE 8B 94  // .&.G+...........
    8740: 1E DE 26 21 47 08 26 21 57 0A 26 8A 47 2A 32 E4  // ..&!G.&!W.&.G*2.
    8750: 8B F0 8A 8C 44 DE 32 ED E3 0A 26 D1 67 08 26 D1  // ....D.2...&.g.&.
    8760: 57 0A E2 F6 26 8B 47 14 26 8B 57 16 26 09 47 08  // W...&.G.&.W.&.G.
    8770: 26 09 57 0A 5F 5E 5A 59 5B C3 53 51 56 8B D8 26  // &.W._^ZY[.SQV..&
    8780: 8A 4F 2B 32 ED 8B F1 8A 8C 3C DE E3 0A 26 D1 6F  // .O+2.....<...&.o
    8790: 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1  // .&._...&.O+2....
    87A0: E6 02 8B 8C 1C DE 8B B4 1E DE 26 21 4F 04 26 21  // ..........&!O.&!
    87B0: 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 44 DE E3 0A  // w.&.O*2.....D...
    87C0: 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B 32 ED  // &.o.&._...&.O+2.
    87D0: 8B F1 C1 E6 02 8B 8C 1C DE 8B B4 1E DE 26 21 4F  // .............&!O
    87E0: 08 26 21 77 0A E9 BB 02 51 52 57 8B D8 8C D0 8E  // .&!w....QRW.....
    87F0: C0 26 80 7F 2B 00 74 1A 26 8A 47 2C 32 E4 8B F0  // .&..+.t.&.G,2...
    8800: 03 F0 8B C3 FF 94 F4 DD 26 89 47 08 26 89 57 0A  // ........&.G.&.W.
    8810: EB 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // ..&.G,2.........
    8820: 00 DE 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94  // ..&.G-2.........
    8830: 0C DE 26 89 47 04 26 89 57 06 8C D2 8E C2 26 80  // ..&.G.&.W.....&.
    8840: 7F 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0 C1 E6 02  // .+.tJ&.G+2......
    8850: 26 8A 47 2A 8B F8 8A 8D 44 DE 32 ED 8B 84 1C DE  // &.G*....D.2.....
    8860: 8B 94 1E DE E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2  // ................
    8870: 26 21 47 08 26 21 57 0A 8B C3 E8 F9 FD 26 8B 47  // &!G.&!W......&.G
    8880: 04 26 8B 57 06 26 09 47 08 26 09 57 0A EB 10 26  // .&.W.&.G.&.W...&
    8890: 8B 57 04 26 8B 47 06 26 89 57 08 26 89 47 0A 26  // .W.&.G.&.W.&.G.&
    88A0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 E8 DD 5F  // .G,2..........._
    88B0: 5A 59 C3 53 51 52 56 57 8B D8 26 8A 47 2A 32 E4  // ZY.SQRVW..&.G*2.
    88C0: 8B F0 8A 8C 44 DE 32 ED E3 0A 26 D1 67 04 26 D1  // ....D.2...&.g.&.
    88D0: 57 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0  // W.......&.G+2...
    88E0: C1 E6 02 26 8A 47 2A 8B F8 8A 8D 44 DE 32 ED 8B  // ...&.G*....D.2..
    88F0: 84 1C DE 8B 94 1E DE E3 06 D1 E0 D1 D2 E2 FA F7  // ................
    8900: D0 F7 D2 26 09 47 04 26 09 57 06 26 8B 47 04 26  // ...&.G.&.W.&.G.&
    8910: 8B 57 06 26 21 47 08 26 21 57 0A E9 56 FE 55 8B  // .W.&!G.&!W..V.U.
    8920: EC 51 52 50 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0  // .QRP..&.G,2.....
    8930: 8B C3 FF 94 F4 DD 26 89 47 08 26 89 57 0A 26 8A  // ......&.G.&.W.&.
    8940: 47 2B 88 46 FA 8B C3 E8 DA FC 26 89 47 04 26 89  // G+.F......&.G.&.
    8950: 57 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B C3 FF 94  // W.&.O-2.........
    8960: 0C DE 26 89 47 14 26 89 57 16 8B C3 E8 44 FF 8A  // ..&.G.&.W....D..
    8970: 46 FA 32 E4 8B F0 8A 8C 3C DE E3 0A 26 D1 6F 16  // F.2.....<...&.o.
    8980: 26 D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B F2 C1 E6  // &._...&.W+2.....
    8990: 02 8B 84 1C DE 8B 94 1E DE 26 21 47 14 26 21 57  // .........&!G.&!W
    89A0: 16 26 8A 47 2A 32 E4 8B F0 8A 8C 44 DE 32 ED E3  // .&.G*2.....D.2..
    89B0: 0A 26 D1 67 14 26 D1 57 16 E2 F6 26 8B 47 14 26  // .&.g.&.W...&.G.&
    89C0: 8B 57 16 26 09 47 08 26 09 57 0A 26 8A 47 2C 32  // .W.&.G.&.W.&.G,2
    89D0: E4 8B F0 03 F0 8B C3 FF 94 E8 DD 8D 66 FC 5A 59  // ............f.ZY
    89E0: 5D C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32 ED 8B F1  // ].Q...V.&.O+2...
    89F0: 8A 8C 3C DE E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6  // ..<...&.o.&._...
    8A00: 8B C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1 03 F1 8B  // .....&.O,2......
    8A10: C3 FF 94 E8 DD 59 C3 8B D8 E8 22 FC 8B C3 E8 55  // .....Y...."....U
    8A20: FC 26 8B 47 04 26 8B 77 06 26 09 47 08 26 09 77  // .&.G.&.w.&.G.&.w
    8A30: 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 E8  // .&.G,2..........
    8A40: DD C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28 FC 26 8B  // ..SV........(.&.
    8A50: 47 04 26 8B 77 06 26 31 47 08 26 31 77 0A 26 8A  // G.&.w.&1G.&1w.&.
    8A60: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 E8 DD 5E 5B  // G,2...........^[
    8A70: C3 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB 26 8B  // .SQV..........&.
    8A80: 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 8B C3  // O...&.g.&.W.....
    8A90: E8 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF  // .F.&.O,2........
    8AA0: 94 E8 DD 5E 59 5B C3 53 51 56 8B D8 E8 8F FB 8B  // ...^Y[.SQV......
    8AB0: C3 E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1  // ....&.O...&.o.&.
    8AC0: 5F 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B C3 E8 A5  // _.....R...r.....
    8AD0: FB 8B F3 26 8B 47 04 26 8B 57 06 26 01 47 08 26  // ...&.G.&.W.&.G.&
    8AE0: 11 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32 E4 8B F0  // .T......&.G,2...
    8AF0: 03 F0 8B C3 FF 94 E8 DD 5A C3 52 8B D8 E8 3E FB  // ........Z.R...>.
    8B00: 8B C3 E8 71 FB 8B F3 26 8B 47 04 26 8B 57 06 26  // ...q...&.G.&.W.&
    8B10: 29 47 08 26 19 54 0A EB CA 51 52 8B F0 E8 1E FB  // )G.&.T...QR.....
    8B20: 8B C6 E8 55 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C  // ...U.&.D.&.T.&.\
    8B30: 04 26 8B 4C 06 E8 98 F2 26 89 44 0C 26 89 54 0E  // .&.L....&.D.&.T.
    8B40: 5A 59 C3 52 8B D0 E8 F5 FA 8B C2 E8 2C FC 8B C2  // ZY.R........,...
    8B50: E8 5C 08 5A C3 51 52 57 8B F0 E8 E1 FA 8B C6 E8  // .\.Z.QRW........
    8B60: 18 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B  // ..&.D.&.T.&.\.&.
    8B70: 4C 06 E8 D7 F1 26 89 44 0C 26 89 54 0E 8C D7 8E  // L....&.D.&.T....
    8B80: C7 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C  // .&.D.&.T.&.\.&.L
    8B90: 06 E8 B8 F1 26 89 5C 10 26 89 4C 12 E9 10 FD 52  // ....&.\.&.L....R
    8BA0: 8B D0 E8 99 FA 8B C2 E8 D0 FB 8B C2 E8 D3 07 5A  // ...............Z
    8BB0: C3 51 52 8B D8 E8 86 FA 8B C3 E8 BD FB 8C D1 8E  // .QR.............
    8BC0: C1 26 8B 47 08 26 8B 57 0A 26 3B 57 06 75 0E 26  // .&.G.&.W.&;W.u.&
    8BD0: 3B 47 04 75 08 26 C6 47 30 01 5A 59 C3 8B D0 26  // ;G.u.&.G0.ZY...&
    8BE0: 8B 47 0A 26 3B 47 06 72 08 75 0A 26 3B 57 04 73  // .G.&;G.r.u.&;W.s
    8BF0: 04 33 C0 EB 03 B8 02 00 26 88 47 30 5A 59 C3 51  // .3......&.G0ZY.Q
    8C00: 52 57 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // RW..&.G,2.......
    8C10: FF 94 F4 DD 26 89 47 08 26 89 57 0A 8C D0 8E C0  // ....&.G.&.W.....
    8C20: 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D 3C  // &.G+2..........<
    8C30: DE 32 ED 8B 84 1C DE 8B 94 1E DE E3 06 D1 E0 D1  // .2..............
    8C40: D2 E2 FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A E9  // .......&!G.&!W..
    8C50: 4D FC 55 8B EC 51 52 57 83 EC 06 8B D8 26 8A 47  // M.U..QRW.....&.G
    8C60: 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D 3C DE 32 ED  // +2..........<.2.
    8C70: 8B 84 1C DE 89 46 F4 8B 84 1E DE 89 46 F6 E3 08  // .....F......F...
    8C80: D1 66 F4 D1 56 F6 E2 F8 8B 7E F4 8B 46 F6 89 46  // .f..V....~..F..F
    8C90: F8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 F4  // .&.G,2..........
    8CA0: DD 26 89 47 08 26 89 57 0A 8B C3 E8 47 F9 26 89  // .&.G.&.W....G.&.
    8CB0: 47 04 26 89 57 06 8B C7 F7 D0 8B 56 F6 F7 D2 26  // G.&.W......V...&
    8CC0: 23 47 08 26 23 57 0A 26 89 47 14 26 89 57 16 26  // #G.&#W.&.G.&.W.&
    8CD0: 21 7F 08 8B 46 F6 26 21 47 0A 8C D1 8D 77 35 8E  // !...F.&!G....w5.
    8CE0: C1 26 80 3C 19 73 12 26 8B 4F 04 E3 0A 26 D1 67  // .&.<.s.&.O...&.g
    8CF0: 08 26 D1 57 0A E2 F6 EB 10 26 8B 4F 04 E3 0A 26  // .&.W.....&.O...&
    8D00: D1 6F 0A 26 D1 5F 08 E2 F6 26 21 7F 08 8B 46 F8  // .o.&._...&!...F.
    8D10: 26 21 47 0A 26 8B 57 14 26 8B 47 16 26 09 57 08  // &!G.&.W.&.G.&.W.
    8D20: 26 09 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // &.G.&.G,2.......
    8D30: FF 94 E8 DD 8D 66 FA 5F E9 A3 FC 52 8B D8 E8 FD  // .....f._...R....
    8D40: F8 8B C3 E8 34 FA 26 8B 47 08 26 8B 57 0A 26 85  // ....4.&.G.&.W.&.
    8D50: 57 06 75 06 26 85 47 04 74 05 B8 03 00 EB 03 B8  // W.u.&.G.t.......
    8D60: 01 00 26 88 47 30 5A C3 53 51 52 56 8B D8 26 8A  // ..&.G0Z.SQRV..&.
    8D70: 4F 2D 32 ED 8B F1 03 F1 FF 94 0C DE 26 89 47 04  // O-2.........&.G.
    8D80: 26 89 57 06 26 8A 47 2B 32 E4 8B F0 8A 8C 3C DE  // &.W.&.G+2.....<.
    8D90: E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 47 2B  // ..&.o.&._...&.G+
    8DA0: 8B F0 C1 E6 02 8B 84 1C DE 8B 94 1E DE 26 21 47  // .............&!G
    8DB0: 04 26 21 57 06 E9 BD F9 52 8B D8 E8 AA FF 26 8B  // .&!W....R.....&.
    8DC0: 47 04 26 8B 57 06 26 89 47 18 26 89 57 1A 5A C3  // G.&.W.&.G.&.W.Z.
    8DD0: 51 52 8B D8 E8 91 FF 8C D0 8E C0 26 8B 77 02 26  // QR.........&.w.&
    8DE0: 8B 74 02 81 3C 5A 5A 74 5B 26 8B 77 02 26 8B 74  // .t..<ZZt[&.w.&.t
    8DF0: 02 80 3C 63 75 E1 26 8B 77 02 26 FF 44 02 8B C3  // ..<cu.&.w.&.D...
    8E00: E8 21 F8 26 89 47 08 26 89 57 0A 8B C3 E8 FA F7  // .!.&.G.&.W......
    8E10: 26 89 47 14 26 89 57 16 8C D1 8E C1 26 8B 57 04  // &.G.&.W.....&.W.
    8E20: 26 8B 47 06 26 3B 47 0A 75 AD 26 3B 57 08 75 A7  // &.G.&;G.u.&;W.u.
    8E30: 26 8B 77 02 26 8B 04 26 03 47 14 8B DE 26 89 47  // &.w.&..&.G...&.G
    8E40: 02 5A 59 C3 26 8B 5F 02 26 83 47 02 02 5A 59 C3  // .ZY.&._.&.G..ZY.
    8E50: 52 57 8B D8 8C D0 8E C0 26 8B 77 02 26 8B 74 02  // RW......&.w.&.t.
    8E60: 8A 54 01 84 D2 75 08 26 C7 47 22 00 00 EB 2F 80  // .T...u.&.G".../.
    8E70: FA FF 75 14 26 8B 77 02 26 8B 3F 26 8B 34 26 2B  // ..u.&.w.&.?&.4&+
    8E80: 75 02 26 89 77 22 EB 16 26 8B 07 E8 E3 02 8B F0  // u.&.w"..&.......
    8E90: 8A C2 32 E4 03 C0 03 F0 8B 04 26 89 47 22 26 8B  // ..2.......&.G"&.
    8EA0: 5F 02 26 83 47 02 02 5F 5A C3 8B D8 26 80 67 2F  // _.&.G.._Z...&.g/
    8EB0: F9 26 8B 77 02 26 8B 74 02 8A 44 01 26 88 47 34  // .&.w.&.t..D.&.G4
    8EC0: 26 8B 5F 02 26 83 47 02 03 C3 8B D8 26 8B 77 02  // &._.&.G.....&.w.
    8ED0: 26 8B 74 02 8B 74 01 26 89 77 20 EB E3 53 8B D8  // &.t..t.&.w ..S..
    8EE0: 26 8A 47 2C 32 E4 24 03 26 80 67 2F F9 C1 E0 09  // &.G,2.$.&.g/....
    8EF0: 26 09 47 2E E9 4F F5 8B D8 26 8B 77 02 26 8B 74  // &.G..O...&.w.&.t
    8F00: 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00  // ..D.2.&.G.&.G...
    8F10: 8B C3 E8 40 04 26 8B 5F 02 26 83 47 02 02 C3 8B  // ...@.&._.&.G....
    8F20: D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89  // .&.w.&.t..D.2.&.
    8F30: 47 04 26 C7 47 06 00 00 8B C3 E8 08 04 EB D6 53  // G.&.G..........S
    8F40: 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4  // V..&.w.&.t..D.2.
    8F50: 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 06 04 E9  // &.G.&.G.........
    8F60: 86 F4 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44  // ..SV..&.w.&.t..D
    8F70: 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8  // .2.&.G.&.G......
    8F80: F0 03 E9 63 F4 53 56 8B D8 26 8B 77 02 8B DE 26  // ...c.SV..&.w...&
    8F90: 8B 5F 02 8B 5F 01 83 C3 03 26 01 5C 02 5E 5B C3  // ._.._....&.\.^[.
    8FA0: 51 52 8B D8 26 8B 77 02 26 83 44 02 02 26 8B 07  // QR..&.w.&.D..&..
    8FB0: E8 A0 01 8B C8 26 8B 77 28 8A 44 01 32 E4 03 C0  // .....&.w(.D.2...
    8FC0: 8B F1 03 F0 83 3C 00 74 4F 26 8B 77 28 8A 54 01  // .....<.tO&.w(.T.
    8FD0: 32 F6 8B C3 E8 B0 01 26 88 47 31 26 8B 77 02 26  // 2......&.G1&.w.&
    8FE0: 8B 34 8B 44 04 C1 E8 08 32 E4 24 7F C1 E8 02 32  // .4.D....2.$....2
    8FF0: E4 24 1F 26 80 67 2F 07 C1 E0 0B 26 09 47 2E 26  // .$.&.g/....&.G.&
    9000: 8B 37 26 8B 47 2E C1 E8 0B C1 E0 02 26 01 04 26  // .7&.G.......&..&
    9010: C6 47 32 01 26 89 4F 28 5A 59 C3 53 8B D8 26 C6  // .G2.&.O(ZY.S..&.
    9020: 47 32 82 5B C3 57 8B D8 8C D6 8E C6 26 80 7F 2C  // G2.[.W......&..,
    9030: 05 74 0A 26 8A 47 2C 26 3A 47 30 75 1E 26 8B 77  // .t.&.G,&:G0u.&.w
    9040: 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01 03  // .&.t.&...&.=.t..
    9050: F7 26 8B 5F 02 26 89 77 02 5F C3 26 8B 5F 02 26  // .&._.&.w._.&._.&
    9060: 83 47 02 03 5F C3 53 56 57 8B D8 8C D6 8E C6 26  // .G.._.SVW......&
    9070: 80 7F 30 01 74 0A 26 8A 47 30 26 3A 47 2C 75 20  // ..0.t.&.G0&:G,u 
    9080: 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B  // &.w.&.t.&...&.=.
    9090: 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F 5E 5B C3  // t...&._.&.w._^[.
    90A0: 26 8B 5F 02 26 83 47 02 03 EB F1 53 56 57 8B D8  // &._.&.G....SVW..
    90B0: 8C D0 8E C0 26 80 7F 30 01 74 E5 EB C3 55 8B EC  // ....&..0.t...U..
    90C0: 53 51 52 57 8B D8 26 8B 77 02 26 8B 74 02 8A 04  // SQRW..&.w.&.t...
    90D0: 26 C6 47 3D 00 8C D1 8E C1 26 80 7F 3D 08 73 20  // &.G=.....&..=.s 
    90E0: 26 8B 77 02 26 8A 57 3D 32 F6 26 8B 7C 02 03 FA  // &.w.&.W=2.&.|...
    90F0: 8B F3 03 F2 8A 15 26 88 54 35 26 FE 47 3D EB D5  // ......&.T5&.G=..
    9100: 26 8B 7F 02 8A D0 32 F6 8B F2 C1 E6 02 8A 94 69  // &.....2........i
    9110: DE 26 01 55 02 26 8B 7F 28 8A 55 01 80 E2 07 26  // .&.U.&..(.U....&
    9120: 88 57 2D 26 8B 7F 28 8A 55 01 C0 EA 03 80 E2 07  // .W-&..(.U.......
    9130: 26 88 57 2B 26 8B 7F 28 8A 55 01 C0 EA 06 26 88  // &.W+&..(.U....&.
    9140: 57 2A 8A 94 68 DE 26 88 57 2C 8D 66 F8 5F 5A 59  // W*..h.&.W,.f._ZY
    9150: 5B 5D C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48  // [].SV..&.w....tH
    9160: 03 F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0 04 5E 5B  // .....t........^[
    9170: C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0  // .SV..&.w....tH..
    9180: 8B D8 8B 74 20 EB E0 8A C2 C3 16 07 55 8B EC 53  // ...t .......U..S
    9190: 51 56 57 83 EC 40 8B F8 89 46 B8 E8 D3 FF 8B D8  // QVW..@...F......
    91A0: 89 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89 5E DE 83  // .F.&.E.._....^..
    91B0: 46 DE 04 8B C7 E8 9B FF 89 46 E0 32 F6 8D 46 B8  // F........F.2..F.
    91C0: E8 C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03 DA 83 3F  // .....2....^....?
    91D0: 00 0F 84 65 01 88 46 E9 80 66 E7 F9 C6 46 EC 00  // ...e..F..f...F..
    91E0: C7 46 D8 00 00 66 C7 46 D0 00 00 00 00 C7 46 F6  // .F...f.F......F.
    91F0: 00 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C 00 8A 56  // ...F....<......V
    9200: E9 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83 3F 00 74  // ...2....^....?.t
    9210: 75 26 8B 45 02 8B 1F 03 D8 8B 47 04 32 E4 8B C8  // u&.E......G.2...
    9220: 83 C1 09 32 ED 80 E1 FE 83 F9 00 74 07 D1 E9 33  // ...2.......t...3
    9230: C0 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0 74 41 83  // .P.......F...tA.
    9240: C0 08 26 89 47 04 8A C2 32 E4 03 C0 8B 5E E0 03  // ..&.G...2....^..
    9250: D8 26 8B 45 02 03 07 8B 5E BA 26 89 07 8B 5E BA  // .&.E....^.&...^.
    9260: 26 8B 07 83 C0 06 26 89 47 02 8B 5E BA 8B 76 F6  // &.....&.G..^..v.
    9270: 26 89 77 06 8B 5E BA 89 5E F6 C6 46 EA 00 EB 0A  // &.w..^..^..F....
    9280: C6 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA 32 E4 83  // .F.....F...F.2..
    9290: F8 10 0F 8F 99 00 88 66 EA 8A 46 EA 32 E4 85 C0  // .......f..F.2...
    92A0: 0F 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B 5F 02 89  // .......^...&._..
    92B0: 5E E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75 4A C6 46  // ^..^.&._..?[uJ.F
    92C0: EA 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B 5E BA 26  // ...^.&._..^..^.&
    92D0: 8B 1F 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1  // ...G.2......2...
    92E0: FE 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC 26 8B 1F  // ....^..^...t.&..
    92F0: 8B 47 04 C1 E8 08 32 E4 24 7F C1 E8 02 C1 E0 02  // .G....2.$.......
    9300: 8B 5E B8 26 29 07 EB 91 8D 46 B8 E8 AF FD 8A D0  // .^.&)....F......
    9310: 8D 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02 8D 46 B8  // .F......2.....F.
    9320: FF 97 66 DE E9 72 FF 83 7E F6 00 0F 85 C9 FE 80  // ..f..r..~.......
    9330: 7E EA 10 74 05 8A 46 EA EB 02 32 C0 8D 66 F8 5F  // ~..t..F...2..f._
    9340: 5E E9 0B FE C3 53 51 8B D8 26 8A 4F 04 32 ED E8  // ^....SQ..&.O.2..
    9350: 4E E8 59 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8  // N.Y[.SQ..&.O.2..
    9360: 49 E8 59 5B C3 53 8B D8 26 8A 47 04 32 E4 E6 80  // I.Y[.S..&.G.2...
    9370: 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 97 E2 59  // [.SQ..&.O.2....Y
    9380: 5B C3 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08  // [.S..fPfRfQf&.G.
    9390: 66 26 8B 57 10 66 26 8B 4F 04 66 F7 F1 66 26 89  // f&.W.f&.O.f..f&.
    93A0: 47 0C 66 26 89 57 10 66 59 66 5A 66 58 5B C3 53  // G.f&.W.fYfZfX[.S
    93B0: 8B D8 66 50 66 52 66 51 66 26 8B 47 08 66 26 8B  // ..fPfRfQf&.G.f&.
    93C0: 4F 04 66 F7 E1 66 26 89 47 0C 66 26 89 57 10 66  // O.f..f&.G.f&.W.f
    93D0: 59 66 5A 66 58 5B C3 53 57 8B D8 26 8B 5F 14 E8  // YfZfX[.SW..&._..
    93E0: F3 EA 8B D0 66 C1 E8 10 92 5F 5B C3 53 57 8B D8  // ....f...._[.SW..
    93F0: 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3 10  // &.G.&.W.....f...
    9400: 8B DA C1 E3 02 E8 F1 EA EB D8 53 52 57 8B D8 26  // ..........SRW..&
    9410: 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 26 8B  // .G.&.W..f.....&.
    9420: 5F 14 E8 15 EA 5F 5A 5B C3 53 52 8B D8 26 8B 47  // _...._Z[.SR..&.G
    9430: 1C 26 8B 57 1E 92 66 C1 E0 10 8B C2 26 8B 5F 26  // .&.W..f.....&._&
    9440: 8B 5F 01 E8 F4 E9 5A 5B C3 53 52 56 8B F0 26 8B  // ._....Z[.SRV..&.
    9450: 5C 26 8B 5F 01 E8 7D EA 8B D0 66 C1 E8 10 92 26  // \&._..}...f....&
    9460: 89 44 1C 26 89 54 1E 5E 5A 5B C3 53 51 52 57 8B  // .D.&.T.^Z[.SQRW.
    9470: D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2  // .&.G.&.W..f.....
    9480: 8B C8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1  // ..&.G.&.W.....f.
    9490: E3 10 8B DA C1 E3 02 8B C1 E8 D1 E9 5F 5A 59 5B  // ............_ZY[
    94A0: C3 8B D0 66 C1 E8 10 92 C3 00 1E 06 66 50 66 51  // ...f........fPfQ
    94B0: 66 52 66 53 66 55 66 56 66 57 0E 1F 0A C0 75 06  // fRfSfUfVfW....u.
    94C0: E8 47 01 E9 A8 00 3C 01 75 06 E8 77 01 E9 9E 00  // .G....<.u..w....
    94D0: 3C 02 75 06 E8 9F 02 E9 94 00 3C 03 75 0B E8 D1  // <.u.......<.u...
    94E0: 03 8B EC 89 5E 0C E9 85 00 3C 04 75 02 EB 7D 3C  // ....^....<.u..}<
    94F0: 05 75 0A E8 4E 04 8B EC 89 56 10 EB 71 3C 06 75  // .u..N....V..q<.u
    9500: 10 E8 CC 03 8B EC 89 5E 0C 89 4E 14 89 56 10 EB  // .......^..N..V..
    9510: 5D 3C 07 75 02 EB 55 3C 08 75 0A E8 10 04 8B EC  // ]<.u..U<.u......
    9520: 88 7E 0D EB 49 3C 09 75 02 EB 41 3C 0A 75 10 E8  // .~..I<.u..A<.u..
    9530: A5 04 8B EC 89 4E 14 89 7E 00 8C 46 1C EB 2F 3C  // .....N..~..F../<
    9540: 0B 75 02 EB 27 3C 10 75 0A E8 9A 04 8B EC 89 5E  // .u..'<.u.......^
    9550: 0C EB 1B 3C 11 75 02 EB 13 3C 15 75 0F E8 C0 04  // ...<.u...<.u....
    9560: 8B EC 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0 8B EC  // ...^....O...2...
    9570: 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66  // .F.f_f^f]f[fZfYf
    9580: 58 07 1F C3 50 1E 2E 8E 1E 0E 61 8C D8 A3 2C A5  // X...P.....a...,.
    9590: A3 3C A5 A3 4E A5 2E 8E 1E 06 61 A3 AA 04 1F 58  // .<..N.....a....X
    95A0: CB 00 30 31 2E 30 30 00 41 4D 44 20 41 54 4F 4D  // ..01.00.AMD ATOM
    95B0: 42 49 4F 53 00 28 43 29 20 31 39 38 38 2D 32 30  // BIOS.(C) 1988-20
    95C0: 32 32 2C 20 41 64 76 61 6E 63 65 64 20 4D 69 63  // 22, Advanced Mic
    95D0: 72 6F 20 44 65 76 69 63 65 73 2C 20 49 6E 63 2E  // ro Devices, Inc.
    95E0: 00 4E 41 56 49 33 33 00 56 45 53 41 00 03 40 95  // .NAVI33.VESA..@.
    95F0: 00 00 01 00 00 00 00 00 00 00 00 03 00 00 4D 95  // ..............M.
    9600: 00 00 79 95 00 00 3A 95 00 00 B9 3F 00 8B DF 83  // ..y...:....?....
    9610: C7 04 FC 66 33 C0 F3 66 AB 8B FB BE 80 95 B9 22  // ...f3..f......."
    9620: 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18 8C 4F  // ......O..G..O..O
    9630: 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F E8 B2 DE B0  // ..O ..".........
    9640: 4F 32 E4 C3 56 51 57 B9 10 00 66 33 C0 F3 66 AB  // O2..VQW...f3..f.
    9650: 5F 59 8C DB 06 1F C7 05 BB 00 C6 45 02 07 C7 45  // _Y.........E...E
    9660: 04 40 00 C7 45 06 40 00 C6 45 1B 06 C6 45 18 01  // .@..E.@..E...E..
    9670: C6 45 1A 01 C6 45 1E 01 66 C7 45 3E 00 84 D7 17  // .E...E..f.E>....
    9680: 8E DB E8 F6 D6 66 0B C0 0F 84 E1 00 06 1F 66 89  // .....f........f.
    9690: 45 28 8C C8 66 C1 E0 10 B8 39 99 66 89 45 0C 81  // E(..f....9.f.E..
    96A0: F9 FF 81 0F 84 C2 00 80 E5 03 B2 01 53 8E DB BE  // ............S...
    96B0: 80 4C E8 5E DC 5B 06 1F 0F 84 B1 00 53 E8 DA DE  // .L.^.[......S...
    96C0: 66 89 45 12 C7 45 16 08 10 8D 5C 0C E8 34 E8 66  // f.E..E....\..4.f
    96D0: 89 45 1F 66 89 45 36 8D 5C 10 E8 26 E8 66 89 45  // .E.f.E6.\..&.f.E
    96E0: 23 66 89 45 3A 8D 5C 08 E8 18 E8 0A C0 75 03 5B  // #f.E:.\......u.[
    96F0: EB 7B E8 A5 DE 66 C1 E8 10 3D 58 02 74 0D 3D 5E  // .{...f...=X.t.=^
    9700: 01 74 08 77 0A C6 45 17 08 EB 04 C6 45 17 0E 2E  // .t.w..E.....E...
    9710: A1 08 61 89 45 08 8D 5C 04 E8 E7 E7 66 8B C8 66  // ..a.E..\....f..f
    9720: C1 E9 10 D3 E0 89 45 10 89 45 32 B0 08 D2 E0 88  // ......E..E2.....
    9730: 45 19 8D 5C 14 E8 CB E7 5B 3D 00 03 77 2F 53 8B  // E..\....[=..w/S.
    9740: D8 B8 00 03 33 D2 F7 F3 5B FE C8 88 45 1D 88 45  // ....3...[...E..E
    9750: 35 88 45 34 8E DB 57 53 BE 80 4C E8 86 D6 5B 5F  // 5.E4..WS..L...[_
    9760: 0B C9 75 05 06 1F 83 25 FE 32 E4 EB 02 B4 03 B0  // ..u....%.2......
    9770: 4F 8E DB 5E C3 00 81 FB FF 81 74 68 0A FF 75 04  // O..^......th..u.
    9780: 8B C3 EB 21 F6 C7 08 75 61 8B CB B2 01 BE 20 4C  // ...!...ua..... L
    9790: E8 80 DB 74 55 E8 E1 DD 0A C0 75 0E 66 C1 E8 10  // ...tU.....u.f...
    97A0: 80 E7 80 0A C7 E8 D5 02 EB 3A E8 42 D9 74 06 E8  // .........:.B.t..
    97B0: D1 D7 E8 30 D2 BE 20 4C E8 FD D5 74 2D E8 A5 00  // ...0.. L...t-...
    97C0: E8 2C 00 66 BB 20 4C 00 4C E8 A4 DD BE 00 4C E8  // .,.f. L.L.....L.
    97D0: A7 DD 66 C1 E8 10 8B D8 32 C0 F6 C7 80 74 02 B0  // ..f.....2....t..
    97E0: 40 E8 2D D6 B0 4F 32 E4 EB 04 B0 4F B4 03 C3 56  // @.-..O2....O...V
    97F0: 06 33 C0 8E C0 BE 20 4C E8 9F DD 8B C8 66 C1 E8  // .3.... L.....f..
    9800: 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1 EA 04 FE CA  // ......&..J......
    9810: 26 88 16 84 04 26 C6 06 51 04 00 26 C6 06 50 04  // &....&..Q..&..P.
    9820: 00 26 C6 06 49 04 62 26 C7 06 4C 04 00 A0 26 C6  // .&..I.b&..L...&.
    9830: 06 85 04 10 26 C7 06 0C 01 0B AF 8C C8 26 A3 0E  // ....&........&..
    9840: 01 07 5E C3 01 0F 00 0A 00 00 00 00 00 40 05 0F  // ..^..........@..
    9850: FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E  // ................
    9860: 0F 01 00 0F 00 FC BA C4 03 B8 00 01 EF B9 04 00  // ................
    9870: B4 01 BE DC 97 AC 86 E0 EF 8A E0 FE C4 E2 F6 B8  // ................
    9880: 00 03 EF B9 09 00 BA CE 03 32 E4 BE E0 97 8A C4  // .........2......
    9890: EE AC 42 EE 4A FE C4 E2 F5 BA DA 03 EC B9 14 00  // ..B.J...........
    98A0: BA C0 03 32 E4 BE E9 97 8A C4 EE AC EE FE C4 E2  // ...2............
    98B0: F7 C3 BE 00 4C E8 C1 DC 66 C1 E8 10 8B D8 E8 91  // ....L...f.......
    98C0: DC 75 05 E8 7D DC 75 04 B8 4F 00 C3 B8 4F 03 C3  // .u..}.u..O...O..
    98D0: E8 7F DC 74 53 BE 00 4C 80 FB 00 74 18 80 FB 01  // ...tS..L...t....
    98E0: 75 05 E8 BD DC EB 1D 80 FB 02 75 10 8B C1 E8 70  // u.........u....p
    98F0: DC D3 E8 8B C8 E8 57 D7 74 2E EB 08 80 FB 03 75  // ......W.t......u
    9900: 24 E8 14 DC E8 5A DC 8B D8 D3 E3 50 33 C0 BA 00  // $....Z.....P3...
    9910: 03 3B DA 77 05 BA FF FF EB 04 F7 F3 8B D0 58 8B  // .;.w..........X.
    9920: C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00 0A DB  // ..O..2...O......
    9930: 75 07 8A EF E8 20 D8 EB 05 E8 05 D8 8A F8 B0 4F  // u.... .........O
    9940: 32 E4 C3 00 E8 0B DC 74 2C BE 00 4C E8 2A DC 66  // 2......t,..L.*.f
    9950: C1 E8 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E 00 EB  // .....@u...u.....
    9960: 0F 80 FF 01 75 14 BB 13 00 E8 65 E5 D1 E8 8B D0  // ....u.....e.....
    9970: B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52 53 66  // .O2...O...2..RSf
    9980: 50 81 E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10 8B C2  // P........@f.....
    9990: BB 13 00 E8 96 E4 BB 12 00 E8 90 E4 66 58 5B 5A  // ............fX[Z
    99A0: C3 9C 1E 06 66 50 66 51 66 52 66 53 66 55 66 56  // ....fPfQfRfSfUfV
    99B0: 66 57 0E 1F E8 AE E5 E8 8A FF E8 CD E5 8B EC 89  // fW..............
    99C0: 56 10 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66  // V..F.f_f^f]f[fZf
    99D0: 59 66 58 07 1F 9D CB 0E 07 BF 0E DD 2E 8B 0E 0C  // YfX.............
    99E0: DD B8 4F 00 C3 00 0A DB 75 06 B7 04 B3 10 EB 26  // ..O.....u......&
    99F0: 80 FB 01 75 14 E8 F7 D6 75 21 53 B1 01 0A FF 74  // ...u....u!S....t
    9A00: 02 B1 00 E8 11 D6 5B EB 0D 80 FB 02 75 0D E8 24  // ......[.....u..$
    9A10: D7 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03 C3 00  // .......O2...O...
    9A20: 80 E3 01 0A DB 75 05 BB 02 01 EB 0E E8 C0 D6 75  // .....u.........u
    9A30: 0E 33 C0 53 E8 BD C9 5B 74 05 B0 4F 32 E4 C3 B0  // .3.S...[t..O2...
    9A40: 4F B4 03 C3 80 FC 1D 72 03 CD 42 C3 1E 06 66 50  // O......r..B...fP
    9A50: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F 50 0F  // fQfRfSfUfVfW..P.
    9A60: B6 C4 D1 E0 8B F0 58 2E FF 94 26 9A 66 5F 66 5E  // ......X...&.f_f^
    9A70: 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3 0E 1F 50  // f]f[fZfYfX.....P
    9A80: 0F B6 C4 D1 E0 8B F0 58 2E FF 94 26 9A C3 60 9A  // .......X...&..`.
    9A90: 76 D3 8F D3 AC D3 53 9B AF CA E1 CA 54 CB D7 CB  // v.....S.....T...
    9AA0: 65 CD 69 CD 72 D0 43 D1 C6 D1 2D D2 C8 D3 2A D4  // e.i.r.C...-...*.
    9AB0: D3 D6 6C 9D 1A DB 14 9A 14 9A 14 9A 14 9A 14 9A  // ..l.............
    9AC0: 14 9A EA DB ED BF 41 C1 2E 8E 1E 06 61 80 26 87  // ......A.....a.&.
    9AD0: 04 F3 50 8A E0 80 E4 7F E8 C4 01 3B D3 75 02 58  // ..P........;.u.X
    9AE0: C3 BA CC 03 EC B2 B4 B1 30 26 F6 47 09 01 74 0C  // ........0&.G..t.
    9AF0: B2 D4 B1 20 A8 01 75 49 B5 09 EB 06 A8 01 74 41  // ... ..uI......tA
    9B00: B5 0B 53 E8 70 41 0A FF 5B 75 0B 80 26 88 04 F0  // ..S.pA..[u..&...
    9B10: 08 2E 88 04 EB 2B 58 80 0E 87 04 08 80 26 10 04  // .....+X......&..
    9B20: CF 08 0E 10 04 89 16 63 04 C7 06 85 04 08 00 C6  // .......c........
    9B30: 06 84 04 18 C7 06 0C 01 F8 A6 8C 0E 0E 01 CD 42  // ...............B
    9B40: C3 80 26 10 04 CF 08 0E 10 04 58 53 50 0E 1F 33  // ..&.......XSP..3
    9B50: C9 8A C8 E8 99 D5 74 06 E8 28 D4 E8 87 CE B2 08  // ......t..(......
    9B60: BE 40 4C E8 AD D7 BE 40 4C E8 4C D2 58 5B 0F 84  // .@L....@L.L.X[..
    9B70: 6E FF 2E 8E 1E 06 61 0E 07 E8 19 29 0E 1F 53 66  // n.....a....)..Sf
    9B80: BB 40 4C 00 4C E8 E8 D9 BE 00 4C B0 20 E8 81 D2  // .@L.L.....L. ...
    9B90: 5B 2E 8E 1E 06 61 0E 07 E8 22 2E E8 24 00 E8 2E  // [....a..."..$...
    9BA0: 3D E8 D1 01 E8 8E 01 E8 B4 3E 0E 1F BE 00 4C B0  // =........>....L.
    9BB0: 10 E8 5D D2 E8 FD 2D E8 F5 2D C3 8B EC C6 46 1B  // ..]...-..-....F.
    9BC0: 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8 52 00 E8 62  // .../........R..b
    9BD0: 0A C3 53 83 C3 0A 8B 16 63 04 B9 19 00 B8 11 30  // ..S.....c......0
    9BE0: EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7 5B 80 C2 06  // .2.&.'.C....[...
    9BF0: 32 C0 EE C3 53 BA C4 03 83 C3 05 B9 04 00 B0 01  // 2...S...........
    9C00: 26 8A 27 3C 01 75 03 80 CC 20 EF 43 FE C0 E2 F0  // &.'<.u... .C....
    9C10: 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8 00 03 EF C3  // [&.G............
    9C20: 8B F3 83 C6 23 BA DA 03 26 F6 47 09 01 75 02 B2  // ....#...&.G..u..
    9C30: BA F6 06 89 04 08 74 1D 83 C6 10 EC B9 04 00 B4  // ......t.........
    9C40: 10 B2 C0 80 FC 11 74 07 8A C4 EE 26 8A 04 EE 46  // ......t....&...F
    9C50: FE C4 E2 EF C3 53 EC 8B DE B9 14 00 32 E4 B2 C0  // .....S......2...
    9C60: 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4 8A C4 EE 32  // .....&...C.....2
    9C70: C0 EE 1E 06 E8 4F 2D 0B ED 74 09 1F 1E B9 10 00  // .....O-..t......
    9C80: F3 A4 46 A4 07 1F 5B C3 53 83 C3 37 B9 09 00 32  // ..F...[.S..7...2
    9C90: C0 BA CE 03 26 8A 27 EF 43 FE C0 E2 F7 5B C3 BB  // ....&.'.C....[..
    9CA0: 2A 9F 0E 07 8B D3 0A E4 7D 01 C3 E8 01 00 C3 33  // *.......}......3
    9CB0: F6 80 FC 03 7F 3C 4A F6 06 89 04 10 75 20 A0 88  // .....<J.....u ..
    9CC0: 04 24 0F 3C 02 7E 24 3C 08 74 20 3C 06 74 1C 3C  // .$.<.~$<.t <.t.<
    9CD0: 07 74 18 B0 40 F6 E4 03 D8 81 C3 00 04 C3 B0 40  // .t..@..........@
    9CE0: D0 EC F6 E4 03 D8 81 C3 80 04 C3 B0 40 F6 E4 03  // ............@...
    9CF0: D8 C3 80 FC 07 75 11 F6 06 89 04 10 75 05 81 C3  // .....u......u...
    9D00: 00 01 C3 81 C3 00 05 C3 BF AC 9C BE CD 9C 33 C9  // ..............3.
    9D10: E8 4E 00 C3 04 80 00 05 80 00 06 C0 00 0D 80 02  // .N..............
    9D20: 0E C0 02 0F 80 03 10 C0 03 11 40 05 12 80 05 13  // ..........@.....
    9D30: C0 05 62 40 01 53 8A 1E 49 04 80 FB 07 7F 10 32  // ..b@.S..I......2
    9D40: FF D1 E3 2E 8B 87 E9 9C A2 65 04 88 26 66 04 5B  // .........e..&f.[
    9D50: C3 2C 30 28 30 2D 30 29 30 2A 30 2E 30 1E 3F 29  // .,0(0-0)0*0.0.?)
    9D60: 30 2E 38 25 75 07 2E 03 5D 01 33 F6 C3 83 C7 03  // 0.8%u...].3.....
    9D70: 3B FE 75 ED C3 1E 06 2E 8E 1E 06 61 F6 06 87 04  // ;.u........a....
    9D80: 80 75 49 83 3E 4C 04 00 74 42 A0 49 04 B9 00 20  // .uI.>L..tB.I... 
    9D90: 2E 8B 3E 0C 61 26 F6 47 33 01 75 0E 26 F6 47 09  // ..>.a&.G3.u.&.G.
    9DA0: 01 75 1B 2E 8B 3E 0A 61 EB 14 3C 06 7E 0B 2E 8B  // .u...>.a..<.~...
    9DB0: 3E 08 61 26 8A 67 37 B5 40 66 33 C0 EB 06 66 B8  // >.a&.g7.@f3...f.
    9DC0: 20 07 20 07 8E C7 66 33 FF F3 66 AB 80 26 87 04  //  . ...f3..f..&..
    9DD0: 7F 07 1F C3 2E 8E 1E 06 61 80 FB 10 75 03 E9 7A  // ........a...u..z
    9DE0: 01 80 FB 20 75 03 E9 9B 01 80 FB 32 75 1F BA CC  // ... u......2u...
    9DF0: 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9 F3 00 FE C8  // ...u............
    9E00: 0F 85 F3 00 EC 24 FD B2 C2 EE E9 E4 00 80 FB 35  // .....$.........5
    9E10: 75 28 3C 80 75 08 80 0E 89 04 40 E9 D3 00 F6 06  // u(<.u.....@.....
    9E20: 89 04 40 0F 84 D0 00 0A C0 0F 84 CA 00 FE C8 75  // ..@............u
    9E30: 06 E8 98 07 E9 BA 00 E9 BD 00 80 FB 30 74 03 E9  // ............0t..
    9E40: 96 00 50 E8 30 3E 8A EF BA CC 03 EC 8A C8 58 0A  // ..P.0>........X.
    9E50: C0 75 30 B7 08 F6 C1 01 75 12 0A ED 75 0B A0 10  // .u0.....u...u...
    9E60: 04 24 30 3C 30 75 10 B7 02 E9 8B 00 A0 10 04 24  // .$0<0u.........$
    9E70: 30 3C 30 75 02 B7 02 80 26 89 04 6F 80 0E 89 04  // 0<0u....&..o....
    9E80: 80 EB 36 3C 01 75 41 80 26 89 04 6F B7 09 F6 C1  // ..6<.uA.&..o....
    9E90: 01 75 15 B7 0B A0 10 04 24 30 3C 30 74 1B B7 09  // .u......$0<0t...
    9EA0: 0A ED 74 15 B7 05 EB 11 A0 10 04 24 30 3C 30 75  // ..t........$0<0u
    9EB0: 08 B7 0B 0A ED 74 02 B7 03 8A 1E 88 04 80 E3 F0  // .....t..........
    9EC0: 0A DF 88 1E 88 04 EB 29 3C 02 75 2B 80 26 89 04  // .......)<.u+.&..
    9ED0: 6F 80 0E 89 04 10 EB B4 80 FB 31 75 1B 0A C0 74  // o.........1u...t
    9EE0: 0B 3C 01 75 0C 80 0E 89 04 08 EB 05 80 26 89 04  // .<.u.........&..
    9EF0: F7 8B EC C6 46 1A 12 C3 80 FB 33 75 16 3C 00 74  // ....F.....3u.<.t
    9F00: 0B 3C 01 75 EC 80 26 89 04 FD EB E5 80 0E 89 04  // .<.u..&.........
    9F10: 02 EB DE 80 FB 34 75 17 3C 00 75 07 80 26 87 04  // .....4u.<.u..&..
    9F20: FE EB CE 3C 01 75 07 80 0E 87 04 01 EB C3 C3 80  // ...<.u..........
    9F30: FB 36 75 26 BB 20 FF 3C 01 74 09 BB 00 DF 3C 00  // .6u&. .<.t....<.
    9F40: 74 02 EB AD E8 02 00 EB A8 9C FA BA C4 03 B0 01  // t...............
    9F50: EE 42 EC 22 C7 0A C3 EE 9D C3 C3 B3 03 B7 00 BA  // .B."............
    9F60: CC 03 EC A8 01 75 02 B7 01 A0 88 04 8A E0 B1 04  // .....u..........
    9F70: D2 EC 25 0F 0F 8B C8 8B EC 89 5E 0E 89 4E 16 C6  // ..%.......^..N..
    9F80: 46 1A 12 C3 9C FA C7 06 14 00 DA C4 8C 0E 16 00  // F...............
    9F90: 9D C3 28 18 08 00 08 09 03 00 02 63 2D 27 28 90  // ..(........c-'(.
    9FA0: 2B A0 BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 14  // +...............
    9FB0: 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12  // ................
    9FC0: 13 14 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E  // ................
    9FD0: 00 FF 50 18 08 00 10 01 03 00 02 63 5F 4F 50 82  // ..P........c_OP.
    9FE0: 55 81 BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 28  // U..............(
    9FF0: 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12  // ................
    A000: 13 14 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E  // ................
    A010: 00 FF 28 18 08 00 40 09 03 00 02 63 2D 27 28 90  // ..(...@....c-'(.
    A020: 2B 80 BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 14  // +...............
    A030: 00 96 B9 A2 FF 00 13 15 17 02 04 06 07 10 11 12  // ................
    A040: 13 14 15 16 17 01 00 03 00 00 00 00 00 00 30 0F  // ..............0.
    A050: 00 FF 50 18 08 00 40 01 01 00 06 63 5F 4F 50 82  // ..P...@....c_OP.
    A060: 54 80 BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 28  // T..............(
    A070: 00 96 B9 C2 FF 00 17 17 17 17 17 17 17 17 17 17  // ................
    A080: 17 17 17 17 17 01 00 01 00 00 00 00 00 00 00 0D  // ................
    A090: 00 FF 50 18 0E 00 10 00 03 00 03 A6 5F 4F 50 82  // ..P........._OP.
    A0A0: 55 81 BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28  // U....M........](
    A0B0: 0D 63 BA A3 FF 00 08 08 08 08 08 08 08 10 18 18  // .c..............
    A0C0: 18 18 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A  // ................
    A0D0: 00 FF 50 1D 10 00 A0 01 0F 00 0A E3 5F 4F 50 82  // ..P........._OP.
    A0E0: 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 50  // T..>.@.........P
    A0F0: 00 E7 04 E3 FF 00 01 02 03 04 05 06 07 08 09 0A  // ................
    A100: 0B 0C 0D 0E 0F 01 00 0F 00 10 00 00 00 00 40 05  // ..............@.
    A110: 0F FF 00 05 11 1C 08 0B 14 28 0E 18 2D 32 20 24  // .........(..-2 $
    A120: 38 3F 00 05 08 0B 0E 11 14 18 1C 20 24 28 2D 32  // 8?......... $(-2
    A130: 38 3F 07 0C 10 15 1A 18 16 15 13 1C 25 2F 38 33  // 8?..........%/83
    A140: 2E 2A 25 27 29 2A 2C 23 19 10 23 25 27 2A 2C 2B  // .*%')*,#..#%'*,+
    A150: 2A 29 29 2D 32 37 3B 39 37 34 32 33 34 35 35 31  // *))-27;974234551
    A160: 2C 27 2F 30 32 33 34 34 33 33 32 35 38 3A 3D 3C  // ,'/0234433258:=<
    A170: 3A 39 38 38 39 39 3A 37 34 31 03 05 07 09 0B 0B  // :98899:741......
    A180: 0A 09 08 0D 11 15 19 17 15 13 11 11 12 13 14 0F  // ................
    A190: 0B 07 10 10 12 13 14 13 13 13 12 14 16 18 1A 19  // ................
    A1A0: 18 17 16 17 17 17 18 15 14 11 15 15 16 17 17 17  // ................
    A1B0: 17 17 16 18 19 1A 1B 1B 1A 19 19 19 19 19 1A 18  // ................
    A1C0: 17 16 02 03 04 05 07 06 06 05 05 07 0A 0C 0E 0D  // ................
    A1D0: 0C 0B 09 0A 0A 0B 0B 09 06 04 09 09 0A 0B 0B 0B  // ................
    A1E0: 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D 0E 0C  // ................
    A1F0: 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F 0F 0F  // ................
    A200: 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C 00 00 00 00 00 00  // ................
    A210: 00 00 28 18 08 00 20 09 0F 00 06 63 2D 27 28 90  // ..(... ....c-'(.
    A220: 2B 80 BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 14  // +...............
    A230: 00 96 B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12  // ................
    A240: 13 14 15 16 17 01 00 0F 00 00 00 00 00 00 00 05  // ................
    A250: 0F FF 50 18 08 00 40 01 0F 00 06 63 5F 4F 50 82  // ..P...@....c_OP.
    A260: 54 80 BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 28  // T..............(
    A270: 00 96 B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12  // ................
    A280: 13 14 15 16 17 01 00 0F 00 00 00 00 00 00 00 05  // ................
    A290: 0F FF 00 05 11 1C 08 0B 25 28 02 07 1B 20 0F 14  // ........%(... ..
    A2A0: 28 2C 0C 11 25 2A 14 1E 32 36 0F 13 27 2C 1B 20  // (,..%*..26..',. 
    A2B0: 34 39 06 0B 1F 24 13 18 2C 30 09 0D 21 26 15 1A  // 49...$..,0..!&..
    A2C0: 2E 33 13 17 2B 30 1F 24 38 3D 0E 18 2D 32 20 24  // .3..+0.$8=..-2 $
    A2D0: 38 3F 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B  // 8?..............
    A2E0: 14 18 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24  // ....-2 $8?..-2 $
    A2F0: 38 3F 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B  // 8?..............
    A300: 14 18 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24  // ....-2 $8?..-2 $
    A310: 38 3F 50 18 0E 00 80 01 0F 00 06 A2 5F 4F 50 82  // 8?P........._OP.
    A320: 54 80 BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28  // T....@........](
    A330: 0F 63 BA E3 FF 00 08 00 00 18 18 00 00 00 08 00  // .c..............
    A340: 00 00 18 00 00 0B 00 05 00 00 00 00 00 00 00 05  // ................
    A350: 05 FF 50 18 0E 00 80 01 0F 00 06 A3 5F 4F 50 82  // ..P........._OP.
    A360: 54 80 BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28  // T....@........](
    A370: 0F 63 BA E3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .c...........89:
    A380: 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05  // ;<=>?...........
    A390: 0F FF 28 18 0E 00 08 09 03 00 02 A3 2D 27 28 90  // ..(.........-'(.
    A3A0: 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 14  // +....M........].
    A3B0: 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .c...........89:
    A3C0: 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E  // ;<=>?...........
    A3D0: 00 FF 50 18 0E 00 10 01 03 00 02 A3 5F 4F 50 82  // ..P........._OP.
    A3E0: 55 81 BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28  // U....M........](
    A3F0: 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .c...........89:
    A400: 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E  // ;<=>?...........
    A410: 00 FF 28 18 10 00 08 08 03 00 02 67 2D 27 28 90  // ..(........g-'(.
    A420: 2B A0 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 14  // +....O..........
    A430: 1F 96 B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .............89:
    A440: 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E  // ;<=>?...........
    A450: 00 FF 50 18 10 00 10 00 03 00 02 67 5F 4F 50 82  // ..P........g_OP.
    A460: 55 81 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28  // U....O.........(
    A470: 1F 96 B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .............89:
    A480: 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E  // ;<=>?...........
    A490: 00 FF 50 18 10 00 10 00 03 00 02 66 5F 4F 50 82  // ..P........f_OP.
    A4A0: 55 81 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28  // U....O.........(
    A4B0: 0F 96 B9 A3 FF 00 08 08 08 08 08 08 08 10 18 18  // ................
    A4C0: 18 18 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A  // ................
    A4D0: 00 FF 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82  // ..P........._OP.
    A4E0: 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28  // T..>.@.........(
    A4F0: 00 E7 04 C3 FF 00 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F  // ......??????????
    A500: 3F 3F 3F 3F 3F 01 00 0F 00 00 00 00 00 00 00 05  // ?????...........
    A510: 01 FF 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82  // ..P........._OP.
    A520: 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28  // T..>.@.........(
    A530: 00 E7 04 E3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .............89:
    A540: 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05  // ;<=>?...........
    A550: 0F FF 28 18 08 00 20 01 0F 00 0E 63 5F 4F 50 82  // ..(... ....c_OP.
    A560: 54 80 BF 1F 00 41 00 00 00 00 00 00 9C 8E 8F 28  // T....A.........(
    A570: 40 96 B9 A3 FF 00 01 02 03 04 05 06 07 08 09 0A  // @...............
    A580: 0B 0C 0D 0E 0F 41 00 0F 00 00 00 00 00 00 40 05  // .....A........@.
    A590: 0F FF 2A 9F 00 C0 00 00 00 00 00 00 00 00 00 00  // ..*.............
    A5A0: 00 00 4A A5 00 C0 00 00 00 00 00 00 00 00 00 00  // ..J.............
    A5B0: 00 00 1A 00 E8 DC 00 C0 00 00 00 00 00 00 00 00  // ................
    A5C0: 00 00 00 00 00 00 00 00 00 00 00 00 1E E8 10 00  // ................
    A5D0: 2E 8E 1E 06 61 E8 FE 36 E8 D5 36 E8 76 1A 1F C3  // ....a..6..6.v...
    A5E0: 2E 8E 1E 06 61 C7 06 87 04 60 F9 C6 06 8A 04 0B  // ....a....`......
    A5F0: A0 89 04 0C 11 24 17 A2 89 04 B4 01 E8 73 1E A0  // .....$.......s..
    A600: 89 04 80 26 10 04 CF 80 0E 10 04 20 C7 06 63 04  // ...&....... ..c.
    A610: D4 03 0E 1F E8 2C C4 F7 C1 02 00 75 03 E8 C5 C3  // .....,.....u....
    A620: B8 03 00 E8 57 F4 C3 1E 2E 8E 1E 06 61 0E 07 EB  // ....W.......a...
    A630: 00 1F C3 F6 06 89 04 08 74 01 C3 53 BA C8 03 EC  // ........t..S....
    A640: B0 FF B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F BE AC  // ........>c..u/..
    A650: A6 B9 40 00 33 DB 9C FA 8A C3 EE 8B FB C1 EF 03  // ..@.3...........
    A660: 83 E7 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04 EE 2E  // ........B...E...
    A670: 8A 45 08 EE FE C3 4A E2 DF 9D E9 85 00 26 8A 47  // .E....J......&.G
    A680: 2B F6 06 89 04 06 74 31 B9 F8 00 BF AA A0 3C 08  // +.....t1......<.
    A690: 74 11 B9 40 00 BF 2A A2 3C 38 74 07 3C 3F 74 03  // t..@..*.<8t.<?t.
    A6A0: BF 6A A2 33 DB 9C FA 8A C3 EE 2E 8A 01 42 EE EE  // .j.3.........B..
    A6B0: EE FE C3 4A E2 F1 9D EB 49 3C 08 74 25 3C 38 74  // ...J....I<.t%<8t
    A6C0: 2E 3C 3F 74 2A B9 08 00 33 DB 51 E8 56 D3 B9 08  // .<?t*...3.Q.V...
    A6D0: 00 F7 C3 10 00 74 03 83 C7 18 E8 67 00 59 E2 EA  // .....t.....g.Y..
    A6E0: EB 20 E8 3F D3 B9 10 00 33 DB E8 57 00 EB 13 B9  // . .?....3..W....
    A6F0: 40 00 33 DB 51 E8 28 00 8A C3 E8 B7 2F FE C3 59  // @.3.Q.(...../..Y
    A700: E2 F2 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F 15 3F  // ..[..*.*.*.*.?.?
    A710: 15 3F 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A 00 3F  // .?.?.*.?.*.?.*.?
    A720: 8B FB C1 EF 02 83 E7 0F 2E 8A B5 9C A6 8B FB D1  // ................
    A730: EF 83 E7 0F 2E 8A AD 9C A6 8B FB 83 E7 0F 2E 8A  // ................
    A740: 8D 9C A6 C3 9C 8A C3 FA EE 2E 8A 05 42 EE 47 2E  // ............B.G.
    A750: 8A 05 EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7 9D C3  // ...G....G..J....
    A760: 00 00 00 00 00 00 00 00 7E 81 A5 81 BD 99 81 7E  // ........~......~
    A770: 7C FE D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38 10 00  // |.....|.....|8..
    A780: 10 38 7C FE 7C 38 10 00 10 38 10 EE EE 10 38 00  // .8|.|8...8....8.
    A790: 38 7C FE FE 6C 10 38 00 00 18 3C 7E 3C 18 00 00  // 8|..l.8...<~<...
    A7A0: FF E7 C3 81 C3 E7 FF FF 00 18 3C 66 66 3C 18 00  // ..........<ff<..
    A7B0: FF E7 C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC CC 78  // ...........6x..x
    A7C0: 7E C3 C3 7E 18 7E 18 18 1E 1A 1E 18 18 70 F0 60  // ~..~.~.......p.`
    A7D0: 3E 3E 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C DB 00  // >>66.f...<f.f<..
    A7E0: 80 C0 F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06 02 00  // ...........>....
    A7F0: 18 3C 7E 18 7E 3C 18 00 66 66 66 66 66 00 66 00  // .<~.~<..fffff.f.
    A800: 7F DB 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38 CC 78  // ..{;....<f8ll8.x
    A810: 00 00 00 00 FE FE FE 00 18 3C 7E 18 7E 3C 18 7E  // .........<~.~<.~
    A820: 18 3C 7E 18 18 18 18 00 18 18 18 18 7E 3C 18 00  // .<~.........~<..
    A830: 00 18 1C FE 1C 18 00 00 00 30 70 FE 70 30 00 00  // .........0p.p0..
    A840: 00 00 C0 C0 C0 FE 00 00 00 24 66 FF 66 24 00 00  // .........$f.f$..
    A850: 00 10 38 7C 7C FE 00 00 00 FE 7C 7C 38 10 00 00  // ..8||.....||8...
    A860: 00 00 00 00 00 00 00 00 18 3C 3C 18 18 00 18 00  // .........<<.....
    A870: 6C 6C 6C 00 00 00 00 00 6C 6C FE 6C FE 6C 6C 00  // lll.....ll.l.ll.
    A880: 18 7E C0 7C 06 FC 18 00 00 C6 0C 18 30 60 C6 00  // .~.|........0`..
    A890: 38 6C 38 76 CC CC 76 00 18 18 30 00 00 00 00 00  // 8l8v..v...0.....
    A8A0: 18 30 60 60 60 30 18 00 60 30 18 18 18 30 60 00  // .0```0..`0...0`.
    A8B0: 00 EE 7C FE 7C EE 00 00 00 18 18 7E 18 18 00 00  // ..|.|......~....
    A8C0: 00 00 00 00 18 18 30 00 00 00 00 FE 00 00 00 00  // ......0.........
    A8D0: 00 00 00 00 00 38 38 00 06 0C 18 30 60 C0 80 00  // .....88....0`...
    A8E0: 7C C6 CE DE F6 E6 7C 00 18 78 18 18 18 18 7E 00  // |.....|..x....~.
    A8F0: 7C C6 0C 18 30 66 FE 00 7C C6 06 3C 06 C6 7C 00  // |...0f..|..<..|.
    A900: 0C 1C 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6 7C 00  // ..<l..........|.
    A910: 7C C6 C0 FC C6 C6 7C 00 FE C6 06 0C 18 18 18 00  // |.....|.........
    A920: 7C C6 C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6 7C 00  // |..|..|.|..~..|.
    A930: 00 1C 1C 00 00 1C 1C 00 00 18 18 00 00 18 18 30  // ...............0
    A940: 0C 18 30 60 30 18 0C 00 00 00 FE 00 00 FE 00 00  // ..0`0...........
    A950: 60 30 18 0C 18 30 60 00 7C C6 06 0C 18 00 18 00  // `0...0`.|.......
    A960: 7C C6 C6 DE DC C0 7E 00 38 6C C6 C6 FE C6 C6 00  // |.....~.8l......
    A970: FC 66 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66 3C 00  // .ff|ff..<f...f<.
    A980: F8 6C 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2 FE 00  // .lfffl..........
    A990: FE 62 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6 7C 00  // .b`|``..|.....|.
    A9A0: C6 C6 C6 FE C6 C6 C6 00 3C 18 18 18 18 18 3C 00  // ........<.....<.
    A9B0: 3C 18 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC C6 00  // <.....p.........
    A9C0: F0 60 60 60 60 62 FE 00 C6 EE FE D6 D6 C6 C6 00  // .````b..........
    A9D0: C6 E6 E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6 7C 00  // ........|.....|.
    A9E0: FC 66 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6 7C 06  // .ff|``..|.....|.
    A9F0: FC C6 C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6 7C 00  // ........|..|..|.
    AA00: 7E 5A 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6 7C 00  // ~Z....<.......|.
    AA10: C6 C6 C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE C6 00  // ....l8..........
    AA20: C6 6C 38 38 38 6C C6 00 66 66 66 3C 18 18 3C 00  // .l888l..fff<..<.
    AA30: FE 86 0C 18 30 62 FE 00 7C 60 60 60 60 60 7C 00  // ....0b..|`````|.
    AA40: C0 60 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C 7C 00  // .`0.....|.....|.
    AA50: 10 38 6C C6 00 00 00 00 00 00 00 00 00 00 00 FF  // .8l.............
    AA60: 30 30 18 00 00 00 00 00 00 00 78 0C 7C CC 7E 00  // 00........x.|.~.
    AA70: E0 60 7C 66 66 66 FC 00 00 00 7C C6 C0 C6 7C 00  // .`|fff....|...|.
    AA80: 1C 0C 7C CC CC CC 7E 00 00 00 7C C6 FE C0 7C 00  // ..|...~...|...|.
    AA90: 1C 36 30 FC 30 30 78 00 00 00 76 CE C6 7E 06 7C  // .60.00x...v..~.|
    AAA0: E0 60 7C 66 66 66 E6 00 18 00 38 18 18 18 3C 00  // .`|fff....8...<.
    AAB0: 0C 00 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C E6 00  // .......x.`flxl..
    AAC0: 18 18 18 18 18 18 1C 00 00 00 6C FE D6 D6 C6 00  // ..........l.....
    AAD0: 00 00 DC 66 66 66 66 00 00 00 7C C6 C6 C6 7C 00  // ...ffff...|...|.
    AAE0: 00 00 DC 66 66 7C 60 F0 00 00 76 CC CC 7C 0C 1E  // ...ff|`...v..|..
    AAF0: 00 00 DC 66 60 60 F0 00 00 00 7C C0 7C 06 7C 00  // ...f``....|.|.|.
    AB00: 30 30 FC 30 30 36 1C 00 00 00 CC CC CC CC 76 00  // 00.006........v.
    AB10: 00 00 C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE 6C 00  // ....l8........l.
    AB20: 00 00 C6 6C 38 6C C6 00 00 00 C6 C6 CE 76 06 7C  // ...l8l.......v.|
    AB30: 00 00 FC 98 30 64 FC 00 0E 18 18 70 18 18 0E 00  // ....0d.....p....
    AB40: 18 18 18 00 18 18 18 00 70 18 18 0E 18 18 70 00  // ........p.....p.
    AB50: 76 DC 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00  // v.........88ll..
    AB60: 3C 66 C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE 76 00  // <f.f<..x......v.
    AB70: 0E 00 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC 7E 00  // ..|...|.|.x.|.~.
    AB80: C6 00 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC 7E 00  // ..x.|.~...x.|.~.
    AB90: 38 38 78 0C 7C CC 7E 00 00 00 7C C0 7C 18 6C 38  // 88x.|.~...|.|.l8
    ABA0: 7C C6 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0 7C 00  // |.|...|...|...|.
    ABB0: E0 00 7C C6 FE C0 7C 00 66 00 38 18 18 18 3C 00  // ..|...|.f.8...<.
    ABC0: 7C C6 38 18 18 18 3C 00 00 00 38 18 18 18 3C 00  // |.8...<...8...<.
    ABD0: C6 38 6C C6 FE C6 C6 00 38 38 00 7C C6 FE C6 00  // .8l.....88.|....
    ABE0: 0E 00 FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8 6E 00  // ..........l.~.n.
    ABF0: 7E D8 D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6 7C 00  // ~.......|..|..|.
    AC00: 00 C6 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6 7C 00  // ...|..|....|..|.
    AC10: 7C C6 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE 76 00  // |.....v.......v.
    AC20: 18 00 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C 38 00  // ..<...<..8l..l8.
    AC30: C6 00 C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E 18 00  // ......|...~..~..
    AC40: 38 6C 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C 18 00  // 8l`.f.l..f<~.<..
    AC50: 3E 63 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C 00 1C  // >c8.c>...>a<.|..
    AC60: 0E 00 78 0C 7C CC 7E 00 1C 00 38 18 18 18 3C 00  // ..x.|.~...8...<.
    AC70: 00 0E 00 7C C6 C6 7C 00 00 0E 00 CC CC DC 76 00  // ...|..|.......v.
    AC80: 00 FC 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE C6 00  // ....ff..........
    AC90: 3E 00 3E 60 67 63 3D 00 3E 00 76 CE C6 7E 06 7C  // >.>`gc=.>.v..~.|
    ACA0: 18 00 18 30 60 66 3C 00 00 00 00 7C 60 60 00 00  // ...0`f<....|``..
    ACB0: 00 00 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36 0C 3E  // ...|.......0|6.>
    ACC0: C0 CC D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C 18 00  // ...0l<~.....<<..
    ACD0: 00 36 6C D8 6C 36 00 00 00 D8 6C 36 6C D8 00 00  // .6l.l6....l6l...
    ACE0: 22 88 22 88 22 88 22 88 55 AA 55 AA 55 AA 55 AA  // ".".".".U.U.U.U.
    ACF0: DD 77 DD 77 DD 77 DD 77 18 18 18 18 18 18 18 18  // .w.w.w.w........
    AD00: 18 18 18 18 F8 18 18 18 18 18 F8 18 F8 18 18 18  // ................
    AD10: 36 36 36 36 F6 36 36 36 00 00 00 00 FE 36 36 36  // 6666.666.....666
    AD20: 00 00 F8 18 F8 18 18 18 36 36 F6 06 F6 36 36 36  // ........66...666
    AD30: 36 36 36 36 36 36 36 36 00 00 FE 06 F6 36 36 36  // 66666666.....666
    AD40: 36 36 F6 06 FE 00 00 00 36 36 36 36 FE 00 00 00  // 66......6666....
    AD50: 18 18 F8 18 F8 00 00 00 00 00 00 00 F8 18 18 18  // ................
    AD60: 18 18 18 18 1F 00 00 00 18 18 18 18 FF 00 00 00  // ................
    AD70: 00 00 00 00 FF 18 18 18 18 18 18 18 1F 18 18 18  // ................
    AD80: 00 00 00 00 FF 00 00 00 18 18 18 18 FF 18 18 18  // ................
    AD90: 18 18 1F 18 1F 18 18 18 36 36 36 36 37 36 36 36  // ........66667666
    ADA0: 36 36 37 30 3F 00 00 00 00 00 3F 30 37 36 36 36  // 6670?.....?07666
    ADB0: 36 36 F7 00 FF 00 00 00 00 00 FF 00 F7 36 36 36  // 66...........666
    ADC0: 36 36 37 30 37 36 36 36 00 00 FF 00 FF 00 00 00  // 66707666........
    ADD0: 36 36 F7 00 F7 36 36 36 18 18 FF 00 FF 00 00 00  // 66...666........
    ADE0: 36 36 36 36 FF 00 00 00 00 00 FF 00 FF 18 18 18  // 6666............
    ADF0: 00 00 00 00 FF 36 36 36 36 36 36 36 3F 00 00 00  // .....6666666?...
    AE00: 18 18 1F 18 1F 00 00 00 00 00 1F 18 1F 18 18 18  // ................
    AE10: 00 00 00 00 3F 36 36 36 36 36 36 36 FF 36 36 36  // ....?6666666.666
    AE20: 18 18 FF 18 FF 18 18 18 18 18 18 18 F8 00 00 00  // ................
    AE30: 00 00 00 00 1F 18 18 18 FF FF FF FF FF FF FF FF  // ................
    AE40: 00 00 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0  // ................
    AE50: 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00 00 00  // ................
    AE60: 00 00 66 DC D8 DC 66 00 00 78 CC F8 CC C6 CC 00  // ..f...f..x......
    AE70: 00 FE 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C 6C 00  // ..b```....lllll.
    AE80: FE C6 60 30 60 C6 FE 00 00 7E D8 CC CC D8 70 00  // ..`0`....~....p.
    AE90: 00 66 66 66 66 7C C0 00 00 76 DC 18 18 18 38 00  // .ffff|...v....8.
    AEA0: FE 38 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C 38 00  // .8l.l8..8l...l8.
    AEB0: 38 6C C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC 78 00  // 8l..ll..>`8f..x.
    AEC0: 00 00 7E DB DB 7E 00 00 06 7C DE F6 E6 7C C0 00  // ..~..~...|...|..
    AED0: 38 60 C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6 C6 00  // 8`...`8.|.......
    AEE0: 00 FE 00 FE 00 FE 00 00 18 18 7E 18 18 00 7E 00  // ..........~...~.
    AEF0: 30 18 0C 18 30 00 7E 00 0C 18 30 18 0C 00 7E 00  // 0...0.~...0...~.
    AF00: 0C 1E 18 18 18 18 18 18 18 18 18 18 18 78 30 00  // .............x0.
    AF10: 00 00 18 00 7E 00 18 00 00 76 DC 00 76 DC 00 00  // ....~....v..v...
    AF20: 7C C6 C6 7C 00 00 00 00 00 00 00 18 18 00 00 00  // |..|............
    AF30: 00 00 00 00 18 00 00 00 1F 18 18 18 F8 38 18 00  // .............8..
    AF40: D8 6C 6C 6C 00 00 00 00 70 D8 30 F8 00 00 00 00  // .lll....p.0.....
    AF50: 00 00 7C 7C 7C 7C 00 00 00 00 00 00 00 00 00 00  // ..||||..........
    AF60: 1D 00 00 00 00 24 66 FF 66 24 00 00 00 00 00 00  // .....$f.f$......
    AF70: 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AF80: 00 00 00 00 00 7E 81 A5 81 81 BD 99 81 81 7E 00  // .....~........~.
    AF90: 00 00 00 00 00 7C FE FE D6 FE FE BA C6 FE 7C 00  // .....|........|.
    AFA0: 00 00 00 00 00 00 6C EE FE FE FE FE 7C 38 10 00  // ......l.....|8..
    AFB0: 00 00 00 00 00 00 10 38 7C FE 7C 38 10 00 00 00  // .......8|.|8....
    AFC0: 00 00 00 00 00 00 10 38 38 10 6C EE 6C 10 38 00  // .......88.l.l.8.
    AFD0: 00 00 00 00 00 10 38 7C 7C FE FE FE 6C 10 38 00  // ......8||...l.8.
    AFE0: 00 00 00 00 00 00 00 00 18 3C 3C 3C 18 00 00 00  // .........<<<....
    AFF0: 00 00 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF FF FF  // ................
    B000: FF FF FF 00 00 00 00 18 3C 66 66 66 3C 18 00 00  // ........<fff<...
    B010: 00 00 00 FF FF FF FF E7 C3 99 99 99 C3 E7 FF FF  // ................
    B020: FF FF FF 00 00 1E 0E 1E 36 78 CC CC CC CC 78 00  // ........6x....x.
    B030: 00 00 00 00 00 3C 66 66 66 3C 18 7E 18 18 18 00  // .....<fff<.~....
    B040: 00 00 00 00 00 1E 1A 1E 18 18 18 18 78 F8 70 00  // ............x.p.
    B050: 00 00 00 00 00 3E 36 3E 36 36 76 F6 66 0E 1E 0C  // .....>6>66v.f...
    B060: 00 00 00 00 00 18 DB 7E 3C 66 66 3C 7E DB 18 00  // .......~<ff<~...
    B070: 00 00 00 00 00 00 80 E0 F0 FC FE FC F0 E0 80 00  // ................
    B080: 00 00 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E 02 00  // ........>~.~>...
    B090: 00 00 00 00 00 18 3C 7E 18 18 18 18 7E 3C 18 00  // ......<~....~<..
    B0A0: 00 00 00 00 00 66 66 66 66 66 66 66 00 66 66 00  // .....fffffff.ff.
    B0B0: 00 00 00 00 00 7F DB DB DB DB 7B 1B 1B 1B 1B 00  // ..........{.....
    B0C0: 00 00 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C C6 C6  // .....|..`|..|...
    B0D0: 7C 00 00 00 00 00 00 00 00 00 00 FE FE FE FE 00  // |...............
    B0E0: 00 00 00 00 00 18 3C 7E 18 18 18 7E 3C 18 7E 00  // ......<~...~<.~.
    B0F0: 00 00 00 00 00 18 3C 7E 18 18 18 18 18 18 18 00  // ......<~........
    B100: 00 00 00 00 00 18 18 18 18 18 18 18 7E 3C 18 00  // ............~<..
    B110: 00 00 00 00 00 00 00 00 0C 0E FF 0E 0C 00 00 00  // ................
    B120: 00 00 00 00 00 00 00 00 30 70 FE 70 30 00 00 00  // ........0p.p0...
    B130: 00 00 00 00 00 00 00 00 00 C0 C0 C0 FE 00 00 00  // ................
    B140: 00 00 00 00 00 00 00 00 24 66 FF 66 24 00 00 00  // ........$f.f$...
    B150: 00 00 00 00 00 00 10 38 38 38 7C 7C FE FE 00 00  // .......888||....
    B160: 00 00 00 00 00 00 FE FE 7C 7C 7C 38 38 10 00 00  // ........|||88...
    B170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B180: 00 00 00 00 00 18 3C 3C 3C 3C 18 18 00 18 18 00  // ......<<<<......
    B190: 00 00 00 00 36 36 36 36 14 00 00 00 00 00 00 00  // ....6666........
    B1A0: 00 00 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C 6C 00  // .....lll.ll.lll.
    B1B0: 00 00 00 00 00 18 18 7C C6 C0 78 3C 06 C6 7C 18  // .......|..x<..|.
    B1C0: 18 00 00 00 00 00 00 00 62 66 0C 18 30 66 C6 00  // ........bf..0f..
    B1D0: 00 00 00 00 00 38 6C 38 30 76 7E CC CC CC 76 00  // .....8l80v~...v.
    B1E0: 00 00 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00  // ................
    B1F0: 00 00 00 00 00 0C 18 30 30 30 30 30 30 18 0C 00  // .......000000...
    B200: 00 00 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18 30 00  // .....0........0.
    B210: 00 00 00 00 00 00 00 00 6C 38 FE 38 6C 00 00 00  // ........l8.8l...
    B220: 00 00 00 00 00 00 00 00 18 18 7E 18 18 00 00 00  // ..........~.....
    B230: 00 00 00 00 00 00 00 00 00 00 00 00 0C 0C 0C 18  // ................
    B240: 00 00 00 00 00 00 00 00 00 00 FE 00 00 00 00 00  // ................
    B250: 00 00 00 00 00 00 00 00 00 00 00 00 00 18 18 00  // ................
    B260: 00 00 00 00 00 00 00 02 06 0C 18 30 60 C0 80 00  // ...........0`...
    B270: 00 00 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6 7C 00  // .....|........|.
    B280: 00 00 00 00 00 18 78 18 18 18 18 18 18 18 7E 00  // ......x.......~.
    B290: 00 00 00 00 00 7C C6 C6 06 0C 18 30 60 C6 FE 00  // .....|.....0`...
    B2A0: 00 00 00 00 00 7C C6 06 06 3C 06 06 06 C6 7C 00  // .....|...<....|.
    B2B0: 00 00 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C 1E 00  // .......<l.......
    B2C0: 00 00 00 00 00 FE C0 C0 C0 FC 06 06 06 C6 7C 00  // ..............|.
    B2D0: 00 00 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6 7C 00  // .....|........|.
    B2E0: 00 00 00 00 00 FE C6 06 0C 18 30 30 30 30 30 00  // ..........00000.
    B2F0: 00 00 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6 7C 00  // .....|...|....|.
    B300: 00 00 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6 7C 00  // .....|....~...|.
    B310: 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C 00 00  // ................
    B320: 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C 0C 18  // ................
    B330: 00 00 00 00 00 00 0C 18 30 60 C0 60 30 18 0C 00  // ........0`.`0...
    B340: 00 00 00 00 00 00 00 00 00 FE 00 FE 00 00 00 00  // ................
    B350: 00 00 00 00 00 00 60 30 18 0C 06 0C 18 30 60 00  // ......`0.....0`.
    B360: 00 00 00 00 00 7C C6 C6 0C 18 18 18 00 18 18 00  // .....|..........
    B370: 00 00 00 00 00 7C C6 C6 C6 DE DE DE DC C0 7E 00  // .....|........~.
    B380: 00 00 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6 C6 00  // .....8l.........
    B390: 00 00 00 00 00 FC 66 66 66 7C 66 66 66 66 FC 00  // ......fff|ffff..
    B3A0: 00 00 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66 3C 00  // .....<f......f<.
    B3B0: 00 00 00 00 00 F8 6C 66 66 66 66 66 66 6C F8 00  // ......lffffffl..
    B3C0: 00 00 00 00 00 FE 66 60 64 7C 64 60 60 66 FE 00  // ......f`d|d``f..
    B3D0: 00 00 00 00 00 FE 66 60 64 7C 64 60 60 60 F0 00  // ......f`d|d```..
    B3E0: 00 00 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6 7C 00  // .....|........|.
    B3F0: 00 00 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6 C6 00  // ................
    B400: 00 00 00 00 00 3C 18 18 18 18 18 18 18 18 3C 00  // .....<........<.
    B410: 00 00 00 00 00 3C 18 18 18 18 18 18 D8 D8 70 00  // .....<........p.
    B420: 00 00 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6 C6 00  // ................
    B430: 00 00 00 00 00 F0 60 60 60 60 60 60 62 66 FE 00  // ......``````bf..
    B440: 00 00 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6 C6 00  // ................
    B450: 00 00 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6 C6 00  // ................
    B460: 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 7C 00  // .....|........|.
    B470: 00 00 00 00 00 FC 66 66 66 66 7C 60 60 60 F0 00  // ......ffff|```..
    B480: 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6 7C 06  // .....|........|.
    B490: 00 00 00 00 00 FC 66 66 66 7C 78 6C 66 66 E6 00  // ......fff|xlff..
    B4A0: 00 00 00 00 00 7C C6 C0 C0 70 1C 06 06 C6 7C 00  // .....|...p....|.
    B4B0: 00 00 00 00 00 7E 5A 18 18 18 18 18 18 18 3C 00  // .....~Z.......<.
    B4C0: 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6 7C 00  // ..............|.
    B4D0: 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38 10 00  // ............l8..
    B4E0: 00 00 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6 C6 00  // ................
    B4F0: 00 00 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6 C6 00  // ........l88l....
    B500: 00 00 00 00 00 66 66 66 66 66 3C 18 18 18 3C 00  // .....fffff<...<.
    B510: 00 00 00 00 00 FE C6 86 0C 18 30 60 C2 C6 FE 00  // ..........0`....
    B520: 00 00 00 00 00 7C 60 60 60 60 60 60 60 60 7C 00  // .....|````````|.
    B530: 00 00 00 00 00 00 00 80 C0 60 30 18 0C 06 02 00  // .........`0.....
    B540: 00 00 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C 7C 00  // .....|........|.
    B550: 00 00 00 00 10 38 6C C6 00 00 00 00 00 00 00 00  // .....8l.........
    B560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B570: FF 00 00 00 18 18 18 0C 00 00 00 00 00 00 00 00  // ................
    B580: 00 00 00 00 00 00 00 00 78 0C 7C CC CC DC 76 00  // ........x.|...v.
    B590: 00 00 00 00 00 E0 60 60 7C 66 66 66 66 66 FC 00  // ......``|fffff..
    B5A0: 00 00 00 00 00 00 00 00 7C C6 C0 C0 C0 C6 7C 00  // ........|.....|.
    B5B0: 00 00 00 00 00 1C 0C 0C 7C CC CC CC CC CC 7E 00  // ........|.....~.
    B5C0: 00 00 00 00 00 00 00 00 7C C6 C6 FE C0 C6 7C 00  // ........|.....|.
    B5D0: 00 00 00 00 00 1C 36 30 30 FC 30 30 30 30 78 00  // ......600.0000x.
    B5E0: 00 00 00 00 00 00 00 00 76 CE C6 C6 CE 76 06 C6  // ........v....v..
    B5F0: 7C 00 00 00 00 E0 60 60 7C 66 66 66 66 66 E6 00  // |.....``|fffff..
    B600: 00 00 00 00 00 18 18 00 38 18 18 18 18 18 3C 00  // ........8.....<.
    B610: 00 00 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C CC CC  // ................
    B620: 78 00 00 00 00 E0 60 60 66 66 6C 78 6C 66 E6 00  // x.....``fflxlf..
    B630: 00 00 00 00 00 18 18 18 18 18 18 18 18 18 1C 00  // ................
    B640: 00 00 00 00 00 00 00 00 6C FE D6 D6 C6 C6 C6 00  // ........l.......
    B650: 00 00 00 00 00 00 00 00 DC 66 66 66 66 66 66 00  // .........ffffff.
    B660: 00 00 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 7C 00  // ........|.....|.
    B670: 00 00 00 00 00 00 00 00 DC 66 66 66 66 7C 60 60  // .........ffff|``
    B680: F0 00 00 00 00 00 00 00 76 CC CC CC CC 7C 0C 0C  // ........v....|..
    B690: 1E 00 00 00 00 00 00 00 DC 66 60 60 60 60 F0 00  // .........f````..
    B6A0: 00 00 00 00 00 00 00 00 7C C6 C0 7C 06 C6 7C 00  // ........|..|..|.
    B6B0: 00 00 00 00 00 30 30 30 FC 30 30 30 30 36 1C 00  // .....000.00006..
    B6C0: 00 00 00 00 00 00 00 00 CC CC CC CC CC CC 76 00  // ..............v.
    B6D0: 00 00 00 00 00 00 00 00 C6 C6 C6 C6 6C 38 10 00  // ............l8..
    B6E0: 00 00 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE 6C 00  // ..............l.
    B6F0: 00 00 00 00 00 00 00 00 C6 C6 6C 38 6C C6 C6 00  // ..........l8l...
    B700: 00 00 00 00 00 00 00 00 C6 C6 C6 C6 CE 76 06 C6  // .............v..
    B710: 7C 00 00 00 00 00 00 00 FE 86 0C 18 30 62 FE 00  // |...........0b..
    B720: 00 00 00 00 00 0E 18 18 18 70 18 18 18 18 0E 00  // .........p......
    B730: 00 00 00 00 00 18 18 18 18 00 18 18 18 18 18 00  // ................
    B740: 00 00 00 00 00 70 18 18 18 0E 18 18 18 18 70 00  // .....p........p.
    B750: 00 00 00 00 00 76 DC 00 00 00 00 00 00 00 00 00  // .....v..........
    B760: 00 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00 00  // .........88ll...
    B770: 00 00 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18 0C CC  // .....<f....f<...
    B780: 38 00 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE 76 00  // 8.............v.
    B790: 00 00 00 00 0C 18 30 00 7C C6 C6 FE C0 C6 7C 00  // ......0.|.....|.
    B7A0: 00 00 00 00 30 78 CC 00 78 0C 7C CC CC DC 76 00  // ....0x..x.|...v.
    B7B0: 00 00 00 00 00 CC 00 00 78 0C 7C CC CC DC 76 00  // ........x.|...v.
    B7C0: 00 00 00 00 60 30 18 00 78 0C 7C CC CC DC 76 00  // ....`0..x.|...v.
    B7D0: 00 00 00 00 38 6C 38 00 78 0C 7C CC CC DC 76 00  // ....8l8.x.|...v.
    B7E0: 00 00 00 00 00 00 00 7C C6 C0 C0 C6 7C 18 0C 6C  // .......|....|..l
    B7F0: 38 00 00 00 30 78 CC 00 7C C6 C6 FE C0 C6 7C 00  // 8...0x..|.....|.
    B800: 00 00 00 00 00 CC 00 00 7C C6 C6 FE C0 C6 7C 00  // ........|.....|.
    B810: 00 00 00 00 30 18 0C 00 7C C6 C6 FE C0 C6 7C 00  // ....0...|.....|.
    B820: 00 00 00 00 00 66 00 00 38 18 18 18 18 18 3C 00  // .....f..8.....<.
    B830: 00 00 00 00 18 3C 66 00 38 18 18 18 18 18 3C 00  // .....<f.8.....<.
    B840: 00 00 00 00 00 00 00 00 38 18 18 18 18 18 3C 00  // ........8.....<.
    B850: 00 00 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6 C6 00  // ......8l........
    B860: 00 00 00 38 6C 38 00 38 6C C6 C6 FE C6 C6 C6 00  // ...8l8.8l.......
    B870: 00 00 00 0C 18 30 00 FE 60 60 7C 60 60 60 FE 00  // .....0..``|```..
    B880: 00 00 00 00 00 00 00 66 DB 1B 7F D8 D8 DF 76 00  // .......f......v.
    B890: 00 00 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8 DE 00  // .....~..........
    B8A0: 00 00 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6 7C 00  // ....0x..|.....|.
    B8B0: 00 00 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6 7C 00  // ........|.....|.
    B8C0: 00 00 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6 7C 00  // ....0...|.....|.
    B8D0: 00 00 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE 76 00  // ....0x........v.
    B8E0: 00 00 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE 76 00  // ....`0........v.
    B8F0: 00 00 00 00 18 00 3C 18 18 18 18 18 18 18 3C 00  // ......<.......<.
    B900: 00 00 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6 7C 00  // ......|.......|.
    B910: 00 00 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6 7C 00  // ..............|.
    B920: 00 00 00 00 00 18 18 7C C6 C0 C0 C6 7C 18 18 00  // .......|....|...
    B930: 00 00 00 00 38 6C 60 60 F0 60 60 60 66 F6 6C 00  // ....8l``.```f.l.
    B940: 00 00 00 00 66 66 66 66 3C 18 7E 18 3C 18 18 00  // ....ffff<.~.<...
    B950: 00 00 00 00 00 3E 63 63 30 1C 06 63 63 3E 00 1C  // .....>cc0..cc>..
    B960: 00 00 00 00 00 00 00 00 3E 63 38 0E 63 3E 00 1C  // ........>c8.c>..
    B970: 00 00 00 00 0C 18 30 00 78 0C 7C CC CC DC 76 00  // ......0.x.|...v.
    B980: 00 00 00 00 0C 18 30 00 38 18 18 18 18 18 3C 00  // ......0.8.....<.
    B990: 00 00 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6 7C 00  // ......0.|.....|.
    B9A0: 00 00 00 00 18 30 60 00 CC CC CC CC CC DC 76 00  // .....0`.......v.
    B9B0: 00 00 00 00 00 76 DC 00 BC 66 66 66 66 66 E6 00  // .....v...fffff..
    B9C0: 00 00 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6 C6 00  // ....v...........
    B9D0: 00 00 00 00 21 1E 00 1E 33 60 60 67 63 33 1D 00  // ....!...3``gc3..
    B9E0: 00 00 00 00 42 3C 00 3B 66 66 66 3E 06 66 3C 00  // ....B<.;fff>.f<.
    B9F0: 00 00 00 00 00 30 30 00 30 30 30 60 C6 C6 7C 00  // .....00.000`..|.
    BA00: 00 00 00 00 00 00 00 00 00 00 7E 60 60 60 00 00  // ..........~```..
    BA10: 00 00 00 00 00 00 00 00 00 00 7E 06 06 06 00 00  // ..........~.....
    BA20: 00 00 00 00 60 60 62 66 6C 18 30 60 DC 36 0C 18  // ....``bfl.0`.6..
    BA30: 3E 00 00 00 60 60 62 66 6C 18 36 6E DE 36 7E 06  // >...``bfl.6n.6~.
    BA40: 06 00 00 00 00 18 18 00 18 18 3C 3C 3C 3C 18 00  // ..........<<<<..
    BA50: 00 00 00 00 00 00 00 00 36 6C D8 6C 36 00 00 00  // ........6l.l6...
    BA60: 00 00 00 00 00 00 00 00 D8 6C 36 6C D8 00 00 00  // .........l6l....
    BA70: 00 00 00 11 44 11 44 11 44 11 44 11 44 11 44 11  // ....D.D.D.D.D.D.
    BA80: 44 11 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.D.U.U.U.U.U.U.
    BA90: 55 AA 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.U.w.w.w.w.w.w.
    BAA0: 77 DD 77 18 18 18 18 18 18 18 18 18 18 18 18 18  // w.w.............
    BAB0: 18 18 18 18 18 18 18 18 18 18 F8 18 18 18 18 18  // ................
    BAC0: 18 18 18 18 18 18 18 18 F8 18 F8 18 18 18 18 18  // ................
    BAD0: 18 18 18 36 36 36 36 36 36 36 F6 36 36 36 36 36  // ...6666666.66666
    BAE0: 36 36 36 00 00 00 00 00 00 00 FE 36 36 36 36 36  // 666........66666
    BAF0: 36 36 36 00 00 00 00 00 F8 18 F8 18 18 18 18 18  // 666.............
    BB00: 18 18 18 36 36 36 36 36 F6 06 F6 36 36 36 36 36  // ...66666...66666
    BB10: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    BB20: 36 36 36 00 00 00 00 00 FE 06 F6 36 36 36 36 36  // 666........66666
    BB30: 36 36 36 36 36 36 36 36 F6 06 FE 00 00 00 00 00  // 66666666........
    BB40: 00 00 00 36 36 36 36 36 36 36 FE 00 00 00 00 00  // ...6666666......
    BB50: 00 00 00 18 18 18 18 18 F8 18 F8 00 00 00 00 00  // ................
    BB60: 00 00 00 00 00 00 00 00 00 00 F8 18 18 18 18 18  // ................
    BB70: 18 18 18 18 18 18 18 18 18 18 1F 00 00 00 00 00  // ................
    BB80: 00 00 00 18 18 18 18 18 18 18 FF 00 00 00 00 00  // ................
    BB90: 00 00 00 00 00 00 00 00 00 00 FF 18 18 18 18 18  // ................
    BBA0: 18 18 18 18 18 18 18 18 18 18 1F 18 18 18 18 18  // ................
    BBB0: 18 18 18 00 00 00 00 00 00 00 FF 00 00 00 00 00  // ................
    BBC0: 00 00 00 18 18 18 18 18 18 18 FF 18 18 18 18 18  // ................
    BBD0: 18 18 18 18 18 18 18 18 1F 18 1F 18 18 18 18 18  // ................
    BBE0: 18 18 18 36 36 36 36 36 36 36 37 36 36 36 36 36  // ...6666666766666
    BBF0: 36 36 36 36 36 36 36 36 37 30 3F 00 00 00 00 00  // 6666666670?.....
    BC00: 00 00 00 00 00 00 00 00 3F 30 37 36 36 36 36 36  // ........?0766666
    BC10: 36 36 36 36 36 36 36 36 F7 00 FF 00 00 00 00 00  // 66666666........
    BC20: 00 00 00 00 00 00 00 00 FF 00 F7 36 36 36 36 36  // ...........66666
    BC30: 36 36 36 36 36 36 36 36 37 30 37 36 36 36 36 36  // 6666666670766666
    BC40: 36 36 36 00 00 00 00 00 FF 00 FF 00 00 00 00 00  // 666.............
    BC50: 00 00 00 36 36 36 36 36 F7 00 F7 36 36 36 36 36  // ...66666...66666
    BC60: 36 36 36 18 18 18 18 18 FF 00 FF 00 00 00 00 00  // 666.............
    BC70: 00 00 00 36 36 36 36 36 36 36 FF 00 00 00 00 00  // ...6666666......
    BC80: 00 00 00 00 00 00 00 00 FF 00 FF 18 18 18 18 18  // ................
    BC90: 18 18 18 00 00 00 00 00 00 00 FF 36 36 36 36 36  // ...........66666
    BCA0: 36 36 36 36 36 36 36 36 36 36 3F 00 00 00 00 00  // 6666666666?.....
    BCB0: 00 00 00 18 18 18 18 18 1F 18 1F 00 00 00 00 00  // ................
    BCC0: 00 00 00 00 00 00 00 00 1F 18 1F 18 18 18 18 18  // ................
    BCD0: 18 18 18 00 00 00 00 00 00 00 3F 36 36 36 36 36  // ..........?66666
    BCE0: 36 36 36 36 36 36 36 36 36 36 FF 36 36 36 36 36  // 6666666666.66666
    BCF0: 36 36 36 18 18 18 18 18 FF 18 FF 18 18 18 18 18  // 666.............
    BD00: 18 18 18 18 18 18 18 18 18 18 F8 00 00 00 00 00  // ................
    BD10: 00 00 00 00 00 00 00 00 00 00 1F 18 18 18 18 18  // ................
    BD20: 18 18 18 FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    BD30: FF FF FF 00 00 00 00 00 00 00 00 FF FF FF FF FF  // ................
    BD40: FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    BD50: F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    BD60: 0F 0F 0F FF FF FF FF FF FF FF FF 00 00 00 00 00  // ................
    BD70: 00 00 00 00 00 00 00 76 DC D8 D8 D8 D8 DC 76 00  // .......v......v.
    BD80: 00 00 00 00 00 78 CC CC D8 FC C6 C6 C6 C6 CC 00  // .....x..........
    BD90: 00 00 00 00 00 FE 66 62 60 60 60 60 60 60 60 00  // ......fb```````.
    BDA0: 00 00 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C 6C 00  // .........llllll.
    BDB0: 00 00 00 00 00 FE C6 62 30 18 18 30 62 C6 FE 00  // .......b0..0b...
    BDC0: 00 00 00 00 00 00 00 00 7E D8 CC CC CC D8 70 00  // ........~.....p.
    BDD0: 00 00 00 00 00 00 00 66 66 66 66 66 7C 60 C0 80  // .......fffff|`..
    BDE0: 00 00 00 00 00 00 00 00 76 DC 18 18 18 18 18 00  // ........v.......
    BDF0: 00 00 00 00 00 FE 38 38 6C C6 C6 6C 38 38 FE 00  // ......88l..l88..
    BE00: 00 00 00 00 00 00 38 6C C6 C6 FE C6 C6 6C 38 00  // ......8l.....l8.
    BE10: 00 00 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C EE 00  // .....8l....lll..
    BE20: 00 00 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC 78 00  // .....>``<f....x.
    BE30: 00 00 00 00 00 00 00 00 7E DB DB DB 7E 00 00 00  // ........~...~...
    BE40: 00 00 00 00 00 02 06 7C CE DE F6 F6 7C 60 C0 00  // .......|....|`..
    BE50: 00 00 00 00 00 00 1C 30 60 60 7C 60 60 30 1C 00  // .......0``|``0..
    BE60: 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 C6 00  // .....|..........
    BE70: 00 00 00 00 00 00 00 FE 00 00 FE 00 00 FE 00 00  // ................
    BE80: 00 00 00 00 00 00 00 18 18 7E 18 18 00 00 7E 00  // .........~....~.
    BE90: 00 00 00 00 00 30 18 0C 06 0C 18 30 00 00 7E 00  // .....0.....0..~.
    BEA0: 00 00 00 00 00 0C 18 30 60 30 18 0C 00 00 7E 00  // .......0`0....~.
    BEB0: 00 00 00 00 00 00 00 0C 1E 1A 18 18 18 18 18 18  // ................
    BEC0: 18 18 18 18 18 18 18 18 18 18 18 18 18 58 78 30  // .............Xx0
    BED0: 00 00 00 00 00 00 00 18 18 00 7E 00 18 18 00 00  // ..........~.....
    BEE0: 00 00 00 00 00 00 00 00 00 76 DC 00 76 DC 00 00  // .........v..v...
    BEF0: 00 00 00 00 00 78 CC CC 78 00 00 00 00 00 00 00  // .....x..x.......
    BF00: 00 00 00 00 00 00 00 00 00 00 18 18 00 00 00 00  // ................
    BF10: 00 00 00 00 00 00 00 00 00 00 00 18 00 00 00 00  // ................
    BF20: 00 00 00 00 00 1F 18 18 18 18 18 D8 D8 78 38 18  // .............x8.
    BF30: 00 00 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00 00 00  // ......lllll.....
    BF40: 00 00 00 00 00 70 D8 18 30 60 F8 00 00 00 00 00  // .....p..0`......
    BF50: 00 00 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E 00 00  // ........~~~~~~..
    BF60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    BF70: 00 00 00 1D 00 00 00 00 00 24 66 FF 66 24 00 00  // .........$f.f$..
    BF80: 00 00 00 00 2F 00 00 00 01 03 06 0C 18 30 60 C0  // ..../........0`.
    BF90: 80 00 00 00 00 30 00 00 7E C3 C3 C3 DB DB C3 C3  // .....0..~.......
    BFA0: C3 7E 00 00 00 00 4D 00 00 C3 C3 E7 FF FF DB DB  // .~....M.........
    BFB0: C3 C3 C3 00 00 00 00 54 00 00 FF 99 18 18 18 18  // .......T........
    BFC0: 18 18 18 3C 00 00 00 00 56 00 00 C3 C3 C3 C3 C3  // ...<....V.......
    BFD0: C3 C3 66 3C 18 00 00 00 00 57 00 00 C3 C3 C3 C3  // ..f<.....W......
    BFE0: DB DB DB DB FF 66 00 00 00 00 58 00 00 C3 C3 C3  // .....f....X.....
    BFF0: 66 3C 3C 66 C3 C3 C3 00 00 00 00 59 00 00 C3 C3  // f<<f.......Y....
    C000: C3 C3 66 3C 18 18 18 3C 00 00 00 00 5C 00 00 00  // ..f<...<....\...
    C010: 80 C0 60 30 18 0C 06 03 01 00 00 00 00 6D 00 00  // ..`0.........m..
    C020: 00 00 00 66 FF DB DB DB C3 C3 00 00 00 00 76 00  // ...f..........v.
    C030: 00 00 00 00 C3 C3 C3 C3 66 3C 18 00 00 00 00 77  // ........f<.....w
    C040: 00 00 00 00 00 C3 C3 DB DB DB FF 66 00 00 00 00  // ...........f....
    C050: 00 00 0B AF C3 0B DB 74 03 E9 46 01 57 32 C0 B9  // .......t..F.W2..
    C060: 40 00 F3 AA 5F BB D8 DC 26 89 1D 26 8C 4D 02 2E  // @..._...&..&.M..
    C070: 8E 1E 06 61 57 BE 49 04 B9 1E 00 83 C7 04 FC 8A  // ...aW.I.........
    C080: 04 26 88 05 46 47 E2 F7 5F A0 84 04 FE C0 26 88  // .&..FG.._.....&.
    C090: 45 22 A1 85 04 26 89 45 23 57 E8 D9 1B 5F 26 88  // E"...&.E#W..._&.
    C0A0: 5D 25 26 88 7D 26 8A 1E 49 04 E8 FC 05 74 05 80  // ]%&.}&..I....t..
    C0B0: FB 13 7F 1D 32 FF D1 E3 2E 8A 87 B0 DC 32 E4 0A  // ....2........2..
    C0C0: C0 74 01 40 26 89 45 27 2E 8A 87 B1 DC 26 88 45  // .t.@&.E'.....&.E
    C0D0: 29 A1 85 04 8A 16 84 04 FE C2 F6 E2 B2 00 3D C8  // ).............=.
    C0E0: 00 7E 15 B2 01 3D 5E 01 7E 0E B2 02 3D 90 01 7E  // .~...=^.~...=..~
    C0F0: 07 B2 03 3D E0 01 7E 00 26 88 55 2A 8A 26 87 04  // ...=..~.&.U*.&..
    C100: 8A C4 24 01 C0 E0 04 80 E4 02 D0 E4 0A E0 80 F4  // ..$.............
    C110: 10 A0 89 04 24 0A 0A E0 E8 94 08 B2 C0 B0 30 EE  // ....$.........0.
    C120: 42 EC 24 08 C0 E0 02 0A C4 0C 01 26 88 45 2D B0  // B.$........&.E-.
    C130: 03 26 88 45 31 E8 77 08 1E 06 32 D2 C4 1E A8 04  // .&.E1.w...2.....
    C140: 8C C1 8C CE 3B CE 74 34 26 C5 77 04 8C D9 0B F1  // ....;.t4&.w.....
    C150: 74 03 80 CA 10 26 C5 77 0C 8C D9 0B F1 74 03 80  // t....&.w.....t..
    C160: CA 08 26 C5 77 08 8C D9 0B F1 74 03 80 CA 04 26  // ..&.w.....t....&
    C170: C5 77 10 8C D9 0B F1 74 03 80 CA 01 07 1F 26 88  // .w.....t......&.
    C180: 55 32 B0 03 BA C4 03 E8 E4 04 8A E0 C0 EC 02 8A  // U2..............
    C190: D4 8A F2 D0 EE 81 E2 04 04 25 03 03 0B C2 26 89  // .........%....&.
    C1A0: 45 2B 8B EC C6 46 1A 1B C3 0A C0 74 0F FE C8 74  // E+...F.....t...t
    C1B0: 36 FE C8 74 56 8B EC C6 46 1A 00 C3 B8 20 00 F6  // 6..tV...F.... ..
    C1C0: C1 01 74 03 83 C0 60 F6 C1 02 74 03 83 C0 3A F6  // ..t...`...t...:.
    C1D0: C1 04 74 03 05 03 03 83 C0 3F C1 E8 06 8B EC 89  // ..t......?......
    C1E0: 46 0E C6 46 1A 1C C3 8B FB 83 C7 20 F6 C1 01 74  // F..F....... ...t
    C1F0: 03 E8 85 00 F6 C1 02 74 03 E8 EF 00 F6 C1 04 74  // .......t.......t
    C200: 03 E8 F8 01 8B EC C6 46 1A 1C C3 F6 C1 01 74 06  // .......F......t.
    C210: E8 16 15 E8 25 01 F6 C1 02 74 03 E8 85 01 F6 C1  // ....%....t......
    C220: 04 74 03 E8 12 02 EB DC 8A C4 EE 42 EC AA FE C4  // .t.........B....
    C230: 4A E2 F5 C3 E8 6B 04 BD C0 03 B9 15 00 32 E4 EC  // J....k.......2..
    C240: 87 EA 8A C4 EE 42 EC AA FE C4 4A 87 EA E2 F0 EC  // .....B....J.....
    C250: 87 EA B0 20 EE C3 26 8A 05 88 04 47 46 E2 F7 C3  // ... ..&....GF...
    C260: 26 8A 25 EF 47 FE C0 E2 F7 C3 B2 C0 8A C4 EE 26  // &.%.G..........&
    C270: 8A 05 47 FE C4 EE E2 F4 C3 9C FA 51 57 8B C7 2B  // ..G........QW..+
    C280: C3 26 89 07 8B F7 E8 0A 04 EC 26 88 44 01 26 89  // .&........&.D.&.
    C290: 54 41 B2 CE EC 26 88 44 02 B2 CC EC 26 88 44 09  // TA...&.D....&.D.
    C2A0: B2 CA EC 26 88 44 04 B2 C4 EC 26 88 04 83 C7 05  // ...&.D....&.....
    C2B0: B9 04 00 B4 01 E8 70 FF 26 8A 04 EE 8B FE 83 C7  // ......p.&.......
    C2C0: 0A 26 8B 54 41 32 E4 B9 19 00 E8 5B FF 26 8A 44  // .&.TA2.....[.&.D
    C2D0: 01 EE E8 5F FF B2 CE 32 E4 B9 09 00 E8 49 FF 26  // ..._...2.....I.&
    C2E0: 8A 44 02 EE 5F 59 83 C7 60 9D C3 9C FA 8B C7 2B  // .D.._Y..`......+
    C2F0: C3 26 89 47 02 51 57 2E 8E 1E 06 61 A0 10 04 24  // .&.G.QW....a...$
    C300: 30 AA BE 49 04 B9 1E 00 F3 A4 BE 84 04 B1 07 F3  // 0..I............
    C310: A4 BE A8 04 B1 04 F3 A4 BE 14 00 B1 04 F3 A4 BE  // ................
    C320: 74 00 B1 04 F3 A4 BE 7C 00 B1 04 F3 A4 BE 0C 01  // t......|........
    C330: B1 04 F3 A4 5F 59 83 C7 3A 9D C3 9C FA 26 8B 3F  // ...._Y..:....&.?
    C340: 03 FB 8B F7 51 8B FE 83 C7 05 BA C4 03 B8 00 01  // ....Q...........
    C350: EF B0 01 B9 04 00 E8 07 FF 47 B2 C2 26 8A 44 09  // .........G..&.D.
    C360: EE B2 C4 B8 00 03 EF 26 8A 04 EE 26 8B 54 41 B8  // .......&...&.TA.
    C370: 11 00 EF B1 19 32 C0 E8 E6 FE 26 8A 44 01 EE 80  // .....2....&.D...
    C380: C2 06 26 8A 44 04 EE EC B1 15 32 E4 E8 DB FE B0  // ..&.D.....2.....
    C390: 20 EE B1 09 32 C0 B2 CE E8 C5 FE 26 8A 44 02 EE  //  ...2......&.D..
    C3A0: 59 9D C3 9C FA 26 8B 7F 02 03 FB 06 51 2E 8E 1E  // Y....&......Q...
    C3B0: 06 61 26 8A 05 80 26 10 04 CF 08 06 10 04 47 BE  // .a&...&.......G.
    C3C0: 49 04 B9 1E 00 E8 8E FE BE 84 04 B1 07 E8 86 FE  // I...............
    C3D0: BE A8 04 B1 04 E8 7E FE BE 14 00 B1 04 E8 76 FE  // ......~.......v.
    C3E0: BE 74 00 B1 04 E8 6E FE BE 7C 00 B1 04 E8 66 FE  // .t....n..|....f.
    C3F0: BE 0C 01 B1 04 E8 5E FE 59 07 9D C3 9C FA 8B C7  // ......^.Y.......
    C400: 2B C3 26 89 47 04 E8 A6 05 B2 C0 B0 34 EE 42 EC  // +.&.G.......4.B.
    C410: 26 88 05 BA C8 03 EC 26 88 45 01 50 4A 4A EC 26  // &......&.E.PJJ.&
    C420: 88 45 02 83 C7 03 B9 00 03 42 32 C0 EE 42 42 EC  // .E.......B2..BB.
    C430: AA E2 FC 58 4A EE 9D C3 9C FA 26 8B 77 04 03 F3  // ...XJ.....&.w...
    C440: E8 6C 05 B2 C0 B0 34 EE 26 8A 04 EE BA C6 03 26  // .l....4.&......&
    C450: 8A 44 02 EE 56 42 42 83 C6 03 32 C0 EE 42 B9 00  // .D..VBB...2..B..
    C460: 03 26 8A 04 EE 46 E2 F9 5E FE CA 26 8A 44 01 EE  // .&...F..^..&.D..
    C470: 9D C3 BA CC 03 EC 24 FE 0A C4 B2 C2 EE C3 E8 A8  // ......$.........
    C480: 12 B2 C0 86 C4 EE EB 00 EB 00 86 C4 EE EB 00 EB  // ................
    C490: 00 B0 20 EE C3 50 8A E0 80 E4 80 80 26 87 04 7F  // .. ..P......&...
    C4A0: 08 26 87 04 24 7F 8A E0 3C 07 7E 1E 26 F6 47 33  // .&..$...<.~.&.G3
    C4B0: 01 75 17 3C 23 74 13 3C 32 74 0F 3C 33 74 0B B4  // .u.<#t.<2t.<3t..
    C4C0: 03 26 F6 47 09 01 75 02 B4 07 88 26 49 04 BA B4  // .&.G..u....&I...
    C4D0: 03 80 0E 87 04 02 26 F6 47 09 01 74 07 B2 D4 80  // ......&.G..t....
    C4E0: 26 87 04 FD 89 16 63 04 C7 06 4E 04 00 00 C6 06  // &.....c...N.....
    C4F0: 62 04 00 B9 08 00 BF 50 04 FC 06 1E 07 33 C0 F3  // b......P.....3..
    C500: AB 07 26 8A 07 32 E4 A3 4A 04 26 8A 47 01 A2 84  // ..&..2..J.&.G...
    C510: 04 26 8A 47 02 A3 85 04 26 8B 47 03 A3 4C 04 26  // .&.G....&.G..L.&
    C520: 8B 47 14 86 C4 A3 60 04 58 C3 52 32 E4 33 D2 B0  // .G....`.X.R2.3..
    C530: 0D CD 17 F6 C4 29 75 08 32 E4 33 D2 B0 0A CD 17  // .....)u.2.3.....
    C540: 5A C3 06 1E 60 2E 8E 1E 06 61 2E 83 0E 10 61 00  // Z...`....a....a.
    C550: 75 6E 80 3E 00 05 01 74 67 C6 06 00 05 01 8A 1E  // un.>...tg.......
    C560: 62 04 32 FF D1 E3 8B FB 8B 85 50 04 8A 3E 62 04  // b.2.......P..>b.
    C570: 50 32 F6 8A 0E 84 04 32 ED 41 51 8B 0E 4A 04 32  // P2.....2.AQ..J.2
    C580: D2 E8 A6 FF F6 C4 29 75 3D 51 52 89 95 50 04 B4  // ......)u=QR..P..
    C590: 08 E8 B0 D4 0A C0 75 02 B0 20 33 D2 32 E4 CD 17  // ......u.. 3.2...
    C5A0: F6 C4 29 75 1F 5A FE C2 59 E2 DE FE C6 59 E2 CA  // ..)u.Z..Y....Y..
    C5B0: E8 77 FF 32 C0 A2 00 05 58 89 85 50 04 E8 AF 03  // .w.2....X..P....
    C5C0: 61 1F 07 CF 5A 59 59 B0 FF EB EA 52 2A F5 38 C6  // a...ZYY....R*.8.
    C5D0: 7D 02 32 C0 2E 8E 06 08 61 5A C3 A0 85 04 F6 E3  // }.2.....aZ......
    C5E0: 8A F7 8B D8 8B CA BA C4 03 B8 02 0F EF B4 02 E8  // ................
    C5F0: 6D 00 8B D1 32 ED 8A E6 8A C6 F3 AA 03 FD 8A CA  // m...2...........
    C600: 4B 75 F7 32 E4 E8 57 00 C3 53 8A 1E 62 04 0B C0  // Ku.2..W..S..b...
    C610: 75 04 0A DB 74 03 E8 35 03 5B 8B F8 2B D1 81 C2  // u...t..5.[..+...
    C620: 01 01 8A C3 32 E4 C3 8A C6 32 F6 2B EA 0A DB 74  // ....2....2.+...t
    C630: 2A 2A C3 F6 26 85 04 8B C8 52 B4 01 E8 20 00 B2  // **..&....R... ..
    C640: C4 B8 02 0F EF 5A 1E 06 1F 8B C1 8B CA F3 A4 03  // .....Z..........
    C650: F5 03 FD 48 75 F5 1F E8 81 FF C3 8A D8 EB F8 BA  // ...Hu...........
    C660: CE 03 B0 05 EE 42 EC 24 FC 0A C4 EE 4A C3 9C FA  // .....B.$....J...
    C670: EE 42 EB 00 EC 4A 9D C3 1E 2E 8E 1E 06 61 8B 16  // .B...J.......a..
    C680: 63 04 80 C2 06 1F C3 1E 2E 8E 1E 06 61 8B 16 63  // c...........a..c
    C690: 04 1F C3 50 BA CC 03 EC B2 D4 A8 01 75 02 B2 B4  // ...P........u...
    C6A0: 58 C3 E8 EE FF 80 C2 06 C3 1E 2E 8E 1E 06 61 80  // X.............a.
    C6B0: 3E 49 04 03 74 13 80 3E 49 04 02 74 0C 80 3E 49  // >I..t..>I..t..>I
    C6C0: 04 01 74 05 80 3E 49 04 00 1F C3 50 2E 8E 06 0A  // ..t..>I....P....
    C6D0: 61 A0 10 04 24 30 3C 30 74 05 2E 8E 06 0C 61 58  // a...$0<0t.....aX
    C6E0: 0B C0 74 03 E8 E1 01 03 06 4E 04 81 C2 01 01 2B  // ..t......N.....+
    C6F0: D1 32 ED 8B 2E 4A 04 8B F8 8B F0 8B C5 F6 E3 D1  // .2...J..........
    C700: E0 D1 E5 0A DB 75 02 8A DE 38 F3 7E 02 8A DE C3  // .....u...8.~....
    C710: FC 8A D8 8B C1 E8 B3 FF 03 F0 3A 16 4A 04 74 06  // ..........:.J.t.
    C720: 06 1F E8 1B 00 C3 06 1F E8 40 00 C3 FC 8A D8 8A  // .........@......
    C730: C1 8A E6 E8 95 FF F7 DD 2B F0 06 1F E8 01 00 C3  // ........+.......
    C740: 53 8A CE 2A CB 32 ED 32 F6 2B EA 2B EA E3 0E 8A  // S..*.2.2.+.+....
    C750: E1 8B CA F3 A5 03 F5 03 FD FE CC 75 F4 58 B0 20  // ...........u.X. 
    C760: 8A CA F3 AB 03 FD FE CB 75 F6 C3 53 8A C6 2A C3  // ........u..S..*.
    C770: 74 06 F6 E2 8B C8 F3 A5 58 8B C8 F6 E2 91 B0 20  // t.......X...... 
    C780: F3 AB C3 8B D8 E8 2E 00 2E 8E 1E 0C 61 8A C3 22  // ............a.."
    C790: DF D3 E3 A8 80 74 03 30 1C C3 F6 D7 8A 34 22 F7  // .....t.0.....4".
    C7A0: 0A DE 88 1C C3 8A FC E8 0C 00 2E 8E 1E 0C 61 8A  // ..............a.
    C7B0: 04 D2 E8 22 C7 C3 B0 28 F6 E2 F6 C2 01 74 03 05  // ..."...(.....t..
    C7C0: D8 1F 8B F1 C1 EE 02 80 FF 05 7F 0C 03 F0 F6 D1  // ................
    C7D0: 80 E1 03 D0 E1 B7 03 C3 D1 EE 03 F0 F6 D1 80 E1  // ................
    C7E0: 07 B7 01 C3 FC 8A D8 2E 8E 06 0C 61 8B C1 E8 86  // ...........a....
    C7F0: 00 75 02 8A DE 03 F0 E8 24 00 C3 FC 8A D8 2E 8E  // .u......$.......
    C800: 06 0C 61 8A C1 8A E6 E8 6D 00 75 02 8A DE F7 DD  // ..a.....m.u.....
    C810: 81 C6 F0 00 81 C7 F0 00 2B F0 E8 01 00 C3 8A CE  // ........+.......
    C820: 2A CB E3 2C 51 8A CA 56 57 D1 E9 F3 A5 13 C9 F3  // *..,Q..VW.......
    C830: A4 8A CA 2B F1 2B F9 81 C6 00 20 81 C7 00 20 D1  // ...+.+.... ... .
    C840: E9 F3 A5 13 C9 F3 A4 5F 5E 03 F5 03 FD 59 E2 D4  // ......._^....Y..
    C850: 8A C7 8A E7 8A CA 57 D1 E9 F3 AB 13 C9 F3 AA 8A  // ......W.........
    C860: CA 2B F9 81 C7 00 20 D1 E9 F3 AB 13 C9 F3 AA 5F  // .+.... ........_
    C870: 03 FD FE CB 75 DE C3 E8 B0 00 81 C2 01 01 2B D1  // ....u.........+.
    C880: 38 F3 76 02 32 DB 51 B1 02 D2 E6 D2 E3 59 32 ED  // 8.v.2.Q......Y2.
    C890: BD 50 00 80 3E 49 04 06 74 04 D0 E2 D1 E0 06 1F  // .P..>I..t.......
    C8A0: 8B F8 8B F0 B0 50 F6 E3 0A DB C3 52 53 8A DF 32  // .....P.....RS..2
    C8B0: FF D1 E3 8B 87 50 04 E8 0E 00 50 D1 EB A1 4C 04  // .....P....P...L.
    C8C0: F7 E3 5B 03 C3 5B 5A C3 52 8B D0 A0 4A 04 F6 E4  // ..[..[Z.R...J...
    C8D0: 32 F6 03 C2 D1 E0 5A C3 8B E8 83 E5 0F 2E 8A A6  // 2.....Z.........
    C8E0: 88 C8 8B E8 C1 ED 04 83 E5 0F 2E 8A 86 88 C8 C3  // ................
    C8F0: 00 03 0C 0F 30 33 3C 3F C0 C3 CC CF F0 F3 FC FF  // ....03<?........
    C900: 26 8B 04 86 E0 BA 00 80 F6 C4 C0 74 02 0A D6 D0  // &..........t....
    C910: EE C1 E0 02 75 F2 88 56 00 45 C3 8B 16 63 04 8A  // ....u..V.E...c..
    C920: C5 86 E0 EF 8A E1 FE C0 EF C3 52 8B D0 8A C4 F6  // ..........R.....
    C930: 26 4A 04 C1 E0 02 32 F6 03 C2 5A C3 53 8A DF 32  // &J....2...Z.S..2
    C940: FF D1 E3 8B 87 50 04 D1 EB E8 02 00 5B C3 52 8B  // .....P......[.R.
    C950: D0 32 F6 52 8A C4 F6 26 85 04 F7 26 4A 04 5A 03  // .2.R...&...&J.Z.
    C960: C2 0A DB 74 08 03 06 4C 04 FE CB 75 F8 5A C3 52  // ...t...L...u.Z.R
    C970: 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 03 06 4E  // ...J...2.......N
    C980: 04 D1 F8 8B C8 B4 0E E8 91 FF 5A C3 8B C2 F7 26  // ..........Z....&
    C990: 4A 04 8B F9 C1 EF 03 03 F8 0A FF 74 0A 8A C7 32  // J..........t...2
    C9A0: E4 F7 26 4C 04 03 F8 80 E1 07 B4 80 D2 EC C3 E8  // ..&L............
    C9B0: F0 FC EC C3 E8 F8 FF B2 C0 B0 20 EE C3 E8 EF FF  // .......... .....
    C9C0: B2 C0 32 C0 EE C3 C4 3E A8 04 26 C4 7D 04 8C C5  // ..2....>..&.}...
    C9D0: 0B EF C3 53 B0 0E E8 95 FC 8A E0 B0 0F E8 8E FC  // ...S............
    C9E0: 8B D8 B8 0E AA EF B8 0F 55 EF B0 0E E8 7F FC 3C  // ........U......<
    C9F0: AA 74 0D B0 0F E8 76 FC 3C 55 74 04 32 C0 5B C3  // .t....v.<Ut.2.[.
    CA00: B0 0E 8A E7 EF FE C0 8A E3 EF B0 01 0A C0 5B C3  // ..............[.
    CA10: 8A EE 8A 36 85 04 06 1F 0A DB 74 25 8A C5 2A C3  // ...6......t%..*.
    CA20: F6 E6 8B C8 52 32 F6 C1 E2 02 8B C2 D1 E2 2B D5  // ....R2........+.
    CA30: 51 8B C8 F3 A5 2B FA 2B F2 59 E2 F4 5A E8 05 00  // Q....+.+.Y..Z...
    CA40: C3 8A DD EB F8 8A C6 F6 E3 8B C8 8A C7 8A E0 32  // ...............2
    CA50: F6 C1 E2 02 8B DA D1 E2 8B F1 2B D5 8B CB F3 AB  // ..........+.....
    CA60: 2B FA 4E 75 F7 C3 2E 8E 1E 06 61 89 0E 60 04 8A  // +.Nu......a..`..
    CA70: C5 24 60 A8 20 74 06 B9 00 1E E9 94 00 F6 06 87  // .$`. t..........
    CA80: 04 01 0F 85 8B 00 80 3E 49 04 07 74 06 E8 19 FC  // .......>I..t....
    CA90: 74 01 C3 F6 06 87 04 08 74 03 CD 42 C3 8A 36 85  // t.......t..B..6.
    CAA0: 04 8A D6 FE CA 38 CD 7E 1F 0A C9 74 64 8A E9 8A  // .....8.~...td...
    CAB0: CE FE C9 EB 5C 38 D1 74 58 8A CE 80 FD 03 7C 04  // ....\8.tX.....|.
    CAC0: 8A E9 D0 ED FE C9 EB 49 80 F9 03 7E 44 8A E1 2A  // .......I...~D..*
    CAD0: E5 0A E4 75 0A 38 CA 74 38 FE CA 38 CA 74 32 8A  // ...u.8.t8..8.t2.
    CAE0: C5 0A C1 38 F0 7E 0A 80 FC 02 7E 12 80 FD 02 7F  // ...8.~....~.....
    CAF0: C8 80 FC 03 7D BF 8A D6 FE CA 38 D1 74 13 8A CE  // ....}.....8.t...
    CB00: FE C9 FE C9 8A E9 2A EC 80 FE 08 7F 04 FE C1 FE  // ......*.........
    CB10: C5 B4 0A E8 05 FE C3 2E 8E 1E 06 61 A2 62 04 32  // ...........a.b.2
    CB20: E4 8B F0 F7 26 4C 04 A3 4E 04 8B C8 E8 7A FB 74  // ....&L..N....z.t
    CB30: 07 80 3E 49 04 07 77 02 D1 F9 B4 0C E8 DC FD D1  // ..>I..w.........
    CB40: E6 8B 84 50 04 E8 27 FE C3 2E 8E 1E 06 61 8A 26  // ...P..'......a.&
    CB50: 49 04 E8 EE A9 74 07 C7 06 50 04 00 00 C3 E8 48  // I....t...P.....H
    CB60: FB 74 0B 80 FC 07 74 06 77 08 E8 77 FC C3 E8 9F  // .t....t.w..w....
    CB70: FB C3 80 FC 13 7C 03 74 1F C3 E8 4E FA 8A D8 8B  // .....|.t...N....
    CB80: C1 E8 85 FA 8B 2E 4A 04 52 F6 26 85 04 F7 E5 8B  // ......J.R.&.....
    CB90: F7 03 F0 5A E8 90 FA C3 E8 30 FA 8A D8 8B C1 E8  // ...Z.....0......
    CBA0: 67 FA C1 E7 03 52 8B 2E 4A 04 C1 E5 03 F7 26 85  // g....R..J.....&.
    CBB0: 04 F7 E5 8B F7 03 F0 5A E8 55 FE C3 2E 8E 1E 06  // .......Z.U......
    CBC0: 61 8A 26 49 04 E8 E1 FA 74 0C 80 FC 07 74 07 77  // a.&I....t....t.w
    CBD0: 40 80 FC 03 7F 04 E8 53 FB C3 E8 1E FC C3 E8 EA  // @......S........
    CBE0: F9 8A D8 8A C1 8A E6 FE C4 E8 1D FA 2B 3E 4A 04  // ............+>J.
    CBF0: C1 E7 03 52 F7 26 85 04 F7 26 4A 04 C1 E0 03 8B  // ...R.&...&J.....
    CC00: F7 2B F0 5A 8B 2E 4A 04 C1 E5 03 F7 DD E8 00 FE  // .+.Z..J.........
    CC10: C3 80 FC 13 7C 03 74 C6 C3 E8 AF F9 8A D8 8A C1  // ....|.t.........
    CC20: 8A E6 FE C4 E8 E2 F9 52 8B 2E 4A 04 F7 26 85 04  // .......R..J..&..
    CC30: F7 E5 2B FD 8B F7 2B F0 5A F7 DD E8 E9 F9 C3 2E  // ..+...+.Z.......
    CC40: 8E 1E 06 61 2E 8E 06 0C 61 E8 5D FA 74 11 80 3E  // ...a....a.].t..>
    CC50: 49 04 07 7C 18 2E 8E 06 0A 61 74 03 E9 B1 00 E8  // I..|.....at.....
    CC60: 49 FC 8B D8 26 8B 07 8B EC 89 46 1A C3 A1 50 04  // I...&.....F...P.
    CC70: E8 B7 FC 8B F0 BB 08 00 2B E3 8B EC 80 3E 49 04  // ........+....>I.
    CC80: 06 75 1F B9 04 00 26 8A 04 88 46 00 45 26 8A 84  // .u....&...F.E&..
    CC90: 00 20 88 46 00 45 83 C6 50 E2 EB B8 00 02 B2 80  // . .F.E..P.......
    CCA0: EB 17 D1 E6 B9 04 00 E8 56 FC 81 C6 00 20 E8 4F  // ........V.... .O
    CCB0: FC 81 EE B0 1F E2 F0 EB E2 2B EB C4 3E 0C 01 32  // .........+..>..2
    CCC0: F6 80 FB 0E 75 09 26 83 7D FE 10 75 02 B6 80 16  // ....u.&.}..u....
    CCD0: 1F 8B F5 8B CB F6 C6 80 74 01 47 56 57 F3 A6 5F  // ........t.GVW.._
    CCE0: 5E 74 23 FE C0 03 FB F6 C6 80 74 01 47 FE CA 75  // ^t#.......t.G..u
    CCF0: E2 FE CC 74 0F 2E 8E 1E 06 61 C4 3E 7C 00 B0 80  // ...t.....a.>|...
    CD00: B2 80 EB CB 32 C0 8B E5 03 E3 8B EC 89 46 1A C3  // ....2........F..
    CD10: 80 3E 49 04 13 7C 05 75 02 EB 5A C3 2E 8E 06 08  // .>I..|.u..Z.....
    CD20: 61 E8 18 FC 8B F0 8B 1E 85 04 2B E3 8B EC B8 05  // a.........+.....
    CD30: 08 B9 05 00 BA CE 03 80 3E 49 04 0F 72 1A F6 06  // ........>I..r...
    CD40: 87 04 60 75 13 B4 0A F7 C6 01 00 75 02 B4 05 B0  // ..`u.......u....
    CD50: 07 EF B8 05 18 B9 05 01 EF 51 8B CB 26 8A 04 F6  // .........Q..&...
    CD60: D0 88 46 00 45 03 36 4A 04 E2 F1 58 EF B8 00 01  // ..F.E.6J...X....
    CD70: 32 D2 E9 44 FF 2E 8E 06 08 61 A1 50 04 8B D0 32  // 2..D.....a.P...2
    CD80: F6 52 8A C4 32 E4 F7 26 4A 04 F7 26 85 04 5A 03  // .R..2..&J..&..Z.
    CD90: C2 8B F0 8B 1E 85 04 2B E3 8B EC 53 8B 3E 4A 04  // .......+...S.>J.
    CDA0: 4F C1 E7 03 C1 E6 03 B9 08 00 32 E4 26 8A 04 D0  // O.........2.&...
    CDB0: E4 0A C0 74 03 80 CC 01 46 E2 F1 88 66 00 45 03  // ...t....F...f.E.
    CDC0: F7 4B 75 E3 5B B8 00 01 32 D2 E9 EC FE 33 ED EB  // .Ku.[...2....3..
    CDD0: 03 BD 01 00 2E 8E 1E 06 61 2E 8E 06 0C 61 8A 26  // ........a....a.&
    CDE0: 49 04 E8 C4 F8 74 0F 2E 8E 06 0A 61 80 FC 07 74  // I....t.....a...t
    CDF0: 05 7C 3D E9 0B 02 8A E3 8B F0 8A DF 32 FF D1 E3  // .|=.........2...
    CE00: 8B 87 50 04 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 8B  // ..P....J...2....
    CE10: F8 D1 E7 0A DB 74 0B D0 EB A1 4C 04 03 F8 FE CB  // .....t....L.....
    CE20: 75 FA 8B C6 0B ED 75 03 F3 AB C3 AA 47 E2 FC C3  // u.....u.....G...
    CE30: 50 2E 8E 06 0C 61 A1 50 04 E8 EE FA 8B F8 A0 50  // P....a.P.......P
    CE40: 04 8A 26 4A 04 8B E8 58 A8 80 74 08 24 7F C5 36  // ..&J...X..t.$..6
    CE50: 7C 00 EB 04 C5 36 0C 01 8A FC 32 E4 C1 E0 03 03  // |....6....2.....
    CE60: F0 80 FF 06 74 69 D1 E7 8A F3 B0 55 80 E3 03 F6  // ....ti.....U....
    CE70: E3 8A D8 8A F8 8B C5 50 B2 04 F6 C6 80 75 27 AC  // .......P.....u'.
    CE80: E8 55 FA 23 C3 AB AC E8 4E FA 23 C3 26 89 85 FE  // .U.#....N.#.&...
    CE90: 1F 83 C7 4E FE CA 75 E7 83 EE 08 81 EF 3E 01 58  // ...N..u......>.X
    CEA0: E8 72 00 E2 D2 C3 AC E8 2E FA 23 C3 26 31 05 AC  // .r........#.&1..
    CEB0: E8 25 FA 23 C3 26 31 85 00 20 83 C7 50 FE CA 75  // .%.#.&1.. ..P..u
    CEC0: E5 83 EE 08 81 EF 3E 01 58 E8 49 00 E2 A9 C3 8B  // ......>.X.I.....
    CED0: C5 50 B2 04 F6 C3 80 74 1F AC 26 30 05 AC 26 30  // .P.....t..&0..&0
    CEE0: 85 00 20 83 C7 50 FE CA 7F EF 83 EE 08 81 EF 3F  // .. ..P.........?
    CEF0: 01 58 E8 20 00 E2 DA C3 AC AA AC 26 88 85 FF 1F  // .X. .......&....
    CF00: 83 C7 4F FE CA 7F F1 83 EE 08 81 EF 3F 01 58 E8  // ..O.........?.X.
    CF10: 03 00 E2 BD C3 FE C0 38 E0 72 06 32 C0 81 C7 F0  // .......8.r.2....
    CF20: 00 C3 8A 16 85 04 F6 E2 8B F0 32 F6 8B EA 66 0F  // ..........2...f.
    CF30: B6 06 51 04 F6 E2 66 0F B7 16 4A 04 83 FA 64 75  // ..Q...f...J...du
    CF40: 03 BA 68 00 83 FA 5A 75 03 BA 60 00 81 FA AF 00  // ..h...Zu..`.....
    CF50: 75 03 BA B0 00 52 F7 E2 66 0F B7 F8 66 0F B6 06  // u....R..f...f...
    CF60: 50 04 66 03 F8 66 C1 CF 10 03 FA 66 C1 C7 03 81  // P.f..f.....f....
    CF70: CF 00 FF 66 C1 C7 10 5A 8A E2 4A C1 E2 03 A0 50  // ...f...Z..J....P
    CF80: 04 50 C5 06 0C 01 03 F0 2E 8E 06 08 61 58 57 51  // .P..........aXWQ
    CF90: 50 9C FC 8B CD E8 3B 00 B5 08 AC 8A E0 8A C7 D0  // P.....;.........
    CFA0: E4 73 02 8A C3 26 88 05 66 47 FE CD 75 EF 66 03  // .s...&..fG..u.f.
    CFB0: FA E2 E2 9D 58 59 5F 83 C7 08 FE C0 38 E0 72 0E  // ....XY_.....8.r.
    CFC0: 51 32 C0 8B CD 49 03 FA 83 C7 08 E2 F9 59 2B F5  // Q2...I.......Y+.
    CFD0: E2 BC C3 06 52 33 C0 8E C0 66 C1 C7 10 8B C7 66  // ....R3...f.....f
    CFE0: C1 C7 10 E8 5D A5 74 16 38 E0 74 12 0F B6 D0 E8  // ....].t.8.t.....
    CFF0: 8B C9 8A E0 66 C1 C7 10 8B F8 66 C1 C7 10 5A 07  // ....f.....f...Z.
    D000: C3 80 FC 13 7C 0B 0F 84 18 FF 80 FC 62 0F 84 11  // ....|.......b...
    D010: FF E8 01 00 C3 80 FC 11 75 06 80 E3 80 80 CB 0F  // ........u.......
    D020: 50 53 8A DF 32 FF D1 E3 8B 97 50 04 5B 2E 8E 06  // PS..2.....P.[...
    D030: 08 61 E8 07 F9 8B F8 8B 2E 85 04 58 32 F6 52 8B  // .a.........X2.R.
    D040: 36 4A 04 56 8A 26 85 04 C5 36 0C 01 80 FC 0E 75  // 6J.V.&...6.....u
    D050: 09 83 7C FE 10 75 03 B4 10 46 F6 E4 03 F0 B6 03  // ..|..u...F......
    D060: F6 C3 80 75 6D B2 C4 B8 02 0F EF 5A 58 50 52 4A  // ...um......ZXPRJ
    D070: 8A E0 57 51 51 57 8B CD 32 C0 AA 03 FA E2 FB 5F  // ..WQQW..2......_
    D080: 47 FE C4 38 D4 76 0A 32 E4 8B CD 49 03 FA 47 E2  // G..8.v.2...I..G.
    D090: FB 59 E2 E0 59 5F BA C4 03 B0 02 8A E3 EF 5B 4B  // .Y..Y_........[K
    D0A0: 5A 51 57 8B CD AC 26 8A 25 AA 03 FB E2 F7 5F 47  // ZQW...&.%....._G
    D0B0: 2B F5 42 3B D3 76 0A 33 D2 8B CD 49 03 FB 47 E2  // +.B;.v.3...I..G.
    D0C0: FB 59 E2 DD BA CE 03 B8 03 00 EF B2 C4 B8 02 0F  // .Y..............
    D0D0: EF C3 B2 CE B8 03 18 EF EB BC 2E 8E 1E 06 61 80  // ..............a.
    D0E0: 3E 63 04 B4 74 0B BA CC 03 EC A8 01 75 04 CD 42  // >c..t.......u..B
    D0F0: C3 C3 E8 D1 F8 0A FF 75 1C 8A E3 80 E4 1F 80 26  // .......u.......&
    D100: 66 04 E0 08 26 66 04 E8 2D 00 8A 1E 66 04 80 E3  // f...&f..-...f...
    D110: 20 B1 05 D2 EB E8 91 F5 74 19 A0 66 04 24 DF 80  //  .......t..f.$..
    D120: E3 01 74 02 0C 20 A2 66 04 24 10 0C 02 0A D8 E8  // ..t.. .f.$......
    D130: 53 00 C3 E8 7E F8 C3 53 50 80 E3 0F 8A FB D0 E3  // S...~..SP.......
    D140: 81 E3 10 07 0A DF E8 60 F5 74 0E B4 00 8A C3 E8  // .......`.t......
    D150: 2C F3 0B ED 74 03 26 88 1D 8A C3 E8 0B 00 0B ED  // ,...t.&.........
    D160: 74 04 26 88 5D 10 58 5B C3 8A E0 1E 2E 8E 1E 06  // t.&.].X[........
    D170: 61 80 3E 49 04 33 1F 7F 08 8A C4 B4 11 E8 FE F2  // a.>I.3..........
    D180: C3 E8 30 F8 C3 9C FA E8 9F 05 B2 C0 B9 03 00 B4  // ..0.............
    D190: 01 8A C4 EE 8A C3 EE 0B ED 74 04 47 26 88 1D FE  // .........t.G&...
    D1A0: C4 80 C3 02 E2 EB B0 20 EE 9D C3 2E 8E 1E 06 61  // ....... .......a
    D1B0: 8A 26 49 04 E8 F2 F4 74 0A 80 FC 07 77 06 74 03  // .&I....t....w.t.
    D1C0: E8 C0 F5 C3 80 FC 13 7C 03 74 4C C3 8A D8 E8 BB  // .......|.tL.....
    D1D0: F7 BA CE 03 B0 08 EF 2E 8E 1E 08 61 F6 C3 80 75  // ...........a...u
    D1E0: 1C B2 C4 B8 02 FF EF 8A 25 C6 05 00 8A E3 EF 8A  // ........%.......
    D1F0: 25 B4 FF 88 25 EF B2 CE B8 08 FF EF C3 B8 03 18  // %...%...........
    D200: EF B2 C4 B0 02 8A E3 EF 8A 25 B4 FF 88 25 EF B2  // .........%...%..
    D210: CE B8 03 00 EF EB E1 50 2E 8E 06 08 61 A1 4A 04  // .......P....a.J.
    D220: C1 E0 03 F7 E2 03 C1 8B F8 58 26 88 05 C3 2E 8E  // .........X&.....
    D230: 1E 06 61 8A 26 49 04 E8 6F F4 74 0F 80 FC 07 77  // ..a.&I..o.t....w
    D240: 0B 74 08 E8 5F F5 8B EC 89 46 1A C3 80 FC 13 7C  // .t.._....F.....|
    D250: 03 74 29 C3 E8 35 F7 8A CC 2E 8E 1E 08 61 BA CE  // .t)..5.......a..
    D260: 03 32 FF B8 04 03 EF D0 E7 8A 1D 22 D9 74 03 80  // .2.........".t..
    D270: CF 01 FE CC 7D F0 8B EC 88 7E 1A C3 A1 4A 04 C1  // ....}....~...J..
    D280: E0 03 F7 E2 03 C1 8B F8 2E 8E 1E 08 61 8A 05 8B  // ............a...
    D290: EC 88 46 1A C3 2E 8E 1E 06 61 8A 3E 62 04 8A CF  // ..F......a.>b...
    D2A0: D0 E1 32 ED BE 50 04 03 F1 8B 14 8A 0E 49 04 3C  // ..2..P.......I.<
    D2B0: 0D 76 4A 2E 8E 06 0C 61 E8 EE F3 75 33 8A 1E 4A  // .vJ....a...u3..J
    D2C0: 04 8A F8 8A C6 F6 E3 8A CA 03 C8 D1 E1 03 0E 4E  // ...............N
    D2D0: 04 8B F9 8A C7 AA D1 E9 41 FE C2 38 DA 73 59 89  // ........A..8.sY.
    D2E0: 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF C3  // ...c............
    D2F0: 2E 8E 06 0A 61 80 F9 07 74 C3 E9 83 00 75 04 32  // ....a...t....u.2
    D300: D2 EB 0F 3C 0A 75 1D 3A 36 84 04 75 03 E9 93 00  // ...<.u.:6..u....
    D310: FE C6 89 14 E8 92 F3 75 05 80 F9 07 7F 05 8B C2  // .......u........
    D320: E8 4C F6 C3 3C 07 75 04 E8 73 90 C3 3C 08 75 83  // .L..<.u..s..<.u.
    D330: 0A D2 74 DE FE CA EB DA 32 FF 32 D2 2B CB 3A 36  // ..t.....2.2.+.:6
    D340: 84 04 74 06 FE C6 03 CB EB 95 89 14 8B 16 63 04  // ..t...........c.
    D350: B0 0E 8A E5 EF 8A E1 FE C0 EF 2B FB 2B FB 26 8A  // ..........+.+.&.
    D360: 65 02 50 8B 3E 4E 04 8B F3 D1 E6 03 F7 A0 84 04  // e.P.>N..........
    D370: F6 E3 8B C8 06 1F F3 A5 8B CB 58 B0 20 F3 AB C3  // ..........X. ...
    D380: B9 01 00 B4 0A E8 BC C6 FE C2 3A 16 4A 04 74 03  // ..........:.J.t.
    D390: 89 14 C3 32 FF 32 D2 89 14 3A 36 84 04 74 2E FE  // ...2.2...:6..t..
    D3A0: C6 EB ED 89 14 2E 8E 06 0C 61 E8 FC F2 74 0E 2E  // .........a...t..
    D3B0: 8E 06 0A 61 80 F9 07 74 04 32 FF EB 10 8B C2 E8  // ...a...t.2......
    D3C0: AD F5 8B F9 D1 E7 4F 8B 1E 4A 04 EB 91 33 C9 8A  // ......O..J...3..
    D3D0: 36 84 04 8A 16 4A 04 FE CA B0 01 E9 70 F7 2E 8E  // 6....J......p...
    D3E0: 1E 06 61 F6 06 87 04 08 74 03 CD 42 C3 E8 76 F6  // ..a.....t..B..v.
    D3F0: 8B EC C6 46 1B 00 C3 2E 8E 1E 06 61 8A DF 32 FF  // ...F.......a..2.
    D400: D1 E3 89 97 50 04 D0 EB 38 1E 62 04 75 05 8B C2  // ....P...8.b.u...
    D410: E8 5C F5 C3 2E 8E 1E 06 61 8A DF 32 FF D1 E3 8B  // .\......a..2....
    D420: 97 50 04 8B 0E 60 04 8B EC 89 4E 16 89 56 12 C3  // .P...`....N..V..
    D430: 2E 8E 1E 06 61 A0 87 04 24 80 0A 06 49 04 8A 26  // ....a...$...I..&
    D440: 4A 04 F6 06 87 04 08 75 2D E8 5D F2 74 07 80 3E  // J......u-.].t..>
    D450: 49 04 07 7F 21 51 8A CC 8A 2E 84 04 BE 21 D4 81  // I...!Q.......!..
    D460: FE 2A D4 74 10 2E 3B 0C 74 05 83 C6 03 EB F0 24  // .*.t..;.t......$
    D470: 80 2E 0A 44 02 59 8A 3E 62 04 8B EC 89 46 1A 89  // ...D.Y.>b....F..
    D480: 5E 0E 89 4E 16 89 56 12 C3 84 18 23 84 2B 33 84  // ^..N..V....#.+3.
    D490: 2A 32 2E 8E 1E 06 61 3C 04 7F 1B 50 52 BA CC 03  // *2....a<...PR...
    D4A0: EC A8 01 5A 58 74 08 80 3E 63 04 D4 74 08 C3 80  // ...ZXt..>c..t...
    D4B0: 3E 63 04 B4 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5  // >c..u.<.s.2.....
    D4C0: 2E FF A6 5D D4 95 D4 B5 D4 C7 D4 FC D4 46 D4 46  // ...].........F.F
    D4D0: D4 46 D4 21 D5 39 D5 3D D5 46 D4 46 D4 46 D4 46  // .F.!.9.=.F.F.F.F
    D4E0: D4 46 D4 46 D4 6B D5 46 D4 6F D5 8A D5 46 D4 C9  // .F.F.k.F.o...F..
    D4F0: D5 46 D4 D7 D5 F2 D5 F9 D5 05 D6 29 D6 80 3E 49  // .F.........)..>I
    D500: 04 13 74 15 E8 BF F4 8B C3 86 E0 E8 70 EF 0B ED  // ..t.........p...
    D510: 74 07 8A C7 32 FF 26 88 01 E8 93 F4 C3 E8 A6 F4  // t...2.&.........
    D520: 8A C7 E8 44 FC 0B ED 74 F0 26 88 7D 11 EB EA 80  // ...D...t.&.}....
    D530: 3E 49 04 13 74 E3 06 E8 8C F4 1F 0B ED 74 07 8B  // >I..t........t..
    D540: F2 B9 11 00 F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00  // ...........2....
    D550: B2 C0 9C FA 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8  // ................
    D560: 07 FC EB B5 80 FB 01 77 B0 E8 43 F4 B2 C0 B0 30  // .......w..C....0
    D570: E8 FB F0 24 F7 80 26 65 04 DF 80 FB 00 74 07 0C  // ...$..&e.....t..
    D580: 08 80 0E 65 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0  // ...e. ..........
    D590: E8 DB F0 8B C8 EE B0 20 EE 8B EC 88 4E 0F E9 78  // ....... ....N..x
    D5A0: FF B3 11 EB E4 8B FA E8 05 F4 B9 10 00 32 E4 B2  // .............2..
    D5B0: C0 8A C4 9C FA EE 42 EC 26 88 05 FE C4 4A EE 9D  // ......B.&....J..
    D5C0: 47 E2 EE 9C FA B0 11 EE 42 EC 9D 26 88 05 E8 E3  // G.......B..&....
    D5D0: F3 EB 5A E8 CE 00 C3 8B FA 51 8B C3 26 8A 35 26  // ..Z......Q..&.5&
    D5E0: 8A 6D 01 26 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2  // .m.&.M.......CY.
    D5F0: E8 C3 0A DB 75 1A E8 B6 F3 B2 C0 B0 30 E8 6E F0  // ....u.......0.n.
    D600: 24 7F F6 C7 01 74 02 0C 80 B4 30 E8 70 EE EB 1D  // $....t....0.p...
    D610: FE CB 75 1C E8 98 F3 B2 C0 B0 30 E8 50 F0 EE A8  // ..u.......0.P...
    D620: 80 75 03 C0 E7 02 B4 34 8A C7 E8 51 EE E8 7F F3  // .u.....4...Q....
    D630: C3 8A C3 E8 D1 00 8B EC 89 4E 16 88 76 13 C3 8B  // .........N..v...
    D640: FA 51 8B C3 E8 C3 00 26 88 35 26 88 6D 01 26 88  // .Q.....&.5&.m.&.
    D650: 4D 02 83 C7 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE  // M....CY.........
    D660: C3 BA C6 03 EC 32 E4 8B EC 89 46 0E C3 E8 3F F3  // .....2....F...?.
    D670: B2 C0 B0 34 E8 F7 EF 8A F8 EE B0 30 E8 EF EF B3  // ...4.......0....
    D680: 01 A8 80 75 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB  // ...u.........^..
    D690: 9C 51 8B C3 E8 73 00 E8 2A 00 8A C3 E8 52 00 43  // .Q...s..*....R.C
    D6A0: 59 E2 EE C3 F6 06 89 04 02 74 03 E8 16 00 8A C3  // Y........t......
    D6B0: E8 39 00 C3 F6 06 89 04 02 74 03 E8 06 00 8A C3  // .9.......t......
    D6C0: E8 2E 00 C3 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0  // ....P....P.;..P.
    D6D0: 0B F6 E1 59 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32  // ...Y..Y...d....2
    D6E0: 7C 02 FE C0 8A F0 8A E8 8A C8 58 C3 52 E8 39 00  // |.........X.R.9.
    D6F0: 5A 53 8B DA BA C8 03 9C FA EE 42 8A C7 EE 8A C5  // ZS........B.....
    D700: EE 8A C1 EE 9D 5B C3 E8 1F 00 53 9C FA BA C7 03  // .....[....S.....
    D710: EE 42 42 EC 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB  // .BB.............
    D720: 00 EC 8A C8 8A F7 9D 5B C3 50 51 E8 81 F2 B9 FF  // .......[.PQ.....
    D730: 7F EC A8 08 75 02 E2 F9 59 58 C3 2E 8E 1E 06 61  // ....u...YX.....a
    D740: 8B F8 24 0F 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18  // ..$.............
    D750: 2E FF A5 ED D6 F5 D6 0A D7 A8 D7 04 D8 3C 03 74  // .............<.t
    D760: 08 3C 04 7F 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3  // .<..............
    D770: EF C3 3C 04 77 F2 50 53 50 52 8B 16 63 04 B0 07  // ..<.w.PSPR..c...
    D780: E8 EB EE 8A E0 D0 EC 80 E4 01 A8 40 74 03 80 CC  // ...........@t...
    D790: 02 B0 12 E8 D8 EE 40 A3 85 04 B0 09 E8 CF EE A8  // ......@.........
    D7A0: 80 74 04 D1 2E 85 04 A1 85 04 8B D0 3D F4 01 73  // .t..........=..s
    D7B0: 1B BA E0 01 3D C2 01 73 13 BA 90 01 3D 7C 01 73  // ....=..s....=|.s
    D7C0: 0B BA 5E 01 3D 4A 01 73 03 BA C8 00 89 16 85 04  // ..^.=J.s........
    D7D0: 5A 58 C6 06 84 04 FF E8 5D 01 5B 58 8A DF 32 FF  // ZX......].[X..2.
    D7E0: 0A C0 74 0E B3 0E 3C 01 74 08 B3 08 3C 02 74 02  // ..t...<.t...<.t.
    D7F0: B3 10 8A CB 8A E9 81 E9 01 02 80 F9 08 7E 04 81  // .............~..
    D800: E9 01 01 87 1E 85 04 53 E8 5B F2 5B E8 85 02 C3  // .......S.[.[....
    D810: 0A C0 74 11 FE C8 74 1A FE C8 74 38 FE C8 74 3C  // ..t...t...t8..t<
    D820: FE C8 74 40 C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8  // ..t@...|...~....
    D830: 8E C0 FE CA 0A DB 74 07 32 FF 2E 8A 97 E8 D7 89  // ......t.2.......
    D840: 0E 85 04 88 16 84 04 89 2E 0C 01 8C 06 0E 01 C3  // ................
    D850: 00 0D 18 2A E8 09 03 B9 0E 00 EB D6 BD F8 A6 B9  // ...*............
    D860: 08 00 EB CA BD 0B AF B9 10 00 EB C2 0A C0 75 BD  // ..............u.
    D870: 8B 0E 85 04 8A 16 84 04 80 FF 07 77 35 80 FF 01  // ...........w5...
    D880: 77 10 0A FF 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01  // w...u...|..&....
    D890: EB 20 80 FF 02 75 0B 8C CD 8E C5 2E 8B 2E EA BF  // . ...u..........
    D8A0: EB 10 0E 07 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF  // ......2.........
    D8B0: 5B D8 8B C5 8B EC 89 4E 16 89 56 12 89 46 0A 8C  // [......N..V..F..
    D8C0: 46 1E C3 0B AF F8 A6 F8 AA F8 AE 0B AF 0B BF 53  // F..............S
    D8D0: 06 8A 26 49 04 E8 C7 C3 26 8A 47 02 26 8A 67 33  // ..&I....&.G.&.g3
    D8E0: F6 C4 01 74 22 BD 0B AF 3C 10 7D 0E E8 71 02 8C  // ...t"...<.}..q..
    D8F0: 06 0E 01 3C 0E 7D 07 BD F8 A6 8C 0E 0E 01 89 2E  // ...<.}..........
    D900: 0C 01 E8 10 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C  // ......-..<.}...<
    D910: 0E 74 0D 7F 15 B4 02 3C 08 74 05 80 CC 80 EB 0A  // .t.....<.t......
    D920: 26 F6 47 05 01 74 03 80 E4 7F 86 C4 32 DB E8 06  // &.G..t......2...
    D930: 00 E8 C9 01 07 5B C3 8B F8 8B F2 BA CE 03 EC B8  // .....[..........
    D940: 05 00 EF B8 06 04 EF B2 C4 EC B8 02 04 EF B8 04  // ................
    D950: 07 EF 8B D6 8B C7 50 24 7F 0A C0 74 22 0E 07 33  // ......P$...t"..3
    D960: D2 B9 00 01 3C 04 75 07 B7 10 BD 0B AF EB 10 FE  // ....<.u.........
    D970: C8 75 07 B7 0E E8 E8 01 EB 05 B7 08 BD F8 A6 E8  // .u..............
    D980: 2D 00 58 A8 80 74 00 BA C4 03 B8 02 03 EF B8 04  // -.X..t..........
    D990: 02 EF B2 CC EC A8 01 B8 06 0E 75 02 B4 0A B2 CE  // ..........u.....
    D9A0: 50 EC 58 EF B0 04 EE 32 C0 EE B8 05 10 EF C3 FC  // P.X....2........
    D9B0: 0B C9 75 01 C3 80 FF 0E 75 0A 26 83 7E FE 10 75  // ..u.....u.&.~..u
    D9C0: 03 80 CD 80 1E 06 1F 2E 8E 06 08 61 8B FA C1 E7  // ...........a....
    D9D0: 05 B0 40 53 80 E3 03 F6 E3 5B F6 C3 04 74 02 04  // ..@S.....[...t..
    D9E0: 20 86 E0 8B D0 03 FA 8B F5 E3 28 32 C0 86 FB 32  //  .........(2...2
    D9F0: FF 51 F6 C5 80 74 01 46 8B CB F3 A4 83 FB 20 74  // .Q...t.F...... t
    DA00: 07 B9 20 00 2B CB F3 AA 59 F6 C5 80 74 01 46 FE  // .. .+...Y...t.F.
    DA10: C9 75 DE 1F C3 8A 26 49 04 50 06 57 C4 3E A8 04  // .u....&I.P.W.>..
    DA20: 26 C4 7D 0C 8C C5 0B EF 74 30 8B EF 83 C7 07 26  // &.}.....t0.....&
    DA30: 8A 05 3C FF 74 24 38 E0 74 03 47 EB F2 8B FD 26  // ..<.t$8.t.G....&
    DA40: 8A 05 FE C8 A2 84 04 26 8B 45 01 A3 85 04 26 C4  // .......&.E....&.
    DA50: 7D 03 89 3E 0C 01 8C 06 0E 01 5F 07 58 C3 26 F6  // }..>......_.X.&.
    DA60: 47 33 01 74 01 C3 C4 1E A8 04 26 C4 5F 08 8C C0  // G3.t......&._...
    DA70: 0B C3 74 1F BF 0B 00 26 8A 01 3C FF 74 15 47 38  // ..t....&..<.t.G8
    DA80: 06 49 04 75 F2 26 8A 07 32 E4 87 06 85 04 8B D8  // .I.u.&..2.......
    DA90: E8 01 00 C3 8B 16 63 04 8A 26 85 04 FE CC 80 E4  // ......c..&......
    DAA0: 1F 9C FA 80 FA D4 74 0B B0 14 EE 42 EC 24 E0 0A  // ......t....B.$..
    DAB0: C4 EE 4A B0 09 EE 42 EC 24 E0 0A C4 EE 9D 8A C8  // ..J...B.$.......
    DAC0: 8B C3 8A 16 85 04 F6 F2 80 3E 84 04 FF 75 07 A2  // .........>...u..
    DAD0: 84 04 FE 0E 84 04 F6 E2 F6 C1 80 74 02 D1 E0 48  // ...........t...H
    DAE0: 8A E0 B0 12 8B 16 63 04 EF A0 4A 04 8A 26 84 04  // ......c...J..&..
    DAF0: FE C4 F6 E4 D1 E0 05 00 01 A3 4C 04 C3 8A 26 49  // ..........L...&I
    DB00: 04 50 06 57 C4 3E A8 04 26 C4 7D 08 8C C5 0B EF  // .P.W.>..&.}.....
    DB10: 74 4A 8B EF 83 C7 0B 26 8A 05 3C FF 74 3E 38 E0  // tJ.....&..<.t>8.
    DB20: 74 03 47 EB F2 8B FD 26 8A 3D 26 8A 5D 01 26 8B  // t.G....&.=&.].&.
    DB30: 4D 02 26 8B 55 04 26 8A 45 0A 3C FF 74 02 FE C8  // M.&.U.&.E.<.t...
    DB40: 50 A0 84 04 FE C0 F6 26 85 04 A3 85 04 58 A2 84  // P......&.....X..
    DB50: 04 26 C4 7D 06 8B EF 32 C0 E8 DB FD 5F 07 58 C3  // .&.}...2...._.X.
    DB60: 50 53 51 52 2E A1 10 61 0B C0 74 09 2E 8B 2E EA  // PSQR...a..t.....
    DB70: BF 0E 07 EB 08 B8 30 11 B7 02 E8 C7 BE 5A 59 5B  // ......0......ZY[
    DB80: 58 C3 3C 04 7C 01 C3 E3 FD 53 2E 8E 1E 06 61 86  // X.<.|....S....a.
    DB90: FB 32 FF D1 E3 8B FB 81 C7 50 04 8B 35 5B 89 15  // .2.......P..5[..
    DBA0: 56 8B F0 51 53 26 8A 46 00 45 3C 0D 7F 1F 75 04  // V..QS&.F.E<...u.
    DBB0: 32 D2 EB 40 3C 0A 74 32 3C 07 75 05 E8 DF 87 EB  // 2..@<.t2<.u.....
    DBC0: 62 3C 08 75 08 0A D2 74 5A FE CA EB 27 F7 C6 02  // b<.u...tZ...'...
    DBD0: 00 74 05 26 8A 5E 00 45 B9 01 00 B4 09 E8 64 BE  // .t.&.^.E......d.
    DBE0: FE C2 3A 16 4A 04 72 0C 32 D2 89 15 3A 36 84 04  // ..:.J.r.2...:6..
    DBF0: 73 06 FE C6 89 15 EB 2B 50 E8 AD EA 75 08 B8 00  // s......+P...u...
    DC00: 08 E8 40 BE EB 09 80 3E 49 04 07 74 F1 32 E4 86  // ..@....>I..t.2..
    DC10: 3E 62 04 53 8A FC 55 E8 25 00 5D 5B 86 3E 62 04  // >b.S..U.%.][.>b.
    DC20: 58 8B 15 5B 59 E2 15 5A F7 C6 01 00 75 02 89 15  // X..[Y..Z....u...
    DC30: 8B 05 3A 3E 62 04 75 03 E8 34 ED C3 E9 64 FF 33  // ..:>b.u..4...d.3
    DC40: C9 8A 36 84 04 8A 16 4A 04 FE CA B8 01 06 E8 F3  // ..6....J........
    DC50: BD C3 2E 8E 1E 06 61 0A C0 75 0D E8 18 00 8B EC  // ......a..u......
    DC60: 89 5E 0E C6 46 1A 1A C3 3C 01 75 09 E8 41 00 8B  // .^..F...<.u..A..
    DC70: EC C6 46 1A 1A C3 A0 8A 04 BF E8 DC 2E 3A 05 72  // ..F..........:.r
    DC80: 04 BB FF FF C3 32 E4 D1 E0 03 F8 2E 8B 5D 04 0A  // .....2.......]..
    DC90: DB 74 05 0A FF 75 04 C3 86 FB C3 A0 10 04 24 30  // .t...u........$0
    DCA0: 3C 30 74 06 F6 C3 01 75 EF C3 F6 C3 01 74 E9 C3  // <0t....u.....t..
    DCB0: BF E8 DC 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D 74 12  // ......2.....;.t.
    DCC0: 86 FB 2E 3B 1D 74 0B 83 C7 02 FE C0 38 C8 7E EB  // ...;.t......8.~.
    DCD0: B0 FF A2 8A 04 C3 BB 08 00 F6 06 89 04 02 74 0E  // ..............t.
    DCE0: BB 07 00 BA CC 03 EC A8 01 74 18 BB 08 00 BA B4  // .........t......
    DCF0: 03 E8 DF EC 74 21 B7 01 E8 8C E9 80 FA D4 74 17  // ....t!........t.
    DD00: 86 FB C3 BA D4 03 E8 CA EC 74 0C B7 02 E8 77 E9  // .........t....w.
    DD10: 80 FA B4 74 02 86 FB C3 0F 08 0F 08 0F 08 0F 08  // ...t............
    DD20: 03 01 03 01 01 01 00 08 01 01 01 01 01 01 01 01  // ................
    DD30: 0F 01 0F 08 0F 04 00 02 0F 02 01 01 0F 01 FF 01  // ................
    DD40: FF E0 0F 00 00 00 00 07 02 08 FF 0E 00 00 3F 00  // ..............?.
    DD50: 10 01 08 00 00 00 00 01 00 02 02 01 00 04 04 01  // ................
    DD60: 00 05 02 05 00 06 01 06 05 06 00 08 01 08 00 07  // ................
    DD70: 02 07 06 07 CA 00 34 00 90 00 96 00 00 00 00 00  // ......4.........
    DD80: 00 00 5F 57 C3 90 50 66 52 E8 F4 FF FF FF 81 EF  // .._W..PfR.......
    DD90: 10 00 00 00 2E 8B 07 66 BA F8 0C EF 66 BA FC 0C  // .......f....f...
    DDA0: ED 32 C0 66 8B F8 66 5A 58 C3 66 B8 4F 03 66 52  // .2.f..fZX.f.O.fR
    DDB0: 66 56 53 57 50 0A FF 75 44 E8 C8 FF FF FF 66 33  // fVSWP..uD.....f3
    DDC0: F6 66 BB 53 00 E8 48 00 00 00 C1 E8 10 F6 C4 40  // .f.S..H........@
    DDD0: 75 2B 66 81 E2 FF 02 66 D1 E2 66 8B C2 66 40 C1  // u+f....f..f..f@.
    DDE0: E0 10 66 8B C2 66 BB 13 00 E8 30 00 00 00 66 BB  // ..f..f....0...f.
    DDF0: 12 00 E8 27 00 00 00 66 58 32 E4 66 50 58 5F 5B  // ...'...fX2.fPX_[
    DE00: 66 5E 66 5A C3 90 66 B8 4F 03 C3 90 66 B8 4F 03  // f^fZ..f.O...f.O.
    DE10: C3 90 66 52 E8 11 00 00 00 ED 66 5A C3 90 66 52  // ..fR......fZ..fR
    DE20: E8 05 00 00 00 EF 66 5A C3 90 66 8B D7 50 33 C0  // ......fZ..f..P3.
    DE30: 66 8B C3 66 03 C6 C1 E0 02 EF 66 83 C2 04 58 C3  // f..f......f...X.
    DE40: AF 85 A2 85 A2 85 A2 85 8D 85 8D 85 8D 85 8D 85  // ................
    DE50: CF 81 46 82 70 82 B1 83 B0 83 B0 83 F6 83 5B 84  // ..F.p.........[.
    DE60: 8B 84 48 85 71 85 71 85 E8 83 DB 83 DB 83 DB 83  // ..H.q.q.........
    DE70: DB 83 DB 83 F6 83 5B 84 8B 84 48 85 76 85 BC 85  // ......[...H.v...
    DE80: 71 85 71 85 FF FF FF FF FF FF 00 00 FF FF 00 00  // q.q.............
    DE90: FF FF 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00  // ................
    DEA0: FF 00 00 00 00 00 08 10 00 08 10 18 00 08 10 18  // ................
    DEB0: D3 7F 01 D3 7F 02 E1 93 03 C1 93 03 F8 80 03 AC  // ................
    DEC0: 80 03 D4 7F 04 ED 7F 04 FD 7F 04 D3 7F 03 00 00  // ................
    DED0: 00 00 80 87 00 02 80 87 01 02 80 87 02 02 80 87  // ................
    DEE0: 03 02 80 87 04 02 80 87 05 02 7A 89 00 02 7A 89  // ..........z...z.
    DEF0: 01 02 7A 89 02 02 7A 89 03 02 7A 89 04 02 7A 89  // ..z...z...z...z.
    DF00: 05 02 AF 89 00 02 AF 89 01 02 AF 89 02 02 AF 89  // ................
    DF10: 03 02 AF 89 04 02 AF 89 05 02 EA 8B 00 02 EA 8B  // ................
    DF20: 01 02 EA 8B 02 02 EA 8B 03 02 EA 8B 04 02 EA 8B  // ................
    DF30: 05 02 EA 8B 00 02 EA 8B 01 02 EA 8B 02 02 EA 8B  // ................
    DF40: 03 02 EA 8B 04 02 EA 8B 05 02 B1 8A 00 02 B1 8A  // ................
    DF50: 01 02 B1 8A 02 02 B1 8A 03 02 B1 8A 04 02 B1 8A  // ................
    DF60: 05 02 ED 8A 00 02 ED 8A 01 02 ED 8A 02 02 ED 8A  // ................
    DF70: 03 02 ED 8A 04 02 ED 8A 05 02 5E 8A 00 02 5E 8A  // ..........^...^.
    DF80: 01 02 5E 8A 02 02 5E 8A 03 02 5E 8A 04 02 5E 8A  // ..^...^...^...^.
    DF90: 05 02 92 8A 00 02 92 8A 01 02 92 8A 02 02 92 8A  // ................
    DFA0: 03 02 92 8A 04 02 92 8A 05 02 42 8E 00 00 75 8E  // ..........B...u.
    DFB0: 01 00 75 8E 02 00 62 8E 00 00 50 8D 00 02 49 8B  // ..u...b...P...I.
    DFC0: 00 02 49 8B 01 02 49 8B 02 02 49 8B 03 02 49 8B  // ..I...I...I...I.
    DFD0: 04 02 49 8B 05 02 68 8D 00 02 BD 8F 05 00 BD 8F  // ..I...h.........
    DFE0: 01 00 BD 8F 00 00 BD 8F 02 00 FE 8F 00 00 FE 8F  // ................
    DFF0: 02 00 43 90 00 00 D3 8C 00 02 D3 8C 01 02 D3 8C  // ..C.............
    E000: 02 02 D3 8C 03 02 D3 8C 04 02 D3 8C 05 02 8F 8E  // ................
    E010: 00 00 B7 8E 00 00 38 8F 00 00 B3 8F 00 00 97 8B  // ......8.........
    E020: 00 02 97 8B 01 02 97 8B 02 02 97 8B 03 02 97 8B  // ................
    E030: 04 02 97 8B 05 02 B2 8F 00 01 B2 8F 00 01 B6 88  // ................
    E040: 00 02 B6 88 01 02 B6 88 02 02 B6 88 03 02 B6 88  // ................
    E050: 04 02 B6 88 05 02 D7 8E 00 00 B3 8F 00 00 B3 8F  // ................
    E060: 00 00 B3 8F 00 00 E8 8D 00 00 DA 89 00 02 DA 89  // ................
    E070: 01 02 DA 89 02 02 DA 89 03 02 DA 89 04 02 DA 89  // ................
    E080: 05 02 09 8A 00 02 09 8A 01 02 09 8A 02 02 09 8A  // ................
    E090: 03 02 09 8A 04 02 09 8A 05 02 3F 8A 00 02 3F 8A  // ..........?...?.
    E0A0: 01 02 3F 8A 02 02 3F 8A 03 02 3F 8A 04 02 3F 8A  // ..?...?...?...?.
    E0B0: 05 02 FA 8E 00 00 1D 8F 00 00 DB 8A 01 02 DB 8A  // ................
    E0C0: 02 02 37 8B 01 02 37 8B 02 02 A6 00 02 01 00 00  // ..7...7.........
    E0D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E0E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E0F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E1A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E1B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E1C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E1D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E1E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E1F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E280: 00 00 00 00                                      // ....


WSMT
----
[000h 0000 004h]                   Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 65
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]            Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 65 41 4C 41 53 4B 41  // WSMT(....eALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 07 00 00 00                          // ........


