
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200925
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  MCFG  0x0000003C  0x01  "DELL  "  "B10K    "  0x00000015  "ASL "   0x00000061
 02)  ASF!  0x00000096  0x20  "DELL  "  "B10K    "  0x00000015  "ASL "   0x00000061
 03)  APIC  0x0000015E  0x01  "DELL  "  "B10K    "  0x00000015  "ASL "   0x00000061
 04)  SLIC  0x00000176  0x01  "DELL  "  "B10K    "  0x00000015  "ASL "   0x00000061
 05)  SSDT  0x0000086A  0x01  "INTEL "  "PPM RCM "  0x80000001  "INTL"   0x20061109
 06)  BOOT  0x00000028  0x01  "DELL  "  "B10K    "  0x00000015  "ASL "   0x00000061
 07)  DSDT  0x00004A74  0x01  "DELL  "  "dt_ex   "  0x00001000  "INTL"   0x20050624
 08)  DMAR  0x000000B8  0x01  "DELL  "  "B10K    "  0x00000015  "ASL "   0x00000061
 09)  FACP  0x000000F4  0x03  "DELL  "  "B10K    "  0x00000015  "ASL "   0x00000061
 10)  SSDT  0x0000009C  0x01  "DELL  "  "st_ex   "  0x00001000  "INTL"   0x20050624
 11)  TCPA  0x00000032  0x01  "DELL  "  "B10K    "  0x00000015  "ASL "   0x00000061
 12)  HPET  0x00000038  0x01  "DELL  "  "B10K    "  0x00000015  "ASL "   0x00000061
 13)  FACS  0x00000040  0x00

Found 13 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000015E
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 40
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "B10K   "
[018h 0024   4]                 Oem Revision : 00000015
[01Ch 0028   4]              Asl Compiler ID : "ASL "
[020h 0032   4]        Asl Compiler Revision : 00000061

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 04
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 05
[040h 0064   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 07
[048h 0072   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 05
[04Fh 0079   1]                Local Apic ID : 00
[050h 0080   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 06
[057h 0087   1]                Local Apic ID : 01
[058h 0088   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 07
[05Fh 0095   1]                Local Apic ID : 02
[060h 0096   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 08
[067h 0103   1]                Local Apic ID : 03
[068h 0104   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 09
[06Fh 0111   1]                Local Apic ID : 00
[070h 0112   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 0A
[077h 0119   1]                Local Apic ID : 00
[078h 0120   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0B
[07Fh 0127   1]                Local Apic ID : 00
[080h 0128   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0C
[087h 0135   1]                Local Apic ID : 00
[088h 0136   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0D
[08Fh 0143   1]                Local Apic ID : 00
[090h 0144   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0E
[097h 0151   1]                Local Apic ID : 00
[098h 0152   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0F
[09Fh 0159   1]                Local Apic ID : 00
[0A0h 0160   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 10
[0A7h 0167   1]                Local Apic ID : 00
[0A8h 0168   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 11
[0AFh 0175   1]                Local Apic ID : 00
[0B0h 0176   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 12
[0B7h 0183   1]                Local Apic ID : 00
[0B8h 0184   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 13
[0BFh 0191   1]                Local Apic ID : 00
[0C0h 0192   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 14
[0C7h 0199   1]                Local Apic ID : 00
[0C8h 0200   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 15
[0CFh 0207   1]                Local Apic ID : 00
[0D0h 0208   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 16
[0D7h 0215   1]                Local Apic ID : 00
[0D8h 0216   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 17
[0DFh 0223   1]                Local Apic ID : 00
[0E0h 0224   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 18
[0E7h 0231   1]                Local Apic ID : 00
[0E8h 0232   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 19
[0EFh 0239   1]                Local Apic ID : 00
[0F0h 0240   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 1A
[0F7h 0247   1]                Local Apic ID : 00
[0F8h 0248   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 1B
[0FFh 0255   1]                Local Apic ID : 00
[100h 0256   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 1C
[107h 0263   1]                Local Apic ID : 00
[108h 0264   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 1D
[10Fh 0271   1]                Local Apic ID : 00
[110h 0272   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1E
[117h 0279   1]                Local Apic ID : 00
[118h 0280   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1F
[11Fh 0287   1]                Local Apic ID : 00
[120h 0288   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 20
[127h 0295   1]                Local Apic ID : 00
[128h 0296   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 01 [I/O APIC]
[12Dh 0301   1]                       Length : 0C
[12Eh 0302   1]                  I/O Apic ID : 08
[12Fh 0303   1]                     Reserved : 00
[130h 0304   4]                      Address : FEC00000
[134h 0308   4]                    Interrupt : 00000000

[138h 0312   1]                Subtable Type : 01 [I/O APIC]
[139h 0313   1]                       Length : 0C
[13Ah 0314   1]                  I/O Apic ID : 09
[13Bh 0315   1]                     Reserved : 00
[13Ch 0316   4]                      Address : FEC80000
[140h 0320   4]                    Interrupt : 00000018

[144h 0324   1]                Subtable Type : 02 [Interrupt Source Override]
[145h 0325   1]                       Length : 0A
[146h 0326   1]                          Bus : 00
[147h 0327   1]                       Source : 00
[148h 0328   4]                    Interrupt : 00000002
[14Ch 0332   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[14Eh 0334   1]                Subtable Type : 02 [Interrupt Source Override]
[14Fh 0335   1]                       Length : 0A
[150h 0336   1]                          Bus : 00
[151h 0337   1]                       Source : 09
[152h 0338   4]                    Interrupt : 00000009
[156h 0342   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[158h 0344   1]                Subtable Type : 04 [Local APIC NMI]
[159h 0345   1]                       Length : 06
[15Ah 0346   1]                 Processor ID : FF
[15Bh 0347   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3
[15Dh 0349   1]         Interrupt Input LINT : 01

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 01 40 44 45 4C 4C 20 20  // APIC^....@DELL  
    0010: 42 31 30 4B 20 20 20 00 15 00 00 00 41 53 4C 20  // B10K   .....ASL 
    0020: 61 00 00 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // a...............
    0030: 01 00 00 00 00 08 02 04 01 00 00 00 00 08 03 05  // ................
    0040: 00 00 00 00 00 08 04 07 00 00 00 00 00 08 05 00  // ................
    0050: 00 00 00 00 00 08 06 01 00 00 00 00 00 08 07 02  // ................
    0060: 00 00 00 00 00 08 08 03 00 00 00 00 00 08 09 00  // ................
    0070: 00 00 00 00 00 08 0A 00 00 00 00 00 00 08 0B 00  // ................
    0080: 00 00 00 00 00 08 0C 00 00 00 00 00 00 08 0D 00  // ................
    0090: 00 00 00 00 00 08 0E 00 00 00 00 00 00 08 0F 00  // ................
    00A0: 00 00 00 00 00 08 10 00 00 00 00 00 00 08 11 00  // ................
    00B0: 00 00 00 00 00 08 12 00 00 00 00 00 00 08 13 00  // ................
    00C0: 00 00 00 00 00 08 14 00 00 00 00 00 00 08 15 00  // ................
    00D0: 00 00 00 00 00 08 16 00 00 00 00 00 00 08 17 00  // ................
    00E0: 00 00 00 00 00 08 18 00 00 00 00 00 00 08 19 00  // ................
    00F0: 00 00 00 00 00 08 1A 00 00 00 00 00 00 08 1B 00  // ................
    0100: 00 00 00 00 00 08 1C 00 00 00 00 00 00 08 1D 00  // ................
    0110: 00 00 00 00 00 08 1E 00 00 00 00 00 00 08 1F 00  // ................
    0120: 00 00 00 00 00 08 20 00 00 00 00 00 01 0C 08 00  // ...... .........
    0130: 00 00 C0 FE 00 00 00 00 01 0C 09 00 00 00 C8 FE  // ................
    0140: 18 00 00 00 02 0A 00 00 02 00 00 00 00 00 02 0A  // ................
    0150: 00 09 09 00 00 00 0D 00 04 06 FF 0D 00 01        // ..............


ASF!
----
[000h 0000   4]                    Signature : "ASF!"    [Alert Standard Format table]
[004h 0004   4]                 Table Length : 00000096
[008h 0008   1]                     Revision : 20
[009h 0009   1]                     Checksum : 5F
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "B10K   "
[018h 0024   4]                 Oem Revision : 00000015
[01Ch 0028   4]              Asl Compiler ID : "ASL "
[020h 0032   4]        Asl Compiler Revision : 00000061

[024h 0036   1]                Subtable Type : 04 [ASF Address]
[025h 0037   1]                     Reserved : 00
[026h 0038   2]                       Length : 0007
[028h 0040   1]                Eprom Address : 00
[029h 0041   1]                 Device Count : 01
[02Ah 0042   1]                    Addresses : 88 

[02Bh 0043   1]                Subtable Type : 01 [ASF Alerts]
[02Ch 0044   1]                     Reserved : 00
[02Dh 0045   2]                       Length : 002C
[02Fh 0047   1]                   AssertMask : 00
[030h 0048   1]                 DeassertMask : 00
[031h 0049   1]                  Alert Count : 03
[032h 0050   1]            Alert Data Length : 0C

[033h 0051   1]                      Address : 89
[034h 0052   1]                      Command : 04
[035h 0053   1]                         Mask : 01
[036h 0054   1]                        Value : 01
[037h 0055   1]                   SensorType : 05
[038h 0056   1]                         Type : 6F
[039h 0057   1]                       Offset : 00
[03Ah 0058   1]                   SourceType : 68
[03Bh 0059   1]                     Severity : 08
[03Ch 0060   1]                 SensorNumber : 88
[03Dh 0061   1]                       Entity : 17
[03Eh 0062   1]                     Instance : 00

[03Fh 0063   1]                      Address : 89
[040h 0064   1]                      Command : 04
[041h 0065   1]                         Mask : 04
[042h 0066   1]                        Value : 04
[043h 0067   1]                   SensorType : 07
[044h 0068   1]                         Type : 6F
[045h 0069   1]                       Offset : 00
[046h 0070   1]                   SourceType : 68
[047h 0071   1]                     Severity : 20
[048h 0072   1]                 SensorNumber : 88
[049h 0073   1]                       Entity : 03
[04Ah 0074   1]                     Instance : 00

[04Bh 0075   1]                      Address : 89
[04Ch 0076   1]                      Command : 05
[04Dh 0077   1]                         Mask : 01
[04Eh 0078   1]                        Value : 01
[04Fh 0079   1]                   SensorType : 19
[050h 0080   1]                         Type : 6F
[051h 0081   1]                       Offset : 00
[052h 0082   1]                   SourceType : 68
[053h 0083   1]                     Severity : 20
[054h 0084   1]                 SensorNumber : 88
[055h 0085   1]                       Entity : 22
[056h 0086   1]                     Instance : 00

[057h 0087   1]                Subtable Type : 02 [ASF Remote Control]
[058h 0088   1]                     Reserved : 00
[059h 0089   2]                       Length : 0018
[05Bh 0091   1]                Control Count : 04
[05Ch 0092   1]          Control Data Length : 04
[05Dh 0093   2]                     Reserved : 0000

[05Fh 0095   1]                     Function : 02
[060h 0096   1]                      Address : 88
[061h 0097   1]                      Command : 00
[062h 0098   1]                        Value : 01

[063h 0099   1]                     Function : 01
[064h 0100   1]                      Address : 88
[065h 0101   1]                      Command : 00
[066h 0102   1]                        Value : 02

[067h 0103   1]                     Function : 00
[068h 0104   1]                      Address : 88
[069h 0105   1]                      Command : 00
[06Ah 0106   1]                        Value : 03

[06Bh 0107   1]                     Function : 03
[06Ch 0108   1]                      Address : 88
[06Dh 0109   1]                      Command : 00
[06Eh 0110   1]                        Value : 04

[06Fh 0111   1]                Subtable Type : 03 [ASF RMCP Boot Options]
[070h 0112   1]                     Reserved : 00
[071h 0113   2]                       Length : 0017
[073h 0115   7]                 Capabilities : 22 18 00 00 00 03 0F
[07Ah 0122   1]              Completion Code : 01
[07Bh 0123   4]                Enterprise ID : 00000000
[07Fh 0127   1]                      Command : 00
[080h 0128   2]                    Parameter : 0000
[082h 0130   2]                 Boot Options : 0000
[084h 0132   2]               Oem Parameters : 0000

[086h 0134   1]                Subtable Type : 80 [ASF Information]
[087h 0135   1]                     Reserved : 00
[088h 0136   2]                       Length : 0010
[08Ah 0138   1]          Minimum Reset Value : FF
[08Bh 0139   1]     Minimum Polling Interval : 00
[08Ch 0140   2]                    System ID : 0293
[08Eh 0142   4]              Manufacturer ID : A2020000
[092h 0146   1]                        Flags : 00
[093h 0147   3]                     Reserved : 000000


Raw Table Data: Length 150 (0x96)

    0000: 41 53 46 21 96 00 00 00 20 5F 44 45 4C 4C 20 20  // ASF!.... _DELL  
    0010: 42 31 30 4B 20 20 20 00 15 00 00 00 41 53 4C 20  // B10K   .....ASL 
    0020: 61 00 00 00 04 00 07 00 00 01 88 01 00 2C 00 00  // a............,..
    0030: 00 03 0C 89 04 01 01 05 6F 00 68 08 88 17 00 89  // ........o.h.....
    0040: 04 04 04 07 6F 00 68 20 88 03 00 89 05 01 01 19  // ....o.h ........
    0050: 6F 00 68 20 88 22 00 02 00 18 00 04 04 00 00 02  // o.h ."..........
    0060: 88 00 01 01 88 00 02 00 88 00 03 03 88 00 04 03  // ................
    0070: 00 17 00 22 18 00 00 00 03 0F 01 00 00 00 00 00  // ..."............
    0080: 00 00 00 00 00 00 80 00 10 00 FF 00 93 02 00 00  // ................
    0090: 02 A2 00 00 00 00                                // ......


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 04
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "B10K   "
[018h 0024   4]                 Oem Revision : 00000015
[01Ch 0028   4]              Asl Compiler ID : "ASL "
[020h 0032   4]        Asl Compiler Revision : 00000061

[024h 0036   1]          Boot Register Index : 7A
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 04 44 45 4C 4C 20 20  // BOOT(.....DELL  
    0010: 42 31 30 4B 20 20 20 00 15 00 00 00 41 53 4C 20  // B10K   .....ASL 
    0020: 61 00 00 00 7A 00 00 00                          // a...z...


DMAR
----
[000h 0000   4]                    Signature : "DMAR"    [DMA Remapping table]
[004h 0004   4]                 Table Length : 000000B8
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0D
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "B10K   "
[018h 0024   4]                 Oem Revision : 00000015
[01Ch 0028   4]              Asl Compiler ID : "ASL "
[020h 0032   4]        Asl Compiler Revision : 00000061

[024h 0036   1]           Host Address Width : 23
[025h 0037   1]                        Flags : 00
[026h 0038  10]                     Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048   2]                Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050   2]                       Length : 0010

[034h 0052   1]                        Flags : 01
[035h 0053   1]                     Reserved : 00
[036h 0054   2]           PCI Segment Number : 0000
[038h 0056   8]        Register Base Address : 00000000FEDC0000

[040h 0064   2]                Subtable Type : 0001 [Reserved Memory Region]
[042h 0066   2]                       Length : 0058

[044h 0068   2]                     Reserved : 0000
[046h 0070   2]           PCI Segment Number : 0000
[048h 0072   8]                 Base Address : 00000000DFE58000
[050h 0080   8]          End Address (limit) : 00000000DFE6FFFF

[058h 0088   1]            Device Scope Type : 01 [PCI Endpoint Device]
[059h 0089   1]                 Entry Length : 08
[05Ah 0090   2]                     Reserved : 0000
[05Ch 0092   1]               Enumeration ID : 00
[05Dh 0093   1]               PCI Bus Number : 00

[05Eh 0094   2]                     PCI Path : 1D,00


[060h 0096   1]            Device Scope Type : 01 [PCI Endpoint Device]
[061h 0097   1]                 Entry Length : 08
[062h 0098   2]                     Reserved : 0000
[064h 0100   1]               Enumeration ID : 00
[065h 0101   1]               PCI Bus Number : 00

[066h 0102   2]                     PCI Path : 1D,01


[068h 0104   1]            Device Scope Type : 01 [PCI Endpoint Device]
[069h 0105   1]                 Entry Length : 08
[06Ah 0106   2]                     Reserved : 0000
[06Ch 0108   1]               Enumeration ID : 00
[06Dh 0109   1]               PCI Bus Number : 00

[06Eh 0110   2]                     PCI Path : 1D,02


[070h 0112   1]            Device Scope Type : 01 [PCI Endpoint Device]
[071h 0113   1]                 Entry Length : 08
[072h 0114   2]                     Reserved : 0000
[074h 0116   1]               Enumeration ID : 00
[075h 0117   1]               PCI Bus Number : 00

[076h 0118   2]                     PCI Path : 1D,07


[078h 0120   1]            Device Scope Type : 01 [PCI Endpoint Device]
[079h 0121   1]                 Entry Length : 08
[07Ah 0122   2]                     Reserved : 0000
[07Ch 0124   1]               Enumeration ID : 00
[07Dh 0125   1]               PCI Bus Number : 00

[07Eh 0126   2]                     PCI Path : 1A,00


[080h 0128   1]            Device Scope Type : 01 [PCI Endpoint Device]
[081h 0129   1]                 Entry Length : 08
[082h 0130   2]                     Reserved : 0000
[084h 0132   1]               Enumeration ID : 00
[085h 0133   1]               PCI Bus Number : 00

[086h 0134   2]                     PCI Path : 1A,01


[088h 0136   1]            Device Scope Type : 01 [PCI Endpoint Device]
[089h 0137   1]                 Entry Length : 08
[08Ah 0138   2]                     Reserved : 0000
[08Ch 0140   1]               Enumeration ID : 00
[08Dh 0141   1]               PCI Bus Number : 00

[08Eh 0142   2]                     PCI Path : 1A,02


[090h 0144   1]            Device Scope Type : 01 [PCI Endpoint Device]
[091h 0145   1]                 Entry Length : 08
[092h 0146   2]                     Reserved : 0000
[094h 0148   1]               Enumeration ID : 00
[095h 0149   1]               PCI Bus Number : 00

[096h 0150   2]                     PCI Path : 1A,07


[098h 0152   2]                Subtable Type : 0002 [Root Port ATS Capability]
[09Ah 0154   2]                       Length : 0020

[09Ch 0156   1]                        Flags : 00
[09Dh 0157   1]                     Reserved : 00
[09Eh 0158   2]           PCI Segment Number : 0000

[0A0h 0160   1]            Device Scope Type : 02 [PCI Bridge Device]
[0A1h 0161   1]                 Entry Length : 08
[0A2h 0162   2]                     Reserved : 0000
[0A4h 0164   1]               Enumeration ID : 00
[0A5h 0165   1]               PCI Bus Number : 00

[0A6h 0166   2]                     PCI Path : 01,00


[0A8h 0168   1]            Device Scope Type : 02 [PCI Bridge Device]
[0A9h 0169   1]                 Entry Length : 08
[0AAh 0170   2]                     Reserved : 0000
[0ACh 0172   1]               Enumeration ID : 00
[0ADh 0173   1]               PCI Bus Number : 00

[0AEh 0174   2]                     PCI Path : 03,00


[0B0h 0176   1]            Device Scope Type : 02 [PCI Bridge Device]
[0B1h 0177   1]                 Entry Length : 08
[0B2h 0178   2]                     Reserved : 0000
[0B4h 0180   1]               Enumeration ID : 00
[0B5h 0181   1]               PCI Bus Number : 00

[0B6h 0182   2]                     PCI Path : 07,00


Raw Table Data: Length 184 (0xB8)

    0000: 44 4D 41 52 B8 00 00 00 01 0D 44 45 4C 4C 20 20  // DMAR......DELL  
    0010: 42 31 30 4B 20 20 20 00 15 00 00 00 41 53 4C 20  // B10K   .....ASL 
    0020: 61 00 00 00 23 00 00 00 00 00 00 00 00 00 00 00  // a...#...........
    0030: 00 00 10 00 01 00 00 00 00 00 DC FE 00 00 00 00  // ................
    0040: 01 00 58 00 00 00 00 00 00 80 E5 DF 00 00 00 00  // ..X.............
    0050: FF FF E6 DF 00 00 00 00 01 08 00 00 00 00 1D 00  // ................
    0060: 01 08 00 00 00 00 1D 01 01 08 00 00 00 00 1D 02  // ................
    0070: 01 08 00 00 00 00 1D 07 01 08 00 00 00 00 1A 00  // ................
    0080: 01 08 00 00 00 00 1A 01 01 08 00 00 00 00 1A 02  // ................
    0090: 01 08 00 00 00 00 1A 07 02 00 20 00 00 00 00 00  // .......... .....
    00A0: 02 08 00 00 00 00 01 00 02 08 00 00 00 00 03 00  // ................
    00B0: 02 08 00 00 00 00 07 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 1, "DELL", "dt_ex", 0x00001000)
{
    Method (DBIN, 0, NotSerialized)
    {
        Noop
    }

    Scope (\)
    {
        Device (_SB.VBTN)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                One, 
                0x04
            })
        }

        OperationRegion (SSTS, SystemIO, 0x0828, One)
        Field (SSTS, ByteAcc, NoLock, WriteAsZeros)
        {
            TSTS,   1
        }

        OperationRegion (SACT, SystemIO, 0x082A, One)
        Field (SACT, ByteAcc, NoLock, WriteAsZeros)
        {
                ,   2, 
            TPOL,   1
        }
    }

    Scope (_GPE)
    {
        Method (_L00, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            TPOL = Zero
            TSTS = One
            Notify (\_SB.VBTN, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Windows 2001"))
                {
                    MSOS = 0x04
                }
            }
        }
    }

    Scope (\)
    {
        Name (MSOS, Zero)
        Mutex (MTX, 0x01)
        Method (CMRD, 1, NotSerialized)
        {
            Acquire (SMIM, 0xFFFF)
            Local0 = Arg0
            Local0 &= 0x7F
            SMID = Local0
            SMIC = 0x84
            SMIC = 0x85
            Local0 = SMID /* \SMID */
            Release (SMIM)
            Return (Local0)
        }

        Method (CMWR, 2, NotSerialized)
        {
            Acquire (SMIM, 0xFFFF)
            Local0 = Arg0
            Local0 |= 0x80
            SMID = Local0
            SMIC = 0x84
            SMID = Arg1
            SMIC = 0x85
            Release (SMIM)
        }

        Method (GCKB, 0, NotSerialized)
        {
            Return ((0x20 & CMRD (0x26)))
        }

        Method (GCMS, 0, NotSerialized)
        {
            Return ((0x40 & CMRD (0x6F)))
        }

        Method (GCON, 0, NotSerialized)
        {
            Return ((0x04 & CMRD (0x55)))
        }

        Method (GCUC, 0, NotSerialized)
        {
            Local0 = (One & CMRD (0x22))
            Return ((One ^ Local0))
        }

        Method (GCS1, 0, NotSerialized)
        {
            Return ((0x03 & CMRD (0x25)))
        }

        Method (GCS2, 0, NotSerialized)
        {
            Return ((0x0C & CMRD (0x25)))
        }

        Method (GCFD, 0, NotSerialized)
        {
            Return ((0x18 & CMRD (0x55)))
        }

        Method (GCPP, 0, NotSerialized)
        {
            Return ((0x70 & CMRD (0x23)))
        }

        Method (GCTP, 0, NotSerialized)
        {
            Return ((0x40 & CMRD (0x22)))
        }

        Method (GCNC, 0, NotSerialized)
        {
            Return ((0x03 & CMRD (0x59)))
        }

        Method (HACK, 0, NotSerialized)
        {
            If ((MSOS == 0x04))
            {
                Local0 = CMRD (0x6F)
                Local0 |= 0x04
                CMWR (0x6F, Local0)
                Return (One)
            }
            Else
            {
                Local0 = CMRD (0x6F)
                Local0 &= 0xFB
                CMWR (0x6F, Local0)
            }

            Local0 = (SizeOf (_OS) + One)
            Local1 = Local0
            Name (BUF0, Buffer (Local0) {})
            Name (BUF1, Buffer (Local0) {})
            Name (OSNT, One)
            Name (OS98, One)
            BUF0 = _OS /* \_OS_ */
            BUF1 = "Microsoft Windows NT"
            While (Local0)
            {
                Local0--
                If ((DerefOf (BUF0 [Local0]) == DerefOf (BUF1 [Local0]))) {}
                Else
                {
                    OSNT = Zero
                }
            }

            If (OSNT)
            {
                MSOS = 0x03
                Return (One)
            }
            Else
            {
                BUF1 = "Microsoft Windows"
                While (Local1)
                {
                    Local1--
                    If ((DerefOf (BUF0 [Local1]) == DerefOf (BUF1 [Local1]))) {}
                    Else
                    {
                        OS98 = Zero
                    }
                }

                If (OS98)
                {
                    MSOS = One
                    Return (Zero)
                }
                Else
                {
                    MSOS = 0x02
                    Return (Zero)
                }
            }
        }

        Method (ISLI, 0, NotSerialized)
        {
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
    }

    OperationRegion (CMS, SystemIO, 0x70, 0x02)
    Field (CMS, ByteAcc, NoLock, Preserve)
    {
        CMSI,   8, 
        CMSD,   8
    }

    OperationRegion (SMIR, SystemIO, 0xB2, 0x02)
    Field (SMIR, ByteAcc, NoLock, Preserve)
    {
        SMIC,   8, 
        SMID,   8
    }

    OperationRegion (STON, SystemIO, 0x84, One)
    Field (STON, ByteAcc, NoLock, Preserve)
    {
        MGIC,   8
    }

    OperationRegion (SIO, SystemIO, 0x2E, 0x02)
    Field (SIO, ByteAcc, NoLock, Preserve)
    {
        SIOI,   8, 
        SIOD,   8
    }

    OperationRegion (PM1R, SystemIO, 0x0800, 0x04)
    Field (PM1R, ByteAcc, NoLock, Preserve)
    {
        PMS1,   8, 
        PMS2,   8, 
        PME1,   8, 
        PME2,   8
    }

    OperationRegion (GPST, SystemIO, 0x0820, One)
    Field (GPST, ByteAcc, NoLock, Preserve)
    {
        GST0,   8
    }

    OperationRegion (GLBC, SystemIO, 0x0828, 0x06)
    Field (GLBC, ByteAcc, NoLock, Preserve)
    {
        THRP,   8, 
        GLBT,   8, 
        EOS,    8, 
        LIDP,   8, 
        THME,   8, 
        RIEN,   8
    }

    OperationRegion (GPEC, SystemIO, 0x0842, One)
    Field (GPEC, ByteAcc, NoLock, Preserve)
    {
        THPL,   1, 
        SWGP,   1, 
        Offset (0x01)
    }

    OperationRegion (PMES, SystemIO, 0x0C00, One)
    Field (PMES, ByteAcc, NoLock, Preserve)
    {
        GSTS,   8
    }

    Mutex (SMIM, 0x01)
    Mutex (SMIX, 0x01)
    Name (SXX0, Buffer (0x0100) {})
    Name (SXX1, Buffer (0x08) {})
    CreateWordField (SXX1, Zero, SXX2)
    CreateWordField (SXX1, 0x04, SXX3)
    Method (SMI, 2, NotSerialized)
    {
        Acquire (SMIM, 0xFFFF)
        SMID = Arg1
        SMIC = Arg0
        Local0 = MGIC /* \MGIC */
        Local1 = SMID /* \SMID */
        Release (SMIM)
        Return (Local1)
    }

    Method (SMI1, 1, NotSerialized)
    {
        Acquire (SMIM, 0xFFFF)
        SMIC = Arg0
        Local0 = MGIC /* \MGIC */
        Local0 = SMID /* \SMID */
        Release (SMIM)
        Return (Local0)
    }

    Method (SMI2, 1, NotSerialized)
    {
        Acquire (SMIM, 0xFFFF)
        SMIC = Arg0
        Local0 = MGIC /* \MGIC */
        Local1 = SMIC /* \SMIC */
        Local0 = SMID /* \SMID */
        Local0 <<= 0x08
        Local0 += Local1
        Release (SMIM)
        Return (Local0)
    }

    Method (SMI4, 1, NotSerialized)
    {
        Local0 = (Arg0 + One)
        Local2 = SMI2 (Arg0)
        Local1 = SMI2 (Local0)
        Local1 <<= 0x10
        Local0 = (Local1 + Local2)
        Return (Local0)
    }

    Method (GTMR, 0, NotSerialized)
    {
        Return (SMI4 (0x78))
    }

    Method (GTML, 0, NotSerialized)
    {
        Return (SMI4 (0x74))
    }

    Method (GTMH, 0, NotSerialized)
    {
        Return (SMI4 (0x76))
    }

    Method (GTOM, 0, NotSerialized)
    {
        Return (SMI4 (0x81))
    }

    Method (GUSB, 0, NotSerialized)
    {
        If (ISLI ())
        {
            Return (Zero)
        }
        Else
        {
            Return (SMI2 (0xBA))
        }
    }

    Method (GTPM, 0, NotSerialized)
    {
        Return (SMI (0x9B, Zero))
    }

    Method (SX10, 0, NotSerialized)
    {
        Acquire (SMIX, 0xFFFF)
        SXX2 = Zero
    }

    Method (SX30, 1, NotSerialized)
    {
        Local0 = SXX2 /* \SXX2 */
        Local0++
        If ((Local0 <= SizeOf (SXX0)))
        {
            CreateByteField (SXX0, SXX2, SX20)
            SX20 = Arg0
            SXX2 = Local0
        }
    }

    Method (SX33, 2, NotSerialized)
    {
        If ((Arg1 < SizeOf (Arg0)))
        {
            CreateByteField (Arg0, Arg1, SX20)
            SX30 (SX20)
        }
    }

    Method (SX34, 2, NotSerialized)
    {
        Local0 = Zero
        While ((Local0 < Arg1))
        {
            SX33 (Arg0, Local0)
            Local0++
        }
    }

    Method (SXX6, 2, NotSerialized)
    {
        SMID = Arg1
        SMIC = Arg0
        Local0 = SMIC /* \SMIC */
        While ((Local0 != Zero))
        {
            Local0 = SMIC /* \SMIC */
        }

        Return (SMID) /* \SMID */
    }

    Method (SXX5, 2, NotSerialized)
    {
        If ((Arg1 < SizeOf (Arg0)))
        {
            CreateByteField (Arg0, Arg1, SX20)
            SXX6 (0x98, SX20)
        }
    }

    Method (SXX4, 0, NotSerialized)
    {
        SXX6 (0x96, Zero)
        Local0 = Zero
        While ((Local0 < SXX2))
        {
            SXX5 (SXX0, Local0)
            Local0++
        }
    }

    Method (SXX8, 2, NotSerialized)
    {
        If ((Arg1 < SizeOf (Arg0)))
        {
            CreateByteField (Arg0, Arg1, SX20)
            SX20 = SXX6 (0x97, Zero)
        }
    }

    Method (SXX7, 0, NotSerialized)
    {
        Local0 = Zero
        While ((Local0 < SXX3))
        {
            Local1 = (SXX2 + Local0)
            SXX8 (SXX0, Local1)
            Local0++
        }
    }

    Method (SX11, 0, NotSerialized)
    {
        SXX4 ()
        SXX3 = SXX6 (0x99, Zero)
        Local0 = (SXX2 + SXX3) /* \SXX3 */
        If ((SizeOf (SXX0) < Local0))
        {
            Local0 = SizeOf (SXX0)
            Local0 -= SXX2 /* \SXX2 */
            SXX3 = Local0
        }

        SXX7 ()
    }

    Method (SX40, 0, NotSerialized)
    {
        Local0 = SXX2 /* \SXX2 */
        Local0++
        If ((Local0 <= SizeOf (SXX0)))
        {
            CreateByteField (SXX0, SXX2, SX20)
            SXX2 = Local0
            Return (SX20) /* \SX40.SX20 */
        }

        Return (Zero)
    }

    Method (SX41, 0, NotSerialized)
    {
        Local0 = SXX2 /* \SXX2 */
        Local0 += 0x02
        If ((Local0 <= SizeOf (SXX0)))
        {
            CreateWordField (SXX0, SXX2, SX21)
            SXX2 = Local0
            Return (SX21) /* \SX41.SX21 */
        }

        Return (Zero)
    }

    Method (SX42, 0, NotSerialized)
    {
        Local0 = SXX2 /* \SXX2 */
        Local0 += 0x04
        If ((Local0 <= SizeOf (SXX0)))
        {
            CreateDWordField (SXX0, SXX2, SX22)
            SXX2 = Local0
            Return (SX22) /* \SX42.SX22 */
        }

        Return (Zero)
    }

    Method (SX43, 2, NotSerialized)
    {
        If ((Arg1 < SizeOf (Arg0)))
        {
            CreateByteField (Arg0, Arg1, SX20)
            SX20 = SX40 ()
        }
    }

    Method (SX44, 2, NotSerialized)
    {
        Local0 = Zero
        While ((Local0 < Arg1))
        {
            SX43 (Arg0, Local0)
            Local0++
        }
    }

    Method (SX12, 0, NotSerialized)
    {
        Release (SMIX)
    }

    Method (GMI0, 0, NotSerialized)
    {
        Local0 = SMI2 (0xD4)
        Local0 <<= 0x10
        Return (Local0)
    }

    Method (GMX0, 0, NotSerialized)
    {
        Local0 = SMI2 (0xD5)
        Local0 <<= 0x10
        If ((Local0 != Zero))
        {
            Local0 |= 0xFFFF
        }

        Return (Local0)
    }

    Method (GMI1, 0, NotSerialized)
    {
        Local0 = SMI2 (0xD0)
        Local0 <<= 0x10
        Return (Local0)
    }

    Method (GMX1, 0, NotSerialized)
    {
        Local0 = SMI2 (0xD1)
        Local0 <<= 0x10
        If ((Local0 != Zero))
        {
            Local0 |= 0xFFFF
        }

        Return (Local0)
    }

    Method (GIB0, 0, NotSerialized)
    {
        Local0 = SMI2 (0xD6)
        Local0 &= 0xFFFF
        Return (Local0)
    }

    Method (GIX0, 0, NotSerialized)
    {
        Local0 = SMI2 (0xD7)
        Local0 &= 0xFFFF
        Return (Local0)
    }

    Method (GIB1, 0, NotSerialized)
    {
        Local0 = SMI2 (0xD2)
        Local0 &= 0xFFFF
        Return (Local0)
    }

    Method (GIX1, 0, NotSerialized)
    {
        Local0 = SMI2 (0xD3)
        Local0 &= 0xFFFF
        Return (Local0)
    }

    Scope (_SB)
    {
        Device (AMW0)
        {
            Mutex (WMIX, 0x01)
            Name (_HID, "*pnp0c14")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (STBY, 3, NotSerialized)
            {
                CreateByteField (Arg0, Arg1, TMP)
                TMP = Arg2
            }

            Method (STWD, 3, NotSerialized)
            {
                CreateWordField (Arg0, Arg1, TMP)
                TMP = Arg2
            }

            Method (STDW, 3, NotSerialized)
            {
                CreateDWordField (Arg0, Arg1, TMP)
                TMP = Arg2
            }

            Method (CLBY, 1, NotSerialized)
            {
                Local0 = Zero
                While ((Local0 < SizeOf (Arg0)))
                {
                    STBY (Arg0, Local0, Zero)
                    Local0++
                }
            }

            Name (_WDG, Buffer (0x64)
            {
                /* 0000 */  0xBC, 0xDC, 0x9D, 0x8D, 0x97, 0xA9, 0xDA, 0x11,  // ........
                /* 0008 */  0xB0, 0x12, 0xB6, 0x22, 0xA1, 0xEF, 0x54, 0x92,  // ..."..T.
                /* 0010 */  0x41, 0x41, 0x01, 0x00, 0xCE, 0x93, 0x05, 0xA8,  // AA......
                /* 0018 */  0x97, 0xA9, 0xDA, 0x11, 0xB0, 0x12, 0xB6, 0x22,  // ......."
                /* 0020 */  0xA1, 0xEF, 0x54, 0x92, 0x42, 0x41, 0x01, 0x02,  // ..T.BA..
                /* 0028 */  0x94, 0x59, 0xBB, 0x9D, 0x97, 0xA9, 0xDA, 0x11,  // .Y......
                /* 0030 */  0xB0, 0x12, 0xB6, 0x22, 0xA1, 0xEF, 0x54, 0x92,  // ..."..T.
                /* 0038 */  0xD0, 0x00, 0x01, 0x08, 0xE0, 0x6C, 0x77, 0xA3,  // .....lw.
                /* 0040 */  0x88, 0x1E, 0xDB, 0x11, 0xA9, 0x8B, 0x08, 0x00,  // ........
                /* 0048 */  0x20, 0x0C, 0x9A, 0x66, 0x42, 0x43, 0x01, 0x00,  //  ..fBC..
                /* 0050 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0058 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0060 */  0x4D, 0x4F, 0x01, 0x00                           // MO..
            })
            Name (INFO, Buffer (0x80) {})
            Name (ECD0, Zero)
            Method (WED0, 1, NotSerialized)
            {
                ECD0 = Arg0
                Return (Zero)
            }

            Method (WCAA, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (WQAA, 1, NotSerialized)
            {
                Acquire (WMIX, 0xFFFF)
                CLBY (INFO)
                If ((Arg0 != Zero))
                {
                    Local1 = INFO /* \_SB_.AMW0.INFO */
                }
                Else
                {
                    STDW (INFO, Zero, 0x4C4C4544)
                    STDW (INFO, 0x04, 0x494D5720)
                    STDW (INFO, 0x08, One)
                    STDW (INFO, 0x0C, 0x1000)
                    Local1 = INFO /* \_SB_.AMW0.INFO */
                }

                Release (WMIX)
                Return (Local1)
            }

            Method (WSAA, 2, NotSerialized)
            {
                Return (Arg1)
            }

            Method (WMBA, 3, NotSerialized)
            {
                CreateDWordField (Arg2, 0x28, WBUF)
                Local1 = (WBUF + 0x2C)
                If ((Local1 <= 0x1000))
                {
                    Local0 = WMI (Arg2, Local1)
                }

                Return (Local0)
            }

            Name (WMI2, Buffer (0x80) {})
            Name (WMI3, Zero)
            Method (WMI6, 0, NotSerialized)
            {
                Acquire (WMIX, 0xFFFF)
                WMI3 = Zero
                CLBY (WMI2)
            }

            Method (WMI7, 0, NotSerialized)
            {
                Acquire (WMIX, 0xFFFF)
                WMI3 = Zero
            }

            Method (WMI8, 1, NotSerialized)
            {
                Local0 = WMI3 /* \_SB_.AMW0.WMI3 */
                Local0 += 0x02
                If ((Local0 <= SizeOf (WMI2)))
                {
                    CreateWordField (WMI2, WMI3, WMI9)
                    WMI9 = Arg0
                    WMI3 = Local0
                }
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                WMI6 ()
                If (((Arg0 != 0xD0) || (ECD0 == Zero)))
                {
                    WMI7 ()
                    Return (WMI2) /* \_SB_.AMW0.WMI2 */
                }
                Else
                {
                    SX10 ()
                    SX30 (One)
                    SX11 ()
                    Local0 = SX41 ()
                    While ((Local0 > Zero))
                    {
                        WMI8 (Local0)
                        While ((Local0 > Zero))
                        {
                            WMI8 (SX41 ())
                            Local0 -= One
                        }

                        Local0 = SX41 ()
                    }

                    WMI8 (Zero)
                    SX12 ()
                }

                WMI7 ()
                Return (WMI2) /* \_SB_.AMW0.WMI2 */
            }

            Name (WQMO, Buffer (0x056F)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x5F, 0x05, 0x00, 0x00, 0x88, 0x1C, 0x00, 0x00,  // _.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD5, 0x8D, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0F, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x40, 0x0A, 0x40,  // x\.A.@.@
                /* 00A8 */  0x58, 0x78, 0x08, 0x45, 0x80, 0x41, 0x49, 0x18,  // Xx.E.AI.
                /* 00B0 */  0x0B, 0x75, 0x31, 0x6A, 0xD4, 0x48, 0xD9, 0x80,  // .u1j.H..
                /* 00B8 */  0x0C, 0x51, 0xDA, 0xA8, 0xD1, 0x03, 0x3A, 0xBF,  // .Q....:.
                /* 00C0 */  0x23, 0x39, 0xBB, 0xA3, 0x3B, 0x92, 0x04, 0x46,  // #9..;..F
                /* 00C8 */  0x3D, 0xA6, 0x63, 0x2C, 0x6C, 0x46, 0x42, 0x8D,  // =.c,lFB.
                /* 00D0 */  0xD1, 0x1C, 0x14, 0x81, 0xC6, 0x0D, 0xDA, 0x12,  // ........
                /* 00D8 */  0x61, 0x35, 0xAE, 0xD8, 0x67, 0x66, 0xE1, 0xC3,  // a5..gf..
                /* 00E0 */  0x12, 0xC6, 0x11, 0x1C, 0x58, 0x82, 0x46, 0xD1,  // ....X.F.
                /* 00E8 */  0x34, 0xC7, 0xB3, 0x0D, 0x91, 0xE0, 0x20, 0x42,  // 4..... B
                /* 00F0 */  0x63, 0x64, 0x40, 0xC8, 0xF3, 0xB0, 0x05, 0x7A,  // cd@....z
                /* 00F8 */  0xE4, 0x09, 0xEC, 0x1E, 0x51, 0x0A, 0x11, 0x34,  // ....Q..4
                /* 0100 */  0xDF, 0x13, 0xA9, 0x51, 0x80, 0x36, 0x0C, 0xD9,  // ...Q.6..
                /* 0108 */  0x3A, 0x1B, 0x68, 0xA8, 0xB1, 0x1A, 0x43, 0x11,  // :.h...C.
                /* 0110 */  0x44, 0x84, 0xA0, 0x51, 0x0C, 0x16, 0x21, 0x54,  // D..Q..!T
                /* 0118 */  0x88, 0xFF, 0x7F, 0x94, 0xA8, 0xA7, 0x14, 0x24,  // .......$
                /* 0120 */  0x6A, 0x65, 0x20, 0x42, 0x0B, 0x66, 0x04, 0x66,  // je B.f.f
                /* 0128 */  0x7F, 0x10, 0x24, 0xC6, 0x99, 0x41, 0x87, 0x05,  // ..$..A..
                /* 0130 */  0xCB, 0x00, 0x91, 0x11, 0x41, 0xA3, 0x61, 0x67,  // ....A.ag
                /* 0138 */  0x01, 0x0F, 0xC7, 0x33, 0x69, 0x7E, 0x62, 0x1A,  // ...3i~b.
                /* 0140 */  0x9C, 0x09, 0xC6, 0x86, 0x90, 0x06, 0x08, 0x89,  // ........
                /* 0148 */  0x3A, 0x38, 0x50, 0x02, 0x4B, 0x19, 0x38, 0xB1,  // :8P.K.8.
                /* 0150 */  0x3D, 0x2E, 0x8D, 0xEF, 0x8C, 0xA3, 0x86, 0x38,  // =......8
                /* 0158 */  0xF5, 0x33, 0xF3, 0x3F, 0xC2, 0x5B, 0xF0, 0x11,  // .3.?.[..
                /* 0160 */  0x80, 0x8F, 0xC1, 0x83, 0x3D, 0x84, 0x80, 0x47,  // ....=..G
                /* 0168 */  0xC8, 0xCE, 0x00, 0x06, 0xC4, 0x7B, 0x9F, 0x34,  // .....{.4
                /* 0170 */  0x99, 0x8B, 0xCF, 0x02, 0x30, 0x86, 0x0F, 0xD7,  // ....0...
                /* 0178 */  0xF8, 0x28, 0x34, 0x1E, 0x76, 0x3E, 0x60, 0xE3,  // .(4.v>`.
                /* 0180 */  0xE2, 0xF0, 0x3E, 0x14, 0x9C, 0x70, 0xB1, 0x20,  // ..>..p. 
                /* 0188 */  0x0A, 0x00, 0x21, 0x59, 0xE7, 0x03, 0xF4, 0xAC,  // ..!Y....
                /* 0190 */  0x8F, 0x2D, 0xE0, 0xC3, 0x40, 0xB3, 0x77, 0x08,  // .-..@.w.
                /* 0198 */  0x42, 0xF0, 0x22, 0xE0, 0xA3, 0x83, 0x8F, 0x1B,  // B.".....
                /* 01A0 */  0x1E, 0xF7, 0xF3, 0x06, 0x18, 0x0E, 0x07, 0x1E,  // ........
                /* 01A8 */  0x8E, 0x4F, 0x1B, 0xC0, 0x65, 0x04, 0x5C, 0xDA,  // .O..e.\.
                /* 01B0 */  0x93, 0xC2, 0x04, 0x92, 0xFC, 0x04, 0x90, 0x18,  // ........
                /* 01B8 */  0x18, 0xD4, 0x81, 0xC0, 0x07, 0x0B, 0xB8, 0x92,  // ........
                /* 01C0 */  0xE0, 0x50, 0xC3, 0xF3, 0xC4, 0x1E, 0x10, 0xFE,  // .P......
                /* 01C8 */  0xFF, 0x47, 0x79, 0x22, 0x2F, 0x06, 0x9E, 0xFE,  // .Gy"/...
                /* 01D0 */  0x63, 0x00, 0x8C, 0x03, 0x82, 0xA7, 0x75, 0x52,  // c.....uR
                /* 01D8 */  0xBE, 0x79, 0x3C, 0x48, 0x78, 0x50, 0x61, 0x12,  // .y<HxPa.
                /* 01E0 */  0xF8, 0x94, 0xC0, 0xD0, 0xF8, 0x71, 0x03, 0xAC,  // .....q..
                /* 01E8 */  0xA3, 0xC6, 0x1F, 0x10, 0xE0, 0x9D, 0x24, 0xCE,  // ......$.
                /* 01F0 */  0xAF, 0xCF, 0x01, 0xE8, 0xD0, 0x70, 0x8A, 0x0C,  // .....p..
                /* 01F8 */  0xE4, 0x35, 0xE0, 0xA4, 0x4F, 0xC9, 0xE3, 0x4B,  // .5..O..K
                /* 0200 */  0xE0, 0x33, 0x07, 0xEC, 0xBB, 0xC1, 0x61, 0x1C,  // .3....a.
                /* 0208 */  0x4C, 0x88, 0x08, 0xEF, 0x01, 0x4F, 0x1D, 0xBE,  // L....O..
                /* 0210 */  0x6B, 0x3C, 0x0A, 0x04, 0x8A, 0xD0, 0xDB, 0x99,  // k<......
                /* 0218 */  0x83, 0x9E, 0x42, 0x8C, 0x12, 0xED, 0xAC, 0xC2,  // ..B.....
                /* 0220 */  0x3C, 0x70, 0x44, 0xF1, 0x91, 0xC3, 0x08, 0xEF,  // <pD.....
                /* 0228 */  0x1E, 0xBE, 0x13, 0x3C, 0x80, 0xB4, 0x36, 0x39,  // ...<..69
                /* 0230 */  0xE1, 0x06, 0x7A, 0xE6, 0x60, 0xD1, 0xCE, 0x2C,  // ..z.`..,
                /* 0238 */  0xB2, 0x00, 0xA2, 0x48, 0xA3, 0x41, 0x9D, 0x11,  // ...H.A..
                /* 0240 */  0x7C, 0x1A, 0xF0, 0xB4, 0x9E, 0x62, 0x7C, 0x94,  // |....b|.
                /* 0248 */  0x30, 0xC8, 0x19, 0x1E, 0xD8, 0x73, 0xC2, 0x63,  // 0....s.c
                /* 0250 */  0x80, 0x07, 0xCC, 0xEE, 0x07, 0x3E, 0x4E, 0xF8,  // .....>N.
                /* 0258 */  0x5C, 0x80, 0x77, 0x0D, 0xA8, 0x19, 0xFA, 0xB0,  // \.w.....
                /* 0260 */  0x01, 0xE7, 0xD0, 0x81, 0x3F, 0x4D, 0xE0, 0x0F,  // ....?M..
                /* 0268 */  0x16, 0xF8, 0xF1, 0xF8, 0x9A, 0xC3, 0x26, 0x9C,  // ......&.
                /* 0270 */  0xC0, 0xF2, 0x07, 0x81, 0x1A, 0x99, 0xA1, 0x3D,  // .......=
                /* 0278 */  0xCB, 0xD3, 0x7A, 0x0D, 0xF0, 0x69, 0xC7, 0x04,  // ..z..i..
                /* 0280 */  0x3E, 0x6F, 0xF8, 0xFF, 0xFF, 0xCF, 0xF1, 0x78,  // >o.....x
                /* 0288 */  0xC0, 0xAF, 0xF8, 0x74, 0x41, 0xEE, 0x0A, 0x9E,  // ...tA...
                /* 0290 */  0xAF, 0xCF, 0x2E, 0xCC, 0xC6, 0x78, 0x50, 0xA3,  // .....xP.
                /* 0298 */  0xF0, 0x01, 0x07, 0x77, 0x76, 0xF1, 0x11, 0xC0,  // ...wv...
                /* 02A0 */  0x67, 0x17, 0xE0, 0x39, 0x89, 0x67, 0x09, 0xF0,  // g..9.g..
                /* 02A8 */  0x1E, 0x02, 0x7C, 0x22, 0x89, 0xF7, 0xB0, 0x05,  // ..|"....
                /* 02B0 */  0x63, 0xC4, 0x78, 0xC8, 0x33, 0xAE, 0x7A, 0x18,  // c.x.3.z.
                /* 02B8 */  0xBA, 0x08, 0x58, 0xDD, 0x7D, 0x05, 0x75, 0xF4,  // ..X.}.u.
                /* 02C0 */  0x02, 0x13, 0xD4, 0x6B, 0x06, 0xEE, 0xF4, 0x02,  // ...k....
                /* 02C8 */  0x7C, 0x4E, 0x59, 0xF0, 0xFE, 0xFF, 0xA7, 0x2C,  // |NY....,
                /* 02D0 */  0xE0, 0x7E, 0x55, 0xE0, 0x47, 0x14, 0x30, 0x40,  // .~U.G.0@
                /* 02D8 */  0x76, 0x76, 0x3A, 0x11, 0xC2, 0x7B, 0xC9, 0x73,  // vv:..{.s
                /* 02E0 */  0x88, 0x6F, 0x57, 0x3E, 0x98, 0x04, 0x79, 0x0E,  // .oW>..y.
                /* 02E8 */  0x88, 0xF0, 0x94, 0xC5, 0xEF, 0x03, 0x51, 0x62,  // ......Qb
                /* 02F0 */  0x1E, 0x50, 0xA4, 0x28, 0x46, 0x0C, 0xF2, 0x84,  // .P.(F...
                /* 02F8 */  0xE5, 0xEB, 0x49, 0x0C, 0x43, 0x07, 0x0B, 0x17,  // ..I.C...
                /* 0300 */  0x3E, 0xC2, 0x53, 0x16, 0x60, 0xF1, 0x92, 0x85,  // >.S.`...
                /* 0308 */  0x39, 0x65, 0xC1, 0x7C, 0x1B, 0xF8, 0x94, 0x05,  // 9e.|....
                /* 0310 */  0x8E, 0xFF, 0xFF, 0x29, 0x0B, 0x5C, 0xE3, 0x7E,  // ...).\.~
                /* 0318 */  0xCA, 0x02, 0x66, 0xD2, 0x9F, 0x02, 0x3E, 0xD5,  // ..f...>.
                /* 0320 */  0xF8, 0x09, 0xA0, 0xE8, 0x07, 0x0B, 0x0A, 0xE3,  // ........
                /* 0328 */  0x53, 0x16, 0xE0, 0x4A, 0xDE, 0x01, 0x01, 0x34,  // S..J...4
                /* 0330 */  0x67, 0x27, 0xDF, 0x16, 0x0C, 0x76, 0xCC, 0xBE,  // g'...v..
                /* 0338 */  0x64, 0xF8, 0x94, 0x08, 0x86, 0x43, 0x86, 0xEF,  // d....C..
                /* 0340 */  0x54, 0x87, 0xF2, 0xC8, 0xF1, 0x14, 0xE0, 0x23,  // T......#
                /* 0348 */  0x16, 0xD8, 0xE3, 0x1C, 0x03, 0x74, 0x5C, 0xF1,  // .....t\.
                /* 0350 */  0x11, 0xCB, 0xFF, 0xFF, 0x23, 0x16, 0xC0, 0x8D,  // ....#...
                /* 0358 */  0x03, 0x08, 0xFE, 0xD4, 0x01, 0xEB, 0x1E, 0x10,  // ........
                /* 0360 */  0xD6, 0x87, 0x0E, 0xE0, 0x21, 0xFB, 0x21, 0xA0,  // ....!.!.
                /* 0368 */  0x33, 0x8C, 0x25, 0x83, 0xC8, 0xC6, 0xB9, 0x86,  // 3.%.....
                /* 0370 */  0x8E, 0xD1, 0xE2, 0x17, 0xAA, 0x9B, 0x42, 0xEC,  // ......B.
                /* 0378 */  0x83, 0xE1, 0xB2, 0x81, 0x04, 0xEA, 0xE1, 0x5A,  // .......Z
                /* 0380 */  0x30, 0x85, 0x44, 0xD1, 0x68, 0x34, 0x06, 0x26,  // 0.D.h4.&
                /* 0388 */  0x30, 0x82, 0x33, 0x88, 0x01, 0x9D, 0x11, 0x42,  // 0.3....B
                /* 0390 */  0x87, 0x32, 0x9C, 0x8A, 0xF3, 0x10, 0xEA, 0xFF,  // .2......
                /* 0398 */  0x4F, 0x30, 0xD4, 0x8D, 0x89, 0xCE, 0xCE, 0xF3,  // O0......
                /* 03A0 */  0xE7, 0xB7, 0x11, 0x9F, 0x08, 0x0C, 0xEC, 0x2B,  // .......+
                /* 03A8 */  0xC4, 0x5B, 0x06, 0x58, 0x86, 0xE5, 0xC5, 0x3D,  // .[.X...=
                /* 03B0 */  0x01, 0x1C, 0xE3, 0x49, 0x26, 0xA8, 0xE6, 0x58,  // ...I&..X
                /* 03B8 */  0x83, 0x9A, 0x83, 0xAF, 0x02, 0x6F, 0x64, 0x26,  // .....od&
                /* 03C0 */  0xF0, 0x15, 0x0C, 0x6C, 0xA7, 0x19, 0x8C, 0xBE,  // ...l....
                /* 03C8 */  0x3B, 0x01, 0x28, 0x80, 0x7C, 0x14, 0xF0, 0x7D,  // ;.(.|..}
                /* 03D0 */  0xF9, 0x6D, 0x80, 0xCD, 0xE2, 0x95, 0xD9, 0x68,  // .m.....h
                /* 03D8 */  0x3E, 0x7F, 0x22, 0x86, 0x8E, 0x12, 0x33, 0x74,  // >."...3t
                /* 03E0 */  0x0A, 0xE2, 0xA1, 0x3B, 0xE8, 0xD0, 0xD1, 0xC7,  // ...;....
                /* 03E8 */  0x01, 0x9F, 0xAC, 0x70, 0xC1, 0x0E, 0x5F, 0xD0,  // ...p.._.
                /* 03F0 */  0x26, 0x77, 0xB4, 0x27, 0xE6, 0x59, 0x78, 0x9E,  // &w.'.Yx.
                /* 03F8 */  0xB8, 0xB9, 0x83, 0xE9, 0x88, 0x04, 0x63, 0xF0,  // ......c.
                /* 0400 */  0x98, 0xC9, 0x83, 0x59, 0xE0, 0xE4, 0x41, 0xF1,  // ...Y..A.
                /* 0408 */  0xFF, 0x9F, 0x3C, 0x4C, 0x78, 0x4C, 0xD8, 0xC3,  // ..<LxL..
                /* 0410 */  0x21, 0x3D, 0x74, 0x78, 0x64, 0x7C, 0x9C, 0x3E,  // !=txd|.>
                /* 0418 */  0xFD, 0x30, 0xEC, 0xD3, 0x39, 0x97, 0xA2, 0x67,  // .0..9..g
                /* 0420 */  0xA4, 0x3B, 0xC6, 0x33, 0x17, 0x06, 0xD6, 0x23,  // .;.3...#
                /* 0428 */  0xE7, 0xB0, 0x46, 0x0B, 0x7B, 0xC0, 0xCF, 0x21,  // ..F.{..!
                /* 0430 */  0xBE, 0xC3, 0xF8, 0xC0, 0xC3, 0x60, 0x7D, 0x7A,  // .....`}z
                /* 0438 */  0x01, 0xC7, 0xF1, 0x0B, 0xFE, 0x69, 0x00, 0x3C,  // .....i.<
                /* 0440 */  0x07, 0x10, 0x8F, 0xE1, 0x05, 0x84, 0x1F, 0x5F,  // ......._
                /* 0448 */  0x74, 0xFE, 0xA5, 0x42, 0x17, 0x27, 0x79, 0x30,  // t..B.'y0
                /* 0450 */  0xA8, 0xD3, 0x14, 0xE0, 0xEA, 0xF4, 0x06, 0x9E,  // ........
                /* 0458 */  0xAB, 0x3E, 0xEE, 0x2C, 0x85, 0xFB, 0xFF, 0x9F,  // .>.,....
                /* 0460 */  0xA5, 0x60, 0x1C, 0x7E, 0x7D, 0x81, 0xF7, 0x5D,  // .`.~}..]
                /* 0468 */  0xCA, 0x08, 0x07, 0xF2, 0x2C, 0x05, 0xF6, 0xD8,  // ....,...
                /* 0470 */  0xCF, 0x10, 0x1D, 0x02, 0x7C, 0x96, 0x02, 0xF8,  // ....|...
                /* 0478 */  0xF1, 0xFA, 0xF0, 0x79, 0x06, 0x6E, 0xE0, 0xD3,  // ...y.n..
                /* 0480 */  0x2F, 0xD0, 0xFA, 0xFF, 0x9F, 0x42, 0xC0, 0x7F,  // /....B..
                /* 0488 */  0x8C, 0xF0, 0x11, 0x07, 0x77, 0xF4, 0x05, 0x6E,  // ....w..n
                /* 0490 */  0x07, 0x63, 0x7E, 0xC6, 0xC0, 0x1D, 0xC7, 0x80,  // .c~.....
                /* 0498 */  0xC7, 0xC9, 0x19, 0x77, 0x9A, 0xF0, 0x10, 0xF8,  // ...w....
                /* 04A0 */  0x00, 0x5A, 0x9D, 0x1E, 0x39, 0xF5, 0x9C, 0x12,  // .Z..9...
                /* 04A8 */  0xEE, 0x38, 0xC0, 0xA7, 0x84, 0x1B, 0x00, 0x26,  // .8.....&
                /* 04B0 */  0xC0, 0x19, 0x13, 0x50, 0xF5, 0xFF, 0x3F, 0x63,  // ...P..?c
                /* 04B8 */  0x02, 0x63, 0x90, 0x08, 0xEF, 0x0A, 0x51, 0xDF,  // .c....Q.
                /* 04C0 */  0x91, 0x0D, 0xF1, 0x8C, 0xCC, 0x70, 0xDE, 0x1A,  // .....p..
                /* 04C8 */  0x1E, 0x5F, 0x9E, 0x91, 0xC1, 0x79, 0xC6, 0x04,  // ._...y..
                /* 04D0 */  0xF8, 0xF3, 0xFF, 0x3F, 0xD2, 0x63, 0x6F, 0x0A,  // ...?.co.
                /* 04D8 */  0xC1, 0x9F, 0x42, 0x80, 0x89, 0xF8, 0x33, 0x26,  // ..B...3&
                /* 04E0 */  0x15, 0x7E, 0xC6, 0x84, 0x36, 0x17, 0x4F, 0xDB,  // .~..6.O.
                /* 04E8 */  0x67, 0x4C, 0x80, 0x7B, 0xFF, 0xFF, 0x33, 0x26,  // gL.{..3&
                /* 04F0 */  0xE0, 0x3B, 0xF2, 0x19, 0x13, 0xD0, 0x73, 0xA4,  // .;....s.
                /* 04F8 */  0xC2, 0x9D, 0x31, 0xC1, 0x30, 0xCE, 0xF7, 0x27,  // ..1.0..'
                /* 0500 */  0x83, 0x3C, 0x8F, 0xF8, 0x40, 0xE0, 0xA3, 0x0C,  // .<..@...
                /* 0508 */  0x53, 0x68, 0xD3, 0xA7, 0x46, 0xA3, 0x56, 0x0D,  // Sh..F.V.
                /* 0510 */  0xCA, 0xD4, 0x28, 0xD3, 0xA0, 0x56, 0x9F, 0x4A,  // ..(..V.J
                /* 0518 */  0x8D, 0x19, 0x3B, 0x3A, 0x59, 0xC4, 0x5A, 0x35,  // ..;:Y.Z5
                /* 0520 */  0x58, 0x87, 0x5A, 0xAF, 0x40, 0x2C, 0xE9, 0x89,  // X.Z.@,..
                /* 0528 */  0x21, 0x10, 0xFF, 0xFF, 0x45, 0x79, 0x00, 0x61,  // !...Ey.a
                /* 0530 */  0x71, 0x4D, 0x80, 0x30, 0xE1, 0xAB, 0x12, 0x88,  // qM.0....
                /* 0538 */  0x63, 0x83, 0x50, 0xB1, 0x3A, 0x20, 0x1A, 0x19,  // c.P.: ..
                /* 0540 */  0xA2, 0x41, 0x04, 0xE4, 0x10, 0x3E, 0x80, 0x58,  // .A...>.X
                /* 0548 */  0x24, 0x10, 0x81, 0x13, 0x25, 0xA0, 0xD4, 0x09,  // $...%...
                /* 0550 */  0x08, 0x13, 0xBA, 0x16, 0x81, 0x58, 0x9E, 0x17,  // .....X..
                /* 0558 */  0x10, 0x16, 0x0E, 0x84, 0x4A, 0x32, 0x03, 0xCE,  // ....J2..
                /* 0560 */  0xF4, 0x81, 0x08, 0xC8, 0x52, 0x5F, 0x21, 0x02,  // ....R_!.
                /* 0568 */  0xB2, 0x70, 0x10, 0x01, 0xF9, 0xFF, 0x0F         // .p.....
            })
        }
    }

    Mutex (WMIS, 0x01)
    Name (WM00, Zero)
    Method (WM02, 0, NotSerialized)
    {
        SX10 ()
        SX30 (Zero)
        SX11 ()
        WM00 = SX42 ()
        SX12 ()
    }

    Method (WM03, 3, NotSerialized)
    {
        OperationRegion (WWPR, SystemMemory, Arg0, One)
        Field (WWPR, ByteAcc, Lock, Preserve)
        {
            MEMW,   8
        }

        CreateByteField (Arg1, Arg2, WVAL)
        MEMW = WVAL /* \WM03.WVAL */
    }

    Method (WM05, 3, NotSerialized)
    {
        OperationRegion (WWPR, SystemMemory, Arg0, 0x04)
        Field (WWPR, ByteAcc, Lock, Preserve)
        {
            MW32,   32
        }

        CreateDWordField (Arg1, Arg2, WVAL)
        MW32 = WVAL /* \WM05.WVAL */
    }

    Method (WM04, 3, NotSerialized)
    {
        OperationRegion (WRPR, SystemMemory, Arg0, One)
        Field (WRPR, ByteAcc, Lock, Preserve)
        {
            MEMR,   8
        }

        CreateByteField (Arg1, Arg2, WVAL)
        WVAL = MEMR /* \WM04.MEMR */
        MEMR = Zero
    }

    Method (WM06, 3, NotSerialized)
    {
        OperationRegion (WRPR, SystemMemory, Arg0, 0x04)
        Field (WRPR, ByteAcc, Lock, Preserve)
        {
            MR32,   32
        }

        CreateDWordField (Arg1, Arg2, WVAL)
        WVAL = MR32 /* \WM06.MR32 */
        MR32 = Zero
    }

    Method (WM07, 2, NotSerialized)
    {
        If ((Arg1 <= 0x0100))
        {
            Local0 = WM00 /* \WM00 */
            Local1 = Zero
            While ((Local1 < Arg1))
            {
                WM05 (Local0, Arg0, Local1)
                Local0 += 0x04
                Local1 += 0x04
            }

            SXX6 (0x9A, Zero)
            Local0 = WM00 /* \WM00 */
            Local1 = Zero
            While ((Local1 < Arg1))
            {
                WM06 (Local0, Arg0, Local1)
                Local0 += 0x04
                Local1 += 0x04
            }
        }

        Return (Arg0)
    }

    Method (WMI, 2, NotSerialized)
    {
        Acquire (WMIS, 0xFFFF)
        If ((WM00 == Zero))
        {
            WM02 ()
        }

        WM07 (Arg0, Arg1)
        Release (WMIS)
        Return (Arg0)
    }

    Scope (_PR)
    {
        Processor (CPU1, 0x01, 0x00000810, 0x06) {}
        Processor (CPU2, 0x02, 0x00000000, 0x00) {}
        Processor (CPU3, 0x03, 0x00000000, 0x00) {}
        Processor (CPU4, 0x04, 0x00000000, 0x00) {}
        Processor (CPU5, 0x05, 0x00000000, 0x00) {}
        Processor (CPU6, 0x06, 0x00000000, 0x00) {}
        Processor (CPU7, 0x07, 0x00000000, 0x00) {}
        Processor (CPU8, 0x08, 0x00000000, 0x00) {}
        Processor (CPU9, 0x09, 0x00000000, 0x00) {}
        Processor (CP10, 0x0A, 0x00000000, 0x00) {}
        Processor (CP11, 0x0B, 0x00000000, 0x00) {}
        Processor (CP12, 0x0C, 0x00000000, 0x00) {}
        Processor (CP13, 0x0D, 0x00000000, 0x00) {}
        Processor (CP14, 0x0E, 0x00000000, 0x00) {}
        Processor (CP15, 0x0F, 0x00000000, 0x00) {}
        Processor (CP16, 0x10, 0x00000000, 0x00) {}
        Processor (CP17, 0x11, 0x00000000, 0x00) {}
        Processor (CP18, 0x12, 0x00000000, 0x00) {}
        Processor (CP19, 0x13, 0x00000000, 0x00) {}
        Processor (CP20, 0x14, 0x00000000, 0x00) {}
        Processor (CP21, 0x15, 0x00000000, 0x00) {}
        Processor (CP22, 0x16, 0x00000000, 0x00) {}
        Processor (CP23, 0x17, 0x00000000, 0x00) {}
        Processor (CP24, 0x18, 0x00000000, 0x00) {}
        Processor (CP25, 0x19, 0x00000000, 0x00) {}
        Processor (CP26, 0x1A, 0x00000000, 0x00) {}
        Processor (CP27, 0x1B, 0x00000000, 0x00) {}
        Processor (CP28, 0x1C, 0x00000000, 0x00) {}
        Processor (CP29, 0x1D, 0x00000000, 0x00) {}
        Processor (CP30, 0x1E, 0x00000000, 0x00) {}
        Processor (CP31, 0x1F, 0x00000000, 0x00) {}
        Processor (CP32, 0x20, 0x00000000, 0x00) {}
    }

    Scope (\)
    {
        Name (SSTX, Zero)
        Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
        {
            PSKM (Arg0)
        }
    }

    Method (_GPE._L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
    {
        Notify (\_SB.AMW0, 0xD0) // Hardware-Specific
        Local0 = GST0 /* \GST0 */
        Local0 &= 0x04
        GST0 = Local0
    }

    Method (_GPE._L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
    {
        GPKM ()
        If (~(SSTX == One))
        {
            Notify (\_SB.VBTN, 0x02) // Device Wake
        }

        Notify (\_SB.PCI0.ISA.KBD, 0x02) // Device Wake
    }

    Method (_GPE._L1B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
    {
        LIDP ^= 0x08
        PME2 |= One
        Notify (\_SB.PCI0.PCI5, 0x02) // Device Wake
    }

    Method (_GPE._L1C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
    {
        LIDP ^= 0x08
        PME2 |= One
        If ((\_SB.PCI0.PCI2.XME2 () == One))
        {
            Notify (\_SB.PCI0.PCI2, 0x02) // Device Wake
        }
        ElseIf ((\_SB.PCI0.PCI3.XME3 () == One))
        {
            Notify (\_SB.PCI0.PCI3, 0x02) // Device Wake
        }
    }

    Method (_GPE._L1D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
    {
        LIDP ^= 0x20
    }

    Method (_GPE._L1F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
    {
        LIDP ^= 0x08
        PME2 |= One
        If ((\_SB.PCI0.PCI4.XME4 () == One))
        {
            Notify (\_SB.PCI0.PCI4, 0x02) // Device Wake
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        If ((Arg0 == 0x04))
        {
            GUSB ()
        }
        ElseIf ((Arg0 == 0x03))
        {
            If ((0x20 & CMRD (0x49)))
            {
                GUSB ()
            }
        }

        CMWR (0x49, (0xDF & CMRD (0x49)))
        If (((PMS2 & One) | ((!HACK () & (GLBT & 
            0x11)) | (!HACK () & (THRP & 0x18)))))
        {
            Notify (\_SB.VBTN, 0x02) // Device Wake
        }

        Return (Zero)
    }

    Scope (_SI)
    {
        Method (_SST, 1, NotSerialized)  // _SST: System Status
        {
            SSTX = Arg0
            If ((Arg0 == 0x03))
            {
                LED2 &= 0xFD
            }

            If ((Arg0 == One))
            {
                LED2 |= 0x02
            }
        }
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Name (_ADR, Zero)  // _ADR: Address
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0D, 
                0x05
            })
            Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
            {
                Return (One)
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                If (HACK ())
                {
                    Return (0x03)
                }
                Else
                {
                    Return (0x02)
                }
            }

            Name (PIC0, Package (0x40)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x02, 
                    LNKG, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x02, 
                    LNKG, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    Zero, 
                    LNKH, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x02, 
                    LNKE, 
                    Zero
                }
            })
            Name (API0, Package (0x40)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x02, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    Zero, 
                    Zero, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x02, 
                    Zero, 
                    0x14
                }
            })
            Device (PCI1)
            {
                Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
                {
                    Return (One)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_S5D, 0, NotSerialized)
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Local0 = 0x00010000
                    Return (Local0)
                }

                Name (_UID, 0x20)  // _UID: Unique ID
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x1C, 
                    0x05
                })
                OperationRegion (RSTS, PCI_Config, 0xB0, 0x04)
                Field (RSTS, ByteAcc, NoLock, Preserve)
                {
                    PID0,   8, 
                    PID1,   8, 
                    PMXS,   8, 
                    PNUS,   8
                }

                Method (XME1, 0, NotSerialized)
                {
                    Local0 = PMXS /* \_SB_.PCI0.PCI1.PMXS */
                    Local0 &= One
                    PMXS = Local0
                    Return (Local0)
                }

                Name (PIC1, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (API1, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x1C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2F
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Local0 = API1 /* \_SB_.PCI0.PCI1.API1 */
                    If (!PICF)
                    {
                        Local0 = PIC1 /* \_SB_.PCI0.PCI1.PIC1 */
                    }

                    Return (Local0)
                }
            }

            Device (PCI2)
            {
                Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
                {
                    Return (One)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_S5D, 0, NotSerialized)
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Local0 = 0x00030000
                    Return (Local0)
                }

                Name (_UID, 0x21)  // _UID: Unique ID
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x1C, 
                    0x05
                })
                OperationRegion (RSTS, PCI_Config, 0xB0, 0x04)
                Field (RSTS, ByteAcc, NoLock, Preserve)
                {
                    PID0,   8, 
                    PID1,   8, 
                    PMXS,   8, 
                    PNUS,   8
                }

                Method (XME2, 0, NotSerialized)
                {
                    Local0 = PMXS /* \_SB_.PCI0.PCI2.PMXS */
                    Local0 &= One
                    PMXS = Local0
                    Return (Local0)
                }

                Name (PIC2, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (API2, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x18
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x23
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x24
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Local0 = API2 /* \_SB_.PCI0.PCI2.API2 */
                    If (!PICF)
                    {
                        Local0 = PIC2 /* \_SB_.PCI0.PCI2.PIC2 */
                    }

                    Return (Local0)
                }
            }

            Device (PCI3)
            {
                Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
                {
                    Return (One)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_S5D, 0, NotSerialized)
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Local0 = 0x00070000
                    Return (Local0)
                }

                Name (_UID, 0x22)  // _UID: Unique ID
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x1C, 
                    0x05
                })
                OperationRegion (RSTS, PCI_Config, 0xB0, 0x04)
                Field (RSTS, ByteAcc, NoLock, Preserve)
                {
                    PID0,   8, 
                    PID1,   8, 
                    PMXS,   8, 
                    PNUS,   8
                }

                Method (XME3, 0, NotSerialized)
                {
                    Local0 = PMXS /* \_SB_.PCI0.PCI3.PMXS */
                    Local0 &= One
                    PMXS = Local0
                    If (Local0)
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Name (PIC3, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (API3, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x1E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x26
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Local0 = API3 /* \_SB_.PCI0.PCI3.API3 */
                    If (!PICF)
                    {
                        Local0 = PIC3 /* \_SB_.PCI0.PCI3.PIC3 */
                    }

                    Return (Local0)
                }
            }

            Device (PCI4)
            {
                Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
                {
                    Return (One)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_S5D, 0, NotSerialized)
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Local0 = 0x001C0000
                    Return (Local0)
                }

                Name (_UID, 0x23)  // _UID: Unique ID
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x1F, 
                    0x05
                })
                OperationRegion (RSTS, PCI_Config, 0x60, 0x04)
                Field (RSTS, ByteAcc, NoLock, Preserve)
                {
                    PID0,   8, 
                    PID1,   8, 
                    PMXS,   8, 
                    PNUS,   8
                }

                Method (XME4, 0, NotSerialized)
                {
                    Local0 = PMXS /* \_SB_.PCI0.PCI4.PMXS */
                    Local0 &= One
                    PMXS = Local0
                    If (Local0)
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Name (PIC4, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (API4, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Local0 = API4 /* \_SB_.PCI0.PCI4.API4 */
                    If (!PICF)
                    {
                        Local0 = PIC4 /* \_SB_.PCI0.PCI4.PIC4 */
                    }

                    Return (Local0)
                }
            }

            Device (PCI5)
            {
                Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
                {
                    Return (One)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_S5D, 0, NotSerialized)
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Local0 = 0x001C0005
                    Return (Local0)
                }

                Name (_UID, 0x24)  // _UID: Unique ID
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x1B, 
                    0x05
                })
                OperationRegion (RSTS, PCI_Config, 0x60, 0x04)
                Field (RSTS, ByteAcc, NoLock, Preserve)
                {
                    PID0,   8, 
                    PID1,   8, 
                    PMXS,   8, 
                    PNUS,   8
                }

                Method (XME5, 0, NotSerialized)
                {
                    Local0 = PMXS /* \_SB_.PCI0.PCI5.PMXS */
                    Local0 &= One
                    PMXS = Local0
                    If (Local0)
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Name (PIC5, Package (0x01)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKB, 
                        Zero
                    }
                })
                Name (API5, Package (0x01)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x11
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Local0 = API5 /* \_SB_.PCI0.PCI5.API5 */
                    If (!PICF)
                    {
                        Local0 = PIC5 /* \_SB_.PCI0.PCI5.PIC5 */
                    }

                    Return (Local0)
                }
            }

            Device (PCI6)
            {
                Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
                {
                    Return (One)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_S5D, 0, NotSerialized)
                {
                    If (HACK ())
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Local0 = 0x001E0000
                    Return (Local0)
                }

                Name (_UID, 0x25)  // _UID: Unique ID
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x05
                })
                Name (PIC6, Package (0x08)
                {
                    Package (0x04)
                    {
                        0x0004FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        Zero, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        One, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        LNKA, 
                        Zero
                    }
                })
                Name (API6, Package (0x08)
                {
                    Package (0x04)
                    {
                        0x0004FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        Zero, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        One, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        Zero, 
                        0x10
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Local0 = API6 /* \_SB_.PCI0.PCI6.API6 */
                    If (!PICF)
                    {
                        Local0 = PIC6 /* \_SB_.PCI0.PCI6.PIC6 */
                    }

                    Return (Local0)
                }
            }
        }
    }

    Scope (\)
    {
        Method (_GPE._L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (~(SSTX == One))
            {
                Notify (\_SB.VBTN, 0x02) // Device Wake
            }

            Sleep (0x14)
            THRP ^= 0x08
            PME2 |= One
            Notify (\_SB.PCI0.USB0, 0x02) // Device Wake
        }

        Method (_GPE._L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (~(SSTX == One))
            {
                Notify (\_SB.VBTN, 0x02) // Device Wake
            }

            Sleep (0x14)
            THRP ^= 0x10
            PME2 |= One
            Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
        }

        Method (_GPE._L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (~(SSTX == One))
            {
                Notify (\_SB.VBTN, 0x02) // Device Wake
            }

            Sleep (0x14)
            GLBT ^= 0x10
            PME2 |= One
            Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
        }

        Method (_GPE._L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (~(SSTX == One))
            {
                Notify (\_SB.VBTN, 0x02) // Device Wake
            }

            Sleep (0x14)
            GLBT ^= 0x40
            PME2 |= One
            Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
        }

        Method (_GPE._L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (~(SSTX == One))
            {
                Notify (\_SB.VBTN, 0x02) // Device Wake
            }

            Sleep (0x14)
            THRP ^= 0x20
            PME2 |= One
            Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
        }

        Method (_GPE._L20, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (~(SSTX == One))
            {
                Notify (\_SB.VBTN, 0x02) // Device Wake
            }

            Sleep (0x14)
            THRP ^= 0x20
            PME2 |= One
            Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
        }

        Method (_GPE._L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Sleep (0x14)
            GLBT ^= 0x20
            PME2 |= One
            Notify (\_SB.PCI0, 0x02) // Device Wake
        }

        Method (_GPE._L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GLBT ^= 0x08
            PME2 |= One
            Notify (\_SB.PCI0.PCI6, 0x02) // Device Wake
        }
    }

    Scope (_SB.PCI0)
    {
        Device (ISA)
        {
            Name (_ADR, 0x001F0000)  // _ADR: Address
            Name (_UID, 0x0A)  // _UID: Unique ID
            OperationRegion (P40C, PCI_Config, 0x60, 0x04)
            OperationRegion (P41C, PCI_Config, 0x68, 0x04)
            Device (MBIO)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (MIO1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x60,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0860,             // Range Minimum
                            0x0860,             // Range Maximum
                            0x01,               // Alignment
                            0xA0,               // Length
                            )
                    })
                    Name (MIO2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x60,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0860,             // Range Minimum
                            0x0860,             // Range Maximum
                            0x01,               // Alignment
                            0xA0,               // Length
                            )
                    })
                    If ((GCKB () | GCMS ()))
                    {
                        Return (MIO1) /* \_SB_.PCI0.ISA_.MBIO._CRS.MIO1 */
                    }
                    Else
                    {
                        Return (MIO2) /* \_SB_.PCI0.ISA_.MBIO._CRS.MIO2 */
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (USB0)
        {
            Name (_ADR, 0x001D0000)  // _ADR: Address
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x03, 
                0x03
            })
            OperationRegion (UPC1, PCI_Config, 0xC1, One)
            Field (UPC1, ByteAcc, NoLock, Preserve)
            {
                LEGK,   8
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (HACK ()) {}
                Else
                {
                    Local0 = LEGK /* \_SB_.PCI0.USB0.LEGK */
                    Local0 &= 0x60
                    Local0 |= 0x20
                    LEGK = Local0
                }

                GUSB ()
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GCUC ())
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
            {
                Return (One)
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                If (HACK ())
                {
                    Return (0x03)
                }
                Else
                {
                    Return (0x02)
                }
            }
        }

        Device (USB1)
        {
            Name (_ADR, 0x001D0001)  // _ADR: Address
            Name (_UID, 0x06)  // _UID: Unique ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x04, 
                0x03
            })
            OperationRegion (UPC1, PCI_Config, 0xC1, One)
            Field (UPC1, ByteAcc, NoLock, Preserve)
            {
                LEGK,   8
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (HACK ()) {}
                Else
                {
                    Local0 = LEGK /* \_SB_.PCI0.USB1.LEGK */
                    Local0 &= 0x60
                    Local0 |= 0x20
                    LEGK = Local0
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GCUC ())
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
            {
                Return (One)
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                If (HACK ())
                {
                    Return (0x03)
                }
                Else
                {
                    Return (0x02)
                }
            }
        }

        Device (USB2)
        {
            Name (_ADR, 0x001D0002)  // _ADR: Address
            Name (_UID, 0x14)  // _UID: Unique ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0C, 
                0x03
            })
            OperationRegion (UPC1, PCI_Config, 0xC1, One)
            Field (UPC1, ByteAcc, NoLock, Preserve)
            {
                LEGK,   8
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (HACK ()) {}
                Else
                {
                    Local0 = LEGK /* \_SB_.PCI0.USB2.LEGK */
                    Local0 &= 0x60
                    Local0 |= 0x20
                    LEGK = Local0
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GCUC ())
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
            {
                Return (One)
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                If (HACK ())
                {
                    Return (0x03)
                }
                Else
                {
                    Return (0x02)
                }
            }
        }

        Device (USB3)
        {
            Name (_ADR, 0x001A0000)  // _ADR: Address
            Name (_UID, 0x15)  // _UID: Unique ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0E, 
                0x03
            })
            OperationRegion (UPC1, PCI_Config, 0xC1, One)
            Field (UPC1, ByteAcc, NoLock, Preserve)
            {
                LEGK,   8
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (HACK ()) {}
                Else
                {
                    Local0 = LEGK /* \_SB_.PCI0.USB3.LEGK */
                    Local0 &= 0x60
                    Local0 |= 0x20
                    LEGK = Local0
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GCUC ())
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
            {
                Return (One)
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                If (HACK ())
                {
                    Return (0x03)
                }
                Else
                {
                    Return (0x02)
                }
            }
        }

        Device (USB4)
        {
            Name (_ADR, 0x001A0001)  // _ADR: Address
            Name (_UID, 0x16)  // _UID: Unique ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x05, 
                0x03
            })
            OperationRegion (UPC1, PCI_Config, 0xC1, One)
            Field (UPC1, ByteAcc, NoLock, Preserve)
            {
                LEGK,   8
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (HACK ()) {}
                Else
                {
                    Local0 = LEGK /* \_SB_.PCI0.USB4.LEGK */
                    Local0 &= 0x60
                    Local0 |= 0x20
                    LEGK = Local0
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GCUC ())
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
            {
                Return (One)
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                If (HACK ())
                {
                    Return (0x03)
                }
                Else
                {
                    Return (0x02)
                }
            }
        }

        Device (USB5)
        {
            Name (_ADR, 0x001A0002)  // _ADR: Address
            Name (_UID, 0x1A)  // _UID: Unique ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x20, 
                0x03
            })
            OperationRegion (UPC1, PCI_Config, 0xC1, One)
            Field (UPC1, ByteAcc, NoLock, Preserve)
            {
                LEGK,   8
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (HACK ()) {}
                Else
                {
                    Local0 = LEGK /* \_SB_.PCI0.USB5.LEGK */
                    Local0 &= 0x60
                    Local0 |= 0x20
                    LEGK = Local0
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GCUC ())
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
            {
                Return (One)
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                If (HACK ())
                {
                    Return (0x03)
                }
                Else
                {
                    Return (0x02)
                }
            }
        }
    }

    Scope (\)
    {
        Name (PICF, Zero)
        Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
        {
            PICF = Arg0
        }
    }

    Scope (_SB.PCI0)
    {
        Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
        {
            Local0 = API0 /* \_SB_.PCI0.API0 */
            If (!PICF)
            {
                Local0 = PIC0 /* \_SB_.PCI0.PIC0 */
            }

            Return (Local0)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            OperationRegion (ORMF, SystemMemory, 0x000FFF6C, 0x04)
            Field (ORMF, WordAcc, NoLock, Preserve)
            {
                ORGP,   16, 
                ORND,   16
            }

            Name (MEMP, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00018000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xF7FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFF980000,         // Range Minimum
                    0xFF980FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00001000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFF97C000,         // Range Minimum
                    0xFF97FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED20000,         // Range Minimum
                    0xFED9FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00080000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            CreateDWordField (MEMP, \_SB.PCI0._CRS._Y00._MIN, PMIN)  // _MIN: Minimum Base Address
            CreateDWordField (MEMP, \_SB.PCI0._CRS._Y00._MAX, PMAX)  // _MAX: Maximum Base Address
            CreateDWordField (MEMP, \_SB.PCI0._CRS._Y00._LEN, PLEN)  // _LEN: Length
            CreateDWordField (MEMP, \_SB.PCI0._CRS._Y01._MIN, BMIN)  // _MIN: Minimum Base Address
            CreateDWordField (MEMP, \_SB.PCI0._CRS._Y01._LEN, BLEN)  // _LEN: Length
            BMIN = (ORGP << 0x04)
            BLEN = (0x00100000 - BMIN) /* \_SB_.PCI0._CRS.BMIN */
            PMIN = 0x000C0000
            PMAX = (BMIN - One)
            PLEN = (BMIN - PMIN) /* \_SB_.PCI0._CRS.PMIN */
            CreateDWordField (MEMP, \_SB.PCI0._CRS._Y02._MIN, MEMM)  // _MIN: Minimum Base Address
            CreateDWordField (MEMP, \_SB.PCI0._CRS._Y02._MAX, MEMA)  // _MAX: Maximum Base Address
            CreateDWordField (MEMP, \_SB.PCI0._CRS._Y02._LEN, MEML)  // _LEN: Length
            MEMM = GTOM ()
            MEML = (MEMA - MEMM) /* \_SB_.PCI0._CRS.MEMM */
            MEML++
            CreateDWordField (MEMP, \_SB.PCI0._CRS._Y03._MIN, UMIN)  // _MIN: Minimum Base Address
            CreateDWordField (MEMP, \_SB.PCI0._CRS._Y03._MAX, UMAX)  // _MAX: Maximum Base Address
            CreateDWordField (MEMP, \_SB.PCI0._CRS._Y03._LEN, ULEN)  // _LEN: Length
            If (GCUC ()) {}
            Else
            {
                UMIN = Zero
                UMAX = Zero
                ULEN = Zero
            }

            Return (MEMP) /* \_SB_.PCI0._CRS.MEMP */
        }
    }

    Scope (_SB.PCI0.ISA)
    {
        Device (DMA)
        {
            Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (DMAB, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0080,             // Range Minimum
                        0x0080,             // Range Maximum
                        0x01,               // Alignment
                        0x20,               // Length
                        )
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x20,               // Length
                        )
                    IO (Decode16,
                        0x00C0,             // Range Minimum
                        0x00C0,             // Range Maximum
                        0x01,               // Alignment
                        0x20,               // Length
                        )
                    DMA (Compatibility, NotBusMaster, Transfer16, )
                        {4}
                })
                Return (DMAB) /* \_SB_.PCI0.ISA_.DMA_._CRS.DMAB */
            }
        }
    }

    Scope (_SB.PCI0.ISA)
    {
        Device (FPU)
        {
            Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (FPUB, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x00F0,             // Range Minimum
                        0x00F0,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                    IRQNoFlags ()
                        {13}
                })
                Return (FPUB) /* \_SB_.PCI0.ISA_.FPU_._CRS.FPUB */
            }
        }
    }

    Scope (_SB.PCI0.ISA)
    {
        Device (PIC)
        {
            Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (PICB, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0020,             // Range Minimum
                        0x0020,             // Range Maximum
                        0x01,               // Alignment
                        0x20,               // Length
                        )
                    IO (Decode16,
                        0x00A0,             // Range Minimum
                        0x00A0,             // Range Maximum
                        0x01,               // Alignment
                        0x20,               // Length
                        )
                    IO (Decode16,
                        0x04D0,             // Range Minimum
                        0x04D0,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    IRQNoFlags ()
                        {2}
                })
                Return (PICB) /* \_SB_.PCI0.ISA_.PIC_._CRS.PICB */
            }
        }
    }

    Scope (_SB.PCI0.ISA)
    {
        Device (SPK)
        {
            Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SPKB, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0061,             // Range Minimum
                        0x0061,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                })
                Return (SPKB) /* \_SB_.PCI0.ISA_.SPK_._CRS.SPKB */
            }
        }
    }

    Scope (_SB.PCI0.ISA)
    {
        Device (RTC)
        {
            Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RTCB, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0070,             // Range Minimum
                        0x0070,             // Range Maximum
                        0x01,               // Alignment
                        0x10,               // Length
                        )
                    IRQNoFlags ()
                        {8}
                })
                Return (RTCB) /* \_SB_.PCI0.ISA_.RTC_._CRS.RTCB */
            }
        }
    }

    Scope (_SB.PCI0.ISA)
    {
        Device (TMR)
        {
            Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (TMRB, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0040,             // Range Minimum
                        0x0040,             // Range Maximum
                        0x01,               // Alignment
                        0x20,               // Length
                        )
                    IRQNoFlags ()
                        {0}
                })
                Return (TMRB) /* \_SB_.PCI0.ISA_.TMR_._CRS.TMRB */
            }
        }
    }

    Scope (_SB)
    {
        Field (PCI0.ISA.P40C, ByteAcc, NoLock, Preserve)
        {
            PRQ0,   8, 
            PRQ1,   8, 
            PRQ2,   8, 
            PRQ3,   8
        }

        Field (PCI0.ISA.P41C, ByteAcc, NoLock, Preserve)
        {
            PRQ4,   8, 
            PRQ5,   8, 
            PRQ6,   8, 
            PRQ7,   8
        }

        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0C)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,9,10,11,12,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x0B
                If (Local1 = (0x80 & PRQ0) /* \_SB_.PRQ0 */)
                {
                    Local0 = 0x09
                }

                Return (Local0)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ0 |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (PRR0, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {4}
                })
                CreateWordField (PRR0, One, IQR)
                Local0 = PRQ0 /* \_SB_.PRQ0 */
                If ((Local0 >= 0x80))
                {
                    IQR = Zero
                }
                Else
                {
                    IQR = (One << Local0)
                }

                Return (PRR0) /* \_SB_.LNKA._CRS.PRR0 */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IQR)
                FindSetRightBit (IQR, Local0)
                Local0--
                PRQ0 = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0D)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,9,10,11,12,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x0B
                If (Local1 = (0x80 & PRQ1) /* \_SB_.PRQ1 */)
                {
                    Local0 = 0x09
                }

                Return (Local0)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ1 |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (PRR1, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {4}
                })
                CreateWordField (PRR1, One, IQR)
                Local0 = PRQ1 /* \_SB_.PRQ1 */
                If ((Local0 >= 0x80))
                {
                    IQR = Zero
                }
                Else
                {
                    IQR = (One << Local0)
                }

                Return (PRR1) /* \_SB_.LNKB._CRS.PRR1 */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IQR)
                FindSetRightBit (IQR, Local0)
                Local0--
                PRQ1 = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0E)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,9,10,11,12,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x0B
                If (Local1 = (0x80 & PRQ2) /* \_SB_.PRQ2 */)
                {
                    Local0 = 0x09
                }

                Return (Local0)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ2 |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (PRR2, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {4}
                })
                CreateWordField (PRR2, One, IQR)
                Local0 = PRQ2 /* \_SB_.PRQ2 */
                If ((Local0 >= 0x80))
                {
                    IQR = Zero
                }
                Else
                {
                    IQR = (One << Local0)
                }

                Return (PRR2) /* \_SB_.LNKC._CRS.PRR2 */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IQR)
                FindSetRightBit (IQR, Local0)
                Local0--
                PRQ2 = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0F)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,9,10,11,12,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x0B
                If (Local1 = (0x80 & PRQ3) /* \_SB_.PRQ3 */)
                {
                    Local0 = 0x09
                }

                Return (Local0)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ3 |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (PRR3, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {4}
                })
                CreateWordField (PRR3, One, IQR)
                Local0 = PRQ3 /* \_SB_.PRQ3 */
                If ((Local0 >= 0x80))
                {
                    IQR = Zero
                }
                Else
                {
                    IQR = (One << Local0)
                }

                Return (PRR3) /* \_SB_.LNKD._CRS.PRR3 */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IQR)
                FindSetRightBit (IQR, Local0)
                Local0--
                PRQ3 = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x10)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,9,10,11,12,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x0B
                If (Local1 = (0x80 & PRQ4) /* \_SB_.PRQ4 */)
                {
                    Local0 = 0x09
                }

                Return (Local0)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ4 |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (PRR4, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {4}
                })
                CreateWordField (PRR4, One, IQR)
                Local0 = PRQ4 /* \_SB_.PRQ4 */
                If ((Local0 >= 0x80))
                {
                    IQR = Zero
                }
                Else
                {
                    IQR = (One << Local0)
                }

                Return (PRR4) /* \_SB_.LNKE._CRS.PRR4 */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IQR)
                FindSetRightBit (IQR, Local0)
                Local0--
                PRQ4 = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x11)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,9,10,11,12,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x0B
                If (Local1 = (0x80 & PRQ5) /* \_SB_.PRQ5 */)
                {
                    Local0 = 0x09
                }

                Return (Local0)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ5 |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (PRR5, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {4}
                })
                CreateWordField (PRR5, One, IQR)
                Local0 = PRQ5 /* \_SB_.PRQ5 */
                If ((Local0 >= 0x80))
                {
                    IQR = Zero
                }
                Else
                {
                    IQR = (One << Local0)
                }

                Return (PRR5) /* \_SB_.LNKF._CRS.PRR5 */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IQR)
                FindSetRightBit (IQR, Local0)
                Local0--
                PRQ5 = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x12)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,9,10,11,12,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x0B
                If (Local1 = (0x80 & PRQ6) /* \_SB_.PRQ6 */)
                {
                    Local0 = 0x09
                }

                Return (Local0)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ6 |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (PRR6, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {4}
                })
                CreateWordField (PRR6, One, IQR)
                Local0 = PRQ6 /* \_SB_.PRQ6 */
                If ((Local0 >= 0x80))
                {
                    IQR = Zero
                }
                Else
                {
                    IQR = (One << Local0)
                }

                Return (PRR6) /* \_SB_.LNKG._CRS.PRR6 */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IQR)
                FindSetRightBit (IQR, Local0)
                Local0--
                PRQ6 = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x13)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,9,10,11,12,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x0B
                If (Local1 = (0x80 & PRQ7) /* \_SB_.PRQ7 */)
                {
                    Local0 = 0x09
                }

                Return (Local0)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ7 |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (PRR7, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {4}
                })
                CreateWordField (PRR7, One, IQR)
                Local0 = PRQ7 /* \_SB_.PRQ7 */
                If ((Local0 >= 0x80))
                {
                    IQR = Zero
                }
                Else
                {
                    IQR = (One << Local0)
                }

                Return (PRR7) /* \_SB_.LNKH._CRS.PRR7 */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IQR)
                FindSetRightBit (IQR, Local0)
                Local0--
                PRQ7 = Local0
            }
        }
    }

    Scope (_SB)
    {
        Device (HPET)
        {
            Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (HBAB, ResourceTemplate ()
                {
                    Memory32Fixed (ReadOnly,
                        0xFED00000,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (HBAB) /* \_SB_.HPET._CRS.HBAB */
            }
        }
    }

    Scope (\)
    {
        OperationRegion (WENX, SystemIO, 0x0C0A, 0x06)
        Field (WENX, ByteAcc, NoLock, Preserve)
        {
            WEN1,   8, 
            WEN2,   8, 
            WEN3,   8, 
            WEN4,   8, 
            WEN5,   8, 
            WEN6,   8
        }

        OperationRegion (WSTX, SystemIO, 0x0C00, 0x0A)
        Field (WSTX, ByteAcc, NoLock, Preserve)
        {
            WST0,   8, 
            PMEJ,   8, 
            PENA,   8, 
            PENJ,   8, 
            WST1,   8, 
            WST2,   8, 
            WST3,   8, 
            WST4,   8, 
            WST5,   8, 
            WST6,   8
        }

        OperationRegion (SGPX, SystemIO, 0x0C4B, 0x06)
        Field (SGPX, ByteAcc, NoLock, Preserve)
        {
            SGP1,   8, 
            SGP2,   8, 
            SGP3,   8, 
            SGP4,   8, 
            SGP5,   8, 
            SGP6,   8
        }

        OperationRegion (LEDX, SystemIO, 0x0C5D, 0x02)
        Field (LEDX, ByteAcc, NoLock, Preserve)
        {
            LED1,   8, 
            LED2,   8
        }

        Method (PSKM, 1, NotSerialized)
        {
            If (((Arg0 == 0x03) | (Arg0 == One)))
            {
                SIOI = 0x55
                SIOI = 0x07
                SIOD = 0x07
                SIOI = 0xF0
                Local0 = SIOD /* \SIOD */
                SIOD = (Local0 | 0x60)
                SIOI = 0xAA
                Local0 = WST1 /* \WST1 */
                WST1 = (Local0 & 0x18)
                Local0 = GSTS /* \GSTS */
                GSTS = (Local0 & One)
                Local0 = WEN1 /* \WEN1 */
                WEN1 = (Local0 | 0x18)
            }
        }

        Method (GPKM, 0, NotSerialized)
        {
            Local0 = WEN1 /* \WEN1 */
            WEN1 = (Local0 & 0xE7)
            Local0 = WST1 /* \WST1 */
            WST1 = (Local0 & 0x18)
            Local0 = GSTS /* \GSTS */
            GSTS = (Local0 & One)
        }
    }

    Scope (_SB.PCI0.ISA)
    {
        OperationRegion (NSIO, SystemIO, 0x2E, 0x02)
        Field (NSIO, ByteAcc, NoLock, Preserve)
        {
            INDX,   8, 
            DATA,   8
        }

        IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            CFG,    8, 
            Offset (0x07), 
            LDN,    8, 
            Offset (0x20), 
            SIID,   8, 
            Offset (0x30), 
            ACTR,   8, 
            Offset (0x60), 
            IOAH,   8, 
            IOAL,   8, 
            Offset (0x70), 
            INTR,   8, 
            Offset (0x74), 
            DMCH,   8, 
            Offset (0xF0), 
            OPT1,   8, 
            OPT2,   8, 
            OPT3,   8
        }

        OperationRegion (COM, PCI_Config, 0x80, One)
        Field (COM, ByteAcc, NoLock, Preserve)
        {
            NSCA,   3, 
                ,   1, 
            NSCB,   3, 
            Offset (0x01)
        }

        OperationRegion (FDPA, PCI_Config, 0x81, One)
        Field (FDPA, ByteAcc, NoLock, Preserve)
        {
            LPTO,   2, 
                ,   2, 
            FDDC,   1, 
            Offset (0x01)
        }

        Mutex (MTX, 0x01)
        Method (SIOD, 1, NotSerialized)
        {
            CSIO (0x55)
            LDN = Arg0
            CSIO (0xAA)
        }

        Method (CSIO, 1, NotSerialized)
        {
            INDX = Arg0
        }

        Device (FDC)
        {
            Name (_HID, EisaId ("PNP0700"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Name (RET, Zero)
                Acquire (MTX, 0xFFFF)
                SIOD (Zero)
                If (GCFD ())
                {
                    CSIO (0x55)
                    If (ACTR)
                    {
                        CSIO (0xAA)
                        RET = 0x0F
                    }
                    Else
                    {
                        CSIO (0xAA)
                        RET = 0x0D
                    }
                }
                Else
                {
                    CSIO (0xAA)
                    RET = Zero
                }

                Release (MTX)
                Return (RET) /* \_SB_.PCI0.ISA_.FDC_._STA.RET_ */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Acquire (MTX, 0xFFFF)
                SIOD (Zero)
                CSIO (0x55)
                INTR = Zero
                ACTR = Zero
                CSIO (0xAA)
                Release (MTX)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (FDB0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F0,             // Range Minimum
                        0x03F0,             // Range Maximum
                        0x08,               // Alignment
                        0x06,               // Length
                        _Y04)
                    IO (Decode16,
                        0x03F7,             // Range Minimum
                        0x03F7,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        _Y05)
                    IRQNoFlags (_Y06)
                        {6}
                    DMA (Compatibility, NotBusMaster, Transfer8, _Y07)
                        {2}
                })
                CreateByteField (FDB0, \_SB.PCI0.ISA.FDC._CRS._Y04._MIN, IOL0)  // _MIN: Minimum Base Address
                CreateByteField (FDB0, 0x03, IOH0)
                CreateByteField (FDB0, \_SB.PCI0.ISA.FDC._CRS._Y04._MAX, IOL1)  // _MAX: Maximum Base Address
                CreateByteField (FDB0, 0x05, IOH1)
                CreateByteField (FDB0, \_SB.PCI0.ISA.FDC._CRS._Y05._MIN, I2L0)  // _MIN: Minimum Base Address
                CreateByteField (FDB0, 0x0B, I2H0)
                CreateByteField (FDB0, \_SB.PCI0.ISA.FDC._CRS._Y05._MAX, I2L1)  // _MAX: Maximum Base Address
                CreateByteField (FDB0, 0x0D, I2H1)
                CreateWordField (FDB0, \_SB.PCI0.ISA.FDC._CRS._Y06._INT, IQR)  // _INT: Interrupts
                CreateByteField (FDB0, \_SB.PCI0.ISA.FDC._CRS._Y07._DMA, DAM)  // _DMA: Direct Memory Access
                Acquire (MTX, 0xFFFF)
                SIOD (Zero)
                CSIO (0x55)
                IOH0 = IOAH /* \_SB_.PCI0.ISA_.IOAH */
                IOH1 = IOAH /* \_SB_.PCI0.ISA_.IOAH */
                IOL0 = IOAL /* \_SB_.PCI0.ISA_.IOAL */
                IOL1 = IOAL /* \_SB_.PCI0.ISA_.IOAL */
                I2H0 = IOAH /* \_SB_.PCI0.ISA_.IOAH */
                I2H1 = IOAH /* \_SB_.PCI0.ISA_.IOAH */
                I2L0 = (IOAL + 0x07)
                I2L1 = (IOAL + 0x07)
                IQR = (One << INTR) /* \_SB_.PCI0.ISA_.INTR */
                DAM = (One << DMCH) /* \_SB_.PCI0.ISA_.DMCH */
                CSIO (0xAA)
                Release (MTX)
                Return (FDB0) /* \_SB_.PCI0.ISA_.FDC_._CRS.FDB0 */
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Name (FDB1, ResourceTemplate ()
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03F0,             // Range Minimum
                            0x03F0,             // Range Maximum
                            0x08,               // Alignment
                            0x06,               // Length
                            )
                        IO (Decode16,
                            0x03F7,             // Range Minimum
                            0x03F7,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {6}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {2}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03F0,             // Range Minimum
                            0x03F0,             // Range Maximum
                            0x08,               // Alignment
                            0x06,               // Length
                            )
                        IO (Decode16,
                            0x03F7,             // Range Minimum
                            0x03F7,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,6,7,12}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {1,2,3}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0370,             // Range Minimum
                            0x0370,             // Range Maximum
                            0x08,               // Alignment
                            0x06,               // Length
                            )
                        IO (Decode16,
                            0x0377,             // Range Minimum
                            0x0377,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,6,7,12}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {1,2,3}
                    }
                    EndDependentFn ()
                })
                Return (FDB1) /* \_SB_.PCI0.ISA_.FDC_._PRS.FDB1 */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateByteField (Arg0, 0x02, IOLO)
                CreateByteField (Arg0, 0x03, IOHI)
                CreateWordField (Arg0, 0x11, IQR)
                CreateByteField (Arg0, 0x14, DAM)
                Acquire (MTX, 0xFFFF)
                SIOD (Zero)
                CSIO (0x55)
                IOAL = IOLO /* \_SB_.PCI0.ISA_.FDC_._SRS.IOLO */
                IOAH = IOHI /* \_SB_.PCI0.ISA_.FDC_._SRS.IOHI */
                CSIO (0xAA)
                If ((IOLO == 0x70))
                {
                    FDDC = One
                }

                If ((IOLO == 0xF0))
                {
                    FDDC = Zero
                }

                CSIO (0x55)
                FindSetRightBit (IQR, Local0)
                INTR = (Local0 - One)
                FindSetRightBit (DAM, Local0)
                DMCH = (Local0 - One)
                ACTR = One
                CSIO (0xAA)
                Release (MTX)
            }
        }

        Device (KBD)
        {
            Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Name (RET, Zero)
                RET = Zero
                If (GCKB ())
                {
                    RET = 0x0F
                }

                Return (RET) /* \_SB_.PCI0.ISA_.KBD_._STA.RET_ */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (KBDB, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0060,             // Range Minimum
                        0x0060,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0064,             // Range Minimum
                        0x0064,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                    IRQNoFlags ()
                        {1}
                })
                Return (KBDB) /* \_SB_.PCI0.ISA_.KBD_._CRS.KBDB */
            }
        }

        Device (MOU)
        {
            Name (_HID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Name (RET, Zero)
                RET = Zero
                If (GCON ())
                {
                    If (GCMS ())
                    {
                        RET = 0x0F
                    }
                }

                Return (RET) /* \_SB_.PCI0.ISA_.MOU_._STA.RET_ */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (MOUB, ResourceTemplate ()
                {
                    IRQNoFlags ()
                        {12}
                })
                Name (MOKB, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0060,             // Range Minimum
                        0x0060,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0064,             // Range Minimum
                        0x0064,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                    IRQNoFlags ()
                        {12}
                })
                If (GCKB ())
                {
                    Return (MOUB) /* \_SB_.PCI0.ISA_.MOU_._CRS.MOUB */
                }
                Else
                {
                    Return (MOKB) /* \_SB_.PCI0.ISA_.MOU_._CRS.MOKB */
                }
            }
        }

        Device (PRT)
        {
            Name (_HID, EisaId ("PNP0401") /* ECP Parallel Port */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Name (RET, Zero)
                Acquire (MTX, 0xFFFF)
                SIOD (0x03)
                If (GCPP ())
                {
                    CSIO (0x55)
                    If (ACTR)
                    {
                        CSIO (0xAA)
                        RET = 0x0F
                    }
                    Else
                    {
                        CSIO (0xAA)
                        RET = 0x0D
                    }
                }
                Else
                {
                    CSIO (0xAA)
                    RET = Zero
                }

                Release (MTX)
                Return (RET) /* \_SB_.PCI0.ISA_.PRT_._STA.RET_ */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Acquire (MTX, 0xFFFF)
                SIOD (0x03)
                CSIO (0x55)
                INTR = Zero
                DMCH = 0x04
                ACTR = Zero
                CSIO (0xAA)
                Release (MTX)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (PTB0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0378,             // Range Minimum
                        0x0378,             // Range Maximum
                        0x08,               // Alignment
                        0x08,               // Length
                        _Y08)
                    IO (Decode16,
                        0x0778,             // Range Minimum
                        0x0778,             // Range Maximum
                        0x08,               // Alignment
                        0x08,               // Length
                        _Y09)
                    IRQNoFlags (_Y0A)
                        {7}
                    DMA (Compatibility, NotBusMaster, Transfer8, _Y0B)
                        {}
                })
                CreateByteField (PTB0, \_SB.PCI0.ISA.PRT._CRS._Y08._MIN, IOL0)  // _MIN: Minimum Base Address
                CreateByteField (PTB0, 0x03, IOH0)
                CreateByteField (PTB0, \_SB.PCI0.ISA.PRT._CRS._Y08._MAX, IOL1)  // _MAX: Maximum Base Address
                CreateByteField (PTB0, 0x05, IOH1)
                CreateByteField (PTB0, \_SB.PCI0.ISA.PRT._CRS._Y08._ALN, LALN)  // _ALN: Alignment
                CreateByteField (PTB0, \_SB.PCI0.ISA.PRT._CRS._Y08._LEN, LLEN)  // _LEN: Length
                CreateByteField (PTB0, \_SB.PCI0.ISA.PRT._CRS._Y09._MIN, I2L0)  // _MIN: Minimum Base Address
                CreateByteField (PTB0, 0x0B, I2H0)
                CreateByteField (PTB0, \_SB.PCI0.ISA.PRT._CRS._Y09._MAX, I2L1)  // _MAX: Maximum Base Address
                CreateByteField (PTB0, 0x0D, I2H1)
                CreateByteField (PTB0, \_SB.PCI0.ISA.PRT._CRS._Y09._ALN, HALN)  // _ALN: Alignment
                CreateByteField (PTB0, \_SB.PCI0.ISA.PRT._CRS._Y09._LEN, HLEN)  // _LEN: Length
                CreateWordField (PTB0, \_SB.PCI0.ISA.PRT._CRS._Y0A._INT, IQR)  // _INT: Interrupts
                CreateByteField (PTB0, \_SB.PCI0.ISA.PRT._CRS._Y0B._DMA, DAM)  // _DMA: Direct Memory Access
                Acquire (MTX, 0xFFFF)
                SIOD (0x03)
                CSIO (0x55)
                IOH0 = IOAH /* \_SB_.PCI0.ISA_.IOAH */
                IOH1 = IOAH /* \_SB_.PCI0.ISA_.IOAH */
                IOL0 = IOAL /* \_SB_.PCI0.ISA_.IOAL */
                IOL1 = IOAL /* \_SB_.PCI0.ISA_.IOAL */
                I2H0 = (IOAH + 0x04)
                I2H1 = (IOAH + 0x04)
                I2L0 = IOAL /* \_SB_.PCI0.ISA_.IOAL */
                I2L1 = IOAL /* \_SB_.PCI0.ISA_.IOAL */
                IQR = (One << INTR) /* \_SB_.PCI0.ISA_.INTR */
                DAM = (One << DMCH) /* \_SB_.PCI0.ISA_.DMCH */
                If ((IOL0 == 0xBC))
                {
                    LALN = 0x04
                    LLEN = 0x04
                    HALN = 0x04
                    HLEN = 0x04
                }

                If ((DMCH == 0x04))
                {
                    DAM = Zero
                }

                If ((INTR == Zero))
                {
                    IQR = Zero
                }

                CSIO (0xAA)
                Release (MTX)
                Return (PTB0) /* \_SB_.PCI0.ISA_.PRT_._CRS.PTB0 */
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Name (PTB1, ResourceTemplate ()
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0378,             // Range Minimum
                            0x0378,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0778,             // Range Minimum
                            0x0778,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {7}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0278,             // Range Minimum
                            0x0278,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0678,             // Range Minimum
                            0x0678,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {5}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0378,             // Range Minimum
                            0x0378,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0778,             // Range Minimum
                            0x0778,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,6,7,12}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0378,             // Range Minimum
                            0x0378,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0778,             // Range Minimum
                            0x0778,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,6,7,12}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {1,2,3}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0278,             // Range Minimum
                            0x0278,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0678,             // Range Minimum
                            0x0678,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,6,7,12}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0278,             // Range Minimum
                            0x0278,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0678,             // Range Minimum
                            0x0678,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3,4,5,6,7,12}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {1,2,3}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0378,             // Range Minimum
                            0x0378,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0778,             // Range Minimum
                            0x0778,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x0278,             // Range Minimum
                            0x0278,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0678,             // Range Minimum
                            0x0678,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03BC,             // Range Minimum
                            0x03BC,             // Range Maximum
                            0x04,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x07BC,             // Range Minimum
                            0x07BC,             // Range Maximum
                            0x04,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03BC,             // Range Minimum
                            0x03BC,             // Range Maximum
                            0x04,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x07BC,             // Range Minimum
                            0x07BC,             // Range Maximum
                            0x04,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {7}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {}
                    }
                    EndDependentFn ()
                })
                Return (PTB1) /* \_SB_.PCI0.ISA_.PRT_._PRS.PTB1 */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateByteField (Arg0, 0x02, IOLO)
                CreateByteField (Arg0, 0x03, IOHI)
                CreateWordField (Arg0, 0x11, IQR)
                CreateByteField (Arg0, 0x14, DAM)
                Acquire (MTX, 0xFFFF)
                SIOD (0x03)
                CSIO (0x55)
                IOAL = IOLO /* \_SB_.PCI0.ISA_.PRT_._SRS.IOLO */
                IOAH = IOHI /* \_SB_.PCI0.ISA_.PRT_._SRS.IOHI */
                If ((IOLO == 0xBC))
                {
                    LPTO = 0x02
                }

                If ((IOLO == 0x78))
                {
                    If ((IOHI == 0x02))
                    {
                        LPTO = One
                    }

                    If ((IOHI == 0x03))
                    {
                        LPTO = Zero
                    }
                }

                If ((IQR == Zero))
                {
                    INTR = Zero
                }
                Else
                {
                    FindSetRightBit (IQR, Local0)
                    INTR = (Local0 - One)
                }

                If ((DAM == Zero))
                {
                    DMCH = 0x04
                }
                Else
                {
                    FindSetRightBit (DAM, Local0)
                    DMCH = (Local0 - One)
                }

                ACTR = One
                CSIO (0xAA)
                Release (MTX)
            }
        }

        Device (COMA)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Name (RET, Zero)
                Acquire (MTX, 0xFFFF)
                SIOD (0x04)
                If (GCS1 ())
                {
                    CSIO (0x55)
                    If (ACTR)
                    {
                        CSIO (0xAA)
                        RET = 0x0F
                    }
                    Else
                    {
                        CSIO (0xAA)
                        RET = 0x0D
                    }
                }
                Else
                {
                    CSIO (0xAA)
                    RET = Zero
                }

                Release (MTX)
                Return (RET) /* \_SB_.PCI0.ISA_.COMA._STA.RET_ */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Acquire (MTX, 0xFFFF)
                SIOD (0x04)
                CSIO (0x55)
                INTR = Zero
                ACTR = Zero
                CSIO (0xAA)
                Release (MTX)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (CMA0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x08,               // Alignment
                        0x08,               // Length
                        _Y0C)
                    IRQNoFlags (_Y0D)
                        {4}
                })
                CreateByteField (CMA0, \_SB.PCI0.ISA.COMA._CRS._Y0C._MIN, IOL0)  // _MIN: Minimum Base Address
                CreateByteField (CMA0, 0x03, IOH0)
                CreateByteField (CMA0, \_SB.PCI0.ISA.COMA._CRS._Y0C._MAX, IOL1)  // _MAX: Maximum Base Address
                CreateByteField (CMA0, 0x05, IOH1)
                CreateWordField (CMA0, \_SB.PCI0.ISA.COMA._CRS._Y0D._INT, IQR)  // _INT: Interrupts
                Acquire (MTX, 0xFFFF)
                SIOD (0x04)
                CSIO (0x55)
                IOL0 = IOAL /* \_SB_.PCI0.ISA_.IOAL */
                IOL1 = IOAL /* \_SB_.PCI0.ISA_.IOAL */
                IOH0 = IOAH /* \_SB_.PCI0.ISA_.IOAH */
                IOH1 = IOAH /* \_SB_.PCI0.ISA_.IOAH */
                IQR = (One << INTR) /* \_SB_.PCI0.ISA_.INTR */
                CSIO (0xAA)
                Release (MTX)
                Return (CMA0) /* \_SB_.PCI0.ISA_.COMA._CRS.CMA0 */
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Name (CMA1, ResourceTemplate ()
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03F8,             // Range Minimum
                            0x03F8,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {4}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03E8,             // Range Minimum
                            0x03E8,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {4}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02F8,             // Range Minimum
                            0x02F8,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02E8,             // Range Minimum
                            0x02E8,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3}
                    }
                    EndDependentFn ()
                })
                Return (CMA1) /* \_SB_.PCI0.ISA_.COMA._PRS.CMA1 */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateByteField (Arg0, 0x02, IOLO)
                CreateByteField (Arg0, 0x03, IOHI)
                CreateWordField (Arg0, 0x09, IQR)
                Acquire (MTX, 0xFFFF)
                SIOD (0x04)
                CSIO (0x55)
                IOAL = IOLO /* \_SB_.PCI0.ISA_.COMA._SRS.IOLO */
                IOAH = IOHI /* \_SB_.PCI0.ISA_.COMA._SRS.IOHI */
                FindSetRightBit (IQR, Local0)
                INTR = (Local0 - One)
                If ((IOHI == 0x03))
                {
                    If ((IOLO == 0xF8))
                    {
                        NSCA = Zero
                    }

                    If ((IOLO == 0xE8))
                    {
                        NSCA = 0x07
                    }
                }

                If ((IOHI == 0x02))
                {
                    If ((IOLO == 0xF8))
                    {
                        NSCA = One
                    }

                    If ((IOLO == 0xE8))
                    {
                        NSCA = 0x05
                    }
                }

                ACTR = One
                CSIO (0xAA)
                Release (MTX)
            }
        }

        Device (COMB)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Name (RET, Zero)
                Acquire (MTX, 0xFFFF)
                SIOD (0x05)
                If (GCS2 ())
                {
                    CSIO (0x55)
                    If (ACTR)
                    {
                        CSIO (0xAA)
                        RET = 0x0F
                    }
                    Else
                    {
                        CSIO (0xAA)
                        RET = 0x0D
                    }
                }
                Else
                {
                    CSIO (0xAA)
                    RET = Zero
                }

                Release (MTX)
                Return (RET) /* \_SB_.PCI0.ISA_.COMB._STA.RET_ */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Acquire (MTX, 0xFFFF)
                SIOD (0x05)
                CSIO (0x55)
                INTR = Zero
                Local0 = OPT1 /* \_SB_.PCI0.ISA_.OPT1 */
                Local0 |= 0x20
                OPT1 = Local0
                ACTR = Zero
                CSIO (0xAA)
                Release (MTX)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (CMB0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x08,               // Alignment
                        0x08,               // Length
                        _Y0E)
                    IRQNoFlags (_Y0F)
                        {4}
                })
                CreateByteField (CMB0, \_SB.PCI0.ISA.COMB._CRS._Y0E._MIN, IOL0)  // _MIN: Minimum Base Address
                CreateByteField (CMB0, 0x03, IOH0)
                CreateByteField (CMB0, \_SB.PCI0.ISA.COMB._CRS._Y0E._MAX, IOL1)  // _MAX: Maximum Base Address
                CreateByteField (CMB0, 0x05, IOH1)
                CreateWordField (CMB0, \_SB.PCI0.ISA.COMB._CRS._Y0F._INT, IQR)  // _INT: Interrupts
                Acquire (MTX, 0xFFFF)
                SIOD (0x05)
                CSIO (0x55)
                IOL0 = IOAL /* \_SB_.PCI0.ISA_.IOAL */
                IOL1 = IOAL /* \_SB_.PCI0.ISA_.IOAL */
                IOH0 = IOAH /* \_SB_.PCI0.ISA_.IOAH */
                IOH1 = IOAH /* \_SB_.PCI0.ISA_.IOAH */
                IQR = (One << INTR) /* \_SB_.PCI0.ISA_.INTR */
                CSIO (0xAA)
                Release (MTX)
                Return (CMB0) /* \_SB_.PCI0.ISA_.COMB._CRS.CMB0 */
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Name (CMB1, ResourceTemplate ()
                {
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02F8,             // Range Minimum
                            0x02F8,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x02E8,             // Range Minimum
                            0x02E8,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {3}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03F8,             // Range Minimum
                            0x03F8,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {4}
                    }
                    StartDependentFnNoPri ()
                    {
                        IO (Decode16,
                            0x03E8,             // Range Minimum
                            0x03E8,             // Range Maximum
                            0x08,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {4}
                    }
                    EndDependentFn ()
                })
                Return (CMB1) /* \_SB_.PCI0.ISA_.COMB._PRS.CMB1 */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateByteField (Arg0, 0x02, IOLO)
                CreateByteField (Arg0, 0x03, IOHI)
                CreateWordField (Arg0, 0x09, IQR)
                Acquire (MTX, 0xFFFF)
                SIOD (0x05)
                CSIO (0x55)
                IOAL = IOLO /* \_SB_.PCI0.ISA_.COMB._SRS.IOLO */
                IOAH = IOHI /* \_SB_.PCI0.ISA_.COMB._SRS.IOHI */
                FindSetRightBit (IQR, Local0)
                INTR = (Local0 - One)
                If ((IOHI == 0x03))
                {
                    If ((IOLO == 0xF8))
                    {
                        NSCB = Zero
                    }

                    If ((IOLO == 0xE8))
                    {
                        NSCB = 0x07
                    }
                }

                If ((IOHI == 0x02))
                {
                    If ((IOLO == 0xF8))
                    {
                        NSCB = One
                    }

                    If ((IOLO == 0xE8))
                    {
                        NSCB = 0x05
                    }
                }

                ACTR = One
                Local0 = OPT1 /* \_SB_.PCI0.ISA_.OPT1 */
                Local0 &= 0xDF
                OPT1 = Local0
                CSIO (0xAA)
                Release (MTX)
            }
        }
    }

    Scope (_SB.PCI0.ISA)
    {
        Device (TPM)
        {
            Name (_HID, EisaId ("PNP0C31"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GTPM ())
                {
                    Return (Zero)
                }

                If (GCTP ())
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If (GTPM ())
                {
                    Return (Zero)
                }

                If (GCTP ())
                {
                    Return (ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED40000,         // Address Base
                            0x00005000,         // Address Length
                            )
                        IO (Decode16,
                            0x0CB0,             // Range Minimum
                            0x0CB0,             // Range Maximum
                            0x08,               // Alignment
                            0x10,               // Length
                            )
                    })
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((ToBuffer (Arg0) == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                    _T_0 = ToInteger (Arg2)
                    If ((_T_0 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                             // ?
                        })
                    }
                    ElseIf ((_T_0 == One))
                    {
                        Return ("1.0")
                    }
                    ElseIf ((_T_0 == 0x02))
                    {
                        Local0 = ToInteger (Arg3)
                        Local0 &= 0x0F
                        CMWR (0x7E, Local0)
                        Return (Zero)
                    }
                    ElseIf ((_T_0 == 0x03))
                    {
                        Local0 = CMRD (0x7E)
                        Local0 &= 0x0F
                        Return (PPR2 (Local0))
                    }
                    ElseIf ((_T_0 == 0x04))
                    {
                        Return (0x02)
                    }
                    ElseIf ((_T_0 == 0x05))
                    {
                        Local0 = CMRD (0x7E)
                        Local0 >>= 0x04
                        Local1 = CMRD (0x7F)
                        Local1 &= 0x7F
                        Return (PPR3 (Local0, Local1))
                    }
                    ElseIf ((_T_0 == 0x06))
                    {
                        Name (_T_1, "")  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        _T_1 = ToString (Arg3, Ones)
                        If ((_T_1 == "en"))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                If ((ToBuffer (Arg0) == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    Name (_T_2, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                    _T_2 = ToInteger (Arg2)
                    If ((_T_2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x01                                             // .
                        })
                    }
                    ElseIf ((_T_2 == One))
                    {
                        Local1 = SMI (0xBC, (ToInteger (Arg3) & One))
                        Return (ToInteger (Local1))
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (PPR2, 1, NotSerialized)
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                _T_0 = ToInteger (Arg0)
                If ((_T_0 == Zero))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }
                ElseIf ((_T_0 == One))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        One
                    })
                }
                ElseIf ((_T_0 == 0x02))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        0x02
                    })
                }
                ElseIf ((_T_0 == 0x03))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        0x03
                    })
                }
                ElseIf ((_T_0 == 0x04))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        0x04
                    })
                }
                ElseIf ((_T_0 == 0x05))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        0x05
                    })
                }
                ElseIf ((_T_0 == 0x06))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        0x06
                    })
                }
                ElseIf ((_T_0 == 0x07))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        0x07
                    })
                }
                ElseIf ((_T_0 == 0x08))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        0x08
                    })
                }
                ElseIf ((_T_0 == 0x09))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        0x09
                    })
                }
                ElseIf ((_T_0 == 0x0A))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        0x0A
                    })
                }
                ElseIf ((_T_0 == 0x0B))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        0x0B
                    })
                }
                ElseIf ((_T_0 == 0x0C))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        0x0C
                    })
                }
                ElseIf ((_T_0 == 0x0D))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        0x0D
                    })
                }
                ElseIf ((_T_0 == 0x0E))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        0x0E
                    })
                }

                Return (Package (0x02)
                {
                    One, 
                    Zero
                })
            }

            Method (PPR3, 2, NotSerialized)
            {
                If ((Arg1 == Zero))
                {
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                    _T_0 = ToInteger (Arg0)
                    If ((_T_0 == Zero))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                    }
                    ElseIf ((_T_0 == One))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            One, 
                            Zero
                        })
                    }
                    ElseIf ((_T_0 == 0x02))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x02, 
                            Zero
                        })
                    }
                    ElseIf ((_T_0 == 0x03))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x03, 
                            Zero
                        })
                    }
                    ElseIf ((_T_0 == 0x04))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Zero
                        })
                    }
                    ElseIf ((_T_0 == 0x05))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x05, 
                            Zero
                        })
                    }
                    ElseIf ((_T_0 == 0x06))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x06, 
                            Zero
                        })
                    }
                    ElseIf ((_T_0 == 0x07))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x07, 
                            Zero
                        })
                    }
                    ElseIf ((_T_0 == 0x08))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x08, 
                            Zero
                        })
                    }
                    ElseIf ((_T_0 == 0x09))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x09, 
                            Zero
                        })
                    }
                    ElseIf ((_T_0 == 0x0A))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x0A, 
                            Zero
                        })
                    }
                    ElseIf ((_T_0 == 0x0B))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x0B, 
                            Zero
                        })
                    }
                    ElseIf ((_T_0 == 0x0C))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x0C, 
                            Zero
                        })
                    }
                    ElseIf ((_T_0 == 0x0D))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x0D, 
                            Zero
                        })
                    }
                    ElseIf ((_T_0 == 0x0E))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x0E, 
                            Zero
                        })
                    }

                    Return (Package (0x03)
                    {
                        One, 
                        Zero, 
                        Zero
                    })
                }
                Else
                {
                    Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                    _T_1 = ToInteger (Arg0)
                    If ((_T_1 == Zero))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            0xFFFFFFF0
                        })
                    }
                    ElseIf ((_T_1 == One))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            One, 
                            0xFFFFFFF0
                        })
                    }
                    ElseIf ((_T_1 == 0x02))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x02, 
                            0xFFFFFFF0
                        })
                    }
                    ElseIf ((_T_1 == 0x03))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x03, 
                            0xFFFFFFF0
                        })
                    }
                    ElseIf ((_T_1 == 0x04))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            0xFFFFFFF0
                        })
                    }
                    ElseIf ((_T_1 == 0x05))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x05, 
                            0xFFFFFFF0
                        })
                    }
                    ElseIf ((_T_1 == 0x06))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x06, 
                            0xFFFFFFF0
                        })
                    }
                    ElseIf ((_T_1 == 0x07))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x07, 
                            0xFFFFFFF0
                        })
                    }
                    ElseIf ((_T_1 == 0x08))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x08, 
                            0xFFFFFFF0
                        })
                    }
                    ElseIf ((_T_1 == 0x09))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x09, 
                            0xFFFFFFF0
                        })
                    }
                    ElseIf ((_T_1 == 0x0A))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x0A, 
                            0xFFFFFFF0
                        })
                    }
                    ElseIf ((_T_1 == 0x0B))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x0B, 
                            0xFFFFFFF0
                        })
                    }
                    ElseIf ((_T_1 == 0x0C))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x0C, 
                            0xFFFFFFF0
                        })
                    }
                    ElseIf ((_T_1 == 0x0D))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x0D, 
                            0xFFFFFFF0
                        })
                    }
                    ElseIf ((_T_1 == 0x0E))
                    {
                        Return (Package (0x03)
                        {
                            Zero, 
                            0x0E, 
                            0xFFFFFFF0
                        })
                    }

                    Return (Package (0x03)
                    {
                        One, 
                        Zero, 
                        Zero
                    })
                }
            }
        }

        Device (TCM)
        {
            Name (_HID, EisaId ("ZIC0101"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (!GTPM ())
                {
                    Return (Zero)
                }

                If (GCTP ())
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((GTPM () && GCTP ()))
                {
                    Return (ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED40000,         // Address Base
                            0x00005000,         // Address Length
                            )
                    })
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : E1
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "B10K   "
[018h 0024   4]                 Oem Revision : 00000015
[01Ch 0028   4]              Asl Compiler ID : "ASL "
[020h 0032   4]        Asl Compiler Revision : 00000061

[024h 0036   4]                 FACS Address : DFDF9C00
[028h 0040   4]                 DSDT Address : FFE9E952
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 05 [SOHO Server]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : 70
[035h 0053   1]           ACPI Disable Value : 71
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000850
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 10
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 01F4
[062h 0098   2]                   C3 Latency : 1388
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 00
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 00
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 00
[06Dh 0109   2]   Boot Flags (decoded below) : 0013
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000000A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 00
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000000

[080h 0128   1]         Value to cause reset : 00
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 00000000DFDF9C00
[08Ch 0140   8]                 DSDT Address : 00000000FFE9E952
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 01 [Byte Access:8]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 01 [Byte Access:8]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000850

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 01 [Byte Access:8]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 03 E1 44 45 4C 4C 20 20  // FACP......DELL  
    0010: 42 31 30 4B 20 20 20 00 15 00 00 00 41 53 4C 20  // B10K   .....ASL 
    0020: 61 00 00 00 00 9C DF DF 52 E9 E9 FF 01 05 09 00  // a.......R.......
    0030: B2 00 00 00 70 71 00 00 00 08 00 00 00 00 00 00  // ....pq..........
    0040: 04 08 00 00 00 00 00 00 50 08 00 00 08 08 00 00  // ........P.......
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 10 00 00 00  //  ...............
    0060: F4 01 88 13 00 00 00 00 00 00 00 00 00 13 00 00  // ................
    0070: A5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 9C DF DF 00 00 00 00 52 E9 E9 FF  // ............R...
    0090: 00 00 00 00 01 20 00 01 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 01  // ................
    00B0: 04 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 08 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 01 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 00
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0E
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "B10K   "
[018h 0024   4]                 Oem Revision : 00000015
[01Ch 0028   4]              Asl Compiler ID : "ASL "
[020h 0032   4]        Asl Compiler Revision : 00000061

[024h 0036   4]            Hardware Block ID : 8086A301

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 03E8
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 0E 44 45 4C 4C 20 20  // HPET8.....DELL  
    0010: 42 31 30 4B 20 20 20 00 15 00 00 00 41 53 4C 20  // B10K   .....ASL 
    0020: 61 00 00 00 01 A3 86 80 00 00 00 00 00 00 D0 FE  // a...............
    0030: 00 00 00 00 00 E8 03 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4A
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "B10K   "
[018h 0024   4]                 Oem Revision : 00000015
[01Ch 0028   4]              Asl Compiler ID : "ASL "
[020h 0032   4]        Asl Compiler Revision : 00000061

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 4A 44 45 4C 4C 20 20  // MCFG<....JDELL  
    0010: 42 31 30 4B 20 20 20 00 15 00 00 00 41 53 4C 20  // B10K   .....ASL 
    0020: 61 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F8  // a...............
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 85
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "B10K   "
[018h 0024   4]                 Oem Revision : 00000015
[01Ch 0028   4]              Asl Compiler ID : "ASL "
[020h 0032   4]        Asl Compiler Revision : 00000061

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 7F F6 C1 05 \
    BE 5C 57 63 A5 8A 68 F3 6E 8F 06 FA AF B4 9F 68 \
    82 23 EC 50 40 5A 73 7F EC E4 07 CB DC 25 1A 9C \
    E3 E3 66 11 E0 A5 98 06 C5 80 0A FA 42 93 86 98 \
    E7 D5 1B D4 D7 3A A4 0B EE E2 7D BE 5F 5B 15 0C \
    AB D0 21 DE BF E9 B5 6E A4 57 B9 8C 0C D2 BA 3A \
    69 30 76 94 71 A2 64 D7 4C D8 85 BF DF A5 6A C8 \
    DC 45 D5 4D 8C B8 8C 05 2F FC 2E 23 C4 29 C5 6F \
    3F 29 6C 6D 57 79 0E B6 75 ED 21 95 01 00 00 00 \
    B6 00 00 00 00 00 02 00 44 45 4C 4C 20 20 42 31 \
    30 4B 20 20 20 00 57 49 4E 44 4F 57 53 20 01 00 \
    02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 5A 3A A5 CC F1 35 95 0B 73 96 49 3F B2 87 \
    9F 41 2D 3D 56 46 EB 93 67 F2 87 92 F5 C0 6E D7 \
    0B 7C 89 A0 D6 70 63 A2 AF 7C DB 56 3A F8 A0 D4 \
    12 C7 8D 27 4F 86 C0 8E A6 DC 72 03 14 90 03 17 \
    EC 0A A6 E0 5D BE BD 1E 8B 7B E1 0B DF 26 44 03 \
    F5 7E B2 0A 07 A2 E9 B7 15 F5 38 8E EA A7 05 CC \
    84 0F 7C 61 63 ED CF 58 C0 E8 7B DC 5C BE 1E 3C \
    21 9D 4A EC 54 EC 3F 6B 92 00 28 BF E1 F2 32 26 \
    7D E3 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 85 44 45 4C 4C 20 20  // SLICv.....DELL  
    0010: 42 31 30 4B 20 20 20 00 15 00 00 00 41 53 4C 20  // B10K   .....ASL 
    0020: 61 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // a...............
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 7F F6 C1 05 BE 5C 57 63 A5 8A 68 F3 6E 8F 06 FA  // .....\Wc..h.n...
    0050: AF B4 9F 68 82 23 EC 50 40 5A 73 7F EC E4 07 CB  // ...h.#.P@Zs.....
    0060: DC 25 1A 9C E3 E3 66 11 E0 A5 98 06 C5 80 0A FA  // .%....f.........
    0070: 42 93 86 98 E7 D5 1B D4 D7 3A A4 0B EE E2 7D BE  // B........:....}.
    0080: 5F 5B 15 0C AB D0 21 DE BF E9 B5 6E A4 57 B9 8C  // _[....!....n.W..
    0090: 0C D2 BA 3A 69 30 76 94 71 A2 64 D7 4C D8 85 BF  // ...:i0v.q.d.L...
    00A0: DF A5 6A C8 DC 45 D5 4D 8C B8 8C 05 2F FC 2E 23  // ..j..E.M..../..#
    00B0: C4 29 C5 6F 3F 29 6C 6D 57 79 0E B6 75 ED 21 95  // .).o?)lmWy..u.!.
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 44 45 4C 4C  // ............DELL
    00D0: 20 20 42 31 30 4B 20 20 20 00 57 49 4E 44 4F 57  //   B10K   .WINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 5A 3A A5 CC F1 35 95 0B 73 96  // ......Z:...5..s.
    0100: 49 3F B2 87 9F 41 2D 3D 56 46 EB 93 67 F2 87 92  // I?...A-=VF..g...
    0110: F5 C0 6E D7 0B 7C 89 A0 D6 70 63 A2 AF 7C DB 56  // ..n..|...pc..|.V
    0120: 3A F8 A0 D4 12 C7 8D 27 4F 86 C0 8E A6 DC 72 03  // :......'O.....r.
    0130: 14 90 03 17 EC 0A A6 E0 5D BE BD 1E 8B 7B E1 0B  // ........]....{..
    0140: DF 26 44 03 F5 7E B2 0A 07 A2 E9 B7 15 F5 38 8E  // .&D..~........8.
    0150: EA A7 05 CC 84 0F 7C 61 63 ED CF 58 C0 E8 7B DC  // ......|ac..X..{.
    0160: 5C BE 1E 3C 21 9D 4A EC 54 EC 3F 6B 92 00 28 BF  // \..<!.J.T.?k..(.
    0170: E1 F2 32 26 7D E3                                // ..2&}.


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "INTEL", "PPM RCM ", 0x80000001)
{
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU1._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU1._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU1._OSC.CAP0 */
            Return (Arg3)
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (PSEN)
            {
                Return (Package (0x07)
                {
                    Package (0x06)
                    {
                        0x0000095A, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000012, 
                        0x00000012
                    }, 

                    Package (0x06)
                    {
                        0x000008D5, 
                        0x0001A9C8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000011, 
                        0x00000011
                    }, 

                    Package (0x06)
                    {
                        0x00000850, 
                        0x00016378, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000010, 
                        0x00000010
                    }, 

                    Package (0x06)
                    {
                        0x000007CB, 
                        0x00014438, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000F, 
                        0x0000000F
                    }, 

                    Package (0x06)
                    {
                        0x00000746, 
                        0x00010D88, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000E, 
                        0x0000000E
                    }, 

                    Package (0x06)
                    {
                        0x000006C1, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000D, 
                        0x0000000D
                    }, 

                    Package (0x06)
                    {
                        0x0000063C, 
                        0x0000CB20, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000C, 
                        0x0000000C
                    }
                })
            }

            Return (Zero)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (Zero)
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000000, 
                        0x000000FE, 
                        0x00000002
                    }
                })
            }

            Return (Zero)
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0040, 
                            0x000001F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x0060, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000814, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0040, 
                        0x000001F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x03, 
                        0x0060, 
                        0x0000015E
                    }
                })
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU2)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU2._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU2._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU2._OSC.CAP0 */
            Return (Arg3)
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (PSEN)
            {
                Return (Package (0x07)
                {
                    Package (0x06)
                    {
                        0x0000095A, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000012, 
                        0x00000012
                    }, 

                    Package (0x06)
                    {
                        0x000008D5, 
                        0x0001A9C8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000011, 
                        0x00000011
                    }, 

                    Package (0x06)
                    {
                        0x00000850, 
                        0x00016378, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000010, 
                        0x00000010
                    }, 

                    Package (0x06)
                    {
                        0x000007CB, 
                        0x00014438, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000F, 
                        0x0000000F
                    }, 

                    Package (0x06)
                    {
                        0x00000746, 
                        0x00010D88, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000E, 
                        0x0000000E
                    }, 

                    Package (0x06)
                    {
                        0x000006C1, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000D, 
                        0x0000000D
                    }, 

                    Package (0x06)
                    {
                        0x0000063C, 
                        0x0000CB20, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000C, 
                        0x0000000C
                    }
                })
            }

            Return (Zero)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (Zero)
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000000, 
                        0x000000FE, 
                        0x00000002
                    }
                })
            }

            Return (Zero)
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0040, 
                            0x000001F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x0060, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000814, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0040, 
                        0x000001F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x03, 
                        0x0060, 
                        0x0000015E
                    }
                })
            }

            Return (Zero)
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "DELL", "st_ex", 0x00001000)
{
    External (_SB_.PCI0.ISA_.MOU_, DeviceObj)
    External (HACK, IntObj)

    Method (USES, 0, NotSerialized)
    {
        Noop
    }

    Scope (\)
    {
        Name (\_S0, Package (0x04)  // _S0_: S0 System State
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (\_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x03, 
            0x03, 
            Zero, 
            Zero
        })
        Name (\_S4, Package (0x04)  // _S4_: S4 System State
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (\_S5, Package (0x04)  // _S5_: S5 System State
        {
            0x02, 
            0x02, 
            Zero, 
            Zero
        })
    }

    Scope (\_SB.PCI0.ISA.MOU)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (HACK)
            {
                Return (Package (0x02)
                {
                    0x08, 
                    0x03
                })
            }
            Else
            {
                Return (Package (0x02)
                {
                    0x08, 
                    0x05
                })
            }
        }
    }
}



TCPA
----
[000h 0000   4]                    Signature : "TCPA"    [Trusted Computing Platform Alliance table]
[004h 0004   4]                 Table Length : 00000032
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 7F
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "B10K   "
[018h 0024   4]                 Oem Revision : 00000015
[01Ch 0028   4]              Asl Compiler ID : "ASL "
[020h 0032   4]        Asl Compiler Revision : 00000061

[024h 0036   2]               Platform Class : 0000
[026h 0038   4]         Min Event Log Length : 00010000
[02Ah 0042   8]            Event Log Address : 0000000000000000

Raw Table Data: Length 50 (0x32)

    0000: 54 43 50 41 32 00 00 00 01 7F 44 45 4C 4C 20 20  // TCPA2.....DELL  
    0010: 42 31 30 4B 20 20 20 00 15 00 00 00 41 53 4C 20  // B10K   .....ASL 
    0020: 61 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // a...............
    0030: 00 00                                            // ..


