
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20230628
Copyright (c) 2000 - 2023 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00000097
 02)  EINJ  0x00000150  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x00000001
 03)  APIC  0x00000294  0x03  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 04)  SSDT  0x00002652  0x02  "ALASKA"  "SpsNm   "  0x00000002  "INTL"   0x20120913
 05)  VFCT  0x0000EC84  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x31504F47
 06)  SLIT  0x00000030  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20091013
 07)  MSCT  0x00000090  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20091013
 08)  UEFI  0x00000042  0x01  "ALASKA"  "A M I   "  0x01072009  "    "   0x00000000
 09)  ERST  0x00000230  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x00000001
 10)  DSDT  0x00031808  0x02  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20091013
 11)  SRAT  0x00001158  0x03  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20091013
 12)  WDDT  0x00000040  0x01  "ALASKA"  "A M I   "  0x00000000  "INTL"   0x20091013
 13)  MCEJ  0x00000130  0x01  "INTEL "  "        "  0x00000001  "INTL"   0x0100000D
 14)  HEST  0x00000340  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x00000001
 15)  BERT  0x00000030  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x00000001
 16)  SSDT  0x00000064  0x02  "ALASKA"  "SpsNvs  "  0x00000002  "INTL"   0x20120913
 17)  DMAR  0x00000158  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20091013
 18)  FACP  0x0000010C  0x05  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 19)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 20)  SSDT  0x0001706B  0x02  "ALASKA"  "PmMgt   "  0x00000001  "INTL"   0x20120913
 21)  PRAD  0x00000102  0x02  "ALASKA"  "A M I   "  0x00000002  "INTL"   0x20120913
 22)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20091013
 23)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 24)  FACS  0x00000040  0x02
 25)  BGRT  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013

Found 25 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 00000294
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 0B
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 02
[037h 0055 001h]               Local Apic ID : 02
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 04
[03Fh 0063 001h]               Local Apic ID : 04
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 06
[047h 0071 001h]               Local Apic ID : 06
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 00 [Processor Local APIC]
[04Dh 0077 001h]                      Length : 08
[04Eh 0078 001h]                Processor ID : 08
[04Fh 0079 001h]               Local Apic ID : 08
[050h 0080 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084 001h]               Subtable Type : 00 [Processor Local APIC]
[055h 0085 001h]                      Length : 08
[056h 0086 001h]                Processor ID : 10
[057h 0087 001h]               Local Apic ID : 10
[058h 0088 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092 001h]               Subtable Type : 00 [Processor Local APIC]
[05Dh 0093 001h]                      Length : 08
[05Eh 0094 001h]                Processor ID : 12
[05Fh 0095 001h]               Local Apic ID : 12
[060h 0096 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100 001h]               Subtable Type : 00 [Processor Local APIC]
[065h 0101 001h]                      Length : 08
[066h 0102 001h]                Processor ID : 14
[067h 0103 001h]               Local Apic ID : 14
[068h 0104 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108 001h]               Subtable Type : 00 [Processor Local APIC]
[06Dh 0109 001h]                      Length : 08
[06Eh 0110 001h]                Processor ID : 16
[06Fh 0111 001h]               Local Apic ID : 16
[070h 0112 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116 001h]               Subtable Type : 00 [Processor Local APIC]
[075h 0117 001h]                      Length : 08
[076h 0118 001h]                Processor ID : 18
[077h 0119 001h]               Local Apic ID : 18
[078h 0120 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124 001h]               Subtable Type : 00 [Processor Local APIC]
[07Dh 0125 001h]                      Length : 08
[07Eh 0126 001h]                Processor ID : 20
[07Fh 0127 001h]               Local Apic ID : 20
[080h 0128 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132 001h]               Subtable Type : 00 [Processor Local APIC]
[085h 0133 001h]                      Length : 08
[086h 0134 001h]                Processor ID : 22
[087h 0135 001h]               Local Apic ID : 22
[088h 0136 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140 001h]               Subtable Type : 00 [Processor Local APIC]
[08Dh 0141 001h]                      Length : 08
[08Eh 0142 001h]                Processor ID : 24
[08Fh 0143 001h]               Local Apic ID : 24
[090h 0144 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148 001h]               Subtable Type : 00 [Processor Local APIC]
[095h 0149 001h]                      Length : 08
[096h 0150 001h]                Processor ID : 26
[097h 0151 001h]               Local Apic ID : 26
[098h 0152 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156 001h]               Subtable Type : 00 [Processor Local APIC]
[09Dh 0157 001h]                      Length : 08
[09Eh 0158 001h]                Processor ID : 28
[09Fh 0159 001h]               Local Apic ID : 28
[0A0h 0160 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164 001h]               Subtable Type : 00 [Processor Local APIC]
[0A5h 0165 001h]                      Length : 08
[0A6h 0166 001h]                Processor ID : 30
[0A7h 0167 001h]               Local Apic ID : 30
[0A8h 0168 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172 001h]               Subtable Type : 00 [Processor Local APIC]
[0ADh 0173 001h]                      Length : 08
[0AEh 0174 001h]                Processor ID : 32
[0AFh 0175 001h]               Local Apic ID : 32
[0B0h 0176 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0B4h 0180 001h]               Subtable Type : 00 [Processor Local APIC]
[0B5h 0181 001h]                      Length : 08
[0B6h 0182 001h]                Processor ID : 34
[0B7h 0183 001h]               Local Apic ID : 34
[0B8h 0184 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0BCh 0188 001h]               Subtable Type : 00 [Processor Local APIC]
[0BDh 0189 001h]                      Length : 08
[0BEh 0190 001h]                Processor ID : 36
[0BFh 0191 001h]               Local Apic ID : 36
[0C0h 0192 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0C4h 0196 001h]               Subtable Type : 00 [Processor Local APIC]
[0C5h 0197 001h]                      Length : 08
[0C6h 0198 001h]                Processor ID : 38
[0C7h 0199 001h]               Local Apic ID : 38
[0C8h 0200 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0CCh 0204 001h]               Subtable Type : 00 [Processor Local APIC]
[0CDh 0205 001h]                      Length : 08
[0CEh 0206 001h]                Processor ID : 01
[0CFh 0207 001h]               Local Apic ID : 01
[0D0h 0208 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0D4h 0212 001h]               Subtable Type : 00 [Processor Local APIC]
[0D5h 0213 001h]                      Length : 08
[0D6h 0214 001h]                Processor ID : 03
[0D7h 0215 001h]               Local Apic ID : 03
[0D8h 0216 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0DCh 0220 001h]               Subtable Type : 00 [Processor Local APIC]
[0DDh 0221 001h]                      Length : 08
[0DEh 0222 001h]                Processor ID : 05
[0DFh 0223 001h]               Local Apic ID : 05
[0E0h 0224 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0E4h 0228 001h]               Subtable Type : 00 [Processor Local APIC]
[0E5h 0229 001h]                      Length : 08
[0E6h 0230 001h]                Processor ID : 07
[0E7h 0231 001h]               Local Apic ID : 07
[0E8h 0232 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ECh 0236 001h]               Subtable Type : 00 [Processor Local APIC]
[0EDh 0237 001h]                      Length : 08
[0EEh 0238 001h]                Processor ID : 09
[0EFh 0239 001h]               Local Apic ID : 09
[0F0h 0240 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0F4h 0244 001h]               Subtable Type : 00 [Processor Local APIC]
[0F5h 0245 001h]                      Length : 08
[0F6h 0246 001h]                Processor ID : 11
[0F7h 0247 001h]               Local Apic ID : 11
[0F8h 0248 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0FCh 0252 001h]               Subtable Type : 00 [Processor Local APIC]
[0FDh 0253 001h]                      Length : 08
[0FEh 0254 001h]                Processor ID : 13
[0FFh 0255 001h]               Local Apic ID : 13
[100h 0256 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[104h 0260 001h]               Subtable Type : 00 [Processor Local APIC]
[105h 0261 001h]                      Length : 08
[106h 0262 001h]                Processor ID : 15
[107h 0263 001h]               Local Apic ID : 15
[108h 0264 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[10Ch 0268 001h]               Subtable Type : 00 [Processor Local APIC]
[10Dh 0269 001h]                      Length : 08
[10Eh 0270 001h]                Processor ID : 17
[10Fh 0271 001h]               Local Apic ID : 17
[110h 0272 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[114h 0276 001h]               Subtable Type : 00 [Processor Local APIC]
[115h 0277 001h]                      Length : 08
[116h 0278 001h]                Processor ID : 19
[117h 0279 001h]               Local Apic ID : 19
[118h 0280 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[11Ch 0284 001h]               Subtable Type : 00 [Processor Local APIC]
[11Dh 0285 001h]                      Length : 08
[11Eh 0286 001h]                Processor ID : 21
[11Fh 0287 001h]               Local Apic ID : 21
[120h 0288 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[124h 0292 001h]               Subtable Type : 00 [Processor Local APIC]
[125h 0293 001h]                      Length : 08
[126h 0294 001h]                Processor ID : 23
[127h 0295 001h]               Local Apic ID : 23
[128h 0296 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[12Ch 0300 001h]               Subtable Type : 00 [Processor Local APIC]
[12Dh 0301 001h]                      Length : 08
[12Eh 0302 001h]                Processor ID : 25
[12Fh 0303 001h]               Local Apic ID : 25
[130h 0304 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[134h 0308 001h]               Subtable Type : 00 [Processor Local APIC]
[135h 0309 001h]                      Length : 08
[136h 0310 001h]                Processor ID : 27
[137h 0311 001h]               Local Apic ID : 27
[138h 0312 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[13Ch 0316 001h]               Subtable Type : 00 [Processor Local APIC]
[13Dh 0317 001h]                      Length : 08
[13Eh 0318 001h]                Processor ID : 29
[13Fh 0319 001h]               Local Apic ID : 29
[140h 0320 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[144h 0324 001h]               Subtable Type : 00 [Processor Local APIC]
[145h 0325 001h]                      Length : 08
[146h 0326 001h]                Processor ID : 31
[147h 0327 001h]               Local Apic ID : 31
[148h 0328 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[14Ch 0332 001h]               Subtable Type : 00 [Processor Local APIC]
[14Dh 0333 001h]                      Length : 08
[14Eh 0334 001h]                Processor ID : 33
[14Fh 0335 001h]               Local Apic ID : 33
[150h 0336 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[154h 0340 001h]               Subtable Type : 00 [Processor Local APIC]
[155h 0341 001h]                      Length : 08
[156h 0342 001h]                Processor ID : 35
[157h 0343 001h]               Local Apic ID : 35
[158h 0344 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[15Ch 0348 001h]               Subtable Type : 00 [Processor Local APIC]
[15Dh 0349 001h]                      Length : 08
[15Eh 0350 001h]                Processor ID : 37
[15Fh 0351 001h]               Local Apic ID : 37
[160h 0352 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[164h 0356 001h]               Subtable Type : 00 [Processor Local APIC]
[165h 0357 001h]                      Length : 08
[166h 0358 001h]                Processor ID : 39
[167h 0359 001h]               Local Apic ID : 39
[168h 0360 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[16Ch 0364 001h]               Subtable Type : 04 [Local APIC NMI]
[16Dh 0365 001h]                      Length : 06
[16Eh 0366 001h]                Processor ID : 00
[16Fh 0367 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[171h 0369 001h]        Interrupt Input LINT : 01

[172h 0370 001h]               Subtable Type : 04 [Local APIC NMI]
[173h 0371 001h]                      Length : 06
[174h 0372 001h]                Processor ID : 02
[175h 0373 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[177h 0375 001h]        Interrupt Input LINT : 01

[178h 0376 001h]               Subtable Type : 04 [Local APIC NMI]
[179h 0377 001h]                      Length : 06
[17Ah 0378 001h]                Processor ID : 04
[17Bh 0379 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[17Dh 0381 001h]        Interrupt Input LINT : 01

[17Eh 0382 001h]               Subtable Type : 04 [Local APIC NMI]
[17Fh 0383 001h]                      Length : 06
[180h 0384 001h]                Processor ID : 06
[181h 0385 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[183h 0387 001h]        Interrupt Input LINT : 01

[184h 0388 001h]               Subtable Type : 04 [Local APIC NMI]
[185h 0389 001h]                      Length : 06
[186h 0390 001h]                Processor ID : 08
[187h 0391 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[189h 0393 001h]        Interrupt Input LINT : 01

[18Ah 0394 001h]               Subtable Type : 04 [Local APIC NMI]
[18Bh 0395 001h]                      Length : 06
[18Ch 0396 001h]                Processor ID : 10
[18Dh 0397 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[18Fh 0399 001h]        Interrupt Input LINT : 01

[190h 0400 001h]               Subtable Type : 04 [Local APIC NMI]
[191h 0401 001h]                      Length : 06
[192h 0402 001h]                Processor ID : 12
[193h 0403 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[195h 0405 001h]        Interrupt Input LINT : 01

[196h 0406 001h]               Subtable Type : 04 [Local APIC NMI]
[197h 0407 001h]                      Length : 06
[198h 0408 001h]                Processor ID : 14
[199h 0409 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[19Bh 0411 001h]        Interrupt Input LINT : 01

[19Ch 0412 001h]               Subtable Type : 04 [Local APIC NMI]
[19Dh 0413 001h]                      Length : 06
[19Eh 0414 001h]                Processor ID : 16
[19Fh 0415 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1A1h 0417 001h]        Interrupt Input LINT : 01

[1A2h 0418 001h]               Subtable Type : 04 [Local APIC NMI]
[1A3h 0419 001h]                      Length : 06
[1A4h 0420 001h]                Processor ID : 18
[1A5h 0421 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1A7h 0423 001h]        Interrupt Input LINT : 01

[1A8h 0424 001h]               Subtable Type : 04 [Local APIC NMI]
[1A9h 0425 001h]                      Length : 06
[1AAh 0426 001h]                Processor ID : 20
[1ABh 0427 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1ADh 0429 001h]        Interrupt Input LINT : 01

[1AEh 0430 001h]               Subtable Type : 04 [Local APIC NMI]
[1AFh 0431 001h]                      Length : 06
[1B0h 0432 001h]                Processor ID : 22
[1B1h 0433 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1B3h 0435 001h]        Interrupt Input LINT : 01

[1B4h 0436 001h]               Subtable Type : 04 [Local APIC NMI]
[1B5h 0437 001h]                      Length : 06
[1B6h 0438 001h]                Processor ID : 24
[1B7h 0439 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1B9h 0441 001h]        Interrupt Input LINT : 01

[1BAh 0442 001h]               Subtable Type : 04 [Local APIC NMI]
[1BBh 0443 001h]                      Length : 06
[1BCh 0444 001h]                Processor ID : 26
[1BDh 0445 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1BFh 0447 001h]        Interrupt Input LINT : 01

[1C0h 0448 001h]               Subtable Type : 04 [Local APIC NMI]
[1C1h 0449 001h]                      Length : 06
[1C2h 0450 001h]                Processor ID : 28
[1C3h 0451 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1C5h 0453 001h]        Interrupt Input LINT : 01

[1C6h 0454 001h]               Subtable Type : 04 [Local APIC NMI]
[1C7h 0455 001h]                      Length : 06
[1C8h 0456 001h]                Processor ID : 30
[1C9h 0457 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1CBh 0459 001h]        Interrupt Input LINT : 01

[1CCh 0460 001h]               Subtable Type : 04 [Local APIC NMI]
[1CDh 0461 001h]                      Length : 06
[1CEh 0462 001h]                Processor ID : 32
[1CFh 0463 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1D1h 0465 001h]        Interrupt Input LINT : 01

[1D2h 0466 001h]               Subtable Type : 04 [Local APIC NMI]
[1D3h 0467 001h]                      Length : 06
[1D4h 0468 001h]                Processor ID : 34
[1D5h 0469 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1D7h 0471 001h]        Interrupt Input LINT : 01

[1D8h 0472 001h]               Subtable Type : 04 [Local APIC NMI]
[1D9h 0473 001h]                      Length : 06
[1DAh 0474 001h]                Processor ID : 36
[1DBh 0475 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1DDh 0477 001h]        Interrupt Input LINT : 01

[1DEh 0478 001h]               Subtable Type : 04 [Local APIC NMI]
[1DFh 0479 001h]                      Length : 06
[1E0h 0480 001h]                Processor ID : 38
[1E1h 0481 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1E3h 0483 001h]        Interrupt Input LINT : 01

[1E4h 0484 001h]               Subtable Type : 04 [Local APIC NMI]
[1E5h 0485 001h]                      Length : 06
[1E6h 0486 001h]                Processor ID : 01
[1E7h 0487 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1E9h 0489 001h]        Interrupt Input LINT : 01

[1EAh 0490 001h]               Subtable Type : 04 [Local APIC NMI]
[1EBh 0491 001h]                      Length : 06
[1ECh 0492 001h]                Processor ID : 03
[1EDh 0493 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1EFh 0495 001h]        Interrupt Input LINT : 01

[1F0h 0496 001h]               Subtable Type : 04 [Local APIC NMI]
[1F1h 0497 001h]                      Length : 06
[1F2h 0498 001h]                Processor ID : 05
[1F3h 0499 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1F5h 0501 001h]        Interrupt Input LINT : 01

[1F6h 0502 001h]               Subtable Type : 04 [Local APIC NMI]
[1F7h 0503 001h]                      Length : 06
[1F8h 0504 001h]                Processor ID : 07
[1F9h 0505 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1FBh 0507 001h]        Interrupt Input LINT : 01

[1FCh 0508 001h]               Subtable Type : 04 [Local APIC NMI]
[1FDh 0509 001h]                      Length : 06
[1FEh 0510 001h]                Processor ID : 09
[1FFh 0511 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[201h 0513 001h]        Interrupt Input LINT : 01

[202h 0514 001h]               Subtable Type : 04 [Local APIC NMI]
[203h 0515 001h]                      Length : 06
[204h 0516 001h]                Processor ID : 11
[205h 0517 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[207h 0519 001h]        Interrupt Input LINT : 01

[208h 0520 001h]               Subtable Type : 04 [Local APIC NMI]
[209h 0521 001h]                      Length : 06
[20Ah 0522 001h]                Processor ID : 13
[20Bh 0523 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[20Dh 0525 001h]        Interrupt Input LINT : 01

[20Eh 0526 001h]               Subtable Type : 04 [Local APIC NMI]
[20Fh 0527 001h]                      Length : 06
[210h 0528 001h]                Processor ID : 15
[211h 0529 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[213h 0531 001h]        Interrupt Input LINT : 01

[214h 0532 001h]               Subtable Type : 04 [Local APIC NMI]
[215h 0533 001h]                      Length : 06
[216h 0534 001h]                Processor ID : 17
[217h 0535 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[219h 0537 001h]        Interrupt Input LINT : 01

[21Ah 0538 001h]               Subtable Type : 04 [Local APIC NMI]
[21Bh 0539 001h]                      Length : 06
[21Ch 0540 001h]                Processor ID : 19
[21Dh 0541 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[21Fh 0543 001h]        Interrupt Input LINT : 01

[220h 0544 001h]               Subtable Type : 04 [Local APIC NMI]
[221h 0545 001h]                      Length : 06
[222h 0546 001h]                Processor ID : 21
[223h 0547 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[225h 0549 001h]        Interrupt Input LINT : 01

[226h 0550 001h]               Subtable Type : 04 [Local APIC NMI]
[227h 0551 001h]                      Length : 06
[228h 0552 001h]                Processor ID : 23
[229h 0553 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[22Bh 0555 001h]        Interrupt Input LINT : 01

[22Ch 0556 001h]               Subtable Type : 04 [Local APIC NMI]
[22Dh 0557 001h]                      Length : 06
[22Eh 0558 001h]                Processor ID : 25
[22Fh 0559 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[231h 0561 001h]        Interrupt Input LINT : 01

[232h 0562 001h]               Subtable Type : 04 [Local APIC NMI]
[233h 0563 001h]                      Length : 06
[234h 0564 001h]                Processor ID : 27
[235h 0565 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[237h 0567 001h]        Interrupt Input LINT : 01

[238h 0568 001h]               Subtable Type : 04 [Local APIC NMI]
[239h 0569 001h]                      Length : 06
[23Ah 0570 001h]                Processor ID : 29
[23Bh 0571 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[23Dh 0573 001h]        Interrupt Input LINT : 01

[23Eh 0574 001h]               Subtable Type : 04 [Local APIC NMI]
[23Fh 0575 001h]                      Length : 06
[240h 0576 001h]                Processor ID : 31
[241h 0577 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[243h 0579 001h]        Interrupt Input LINT : 01

[244h 0580 001h]               Subtable Type : 04 [Local APIC NMI]
[245h 0581 001h]                      Length : 06
[246h 0582 001h]                Processor ID : 33
[247h 0583 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[249h 0585 001h]        Interrupt Input LINT : 01

[24Ah 0586 001h]               Subtable Type : 04 [Local APIC NMI]
[24Bh 0587 001h]                      Length : 06
[24Ch 0588 001h]                Processor ID : 35
[24Dh 0589 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[24Fh 0591 001h]        Interrupt Input LINT : 01

[250h 0592 001h]               Subtable Type : 04 [Local APIC NMI]
[251h 0593 001h]                      Length : 06
[252h 0594 001h]                Processor ID : 37
[253h 0595 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[255h 0597 001h]        Interrupt Input LINT : 01

[256h 0598 001h]               Subtable Type : 04 [Local APIC NMI]
[257h 0599 001h]                      Length : 06
[258h 0600 001h]                Processor ID : 39
[259h 0601 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[25Bh 0603 001h]        Interrupt Input LINT : 01

[25Ch 0604 001h]               Subtable Type : 01 [I/O APIC]
[25Dh 0605 001h]                      Length : 0C
[25Eh 0606 001h]                 I/O Apic ID : 01
[25Fh 0607 001h]                    Reserved : 00
[260h 0608 004h]                     Address : FEC00000
[264h 0612 004h]                   Interrupt : 00000000

[268h 0616 001h]               Subtable Type : 01 [I/O APIC]
[269h 0617 001h]                      Length : 0C
[26Ah 0618 001h]                 I/O Apic ID : 02
[26Bh 0619 001h]                    Reserved : 00
[26Ch 0620 004h]                     Address : FEC01000
[270h 0624 004h]                   Interrupt : 00000018

[274h 0628 001h]               Subtable Type : 01 [I/O APIC]
[275h 0629 001h]                      Length : 0C
[276h 0630 001h]                 I/O Apic ID : 03
[277h 0631 001h]                    Reserved : 00
[278h 0632 004h]                     Address : FEC40000
[27Ch 0636 004h]                   Interrupt : 00000030

[280h 0640 001h]               Subtable Type : 02 [Interrupt Source Override]
[281h 0641 001h]                      Length : 0A
[282h 0642 001h]                         Bus : 00
[283h 0643 001h]                      Source : 00
[284h 0644 004h]                   Interrupt : 00000002
[288h 0648 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[28Ah 0650 001h]               Subtable Type : 02 [Interrupt Source Override]
[28Bh 0651 001h]                      Length : 0A
[28Ch 0652 001h]                         Bus : 00
[28Dh 0653 001h]                      Source : 09
[28Eh 0654 004h]                   Interrupt : 00000009
[292h 0658 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 660 (0x294)

    0000: 41 50 49 43 94 02 00 00 03 0B 41 4C 41 53 4B 41  // APIC......ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 08 08  // ................
    0050: 01 00 00 00 00 08 10 10 01 00 00 00 00 08 12 12  // ................
    0060: 01 00 00 00 00 08 14 14 01 00 00 00 00 08 16 16  // ................
    0070: 01 00 00 00 00 08 18 18 01 00 00 00 00 08 20 20  // ..............  
    0080: 01 00 00 00 00 08 22 22 01 00 00 00 00 08 24 24  // ......""......$$
    0090: 01 00 00 00 00 08 26 26 01 00 00 00 00 08 28 28  // ......&&......((
    00A0: 01 00 00 00 00 08 30 30 01 00 00 00 00 08 32 32  // ......00......22
    00B0: 01 00 00 00 00 08 34 34 01 00 00 00 00 08 36 36  // ......44......66
    00C0: 01 00 00 00 00 08 38 38 01 00 00 00 00 08 01 01  // ......88........
    00D0: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    00E0: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 09 09  // ................
    00F0: 01 00 00 00 00 08 11 11 01 00 00 00 00 08 13 13  // ................
    0100: 01 00 00 00 00 08 15 15 01 00 00 00 00 08 17 17  // ................
    0110: 01 00 00 00 00 08 19 19 01 00 00 00 00 08 21 21  // ..............!!
    0120: 01 00 00 00 00 08 23 23 01 00 00 00 00 08 25 25  // ......##......%%
    0130: 01 00 00 00 00 08 27 27 01 00 00 00 00 08 29 29  // ......''......))
    0140: 01 00 00 00 00 08 31 31 01 00 00 00 00 08 33 33  // ......11......33
    0150: 01 00 00 00 00 08 35 35 01 00 00 00 00 08 37 37  // ......55......77
    0160: 01 00 00 00 00 08 39 39 01 00 00 00 04 06 00 05  // ......99........
    0170: 00 01 04 06 02 05 00 01 04 06 04 05 00 01 04 06  // ................
    0180: 06 05 00 01 04 06 08 05 00 01 04 06 10 05 00 01  // ................
    0190: 04 06 12 05 00 01 04 06 14 05 00 01 04 06 16 05  // ................
    01A0: 00 01 04 06 18 05 00 01 04 06 20 05 00 01 04 06  // .......... .....
    01B0: 22 05 00 01 04 06 24 05 00 01 04 06 26 05 00 01  // ".....$.....&...
    01C0: 04 06 28 05 00 01 04 06 30 05 00 01 04 06 32 05  // ..(.....0.....2.
    01D0: 00 01 04 06 34 05 00 01 04 06 36 05 00 01 04 06  // ....4.....6.....
    01E0: 38 05 00 01 04 06 01 05 00 01 04 06 03 05 00 01  // 8...............
    01F0: 04 06 05 05 00 01 04 06 07 05 00 01 04 06 09 05  // ................
    0200: 00 01 04 06 11 05 00 01 04 06 13 05 00 01 04 06  // ................
    0210: 15 05 00 01 04 06 17 05 00 01 04 06 19 05 00 01  // ................
    0220: 04 06 21 05 00 01 04 06 23 05 00 01 04 06 25 05  // ..!.....#.....%.
    0230: 00 01 04 06 27 05 00 01 04 06 29 05 00 01 04 06  // ....'.....).....
    0240: 31 05 00 01 04 06 33 05 00 01 04 06 35 05 00 01  // 1.....3.....5...
    0250: 04 06 37 05 00 01 04 06 39 05 00 01 01 0C 01 00  // ..7.....9.......
    0260: 00 00 C0 FE 00 00 00 00 01 0C 02 00 00 10 C0 FE  // ................
    0270: 18 00 00 00 01 0C 03 00 00 00 C4 FE 30 00 00 00  // ............0...
    0280: 02 0A 00 00 02 00 00 00 00 00 02 0A 00 09 09 00  // ................
    0290: 00 00 0D 00                                      // ....


BERT
----
[000h 0000 004h]                   Signature : "BERT"    [Boot Error Record Table]
[004h 0004 004h]                Table Length : 00000030
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 85
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h]    Boot Error Region Length : 00008000
[028h 0040 008h]   Boot Error Region Address : 0000000078807018

Raw Table Data: Length 48 (0x30)

    0000: 42 45 52 54 30 00 00 00 01 85 41 4C 41 53 4B 41  // BERT0.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 01 00 00 00 00 80 00 00 18 70 80 78 00 00 00 00  // .........p.x....


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 8D
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 0000000075EC8018
[030h 0048 004h]               Image OffsetX : 000003C0
[034h 0052 004h]               Image OffsetY : 0000012C

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 8D 41 4C 41 53 4B 41  // BGRT8.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 01 00 01 00 18 80 EC 75 00 00 00 00  // ...........u....
    0030: C0 03 00 00 2C 01 00 00                          // ....,...


DMAR
----
[000h 0000 004h]                   Signature : "DMAR"    [DMA Remapping Table]
[004h 0004 004h]                Table Length : 00000158
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 50
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 20091013

[024h 0036 001h]          Host Address Width : 2D
[025h 0037 001h]                       Flags : 01
[026h 0038 00Ah]                    Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050 002h]                      Length : 0068

[034h 0052 001h]                       Flags : 00
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]          PCI Segment Number : 0000
[038h 0056 008h]       Register Base Address : 00000000FBFFC000

[040h 0064 001h]           Device Scope Type : 03 [IOAPIC Device]
[041h 0065 001h]                Entry Length : 08
[042h 0066 002h]                    Reserved : 0000
[044h 0068 001h]              Enumeration ID : 03
[045h 0069 001h]              PCI Bus Number : 80

[046h 0070 002h]                    PCI Path : 05,04


[048h 0072 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[049h 0073 001h]                Entry Length : 08
[04Ah 0074 002h]                    Reserved : 0000
[04Ch 0076 001h]              Enumeration ID : 00
[04Dh 0077 001h]              PCI Bus Number : 80

[04Eh 0078 002h]                    PCI Path : 04,00


[050h 0080 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[051h 0081 001h]                Entry Length : 08
[052h 0082 002h]                    Reserved : 0000
[054h 0084 001h]              Enumeration ID : 00
[055h 0085 001h]              PCI Bus Number : 80

[056h 0086 002h]                    PCI Path : 04,01


[058h 0088 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[059h 0089 001h]                Entry Length : 08
[05Ah 0090 002h]                    Reserved : 0000
[05Ch 0092 001h]              Enumeration ID : 00
[05Dh 0093 001h]              PCI Bus Number : 80

[05Eh 0094 002h]                    PCI Path : 04,02


[060h 0096 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[061h 0097 001h]                Entry Length : 08
[062h 0098 002h]                    Reserved : 0000
[064h 0100 001h]              Enumeration ID : 00
[065h 0101 001h]              PCI Bus Number : 80

[066h 0102 002h]                    PCI Path : 04,03


[068h 0104 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[069h 0105 001h]                Entry Length : 08
[06Ah 0106 002h]                    Reserved : 0000
[06Ch 0108 001h]              Enumeration ID : 00
[06Dh 0109 001h]              PCI Bus Number : 80

[06Eh 0110 002h]                    PCI Path : 04,04


[070h 0112 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[071h 0113 001h]                Entry Length : 08
[072h 0114 002h]                    Reserved : 0000
[074h 0116 001h]              Enumeration ID : 00
[075h 0117 001h]              PCI Bus Number : 80

[076h 0118 002h]                    PCI Path : 04,05


[078h 0120 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[079h 0121 001h]                Entry Length : 08
[07Ah 0122 002h]                    Reserved : 0000
[07Ch 0124 001h]              Enumeration ID : 00
[07Dh 0125 001h]              PCI Bus Number : 80

[07Eh 0126 002h]                    PCI Path : 04,06


[080h 0128 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[081h 0129 001h]                Entry Length : 08
[082h 0130 002h]                    Reserved : 0000
[084h 0132 001h]              Enumeration ID : 00
[085h 0133 001h]              PCI Bus Number : 80

[086h 0134 002h]                    PCI Path : 04,07


[088h 0136 001h]           Device Scope Type : 02 [PCI Bridge Device]
[089h 0137 001h]                Entry Length : 08
[08Ah 0138 002h]                    Reserved : 0000
[08Ch 0140 001h]              Enumeration ID : 00
[08Dh 0141 001h]              PCI Bus Number : 80

[08Eh 0142 002h]                    PCI Path : 01,00


[090h 0144 001h]           Device Scope Type : 02 [PCI Bridge Device]
[091h 0145 001h]                Entry Length : 08
[092h 0146 002h]                    Reserved : 0000
[094h 0148 001h]              Enumeration ID : 00
[095h 0149 001h]              PCI Bus Number : 80

[096h 0150 002h]                    PCI Path : 02,00


[098h 0152 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[09Ah 0154 002h]                      Length : 0018

[09Ch 0156 001h]                       Flags : 00
[09Dh 0157 001h]                    Reserved : 00
[09Eh 0158 002h]          PCI Segment Number : 0000
[0A0h 0160 008h]       Register Base Address : 00000000F3FFD000

[0A8h 0168 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0A9h 0169 001h]                Entry Length : 08
[0AAh 0170 002h]                    Reserved : 0000
[0ACh 0172 001h]              Enumeration ID : 00
[0ADh 0173 001h]              PCI Bus Number : 00

[0AEh 0174 002h]                    PCI Path : 1B,00


[0B0h 0176 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[0B2h 0178 002h]                      Length : 0028

[0B4h 0180 001h]                       Flags : 01
[0B5h 0181 001h]                    Reserved : 00
[0B6h 0182 002h]          PCI Segment Number : 0000
[0B8h 0184 008h]       Register Base Address : 00000000F3FFC000

[0C0h 0192 001h]           Device Scope Type : 03 [IOAPIC Device]
[0C1h 0193 001h]                Entry Length : 08
[0C2h 0194 002h]                    Reserved : 0000
[0C4h 0196 001h]              Enumeration ID : 01
[0C5h 0197 001h]              PCI Bus Number : F0

[0C6h 0198 002h]                    PCI Path : 1F,07


[0C8h 0200 001h]           Device Scope Type : 03 [IOAPIC Device]
[0C9h 0201 001h]                Entry Length : 08
[0CAh 0202 002h]                    Reserved : 0000
[0CCh 0204 001h]              Enumeration ID : 02
[0CDh 0205 001h]              PCI Bus Number : 00

[0CEh 0206 002h]                    PCI Path : 05,04


[0D0h 0208 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[0D1h 0209 001h]                Entry Length : 08
[0D2h 0210 002h]                    Reserved : 0000
[0D4h 0212 001h]              Enumeration ID : 00
[0D5h 0213 001h]              PCI Bus Number : F0

[0D6h 0214 002h]                    PCI Path : 0F,00


[0D8h 0216 002h]               Subtable Type : 0001 [Reserved Memory Region]
[0DAh 0218 002h]                      Length : 0030

[0DCh 0220 002h]                    Reserved : 0000
[0DEh 0222 002h]          PCI Segment Number : 0000
[0E0h 0224 008h]                Base Address : 000000007B461000
[0E8h 0232 008h]         End Address (limit) : 000000007B470FFF

[0F0h 0240 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0F1h 0241 001h]                Entry Length : 08
[0F2h 0242 002h]                    Reserved : 0000
[0F4h 0244 001h]              Enumeration ID : 00
[0F5h 0245 001h]              PCI Bus Number : 00

[0F6h 0246 002h]                    PCI Path : 14,00


[0F8h 0248 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0F9h 0249 001h]                Entry Length : 08
[0FAh 0250 002h]                    Reserved : 0000
[0FCh 0252 001h]              Enumeration ID : 00
[0FDh 0253 001h]              PCI Bus Number : 00

[0FEh 0254 002h]                    PCI Path : 1A,00


[100h 0256 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[101h 0257 001h]                Entry Length : 08
[102h 0258 002h]                    Reserved : 0000
[104h 0260 001h]              Enumeration ID : 00
[105h 0261 001h]              PCI Bus Number : 00

[106h 0262 002h]                    PCI Path : 1D,00


[108h 0264 002h]               Subtable Type : 0002 [Root Port ATS Capability]
[10Ah 0266 002h]                      Length : 0028

[10Ch 0268 001h]                       Flags : 00
[10Dh 0269 001h]                    Reserved : 00
[10Eh 0270 002h]          PCI Segment Number : 0000

[110h 0272 001h]           Device Scope Type : 02 [PCI Bridge Device]
[111h 0273 001h]                Entry Length : 08
[112h 0274 002h]                    Reserved : 0000
[114h 0276 001h]              Enumeration ID : 00
[115h 0277 001h]              PCI Bus Number : 00

[116h 0278 002h]                    PCI Path : 01,00


[118h 0280 001h]           Device Scope Type : 02 [PCI Bridge Device]
[119h 0281 001h]                Entry Length : 08
[11Ah 0282 002h]                    Reserved : 0000
[11Ch 0284 001h]              Enumeration ID : 00
[11Dh 0285 001h]              PCI Bus Number : 00

[11Eh 0286 002h]                    PCI Path : 03,00


[120h 0288 001h]           Device Scope Type : 02 [PCI Bridge Device]
[121h 0289 001h]                Entry Length : 08
[122h 0290 002h]                    Reserved : 0000
[124h 0292 001h]              Enumeration ID : 00
[125h 0293 001h]              PCI Bus Number : 80

[126h 0294 002h]                    PCI Path : 01,00


[128h 0296 001h]           Device Scope Type : 02 [PCI Bridge Device]
[129h 0297 001h]                Entry Length : 08
[12Ah 0298 002h]                    Reserved : 0000
[12Ch 0300 001h]              Enumeration ID : 00
[12Dh 0301 001h]              PCI Bus Number : 80

[12Eh 0302 002h]                    PCI Path : 02,00


[130h 0304 002h]               Subtable Type : 0003 [Remapping Hardware Static Affinity]
[132h 0306 002h]                      Length : 0014

[134h 0308 004h]                    Reserved : 00000000
[138h 0312 008h]                Base Address : 00000000F3FFC000
[140h 0320 004h]            Proximity Domain : 00000000

[144h 0324 002h]               Subtable Type : 0003 [Remapping Hardware Static Affinity]
[146h 0326 002h]                      Length : 0014

[148h 0328 004h]                    Reserved : 00000000
[14Ch 0332 008h]                Base Address : 00000000FBFFC000
[154h 0340 004h]            Proximity Domain : 00000001

Raw Table Data: Length 344 (0x158)

    0000: 44 4D 41 52 58 01 00 00 01 50 41 4C 41 53 4B 41  // DMARX....PALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 2D 01 00 00 00 00 00 00 00 00 00 00  // ... -...........
    0030: 00 00 68 00 00 00 00 00 00 C0 FF FB 00 00 00 00  // ..h.............
    0040: 03 08 00 00 03 80 05 04 01 08 00 00 00 80 04 00  // ................
    0050: 01 08 00 00 00 80 04 01 01 08 00 00 00 80 04 02  // ................
    0060: 01 08 00 00 00 80 04 03 01 08 00 00 00 80 04 04  // ................
    0070: 01 08 00 00 00 80 04 05 01 08 00 00 00 80 04 06  // ................
    0080: 01 08 00 00 00 80 04 07 02 08 00 00 00 80 01 00  // ................
    0090: 02 08 00 00 00 80 02 00 00 00 18 00 00 00 00 00  // ................
    00A0: 00 D0 FF F3 00 00 00 00 01 08 00 00 00 00 1B 00  // ................
    00B0: 00 00 28 00 01 00 00 00 00 C0 FF F3 00 00 00 00  // ..(.............
    00C0: 03 08 00 00 01 F0 1F 07 03 08 00 00 02 00 05 04  // ................
    00D0: 04 08 00 00 00 F0 0F 00 01 00 30 00 00 00 00 00  // ..........0.....
    00E0: 00 10 46 7B 00 00 00 00 FF 0F 47 7B 00 00 00 00  // ..F{......G{....
    00F0: 01 08 00 00 00 00 14 00 01 08 00 00 00 00 1A 00  // ................
    0100: 01 08 00 00 00 00 1D 00 02 00 28 00 00 00 00 00  // ..........(.....
    0110: 02 08 00 00 00 00 01 00 02 08 00 00 00 00 03 00  // ................
    0120: 02 08 00 00 00 80 01 00 02 08 00 00 00 80 02 00  // ................
    0130: 03 00 14 00 00 00 00 00 00 C0 FF F3 00 00 00 00  // ................
    0140: 00 00 00 00 03 00 14 00 00 00 00 00 00 C0 FF FB  // ................
    0150: 00 00 00 00 01 00 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    /*
     * iASL Warning: There were 2 external control methods found during
     * disassembly, but only 0 were resolved (2 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.HEC2._STA, UnknownObj)
    External (_SB_.PCI0.HEC2.HPTS, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.HEC2.HWAK, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    Name (ASSB, 0x00)
    Name (AOTB, 0x00)
    Name (AAXB, 0x00)
    Name (PEHP, 0x01)
    Name (PEPM, 0x01)
    Name (PECS, 0x01)
    Name (ITKE, 0x00)
    Name (MBEC, 0xFFFF)
    Name (PEBS, 0x80000000)
    Name (PELN, 0x10000000)
    Name (SRSI, 0xB2)
    Name (CSMI, 0x61)
    Name (DSSP, 0x00)
    Name (FHPP, 0x00)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, 0x00)
    Name (TMF1, 0x00)
    Name (TMF2, 0x00)
    Name (TMF3, 0x00)
    Name (TTPF, 0x01)
    Name (DTPT, 0x00)
    Name (TTDP, 0x00)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (AMDT, 0x00)
    Name (TPMF, 0x00)
    Name (TBSW, 0xBC)
    Name (SRCB, 0xFED1C000)
    Name (SRCL, 0x4000)
    Name (SUSW, 0xFF)
    Name (PMBA, 0x0400)
    Name (PMLN, 0x80)
    Name (SMCR, 0x0430)
    Name (SMIP, 0xB2)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x00100000)
    Name (PM30, 0x0430)
    Name (GPBS, 0x0500)
    Name (GPLN, 0x80)
    Name (SMBS, 0x0580)
    Name (SMBL, 0x20)
    Name (PEER, 0x00)
    Name (SHPC, 0x00)
    Name (PICM, 0x00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == 0x00))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = 0x00
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = 0x01
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + 0x01)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [0x00] = Arg0
        Local0 = (SS1 << 0x01)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((0x01 << Arg1) & Local0))
        {
            PRWP [0x01] = Arg1
        }
        Else
        {
            Local0 >>= 0x01
            If (((OSFL () == 0x01) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [0x01])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [0x01])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [0x00]))
        {
            WAKP [0x01] = 0x00
        }
        Else
        {
            WAKP [0x01] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, 0x01)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, 0x00)
    Name (SS2, 0x00)
    Name (SS3, 0x01)
    Name (SS4, 0x01)
    Name (IOST, 0xFFFF)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, 0x01)
    Name (OSHF, 0x00)
    Scope (_SB)
    {
        Name (XCNT, 0x00)
        Name (ECNT, 0x00)
        Name (OSYS, 0x00)
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("663e35af-cc10-41a4-88ea-5470af055295") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (0x00)
                            {
                                If ((EMCA == 0x01))
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }

                        }
                    }
                    Case (0x01)
                    {
                        Return (LDIR) /* \LDIR */
                    }
                    Default
                    {
                    }

                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Windows 2001.1 SP1"))
                {
                    OSYS = 0x05
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSYS = 0x06
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07
                }

                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x08
                }

                If (_OSI ("Windows 2006.1"))
                {
                    OSYS = 0x09
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSYS = 0x0A
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x0B
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x0C
                }

                If (_OSI ("Windows 2012"))
                {
                    OSYS = 0x0D
                }

                If (_OSI ("Linux"))
                {
                    OSYS = 0x01
                }

                If (_OSI ("FreeBSD"))
                {
                    OSYS = 0x02
                }

                If (_OSI ("HP-UX"))
                {
                    OSYS = 0x03
                }

                If (_OSI ("OpenVMS"))
                {
                    OSYS = 0x04
                }

                If ((OSYS >= 0x0D))
                {
                    If ((XCNT == 0x00))
                    {
                        ^PCI0.XHCI.XSEL (0x00)
                        IO80 = 0x84
                        XCNT++
                    }
                }
                Else
                {
                    IO80 = OSYS /* \_SB_.OSYS */
                }
            }

            ^PCI0.RP05.TINI ()
        }
    }

    Name (HWPE, 0x00)
    Name (PETE, 0x00)
    Name (PSLM, Package (0x08)
    {
        0x00, 
        0x00, 
        0x00, 
        0x00, 
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (TSLM, Package (0x08)
    {
        0x00, 
        0x00, 
        0x00, 
        0x00, 
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (BBI0, 0x00000000)
    Name (BBI1, 0x00000080)
    Name (BBI2, 0x00000000)
    Name (BBI3, 0x00000000)
    Name (BBU0, 0x0000007F)
    Name (BBU1, 0x000000FF)
    Name (BBU2, 0x000000FF)
    Name (BBU3, 0x000000FF)
    OperationRegion (DBG0, SystemIO, 0x80, 0x02)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8, 
        IO81,   8
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        INDX,   8, 
        DATA,   8
    }

    OperationRegion (GPCT, SystemIO, 0x0442, 0x01)
    Field (GPCT, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        SGPC,   1
    }

    OperationRegion (GPIV, SystemIO, 0x052C, 0x02)
    Field (GPIV, ByteAcc, NoLock, Preserve)
    {
        GP0I,   1, 
            ,   13, 
        RASI,   1
    }

    OperationRegion (PSYS, SystemMemory, 0x793FA000, 0x0400)
    Field (PSYS, ByteAcc, NoLock, Preserve)
    {
        PLAT,   32, 
        APC0,   1, 
        APC1,   1, 
        APC2,   1, 
        APC3,   1, 
        APC4,   1, 
        Offset (0x05), 
        RES0,   8, 
        TPME,   1, 
        CSEN,   1, 
        C3EN,   1, 
        C6EN,   1, 
        C7EN,   1, 
        MWOS,   1, 
        PSEN,   1, 
        EMCA,   1, 
        HWAL,   1, 
        KPRS,   1, 
        MPRS,   1, 
        TSEN,   1, 
        FGTS,   1, 
        OSCX,   1, 
        RESX,   2, 
        CPHP,   8, 
        IIOP,   8, 
        IIOH,   8, 
        CPUT,   8, 
        PRBM,   32, 
        P0ID,   32, 
        P1ID,   32, 
        P2ID,   32, 
        P3ID,   32, 
        P0BM,   64, 
        P1BM,   64, 
        P2BM,   64, 
        P3BM,   64, 
        MEBM,   16, 
        MEBC,   16, 
        CFMM,   32, 
        TSSZ,   32, 
        M0BS,   64, 
        M1BS,   64, 
        M2BS,   64, 
        M3BS,   64, 
        M4BS,   64, 
        M5BS,   64, 
        M6BS,   64, 
        M7BS,   64, 
        M0RN,   64, 
        M1RN,   64, 
        M2RN,   64, 
        M3RN,   64, 
        M4RN,   64, 
        M5RN,   64, 
        M6RN,   64, 
        M7RN,   64, 
        SMI0,   32, 
        SMI1,   32, 
        SMI2,   32, 
        SMI3,   32, 
        SCI0,   32, 
        SCI1,   32, 
        SCI2,   32, 
        SCI3,   32, 
        MADD,   64, 
        CUU0,   128, 
        CUU1,   128, 
        CUU2,   128, 
        CUU3,   128, 
        CUU4,   128, 
        CUU5,   128, 
        CUU6,   128, 
        CUU7,   128, 
        CPSP,   8, 
        ME00,   128, 
        ME01,   128, 
        ME10,   128, 
        ME11,   128, 
        ME20,   128, 
        ME21,   128, 
        ME30,   128, 
        ME31,   128, 
        ME40,   128, 
        ME41,   128, 
        ME50,   128, 
        ME51,   128, 
        ME60,   128, 
        ME61,   128, 
        ME70,   128, 
        ME71,   128, 
        MESP,   16, 
        DHRD,   192, 
        ATSR,   192, 
        RHSA,   192, 
        LDIR,   64, 
        PRID,   32, 
        WSIC,   8, 
        WSIS,   16, 
        WSIB,   8, 
        WSID,   8, 
        WSIF,   8, 
        WSTS,   8, 
        WHEA,   8, 
        PFMA,   64, 
        PFMS,   8, 
        PFIO,   16, 
        CNBS,   8, 
        XHMD,   8, 
        SBV1,   8, 
        SBV2,   8, 
        SBS3,   8, 
        SBS4,   8, 
        AHPE,   8, 
        CLOD,   8, 
        HWEN,   2, 
        ACEN,   1, 
        RES1,   5
    }

    OperationRegion (GSTS, SystemIO, 0x0422, 0x02)
    Field (GSTS, ByteAcc, NoLock, Preserve)
    {
        GP00,   1, 
            ,   12, 
        GP13,   1
    }

    OperationRegion (GPE0, SystemIO, 0x0428, 0x08)
    Field (GPE0, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        GPEH,   1, 
            ,   1, 
        USB1,   1, 
        USB2,   1, 
        USB5,   1, 
            ,   3, 
        PCIE,   1, 
            ,   1, 
        PMEE,   1, 
        USB3,   1, 
        PMB0,   1, 
        USB4,   1, 
        Offset (0x03), 
            ,   1, 
        Offset (0x04), 
        USB6,   1, 
        Offset (0x06)
    }

    OperationRegion (GPES, SystemIO, 0x0420, 0x08)
    Field (GPES, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        GPSH,   1, 
        SGPS,   1, 
        US1S,   1, 
        US2S,   1, 
        US5S,   1, 
            ,   1, 
        SMWS,   1, 
            ,   1, 
        PEES,   1, 
            ,   1, 
        PMES,   1, 
        US3S,   1, 
        PMBS,   1, 
        US4S,   1, 
        Offset (0x03), 
            ,   1, 
        Offset (0x04), 
        US6S,   1, 
        Offset (0x06)
    }

    Method (IPTS, 1, NotSerialized)
    {
        IO80 = 0x72
        US1S = 0x01
        US2S = 0x01
        US5S = 0x01
        SMWS = 0x01
        PMES = 0x01
        US3S = 0x01
        PMBS = 0x01
        US4S = 0x01
        US6S = 0x01
        GPEH = 0x01
        USB1 = 0x01
        USB2 = 0x01
        USB5 = 0x01
        PCIE = 0x01
        PMEE = 0x01
        USB3 = 0x01
        PMB0 = 0x01
        USB4 = 0x01
        USB6 = 0x01
        If ((\_SB.PCI0.HEC2._STA & 0x02))
        {
            \_SB.PCI0.HEC2.HPTS ()
        }
    }

    Method (_GTS, 1, NotSerialized)  // _GTS: Going To Sleep
    {
        IO80 = Arg0
    }

    Scope (_SB)
    {
        Name (PRUN, Package (0x54)
        {
            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (ARUN, Package (0x54)
        {
            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Method (USTA, 1, NotSerialized)
        {
            Local6 = 0x00
            Local6 = (PRBM >> Arg0)
            Local6 &= 0x01
            If ((Local6 == 0x00))
            {
                Return (0x00)
            }
            Else
            {
                Return (0x0F)
            }
        }

        Device (UNC3)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0xFF)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU3) /* \BBU3 */
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK3")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x03))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.UNC3._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UNC3._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UNC3.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If ((PICM == Zero))
                {
                    Return (PRUN) /* \_SB_.PRUN */
                }

                Return (ARUN) /* \_SB_.ARUN */
            }
        }

        Device (UNC2)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0xBF)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU2) /* \BBU2 */
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK2")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x02))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.UNC2._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UNC2._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UNC2.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If ((PICM == Zero))
                {
                    Return (PRUN) /* \_SB_.PRUN */
                }

                Return (ARUN) /* \_SB_.ARUN */
            }
        }

        Device (UNC1)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0x7F)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU1) /* \BBU1 */
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK1")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x01))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.UNC1._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UNC1._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UNC1.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If ((PICM == Zero))
                {
                    Return (PRUN) /* \_SB_.PRUN */
                }

                Return (ARUN) /* \_SB_.ARUN */
            }
        }

        Device (UNC0)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0x3F)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU0) /* \BBU0 */
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK0")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x00))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                {
                    Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                }
                ElseIf ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.UNC0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UNC0._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UNC0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x007F,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If ((PICM == Zero))
                {
                    Return (PRUN) /* \_SB_.PRUN */
                }

                Return (ARUN) /* \_SB_.ARUN */
            }
        }
    }

    Method (IWAK, 1, Serialized)
    {
        IO80 = 0x73
        If ((\_SB.PCI0.RP01.DEVS () != 0x00))
        {
            Notify (\_SB.PCI0.RP01, 0x00) // Bus Check
        }

        If ((\_SB.PCI0.RP02.DEVS () != 0x00))
        {
            Notify (\_SB.PCI0.RP02, 0x00) // Bus Check
        }

        If ((\_SB.PCI0.RP03.DEVS () != 0x00))
        {
            Notify (\_SB.PCI0.RP03, 0x00) // Bus Check
        }

        If ((\_SB.PCI0.RP04.DEVS () != 0x00))
        {
            Notify (\_SB.PCI0.RP04, 0x00) // Bus Check
        }

        If ((\_SB.PCI0.RP05.DEVS () != 0x00))
        {
            Notify (\_SB.PCI0.RP05, 0x00) // Bus Check
        }

        If ((\_SB.PCI0.RP06.DEVS () != 0x00))
        {
            Notify (\_SB.PCI0.RP06, 0x00) // Bus Check
        }

        If ((\_SB.PCI0.RP07.DEVS () != 0x00))
        {
            Notify (\_SB.PCI0.RP07, 0x00) // Bus Check
        }

        If ((\_SB.PCI0.RP08.DEVS () != 0x00))
        {
            Notify (\_SB.PCI0.RP08, 0x00) // Bus Check
        }

        Notify (\_SB.PCI0.EHC1, 0x00) // Bus Check
        Notify (\_SB.PCI0.EHC2, 0x00) // Bus Check
        If ((\_SB.PCI0.HEC2._STA & 0x02))
        {
            \_SB.PCI0.HEC2.HWAK ()
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            \_SB.PCI0.XHCI.XWAK ()
        }

        Return (Package (0x02)
        {
            0x00, 
            0x00
        })
    }

    Scope (_SB)
    {
        Scope (\_SB)
        {
            Method (PSTA, 1, NotSerialized)
            {
                Local6 = (PRBM >> Arg0)
                Local6 &= 0x01
                If ((Local6 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (TMID, 2, NotSerialized)
            {
                Local0 = (Arg0 * 0x02)
                Local1 = (Local0 + Arg1)
                Return (Local1)
            }

            Name (APTC, Buffer (0x30)
            {
                /* 0000 */  0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14,  // ........
                /* 0008 */  0x16, 0x18, 0x01, 0x03, 0x05, 0x07, 0x09, 0x11,  // ........
                /* 0010 */  0x13, 0x15, 0x17, 0x19, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
            })
            Method (TPID, 2, NotSerialized)
            {
                Local0 = 0x00
                If ((Arg0 == 0x00))
                {
                    Local0 = P0ID /* \P0ID */
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = P1ID /* \P1ID */
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = P2ID /* \P2ID */
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = P3ID /* \P3ID */
                }

                Local0 += DerefOf (APTC [Arg1])
                Return (Local0)
            }

            Method (MSTA, 1, NotSerialized)
            {
                Local6 = (MEBM >> Arg0)
                Local6 &= 0x01
                If ((Local6 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (CSTA, 2, NotSerialized)
            {
                Local0 = 0x00
                Local1 = 0x00
                Local1 = TPID (Arg0, Arg1)
                Local2 = 0x00
                Local2 += DerefOf (APTC [Arg1])
                If ((Local2 == 0xFF))
                {
                    Return (0x00)
                }

                If ((Arg0 == 0x00))
                {
                    Local0 = (P0BM >> Local2)
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = (P1BM >> Local2)
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = (P2BM >> Local2)
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = (P3BM >> Local2)
                }

                Local0 &= 0x01
                If ((Local0 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x01)
                }
            }

            Method (LAPC, 2, NotSerialized)
            {
                Name (APIC, Buffer (0x08){})
                CreateByteField (APIC, 0x00, TYPE)
                CreateByteField (APIC, 0x01, LLEN)
                CreateByteField (APIC, 0x02, PRID)
                CreateByteField (APIC, 0x03, APID)
                CreateDWordField (APIC, 0x04, FLAG)
                TYPE = 0x00
                LLEN = 0x08
                APID = TPID (Arg0, Arg1)
                If ((CSTA (Arg0, Arg1) == 0x00))
                {
                    FLAG = 0x00
                    PRID = 0xFF
                    APID = 0xFF
                }
                Else
                {
                    Local0 = APID /* \_SB_.LAPC.APID */
                    PRID = Local0
                    FLAG = 0x01
                }

                Return (APIC) /* \_SB_.LAPC.APIC */
            }

            Device (SCK0)
            {
                Name (_HID, "ACPI0004" /* Module Device */)  // _HID: Hardware ID
                Name (_UID, "CPUSCK0")  // _UID: Unique ID
                Name (LSTA, 0xFF)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    CUU0 = "CPUSCK0"
                    Local0 = PSTA (0x00)
                    Local1 = (Local0 & 0x03)
                    If (((LSTA != 0xFF) && (Local1 != LSTA)))
                    {
                        If ((Local1 == 0x03)){}
                        Else
                        {
                        }
                    }

                    LSTA = Local1
                    Return (Local0)
                }

                Method (THNU, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = P0BM /* \P0BM */
                    While (Local1)
                    {
                        Local0 += (Local1 & 0x01)
                        Local1 >>= 0x01
                    }

                    Return ((0x00 | Local0))
                }

                Processor (CP00, 0x00, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP00")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x00])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x00) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x00))
                    }
                }

                Processor (CP01, 0x02, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP01")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x01])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x01) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x01))
                    }
                }

                Processor (CP02, 0x04, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP02")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x02])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x02) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x02))
                    }
                }

                Processor (CP03, 0x06, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP03")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x03])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x03) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x03))
                    }
                }

                Processor (CP04, 0x08, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP04")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x04])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x04) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x04))
                    }
                }

                Processor (CP05, 0x10, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP05")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x05])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x05) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x05))
                    }
                }

                Processor (CP06, 0x12, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP06")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x06])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x06) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x06))
                    }
                }

                Processor (CP07, 0x14, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP07")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x07])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x07) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x07))
                    }
                }

                Processor (CP08, 0x16, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP08")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x08])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x08) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x08))
                    }
                }

                Processor (CP09, 0x18, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP09")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x09])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x09) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x09))
                    }
                }

                Processor (CP0A, 0x01, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0A))
                    }
                }

                Processor (CP0B, 0x03, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0B))
                    }
                }

                Processor (CP0C, 0x05, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0C))
                    }
                }

                Processor (CP0D, 0x07, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0D))
                    }
                }

                Processor (CP0E, 0x09, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0E))
                    }
                }

                Processor (CP0F, 0x11, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0F))
                    }
                }

                Processor (CP10, 0x13, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP10")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x10])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x10) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x10))
                    }
                }

                Processor (CP11, 0x15, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP11")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x11])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x11) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x11))
                    }
                }

                Processor (CP12, 0x17, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP12")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x12])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x12) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x12))
                    }
                }

                Processor (CP13, 0x19, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP13")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x13])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x13) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x13))
                    }
                }

                Processor (CP14, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP14")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x14])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x14) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x14))
                    }
                }

                Processor (CP15, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP15")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x15])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x15) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x15))
                    }
                }

                Processor (CP16, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP16")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x16])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x16) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x16))
                    }
                }

                Processor (CP17, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP17")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x17])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x17) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x17))
                    }
                }

                Processor (CP18, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP18")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x18])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x18) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x18))
                    }
                }

                Processor (CP19, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP19")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x19])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x19) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x19))
                    }
                }

                Processor (CP1A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1A))
                    }
                }

                Processor (CP1B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1B))
                    }
                }

                Processor (CP1C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1C))
                    }
                }

                Processor (CP1D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1D))
                    }
                }

                Processor (CP1E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1E))
                    }
                }

                Processor (CP1F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1F))
                    }
                }

                Processor (CP20, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP20")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x20])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x20) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x20))
                    }
                }

                Processor (CP21, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP21")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x21])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x21) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x21))
                    }
                }

                Processor (CP22, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP22")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x22])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x22) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x22))
                    }
                }

                Processor (CP23, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP23")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x23])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x23) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x23))
                    }
                }

                Processor (CP24, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP24")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x24])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x24) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x24))
                    }
                }

                Processor (CP25, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP25")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x25])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x25) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x25))
                    }
                }

                Processor (CP26, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP26")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x26])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x26) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x26))
                    }
                }

                Processor (CP27, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP27")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x27])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x27) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x27))
                    }
                }

                Processor (CP28, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP28")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x28])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x28) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x28))
                    }
                }

                Processor (CP29, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP29")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x29])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x29) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x29))
                    }
                }

                Processor (CP2A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2A))
                    }
                }

                Processor (CP2B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2B))
                    }
                }

                Processor (CP2C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2C))
                    }
                }

                Processor (CP2D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2D))
                    }
                }

                Processor (CP2E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2E))
                    }
                }

                Processor (CP2F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2F))
                    }
                }
            }

            Device (SCK1)
            {
                Name (_HID, "ACPI0004" /* Module Device */)  // _HID: Hardware ID
                Name (_UID, "CPUSCK1")  // _UID: Unique ID
                Name (LSTA, 0xFF)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    CUU1 = "CPUSCK1"
                    Local0 = PSTA (0x01)
                    Local1 = (Local0 & 0x03)
                    If (((LSTA != 0xFF) && (Local1 != LSTA)))
                    {
                        If ((Local1 == 0x03)){}
                        Else
                        {
                        }
                    }

                    LSTA = Local1
                    Return (Local0)
                }

                Method (THNU, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = P1BM /* \P1BM */
                    While (Local1)
                    {
                        Local0 += (Local1 & 0x01)
                        Local1 >>= 0x01
                    }

                    Return ((0x0100 | Local0))
                }

                Processor (CP00, 0x20, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP00")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x00])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x00) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x00))
                    }
                }

                Processor (CP01, 0x22, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP01")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x01])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x01) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x01))
                    }
                }

                Processor (CP02, 0x24, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP02")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x02])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x02) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x02))
                    }
                }

                Processor (CP03, 0x26, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP03")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x03])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x03) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x03))
                    }
                }

                Processor (CP04, 0x28, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP04")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x04])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x04) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x04))
                    }
                }

                Processor (CP05, 0x30, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP05")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x05])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x05) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x05))
                    }
                }

                Processor (CP06, 0x32, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP06")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x06])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x06) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x06))
                    }
                }

                Processor (CP07, 0x34, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP07")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x07])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x07) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x07))
                    }
                }

                Processor (CP08, 0x36, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP08")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x08])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x08) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x08))
                    }
                }

                Processor (CP09, 0x38, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP09")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x09])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x09) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x09))
                    }
                }

                Processor (CP0A, 0x21, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0A))
                    }
                }

                Processor (CP0B, 0x23, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0B))
                    }
                }

                Processor (CP0C, 0x25, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0C))
                    }
                }

                Processor (CP0D, 0x27, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0D))
                    }
                }

                Processor (CP0E, 0x29, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0E))
                    }
                }

                Processor (CP0F, 0x31, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0F))
                    }
                }

                Processor (CP10, 0x33, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP10")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x10])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x10) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x10))
                    }
                }

                Processor (CP11, 0x35, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP11")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x11])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x11) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x11))
                    }
                }

                Processor (CP12, 0x37, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP12")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x12])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x12) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x12))
                    }
                }

                Processor (CP13, 0x39, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP13")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x13])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x13) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x13))
                    }
                }

                Processor (CP14, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP14")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x14])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x14) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x14))
                    }
                }

                Processor (CP15, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP15")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x15])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x15) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x15))
                    }
                }

                Processor (CP16, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP16")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x16])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x16) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x16))
                    }
                }

                Processor (CP17, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP17")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x17])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x17) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x17))
                    }
                }

                Processor (CP18, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP18")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x18])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x18) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x18))
                    }
                }

                Processor (CP19, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP19")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x19])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x19) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x19))
                    }
                }

                Processor (CP1A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1A))
                    }
                }

                Processor (CP1B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1B))
                    }
                }

                Processor (CP1C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1C))
                    }
                }

                Processor (CP1D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1D))
                    }
                }

                Processor (CP1E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1E))
                    }
                }

                Processor (CP1F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1F))
                    }
                }

                Processor (CP20, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP20")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x20])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x20) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x20))
                    }
                }

                Processor (CP21, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP21")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x21])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x21) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x21))
                    }
                }

                Processor (CP22, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP22")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x22])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x22) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x22))
                    }
                }

                Processor (CP23, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP23")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x23])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x23) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x23))
                    }
                }

                Processor (CP24, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP24")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x24])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x24) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x24))
                    }
                }

                Processor (CP25, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP25")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x25])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x25) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x25))
                    }
                }

                Processor (CP26, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP26")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x26])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x26) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x26))
                    }
                }

                Processor (CP27, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP27")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x27])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x27) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x27))
                    }
                }

                Processor (CP28, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP28")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x28])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x28) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x28))
                    }
                }

                Processor (CP29, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP29")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x29])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x29) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x29))
                    }
                }

                Processor (CP2A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2A))
                    }
                }

                Processor (CP2B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2B))
                    }
                }

                Processor (CP2C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2C))
                    }
                }

                Processor (CP2D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2D))
                    }
                }

                Processor (CP2E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2E))
                    }
                }

                Processor (CP2F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2F))
                    }
                }
            }

            Device (SCK2)
            {
                Name (_HID, "ACPI0004" /* Module Device */)  // _HID: Hardware ID
                Name (_UID, "CPUSCK2")  // _UID: Unique ID
                Name (LSTA, 0xFF)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    CUU2 = "CPUSCK2"
                    Local0 = PSTA (0x02)
                    Local1 = (Local0 & 0x03)
                    If (((LSTA != 0xFF) && (Local1 != LSTA)))
                    {
                        If ((Local1 == 0x03)){}
                        Else
                        {
                        }
                    }

                    LSTA = Local1
                    Return (Local0)
                }

                Method (THNU, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = P2BM /* \P2BM */
                    While (Local1)
                    {
                        Local0 += (Local1 & 0x01)
                        Local1 >>= 0x01
                    }

                    Return ((0x0200 | Local0))
                }

                Processor (CP00, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP00")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x00])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x00) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x00))
                    }
                }

                Processor (CP01, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP01")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x01])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x01) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x01))
                    }
                }

                Processor (CP02, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP02")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x02])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x02) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x02))
                    }
                }

                Processor (CP03, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP03")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x03])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x03) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x03))
                    }
                }

                Processor (CP04, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP04")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x04])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x04) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x04))
                    }
                }

                Processor (CP05, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP05")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x05])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x05) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x05))
                    }
                }

                Processor (CP06, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP06")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x06])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x06) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x06))
                    }
                }

                Processor (CP07, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP07")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x07])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x07) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x07))
                    }
                }

                Processor (CP08, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP08")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x08])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x08) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x08))
                    }
                }

                Processor (CP09, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP09")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x09])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x09) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x09))
                    }
                }

                Processor (CP0A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x0A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0A))
                    }
                }

                Processor (CP0B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x0B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0B))
                    }
                }

                Processor (CP0C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x0C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0C))
                    }
                }

                Processor (CP0D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x0D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0D))
                    }
                }

                Processor (CP0E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x0E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0E))
                    }
                }

                Processor (CP0F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x0F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0F))
                    }
                }

                Processor (CP10, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP10")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x10])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x10) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x10))
                    }
                }

                Processor (CP11, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP11")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x11])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x11) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x11))
                    }
                }

                Processor (CP12, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP12")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x12])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x12) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x12))
                    }
                }

                Processor (CP13, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP13")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x13])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x13) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x13))
                    }
                }

                Processor (CP14, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP14")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x14])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x14) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x14))
                    }
                }

                Processor (CP15, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP15")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x15])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x15) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x15))
                    }
                }

                Processor (CP16, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP16")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x16])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x16) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x16))
                    }
                }

                Processor (CP17, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP17")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x17])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x17) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x17))
                    }
                }

                Processor (CP18, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP18")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x18])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x18) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x18))
                    }
                }

                Processor (CP19, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP19")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x19])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x19) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x19))
                    }
                }

                Processor (CP1A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x1A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1A))
                    }
                }

                Processor (CP1B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x1B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1B))
                    }
                }

                Processor (CP1C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x1C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1C))
                    }
                }

                Processor (CP1D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x1D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1D))
                    }
                }

                Processor (CP1E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x1E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1E))
                    }
                }

                Processor (CP1F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x1F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1F))
                    }
                }

                Processor (CP20, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP20")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x20])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x20) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x20))
                    }
                }

                Processor (CP21, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP21")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x21])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x21) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x21))
                    }
                }

                Processor (CP22, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP22")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x22])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x22) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x22))
                    }
                }

                Processor (CP23, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP23")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x23])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x23) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x23))
                    }
                }

                Processor (CP24, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP24")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x24])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x24) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x24))
                    }
                }

                Processor (CP25, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP25")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x25])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x25) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x25))
                    }
                }

                Processor (CP26, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP26")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x26])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x26) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x26))
                    }
                }

                Processor (CP27, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP27")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x27])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x27) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x27))
                    }
                }

                Processor (CP28, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP28")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x28])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x28) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x28))
                    }
                }

                Processor (CP29, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP29")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x29])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x29) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x29))
                    }
                }

                Processor (CP2A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x2A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2A))
                    }
                }

                Processor (CP2B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x2B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2B))
                    }
                }

                Processor (CP2C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x2C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2C))
                    }
                }

                Processor (CP2D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x2D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2D))
                    }
                }

                Processor (CP2E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x2E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2E))
                    }
                }

                Processor (CP2F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x2F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2F))
                    }
                }
            }

            Device (SCK3)
            {
                Name (_HID, "ACPI0004" /* Module Device */)  // _HID: Hardware ID
                Name (_UID, "CPUSCK3")  // _UID: Unique ID
                Name (LSTA, 0xFF)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    CUU3 = "CPUSCK3"
                    Local0 = PSTA (0x03)
                    Local1 = (Local0 & 0x03)
                    If (((LSTA != 0xFF) && (Local1 != LSTA)))
                    {
                        If ((Local1 == 0x03)){}
                        Else
                        {
                        }
                    }

                    LSTA = Local1
                    Return (Local0)
                }

                Method (THNU, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = P3BM /* \P3BM */
                    While (Local1)
                    {
                        Local0 += (Local1 & 0x01)
                        Local1 >>= 0x01
                    }

                    Return ((0x0300 | Local0))
                }

                Processor (CP00, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP00")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x00])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x00) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x00))
                    }
                }

                Processor (CP01, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP01")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x01])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x01) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x01))
                    }
                }

                Processor (CP02, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP02")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x02])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x02) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x02))
                    }
                }

                Processor (CP03, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP03")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x03])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x03) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x03))
                    }
                }

                Processor (CP04, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP04")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x04])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x04) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x04))
                    }
                }

                Processor (CP05, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP05")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x05])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x05) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x05))
                    }
                }

                Processor (CP06, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP06")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x06])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x06) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x06))
                    }
                }

                Processor (CP07, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP07")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x07])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x07) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x07))
                    }
                }

                Processor (CP08, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP08")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x08])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x08) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x08))
                    }
                }

                Processor (CP09, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP09")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x09])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x09) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x09))
                    }
                }

                Processor (CP0A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x0A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0A))
                    }
                }

                Processor (CP0B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x0B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0B))
                    }
                }

                Processor (CP0C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x0C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0C))
                    }
                }

                Processor (CP0D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x0D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0D))
                    }
                }

                Processor (CP0E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x0E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0E))
                    }
                }

                Processor (CP0F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x0F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0F))
                    }
                }

                Processor (CP10, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP10")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x10])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x10) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x10))
                    }
                }

                Processor (CP11, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP11")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x11])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x11) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x11))
                    }
                }

                Processor (CP12, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP12")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x12])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x12) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x12))
                    }
                }

                Processor (CP13, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP13")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x13])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x13) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x13))
                    }
                }

                Processor (CP14, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP14")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x14])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x14) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x14))
                    }
                }

                Processor (CP15, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP15")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x15])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x15) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x15))
                    }
                }

                Processor (CP16, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP16")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x16])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x16) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x16))
                    }
                }

                Processor (CP17, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP17")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x17])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x17) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x17))
                    }
                }

                Processor (CP18, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP18")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x18])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x18) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x18))
                    }
                }

                Processor (CP19, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP19")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x19])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x19) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x19))
                    }
                }

                Processor (CP1A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x1A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1A))
                    }
                }

                Processor (CP1B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x1B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1B))
                    }
                }

                Processor (CP1C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x1C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1C))
                    }
                }

                Processor (CP1D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x1D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1D))
                    }
                }

                Processor (CP1E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x1E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1E))
                    }
                }

                Processor (CP1F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x1F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1F))
                    }
                }

                Processor (CP20, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP20")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x20])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x20) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x20))
                    }
                }

                Processor (CP21, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP21")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x21])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x21) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x21))
                    }
                }

                Processor (CP22, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP22")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x22])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x22) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x22))
                    }
                }

                Processor (CP23, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP23")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x23])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x23) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x23))
                    }
                }

                Processor (CP24, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP24")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x24])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x24) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x24))
                    }
                }

                Processor (CP25, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP25")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x25])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x25) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x25))
                    }
                }

                Processor (CP26, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP26")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x26])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x26) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x26))
                    }
                }

                Processor (CP27, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP27")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x27])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x27) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x27))
                    }
                }

                Processor (CP28, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP28")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x28])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x28) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x28))
                    }
                }

                Processor (CP29, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP29")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x29])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x29) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x29))
                    }
                }

                Processor (CP2A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x2A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2A))
                    }
                }

                Processor (CP2B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x2B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2B))
                    }
                }

                Processor (CP2C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x2C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2C))
                    }
                }

                Processor (CP2D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x2D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2D))
                    }
                }

                Processor (CP2E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x2E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2E))
                    }
                }

                Processor (CP2F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x2F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2F))
                    }
                }
            }
        }

        OperationRegion (IOB2, SystemIO, 0xB2, 0x02)
        Field (IOB2, ByteAcc, NoLock, Preserve)
        {
            SMIC,   8, 
            SMIS,   8
        }
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Name (PRSC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSC, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PG17, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }
        })
        Name (AG17, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }
        })
        Name (PG18, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }
        })
        Name (AG18, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }
        })
        Name (PG19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PR00, Package (0x25)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                LNKE, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR00, Package (0x25)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                0x00, 
                0x14
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x19
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x1C
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x1D
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x1E
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x27
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x27
            }
        })
        Name (PG26, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG26, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x1E
            }
        })
        Name (PG28, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG28, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x26
            }
        })
        Name (PG2C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG2C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2E
            }
        })
        Name (PR40, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR40, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x31
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x32
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x34
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x35
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x36
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x38
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x3C
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x3D
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x3E
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x40
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x44
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x45
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x46
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x37
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x3F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x37
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x3F
            }
        })
        Name (PG32, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG32, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x35
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x36
            }
        })
        Name (PG34, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG34, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x38
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x3C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x3D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x3E
            }
        })
        Name (PG3A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG3A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x42
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x45
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x44
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x46
            }
        })
        Name (PR80, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR80, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x48
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x49
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x49
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x49
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x4A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x4C
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x4D
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x4E
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x50
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x54
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x55
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x56
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x58
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x5C
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x5D
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x5E
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x4F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x57
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x4F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x57
            }
        })
        Name (PRC0, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (ARC0, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x60
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x61
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x61
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x61
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x62
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x64
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x65
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x66
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x68
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x6C
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x6D
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x6E
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x70
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x74
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x75
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x76
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x67
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x6F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x67
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x6F
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (0x00)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                Local0 = _BBN ()
                If ((Local0 == 0x00))
                {
                    If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                    {
                        Return (^XHCI.POSC (Arg1, Arg2, Arg3))
                    }
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^BR1A.OSHP ()
                            ^BR1B.OSHP ()
                            ^BR2A.OSHP ()
                            ^BR2B.OSHP ()
                            ^BR2C.OSHP ()
                            ^BR2D.OSHP ()
                            ^BR3A.OSHP ()
                            ^BR3B.OSHP ()
                            ^BR3C.OSHP ()
                            ^BR3D.OSHP ()
                            Local1 = (IIOH >> 0x01)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI1.QRP0.OSHP ()
                                ^^PCI1.QR1A.OSHP ()
                                ^^PCI1.QR1B.OSHP ()
                                ^^PCI1.QR2A.OSHP ()
                                ^^PCI1.QR2B.OSHP ()
                                ^^PCI1.QR2C.OSHP ()
                                ^^PCI1.QR2D.OSHP ()
                                ^^PCI1.QR3A.OSHP ()
                                ^^PCI1.QR3B.OSHP ()
                                ^^PCI1.QR3C.OSHP ()
                                ^^PCI1.QR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x02)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI2.RRP0.OSHP ()
                                ^^PCI2.RR1A.OSHP ()
                                ^^PCI2.RR1B.OSHP ()
                                ^^PCI2.RR2A.OSHP ()
                                ^^PCI2.RR2B.OSHP ()
                                ^^PCI2.RR2C.OSHP ()
                                ^^PCI2.RR2D.OSHP ()
                                ^^PCI2.RR3A.OSHP ()
                                ^^PCI2.RR3B.OSHP ()
                                ^^PCI2.RR3C.OSHP ()
                                ^^PCI2.RR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x03)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI3.SRP0.OSHP ()
                                ^^PCI3.SR1A.OSHP ()
                                ^^PCI3.SR1B.OSHP ()
                                ^^PCI3.SR2A.OSHP ()
                                ^^PCI3.SR2B.OSHP ()
                                ^^PCI3.SR2C.OSHP ()
                                ^^PCI3.SR2D.OSHP ()
                                ^^PCI3.SR3A.OSHP ()
                                ^^PCI3.SR3B.OSHP ()
                                ^^PCI3.SR3C.OSHP ()
                                ^^PCI3.SR3D.OSHP ()
                            }

                            GPSH = 0x01
                        }

                        If ((Arg1 != One))
                        {
                            CDW1 |= 0x08
                        }

                        If ((CDW3 != CTRL))
                        {
                            CDW1 |= 0x10
                        }

                        CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                        Return (Arg3)
                    }
                    Else
                    {
                        CDW1 |= 0x04
                        IO80 = 0xEE
                        Return (Arg3)
                    }
                }
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Name (_PXM, 0x00)  // _PXM: Device Proximity
            Device (APIC)
            {
                Name (_HID, EisaId ("PNP0003") /* IO-APIC Interrupt Controller */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEC00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                })
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "PCI0PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }
            }

            Name (P0RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007E,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x007F,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x1000,             // Range Minimum
                    0x7FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x7000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x90000000,         // Range Minimum
                    0xF3FFBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x63FFC000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000380000000000, // Range Minimum
                    0x0000383FFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            OperationRegion (TMEM, PCI_Config, 0x00, 0x0100)
            Field (TMEM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                    ,   4, 
                BSEG,   4, 
                PAMS,   48, 
                Offset (0x52), 
                DIM0,   4, 
                DIM1,   4, 
                Offset (0x54), 
                DIM2,   4
            }

            Name (MTBL, Package (0x10)
            {
                0x00, 
                0x20, 
                0x20, 
                0x30, 
                0x40, 
                0x40, 
                0x60, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0xC0, 
                0x0100, 
                0x0100, 
                0x0100, 
                0x0200
            })
            Name (ERNG, Package (0x0D)
            {
                0x000C0000, 
                0x000C4000, 
                0x000C8000, 
                0x000CC000, 
                0x000D0000, 
                0x000D4000, 
                0x000D8000, 
                0x000DC000, 
                0x000E0000, 
                0x000E4000, 
                0x000E8000, 
                0x000EC000, 
                0x000F0000
            })
            Name (PAMB, Buffer (0x07){})
            Method (EROM, 0, NotSerialized)
            {
                CreateDWordField (P0RS, \_SB.PCI0._Y00._MIN, RMIN)  // _MIN: Minimum Base Address
                CreateDWordField (P0RS, \_SB.PCI0._Y00._MAX, RMAX)  // _MAX: Maximum Base Address
                CreateDWordField (P0RS, \_SB.PCI0._Y00._LEN, RLEN)  // _LEN: Length
                CreateByteField (PAMB, 0x06, BREG)
                PAMB = PAMS /* \_SB_.PCI0.PAMS */
                BREG = BSEG /* \_SB_.PCI0.BSEG */
                RMIN = 0x00
                RMAX = 0x00
                RLEN = 0x00
                Local0 = 0x00
                While ((Local0 < 0x0D))
                {
                    Local1 = (Local0 >> 0x01)
                    Local2 = DerefOf (PAMB [Local1])
                    If ((Local0 & 0x01))
                    {
                        Local2 >>= 0x04
                    }

                    Local2 &= 0x03
                    If (RMIN)
                    {
                        If (Local2)
                        {
                            RMAX = (DerefOf (ERNG [Local0]) + 0x3FFF)
                            If ((RMAX == 0x000F3FFF))
                            {
                                RMAX = 0x000FFFFF
                            }

                            RLEN = (RMAX - RMIN) /* \_SB_.PCI0.EROM.RMIN */
                            RLEN++
                        }
                        Else
                        {
                            Local0 = 0x0C
                        }
                    }
                    ElseIf (Local2)
                    {
                        RMIN = DerefOf (ERNG [Local0])
                        RMAX = (DerefOf (ERNG [Local0]) + 0x3FFF)
                        If ((RMAX == 0x000F3FFF))
                        {
                            RMAX = 0x000FFFFF
                        }

                        RLEN = (RMAX - RMIN) /* \_SB_.PCI0.EROM.RMIN */
                        RLEN++
                    }
                    Else
                    {
                    }

                    Local0++
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P0RS) /* \_SB_.PCI0.P0RS */
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "00-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x00, 0x0100)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x0E), 
                    STM0,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "00-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x00, 0x0100)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x1E), 
                    STM1,   7
                }
            }

            Scope (\_SB.PCI0)
            {
                Name (SLI1, Buffer (0x9E)
                {
                    "791369584825Genuine NVIDIA Certified SLI Ready Motherboard for INTEL CRB           ef7c-Copyright 2014 NVIDIA Corporation All Rights Reserved-394180768352(R)"
                })
                Name (SLI0, Buffer (0x5B)
                {
                    " No SLI key has been loaded because this board does not support SLI.  Intel Coporation (R)"
                })
            }

            Device (WMI1)
            {
                Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                Name (_UID, "MXM2")  // _UID: Unique ID
                Name (_WDG, Buffer (0x14)
                {
                    /* 0000 */  0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,  // <\.....N
                    /* 0008 */  0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,  // .w...*,.
                    /* 0010 */  0x4D, 0x58, 0x01, 0x02                           // MX..
                })
                Method (WMMX, 3, NotSerialized)
                {
                    CreateDWordField (Arg2, 0x00, FUNC)
                    If ((FUNC == 0x41494C53))
                    {
                        Return (SLI1) /* \_SB_.PCI0.SLI1 */
                    }

                    Return (0x00)
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                OperationRegion (LPCB, PCI_Config, 0x00, 0x0100)
                Field (LPCB, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x4C), 
                    GLE0,   1, 
                    Offset (0xAC), 
                    Offset (0xAE), 
                    XSMB,   1
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {4}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0074,             // Range Minimum
                            0x0074,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                }

                Device (FPU)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    OperationRegion (HPTC, SystemMemory, 0xFED1F404, 0x04)
                    Field (HPTC, DWordAcc, NoLock, Preserve)
                    {
                        HPTS,   2, 
                            ,   5, 
                        HPTE,   1, 
                        Offset (0x04)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (HPTE)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (CRS0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED01000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED02000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS3, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED03000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Switch (ToInteger (HPTS))
                        {
                            Case (0x00)
                            {
                                Return (CRS0) /* \_SB_.PCI0.LPC0.HPET.CRS0 */
                            }
                            Case (0x01)
                            {
                                Return (CRS1) /* \_SB_.PCI0.LPC0.HPET.CRS1 */
                            }
                            Case (0x02)
                            {
                                Return (CRS2) /* \_SB_.PCI0.LPC0.HPET.CRS2 */
                            }
                            Case (0x03)
                            {
                                Return (CRS3) /* \_SB_.PCI0.LPC0.HPET.CRS3 */
                            }

                        }

                        Return (CRS0) /* \_SB_.PCI0.LPC0.HPET.CRS0 */
                    }
                }

                Device (XTRA)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0580,             // Range Minimum
                            0x0580,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0600,             // Range Minimum
                            0x0600,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0880,             // Range Minimum
                            0x0880,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED1C000,         // Address Base
                            0x00024000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED45000,         // Address Base
                            0x00047000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFEE00000,         // Address Base
                            0x00100000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED12000,         // Address Base
                            0x00000010,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED12010,         // Address Base
                            0x00000010,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED1B000,         // Address Base
                            0x00001000,         // Address Length
                            )
                    })
                }

                OperationRegion (LPCR, PCI_Config, 0x80, 0x04)
                Field (LPCR, ByteAcc, NoLock, Preserve)
                {
                    CADR,   3, 
                        ,   1, 
                    CBDR,   3, 
                    Offset (0x01), 
                    LTDR,   2, 
                        ,   2, 
                    FDDR,   1, 
                    Offset (0x02), 
                    CALE,   1, 
                    CBLE,   1, 
                    LTLE,   1, 
                    FDLE,   1, 
                    Offset (0x03), 
                    GLLE,   1, 
                    GHLE,   1, 
                    KCLE,   1, 
                    MCLE,   1, 
                    C1LE,   1, 
                    C2LE,   1, 
                    Offset (0x04)
                }

                OperationRegion (SMIE, SystemIO, PMBA, 0x04)
                Field (SMIE, ByteAcc, NoLock, Preserve)
                {
                        ,   10, 
                    RTCS,   1, 
                        ,   3, 
                    PEXS,   1, 
                    WAKS,   1, 
                    Offset (0x03), 
                    PWBT,   1, 
                    Offset (0x04)
                }

                OperationRegion (SLPR, SystemIO, SMCR, 0x08)
                Field (SLPR, ByteAcc, NoLock, Preserve)
                {
                        ,   4, 
                    SLPE,   1, 
                        ,   31, 
                    SLPX,   1, 
                    Offset (0x08)
                }

                Method (UXDV, 1, Serialized)
                {
                    Local0 = 0xFF
                    Switch ((Arg0 + 0x00))
                    {
                        Case (0x03F8)
                        {
                            Local0 = 0x00
                        }
                        Case (0x02F8)
                        {
                            Local0 = 0x01
                        }
                        Case (0x0220)
                        {
                            Local0 = 0x02
                        }
                        Case (0x0228)
                        {
                            Local0 = 0x03
                        }
                        Case (0x0238)
                        {
                            Local0 = 0x04
                        }
                        Case (0x02E8)
                        {
                            Local0 = 0x05
                        }
                        Case (0x0338)
                        {
                            Local0 = 0x06
                        }
                        Case (0x03E8)
                        {
                            Local0 = 0x07
                        }

                    }

                    Return (Local0)
                }

                Method (RRIO, 4, Serialized)
                {
                    Switch ((Arg0 + 0x00))
                    {
                        Case (0x00)
                        {
                            CALE = 0x00
                            Local0 = UXDV (Arg2)
                            If ((Local0 != 0xFF))
                            {
                                CADR = Local0
                            }

                            If (Arg1)
                            {
                                CALE = 0x01
                            }
                        }
                        Case (0x01)
                        {
                            CBLE = 0x00
                            Local0 = UXDV (Arg2)
                            If ((Local0 != 0xFF))
                            {
                                CBDR = Local0
                            }

                            If (Arg1)
                            {
                                CBLE = 0x01
                            }
                        }
                        Case (0x02)
                        {
                            LTLE = 0x00
                            If ((Arg2 == 0x0378))
                            {
                                LTDR = 0x00
                            }

                            If ((Arg2 == 0x0278))
                            {
                                LTDR = 0x01
                            }

                            If ((Arg2 == 0x03BC))
                            {
                                LTDR = 0x02
                            }

                            If (Arg1)
                            {
                                LTLE = 0x01
                            }
                        }
                        Case (0x03)
                        {
                            FDLE = 0x00
                            If ((Arg2 == 0x03F0))
                            {
                                FDDR = 0x00
                            }

                            If ((Arg2 == 0x0370))
                            {
                                FDDR = 0x01
                            }

                            If (Arg1)
                            {
                                FDLE = 0x01
                            }
                        }
                        Case (0x08)
                        {
                            If ((Arg2 == 0x0200))
                            {
                                If (Arg1)
                                {
                                    GLLE = 0x01
                                }
                                Else
                                {
                                    GLLE = 0x00
                                }
                            }

                            If ((Arg2 == 0x0208))
                            {
                                If (Arg1)
                                {
                                    GHLE = 0x01
                                }
                                Else
                                {
                                    GHLE = 0x00
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((Arg2 == 0x0200))
                            {
                                If (Arg1)
                                {
                                    GLLE = 0x01
                                }
                                Else
                                {
                                    GLLE = 0x00
                                }
                            }

                            If ((Arg2 == 0x0208))
                            {
                                If (Arg1)
                                {
                                    GHLE = 0x01
                                }
                                Else
                                {
                                    GHLE = 0x00
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (((Arg2 == 0x60) || (Arg2 == 0x64)))
                            {
                                If (Arg1)
                                {
                                    KCLE = 0x01
                                }
                                Else
                                {
                                    KCLE = 0x00
                                }
                            }
                        }
                        Case (0x0B)
                        {
                            If (((Arg2 == 0x62) || (Arg2 == 0x66)))
                            {
                                If (Arg1)
                                {
                                    MCLE = 0x01
                                }
                                Else
                                {
                                    MCLE = 0x00
                                }
                            }
                        }
                        Case (0x0C)
                        {
                            If ((Arg2 == 0x2E))
                            {
                                If (Arg1)
                                {
                                    C1LE = 0x01
                                }
                                Else
                                {
                                    C1LE = 0x00
                                }
                            }

                            If ((Arg2 == 0x4E))
                            {
                                If (Arg1)
                                {
                                    C2LE = 0x01
                                }
                                Else
                                {
                                    C2LE = 0x00
                                }
                            }
                        }
                        Case (0x0D)
                        {
                            If ((Arg2 == 0x2E))
                            {
                                If (Arg1)
                                {
                                    C1LE = 0x01
                                }
                                Else
                                {
                                    C1LE = 0x00
                                }
                            }

                            If ((Arg2 == 0x4E))
                            {
                                If (Arg1)
                                {
                                    C2LE = 0x01
                                }
                                Else
                                {
                                    C2LE = 0x00
                                }
                            }
                        }

                    }
                }

                Method (RDMA, 3, NotSerialized)
                {
                }

                Method (SPTS, 1, NotSerialized)
                {
                    SLPX = One
                    SLPE = One
                }

                Method (SWAK, 1, NotSerialized)
                {
                    SLPE = Zero
                    If (RTCS){}
                    Else
                    {
                        Notify (PWRB, 0x02) // Device Wake
                    }
                }
            }

            Device (IP2P)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x03))
                }
            }

            Device (SAT1)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                OperationRegion (IDER, PCI_Config, 0x40, 0x20)
                Field (IDER, AnyAcc, NoLock, Preserve)
                {
                    PFT0,   1, 
                    PIE0,   1, 
                    PPE0,   1, 
                    PDE0,   1, 
                    PFT1,   1, 
                    PIE1,   1, 
                    PPE1,   1, 
                    PDE1,   1, 
                    PRT0,   2, 
                        ,   2, 
                    PIP0,   2, 
                    PSIT,   1, 
                    PIDE,   1, 
                    SFT0,   1, 
                    SIE0,   1, 
                    SPE0,   1, 
                    SDE0,   1, 
                    SFT1,   1, 
                    SIE1,   1, 
                    SPE1,   1, 
                    SDE1,   1, 
                    SRT0,   2, 
                        ,   2, 
                    SIP0,   2, 
                    SSIT,   1, 
                    SIDE,   1, 
                    PRT1,   2, 
                    PIP1,   2, 
                    SRT1,   2, 
                    SIP1,   2, 
                    Offset (0x08), 
                    UDM0,   1, 
                    UDM1,   1, 
                    UDM2,   1, 
                    UDM3,   1, 
                    Offset (0x0A), 
                    PCT0,   2, 
                        ,   2, 
                    PCT1,   2, 
                    Offset (0x0B), 
                    SCT0,   2, 
                        ,   2, 
                    SCT1,   2, 
                    Offset (0x14), 
                    PCB0,   1, 
                    PCB1,   1, 
                    SCB0,   1, 
                    SCB1,   1, 
                    PCCR,   2, 
                    SCCR,   2, 
                        ,   4, 
                    PUM0,   1, 
                    PUM1,   1, 
                    SUM0,   1, 
                    SUM1,   1, 
                    PSIG,   2, 
                    SSIG,   2
                }

                Method (GPIO, 4, NotSerialized)
                {
                    If (((Arg0 | Arg1) == 0x00))
                    {
                        Return (0xFFFFFFFF)
                    }
                    ElseIf (((Arg0 == 0x00) & (Arg1 == 0x01)))
                    {
                        Return (0x0384)
                    }

                    Return ((0x1E * (0x09 - (Arg2 + Arg3))))
                }

                Method (GDMA, 5, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        If ((Arg1 == 0x01))
                        {
                            If ((Arg4 == 0x02))
                            {
                                Return (0x0F)
                            }

                            Return (0x14)
                        }

                        If ((Arg2 == 0x01))
                        {
                            Return ((0x0F * (0x04 - Arg4)))
                        }

                        Return ((0x1E * (0x04 - Arg4)))
                    }

                    Return (0xFFFFFFFE)
                }

                Method (SFLG, 5, NotSerialized)
                {
                    Local0 = 0x00
                    Local0 |= Arg1
                    Local0 |= (Arg0 << 0x01)
                    Local0 |= (Arg2 << 0x03)
                    Local0 |= (Arg3 << 0x02)
                    Local0 |= (Arg4 << 0x04)
                    Return (Local0)
                }

                Method (SPIO, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    CreateByteField (PBUF, 0x00, RCT)
                    CreateByteField (PBUF, 0x01, ISP)
                    CreateByteField (PBUF, 0x02, FAST)
                    CreateByteField (PBUF, 0x03, DMAE)
                    CreateByteField (PBUF, 0x04, PIOT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.SAT1.SPIO.PBUF */
                    }

                    If ((Arg0 > 0xF0))
                    {
                        DMAE = 0x01
                        PIOT = 0x00
                    }
                    Else
                    {
                        FAST = 0x01
                        If ((Arg1 & 0x02))
                        {
                            If (((Arg0 == 0x78) & (Arg2 & 0x02)))
                            {
                                RCT = 0x03
                                ISP = 0x02
                                PIOT = 0x04
                            }
                            ElseIf (((Arg0 <= 0xB4) & (Arg2 & 0x01)))
                            {
                                RCT = 0x01
                                ISP = 0x02
                                PIOT = 0x03
                            }
                            Else
                            {
                                RCT = 0x00
                                ISP = 0x01
                                PIOT = 0x02
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.SAT1.SPIO.PBUF */
                }

                Method (SDMA, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateByteField (PBUF, 0x00, PCT)
                    CreateByteField (PBUF, 0x01, PCB)
                    CreateByteField (PBUF, 0x02, UDMT)
                    CreateByteField (PBUF, 0x03, UDME)
                    CreateByteField (PBUF, 0x04, DMAT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.SAT1.SDMA.PBUF */
                    }

                    If ((Arg0 <= 0x78))
                    {
                        If ((Arg1 & 0x04))
                        {
                            UDME = 0x01
                            If (((Arg0 == 0x0F) & (Arg2 & 0x40)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x06
                            }
                            ElseIf (((Arg0 == 0x14) & (Arg2 & 0x20)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x05
                            }
                            ElseIf (((Arg0 <= 0x1E) & (Arg2 & 0x10)))
                            {
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x04
                            }
                            ElseIf (((Arg0 <= 0x2D) & (Arg2 & 0x08)))
                            {
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x03
                            }
                            ElseIf (((Arg0 <= 0x3C) & (Arg2 & 0x04)))
                            {
                                PCT = 0x02
                                DMAT = 0x02
                            }
                            ElseIf (((Arg0 <= 0x5A) & (Arg2 & 0x02)))
                            {
                                PCT = 0x01
                                DMAT = 0x01
                            }
                            ElseIf (((Arg0 <= 0x78) & (Arg2 & 0x01)))
                            {
                                DMAT = 0x00
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.SAT1.SDMA.PBUF */
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (PFT0, PDE0, PRT0, PIP0)
                        If ((PSIT & 0x01))
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT1, PIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT0, PIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.SAT1.PRID._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM0, PUM0, PCB0, (PCCR & 0x01), PCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.SAT1.PRID._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.SAT1.PRID._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM1, PUM1, PCB1, (PCCR & 0x02), PCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.SAT1.PRID._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (PIE0, UDM0, PIE1, UDM1, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.SAT1.PRID._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            PSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            PRT0 = RCT /* \_SB_.PCI0.SAT1.PRID._STM.RCT_ */
                            PIP0 = ISP /* \_SB_.PCI0.SAT1.PRID._STM.ISP_ */
                            PFT0 = FAST /* \_SB_.PCI0.SAT1.PRID._STM.FAST */
                            PDE0 = DMAE /* \_SB_.PCI0.SAT1.PRID._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.SAT1.PRID._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        If ((DMAE | FAST))
                        {
                            PFT1 = FAST /* \_SB_.PCI0.SAT1.PRID._STM.FAST */
                            PDE1 = DMAE /* \_SB_.PCI0.SAT1.PRID._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.SAT1.PRID._STM.TPIO */
                            If ((PSIT & 0x01))
                            {
                                PRT1 = RCT /* \_SB_.PCI0.SAT1.PRID._STM.RCT_ */
                                PIP1 = ISP /* \_SB_.PCI0.SAT1.PRID._STM.ISP_ */
                            }
                            Else
                            {
                                PRT0 = RCT /* \_SB_.PCI0.SAT1.PRID._STM.RCT_ */
                                PIP0 = ISP /* \_SB_.PCI0.SAT1.PRID._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            PCT0 = PCT /* \_SB_.PCI0.SAT1.PRID._STM.PCT_ */
                            PCB0 = PCB /* \_SB_.PCI0.SAT1.PRID._STM.PCB_ */
                            UDM0 = UDME /* \_SB_.PCI0.SAT1.PRID._STM.UDME */
                            PUM0 = UDMT /* \_SB_.PCI0.SAT1.PRID._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.SAT1.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM0 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            PCT1 = PCT /* \_SB_.PCI0.SAT1.PRID._STM.PCT_ */
                            PCB1 = PCB /* \_SB_.PCI0.SAT1.PRID._STM.PCB_ */
                            UDM1 = UDME /* \_SB_.PCI0.SAT1.PRID._STM.UDME */
                            PUM1 = UDMT /* \_SB_.PCI0.SAT1.PRID._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.SAT1.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM1 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            PIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            PIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.SAT1.PRID.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM0 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.SAT1.PRID.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.SAT1.PRID.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.SAT1.PRID.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.SAT1.PRID.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM1 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.SAT1.PRID.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.SAT1.PRID.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.SAT1.PRID.SLAV._GTF.ATA1 */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Name (DMT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (DMT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (STMI, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (SFT0, SDE0, SRT0, SIP0)
                        If ((SSIT & 0x01))
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT1, SIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT0, SIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.SAT1.SECD._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM2, SUM0, SCB0, (SCCR & 0x01), SCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.SAT1.SECD._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.SAT1.SECD._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM3, SUM1, SCB1, (SCCR & 0x02), SCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.SAT1.SECD._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (SIE0, UDM2, SIE1, UDM3, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.SAT1.SECD._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        STMI = Arg0
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            SSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            SRT0 = RCT /* \_SB_.PCI0.SAT1.SECD._STM.RCT_ */
                            SIP0 = ISP /* \_SB_.PCI0.SAT1.SECD._STM.ISP_ */
                            SFT0 = FAST /* \_SB_.PCI0.SAT1.SECD._STM.FAST */
                            SDE0 = DMAE /* \_SB_.PCI0.SAT1.SECD._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.SAT1.SECD._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        POT2 = IOTM /* \_SB_.PCI0.SAT1.SECD._STM.IOTM */
                        If ((DMAE | FAST))
                        {
                            SFT1 = FAST /* \_SB_.PCI0.SAT1.SECD._STM.FAST */
                            SDE1 = DMAE /* \_SB_.PCI0.SAT1.SECD._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.SAT1.SECD._STM.TPIO */
                            If ((SSIT & 0x01))
                            {
                                SRT1 = RCT /* \_SB_.PCI0.SAT1.SECD._STM.RCT_ */
                                SIP1 = ISP /* \_SB_.PCI0.SAT1.SECD._STM.ISP_ */
                            }
                            Else
                            {
                                SRT0 = RCT /* \_SB_.PCI0.SAT1.SECD._STM.RCT_ */
                                SIP0 = ISP /* \_SB_.PCI0.SAT1.SECD._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            SCT0 = PCT /* \_SB_.PCI0.SAT1.SECD._STM.PCT_ */
                            SCB0 = PCB /* \_SB_.PCI0.SAT1.SECD._STM.PCB_ */
                            UDM2 = UDME /* \_SB_.PCI0.SAT1.SECD._STM.UDME */
                            SUM0 = UDMT /* \_SB_.PCI0.SAT1.SECD._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.SAT1.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM2 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            SCT1 = PCT /* \_SB_.PCI0.SAT1.SECD._STM.PCT_ */
                            SCB1 = PCB /* \_SB_.PCI0.SAT1.SECD._STM.PCB_ */
                            UDM3 = UDME /* \_SB_.PCI0.SAT1.SECD._STM.UDME */
                            SUM1 = UDMT /* \_SB_.PCI0.SAT1.SECD._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.SAT1.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM3 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            SIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            SIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.SAT1.SECD.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM2 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.SAT1.SECD.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.SAT1.SECD.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.SAT1.SECD.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.SAT1.SECD.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM3 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.SAT1.SECD.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.SAT1.SECD.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.SAT1.SECD.SLAV._GTF.ATA1 */
                        }
                    }
                }
            }

            Device (SAT2)
            {
                Name (_ADR, 0x001F0005)  // _ADR: Address
                OperationRegion (IDER, PCI_Config, 0x40, 0x20)
                Field (IDER, AnyAcc, NoLock, Preserve)
                {
                    PFT0,   1, 
                    PIE0,   1, 
                    PPE0,   1, 
                    PDE0,   1, 
                    PFT1,   1, 
                    PIE1,   1, 
                    PPE1,   1, 
                    PDE1,   1, 
                    PRT0,   2, 
                        ,   2, 
                    PIP0,   2, 
                    PSIT,   1, 
                    PIDE,   1, 
                    SFT0,   1, 
                    SIE0,   1, 
                    SPE0,   1, 
                    SDE0,   1, 
                    SFT1,   1, 
                    SIE1,   1, 
                    SPE1,   1, 
                    SDE1,   1, 
                    SRT0,   2, 
                        ,   2, 
                    SIP0,   2, 
                    SSIT,   1, 
                    SIDE,   1, 
                    PRT1,   2, 
                    PIP1,   2, 
                    SRT1,   2, 
                    SIP1,   2, 
                    Offset (0x08), 
                    UDM0,   1, 
                    UDM1,   1, 
                    UDM2,   1, 
                    UDM3,   1, 
                    Offset (0x0A), 
                    PCT0,   2, 
                        ,   2, 
                    PCT1,   2, 
                    Offset (0x0B), 
                    SCT0,   2, 
                        ,   2, 
                    SCT1,   2, 
                    Offset (0x14), 
                    PCB0,   1, 
                    PCB1,   1, 
                    SCB0,   1, 
                    SCB1,   1, 
                    PCCR,   2, 
                    SCCR,   2, 
                        ,   4, 
                    PUM0,   1, 
                    PUM1,   1, 
                    SUM0,   1, 
                    SUM1,   1, 
                    PSIG,   2, 
                    SSIG,   2
                }

                Method (GPIO, 4, NotSerialized)
                {
                    If (((Arg0 | Arg1) == 0x00))
                    {
                        Return (0xFFFFFFFF)
                    }
                    ElseIf (((Arg0 == 0x00) & (Arg1 == 0x01)))
                    {
                        Return (0x0384)
                    }

                    Return ((0x1E * (0x09 - (Arg2 + Arg3))))
                }

                Method (GDMA, 5, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        If ((Arg1 == 0x01))
                        {
                            If ((Arg4 == 0x02))
                            {
                                Return (0x0F)
                            }

                            Return (0x14)
                        }

                        If ((Arg2 == 0x01))
                        {
                            Return ((0x0F * (0x04 - Arg4)))
                        }

                        Return ((0x1E * (0x04 - Arg4)))
                    }

                    Return (0xFFFFFFFE)
                }

                Method (SFLG, 5, NotSerialized)
                {
                    Local0 = 0x00
                    Local0 |= Arg1
                    Local0 |= (Arg0 << 0x01)
                    Local0 |= (Arg2 << 0x03)
                    Local0 |= (Arg3 << 0x02)
                    Local0 |= (Arg4 << 0x04)
                    Return (Local0)
                }

                Method (SPIO, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    CreateByteField (PBUF, 0x00, RCT)
                    CreateByteField (PBUF, 0x01, ISP)
                    CreateByteField (PBUF, 0x02, FAST)
                    CreateByteField (PBUF, 0x03, DMAE)
                    CreateByteField (PBUF, 0x04, PIOT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.SAT2.SPIO.PBUF */
                    }

                    If ((Arg0 > 0xF0))
                    {
                        DMAE = 0x01
                        PIOT = 0x00
                    }
                    Else
                    {
                        FAST = 0x01
                        If ((Arg1 & 0x02))
                        {
                            If (((Arg0 == 0x78) & (Arg2 & 0x02)))
                            {
                                RCT = 0x03
                                ISP = 0x02
                                PIOT = 0x04
                            }
                            ElseIf (((Arg0 <= 0xB4) & (Arg2 & 0x01)))
                            {
                                RCT = 0x01
                                ISP = 0x02
                                PIOT = 0x03
                            }
                            Else
                            {
                                RCT = 0x00
                                ISP = 0x01
                                PIOT = 0x02
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.SAT2.SPIO.PBUF */
                }

                Method (SDMA, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateByteField (PBUF, 0x00, PCT)
                    CreateByteField (PBUF, 0x01, PCB)
                    CreateByteField (PBUF, 0x02, UDMT)
                    CreateByteField (PBUF, 0x03, UDME)
                    CreateByteField (PBUF, 0x04, DMAT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.SAT2.SDMA.PBUF */
                    }

                    If ((Arg0 <= 0x78))
                    {
                        If ((Arg1 & 0x04))
                        {
                            UDME = 0x01
                            If (((Arg0 == 0x0F) & (Arg2 & 0x40)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x06
                            }
                            ElseIf (((Arg0 == 0x14) & (Arg2 & 0x20)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x05
                            }
                            ElseIf (((Arg0 <= 0x1E) & (Arg2 & 0x10)))
                            {
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x04
                            }
                            ElseIf (((Arg0 <= 0x2D) & (Arg2 & 0x08)))
                            {
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x03
                            }
                            ElseIf (((Arg0 <= 0x3C) & (Arg2 & 0x04)))
                            {
                                PCT = 0x02
                                DMAT = 0x02
                            }
                            ElseIf (((Arg0 <= 0x5A) & (Arg2 & 0x02)))
                            {
                                PCT = 0x01
                                DMAT = 0x01
                            }
                            ElseIf (((Arg0 <= 0x78) & (Arg2 & 0x01)))
                            {
                                DMAT = 0x00
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.SAT2.SDMA.PBUF */
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (PFT0, PDE0, PRT0, PIP0)
                        If ((PSIT & 0x01))
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT1, PIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT0, PIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.SAT2.PRID._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM0, PUM0, PCB0, (PCCR & 0x01), PCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.SAT2.PRID._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.SAT2.PRID._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM1, PUM1, PCB1, (PCCR & 0x02), PCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.SAT2.PRID._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (PIE0, UDM0, PIE1, UDM1, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.SAT2.PRID._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            PSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            PRT0 = RCT /* \_SB_.PCI0.SAT2.PRID._STM.RCT_ */
                            PIP0 = ISP /* \_SB_.PCI0.SAT2.PRID._STM.ISP_ */
                            PFT0 = FAST /* \_SB_.PCI0.SAT2.PRID._STM.FAST */
                            PDE0 = DMAE /* \_SB_.PCI0.SAT2.PRID._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.SAT2.PRID._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        If ((DMAE | FAST))
                        {
                            PFT1 = FAST /* \_SB_.PCI0.SAT2.PRID._STM.FAST */
                            PDE1 = DMAE /* \_SB_.PCI0.SAT2.PRID._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.SAT2.PRID._STM.TPIO */
                            If ((PSIT & 0x01))
                            {
                                PRT1 = RCT /* \_SB_.PCI0.SAT2.PRID._STM.RCT_ */
                                PIP1 = ISP /* \_SB_.PCI0.SAT2.PRID._STM.ISP_ */
                            }
                            Else
                            {
                                PRT0 = RCT /* \_SB_.PCI0.SAT2.PRID._STM.RCT_ */
                                PIP0 = ISP /* \_SB_.PCI0.SAT2.PRID._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            PCT0 = PCT /* \_SB_.PCI0.SAT2.PRID._STM.PCT_ */
                            PCB0 = PCB /* \_SB_.PCI0.SAT2.PRID._STM.PCB_ */
                            UDM0 = UDME /* \_SB_.PCI0.SAT2.PRID._STM.UDME */
                            PUM0 = UDMT /* \_SB_.PCI0.SAT2.PRID._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.SAT2.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM0 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            PCT1 = PCT /* \_SB_.PCI0.SAT2.PRID._STM.PCT_ */
                            PCB1 = PCB /* \_SB_.PCI0.SAT2.PRID._STM.PCB_ */
                            UDM1 = UDME /* \_SB_.PCI0.SAT2.PRID._STM.UDME */
                            PUM1 = UDMT /* \_SB_.PCI0.SAT2.PRID._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.SAT2.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM1 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            PIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            PIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.SAT2.PRID.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM0 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.SAT2.PRID.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.SAT2.PRID.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.SAT2.PRID.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.SAT2.PRID.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM1 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.SAT2.PRID.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.SAT2.PRID.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.SAT2.PRID.SLAV._GTF.ATA1 */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Name (DMT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (DMT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (STMI, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (SFT0, SDE0, SRT0, SIP0)
                        If ((SSIT & 0x01))
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT1, SIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT0, SIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.SAT2.SECD._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM2, SUM0, SCB0, (SCCR & 0x01), SCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.SAT2.SECD._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.SAT2.SECD._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM3, SUM1, SCB1, (SCCR & 0x02), SCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.SAT2.SECD._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (SIE0, UDM2, SIE1, UDM3, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.SAT2.SECD._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        STMI = Arg0
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            SSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            SRT0 = RCT /* \_SB_.PCI0.SAT2.SECD._STM.RCT_ */
                            SIP0 = ISP /* \_SB_.PCI0.SAT2.SECD._STM.ISP_ */
                            SFT0 = FAST /* \_SB_.PCI0.SAT2.SECD._STM.FAST */
                            SDE0 = DMAE /* \_SB_.PCI0.SAT2.SECD._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.SAT2.SECD._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        POT2 = IOTM /* \_SB_.PCI0.SAT2.SECD._STM.IOTM */
                        If ((DMAE | FAST))
                        {
                            SFT1 = FAST /* \_SB_.PCI0.SAT2.SECD._STM.FAST */
                            SDE1 = DMAE /* \_SB_.PCI0.SAT2.SECD._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.SAT2.SECD._STM.TPIO */
                            If ((SSIT & 0x01))
                            {
                                SRT1 = RCT /* \_SB_.PCI0.SAT2.SECD._STM.RCT_ */
                                SIP1 = ISP /* \_SB_.PCI0.SAT2.SECD._STM.ISP_ */
                            }
                            Else
                            {
                                SRT0 = RCT /* \_SB_.PCI0.SAT2.SECD._STM.RCT_ */
                                SIP0 = ISP /* \_SB_.PCI0.SAT2.SECD._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            SCT0 = PCT /* \_SB_.PCI0.SAT2.SECD._STM.PCT_ */
                            SCB0 = PCB /* \_SB_.PCI0.SAT2.SECD._STM.PCB_ */
                            UDM2 = UDME /* \_SB_.PCI0.SAT2.SECD._STM.UDME */
                            SUM0 = UDMT /* \_SB_.PCI0.SAT2.SECD._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.SAT2.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM2 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            SCT1 = PCT /* \_SB_.PCI0.SAT2.SECD._STM.PCT_ */
                            SCB1 = PCB /* \_SB_.PCI0.SAT2.SECD._STM.PCB_ */
                            UDM3 = UDME /* \_SB_.PCI0.SAT2.SECD._STM.UDME */
                            SUM1 = UDMT /* \_SB_.PCI0.SAT2.SECD._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.SAT2.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM3 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            SIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            SIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.SAT2.SECD.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM2 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.SAT2.SECD.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.SAT2.SECD.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.SAT2.SECD.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.SAT2.SECD.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM3 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.SAT2.SECD.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.SAT2.SECD.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.SAT2.SECD.SLAV._GTF.ATA1 */
                        }
                    }
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
            }

            Device (TERM)
            {
                Name (_ADR, 0x001F0006)  // _ADR: Address
            }

            Device (XHCI)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }

                Name (OPAC, 0x00)
                Name (XRST, 0x00)
                Name (XUSB, 0x00)
                OperationRegion (XPRT, PCI_Config, 0x74, 0x6C)
                Field (XPRT, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0x5C), 
                    PR2,    32, 
                    PR2M,   32, 
                    PR3,    32, 
                    PR3M,   32
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        PMEE = 0x01
                    }
                    Else
                    {
                        PMEE = 0x00
                    }
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        If ((Arg1 == 0x01))
                        {
                            OPAC = 0x01
                        }
                        Else
                        {
                            OPAC = 0x00
                        }
                    }
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((OPAC == 0x01))
                    {
                        PMES = 0x01
                        PMEE = 0x00
                    }
                }

                Method (POSC, 3, NotSerialized)
                {
                    IO80 = 0x81
                    CreateDWordField (Arg2, 0x00, CDW1)
                    CreateDWordField (Arg2, 0x04, CDW2)
                    CreateDWordField (Arg2, 0x08, CDW3)
                    If (((OSYS >= 0x09) && (OSYS <= 0x0C)))
                    {
                        If ((Arg0 < 0x02))
                        {
                            CDW1 |= 0x08
                            IO80 = 0x82
                        }
                    }
                    ElseIf ((Arg0 != 0x01))
                    {
                        CDW1 |= 0x08
                        IO80 = 0x82
                    }

                    If ((XHMD == 0x00))
                    {
                        CDW1 |= 0x02
                        IO80 = 0x83
                    }

                    If (((CDW1 & 0x0E) == 0x00))
                    {
                        If (!(CDW1 & 0x01))
                        {
                            If ((CDW3 & 0x01))
                            {
                                ESEL ()
                                IO80 = 0x85
                                XHMD = 0x00
                            }

                            If ((CDW2 & 0x01))
                            {
                                XSEL (0x00)
                                IO80 = 0x84
                            }
                            Else
                            {
                                ESEL ()
                                IO80 = 0x85
                            }
                        }
                    }

                    Return (Arg2)
                }

                Method (XSEL, 1, Serialized)
                {
                    If ((((XHMD == 0x02) || (XHMD == 0x03)) || Arg0))
                    {
                        If ((XHMD == 0x03))
                        {
                            ^^LPC0.XSMB = 0x01
                        }

                        XUSB = 0x01
                        XRST = 0x01
                        Local0 = 0x00
                        Local0 = (PR3 & 0xFFFFFFC0)
                        PR3 = (Local0 | PR3M) /* \_SB_.PCI0.XHCI.PR3M */
                        Local0 = 0x00
                        Local0 = (PR2 & 0xFFFF8000)
                        PR2 = (Local0 | PR2M) /* \_SB_.PCI0.XHCI.PR2M */
                    }
                }

                Method (ESEL, 0, Serialized)
                {
                    If (((XHMD == 0x02) || (XHMD == 0x03)))
                    {
                        PR3 &= 0xFFFFFFC0
                        PR2 &= 0xFFFF8000
                        XUSB = 0x00
                        XRST = 0x00
                    }
                }

                Method (XWAK, 0, Serialized)
                {
                    If (((XUSB == 0x01) || (XRST == 0x01)))
                    {
                        XSEL (0x01)
                        Notify (XHCI, 0x00) // Bus Check
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (RHUB)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (HS01)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Else
                            {
                                UPCP [0x00] = 0xFF
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS01._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x28
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS01._PLD.PLDP */
                        }
                    }

                    Device (HS02)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Else
                            {
                                UPCP [0x00] = 0xFF
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS02._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((PLAT == 0x01))
                            {
                                VISB = One
                                PANL = 0x0C
                            }

                            VISB = One
                            PANL = 0x28
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS02._PLD.PLDP */
                        }
                    }

                    Device (HS03)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Else
                            {
                                UPCP [0x00] = 0xFF
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS03._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x81, 0x01, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x28
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS03._PLD.PLDP */
                        }
                    }

                    Device (HS04)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Else
                            {
                                UPCP [0x00] = 0xFF
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS04._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x28
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS04._PLD.PLDP */
                        }
                    }

                    Device (HS05)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                If ((PLAT == 0x1B))
                                {
                                    UPCP [0x00] = 0x00
                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS05._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x82, 0x02, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x20
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS05._PLD.PLDP */
                        }
                    }

                    Device (HS06)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Else
                            {
                                UPCP [0x00] = 0x00
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS06._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x20
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS06._PLD.PLDP */
                        }
                    }

                    Device (HS07)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Else
                            {
                                UPCP [0x00] = 0x00
                                UPCP [0x00] = 0xFF
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS07._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x83, 0x03, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x08
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS07._PLD.PLDP */
                        }
                    }

                    Device (HS08)
                    {
                        Name (_ADR, 0x08)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Else
                            {
                                UPCP [0x00] = 0x00
                                UPCP [0x00] = 0xFF
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS08._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x04, 0x04, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = Zero
                            PANL = 0x08
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS08._PLD.PLDP */
                        }
                    }

                    Device (HS09)
                    {
                        Name (_ADR, 0x09)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Else
                            {
                                UPCP [0x00] = 0xFF
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS09._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x84, 0x04, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x20
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS09._PLD.PLDP */
                        }
                    }

                    Device (HS10)
                    {
                        Name (_ADR, 0x0A)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Else
                            {
                                UPCP [0x00] = 0x00
                                UPCP [0x00] = 0xFF
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS10._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x05, 0x05, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x20
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS10._PLD.PLDP */
                        }
                    }

                    Device (HS11)
                    {
                        Name (_ADR, 0x0B)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Else
                            {
                                UPCP [0x00] = 0x00
                                UPCP [0x00] = 0xFF
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS11._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x85, 0x05, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x28
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS11._PLD.PLDP */
                        }
                    }

                    Device (HS12)
                    {
                        Name (_ADR, 0x0C)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (0x01)
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS12._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x06, 0x06, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x28
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS12._PLD.PLDP */
                        }
                    }

                    Device (HS13)
                    {
                        Name (_ADR, 0x0D)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Else
                            {
                                UPCP [0x00] = 0x00
                                UPCP [0x00] = 0xFF
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS13._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x86, 0x06, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x28
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS13._PLD.PLDP */
                        }
                    }

                    Device (HS14)
                    {
                        Name (_ADR, 0x0E)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                If (0x01)
                                {
                                    UPCP [0x00] = 0x00
                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS14._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS14._PLD.PLDP */
                        }
                    }

                    Device (SSP1)
                    {
                        Name (_ADR, 0x10)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP1._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x20
                            GTOK = 0x06
                            GPOS = 0x06
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP1._PLD.PLDP */
                        }
                    }

                    Device (SSP2)
                    {
                        Name (_ADR, 0x11)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP2._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x20
                            GTOK = 0x05
                            GPOS = 0x05
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP2._PLD.PLDP */
                        }
                    }

                    Device (SSP3)
                    {
                        Name (_ADR, 0x12)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP3._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x28
                            GTOK = 0x0C
                            GPOS = 0x0C
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP3._PLD.PLDP */
                        }
                    }

                    Device (SSP4)
                    {
                        Name (_ADR, 0x13)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP4._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x28
                            GTOK = 0x0B
                            GPOS = 0x0B
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP4._PLD.PLDP */
                        }
                    }

                    Device (SSP5)
                    {
                        Name (_ADR, 0x14)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP5._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x28
                            GTOK = 0x03
                            GPOS = 0x03
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP5._PLD.PLDP */
                        }
                    }

                    Device (SSP6)
                    {
                        Name (_ADR, 0x15)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP6._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            VISB = One
                            PANL = 0x28
                            GTOK = 0x04
                            GPOS = 0x04
                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP6._PLD.PLDP */
                        }
                    }
                }
            }

            Device (LAN0)
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
            }

            Device (EHC1)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }

                Name (OPAC, 0x00)
                OperationRegion (PWKE, PCI_Config, 0x54, 0x18)
                Field (PWKE, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0x0E), 
                        ,   1, 
                    PWUC,   10
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        If ((Arg1 == 0x01))
                        {
                            OPAC = One
                        }
                        Else
                        {
                            OPAC = One
                        }
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        PWUC = Ones
                    }
                    Else
                    {
                        PWUC = 0x00
                    }
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((OPAC == One))
                    {
                        PMES = 0x01
                        PMEE = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PR01)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCA, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            Return (UPCA) /* \_SB_.PCI0.EHC1.HUBN.PR01._UPC.UPCA */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01._PLD.PLDP */
                        }

                        Device (PR11)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR11._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR11._PLD.PLDP */
                            }
                        }

                        Device (PR12)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR12._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR12._PLD.PLDP */
                            }
                        }

                        Device (PR13)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR13._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR13._PLD.PLDP */
                            }
                        }

                        Device (PR14)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14._PLD.PLDP */
                            }

                            Alias (SBV1, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If ((Arg1 == 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                             // .
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                             // .
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If ((SDGV == 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14.SDGV */
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR15)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15._PLD.PLDP */
                            }

                            Alias (SBV2, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If ((Arg1 == 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                             // .
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                             // .
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If ((SDGV == 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15.SDGV */
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR16)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16._PLD.PLDP */
                            }

                            Alias (SBV1, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If ((Arg1 == 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                             // .
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                             // .
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If ((SDGV == 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16.SDGV */
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR17)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR17._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR17._PLD.PLDP */
                            }

                            Alias (SBV2, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If ((Arg1 == 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                             // .
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                             // .
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If ((SDGV == 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR17.SDGV */
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR18)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR18._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR18._PLD.PLDP */
                            }
                        }
                    }
                }
            }

            Device (EHC2)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }

                Name (OPAC, 0x00)
                OperationRegion (PWKE, PCI_Config, 0x54, 0x18)
                Field (PWKE, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0x0E), 
                        ,   1, 
                    PWUC,   10
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        If ((Arg1 == 0x01))
                        {
                            OPAC = One
                        }
                        Else
                        {
                            OPAC = One
                        }
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        PWUC = Ones
                    }
                    Else
                    {
                        PWUC = 0x00
                    }
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((OPAC == One))
                    {
                        PMES = 0x01
                        PMEE = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PR01)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCA, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            Return (UPCA) /* \_SB_.PCI0.EHC2.HUBN.PR01._UPC.UPCA */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01._PLD.PLDP */
                        }

                        Device (PR11)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR11._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR11._PLD.PLDP */
                            }
                        }

                        Device (PR12)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12._PLD.PLDP */
                            }

                            Alias (SBV1, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If ((Arg1 == 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                             // .
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                             // .
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If ((SDGV == 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12.SDGV */
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR13)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13._PLD.PLDP */
                            }

                            Alias (SBV2, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If ((Arg1 == 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                             // .
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                             // .
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If ((SDGV == 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13.SDGV */
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR14)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR14._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR14._PLD.PLDP */
                            }
                        }

                        Device (PR15)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR15._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR15._PLD.PLDP */
                            }
                        }

                        Device (PR16)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR16._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR16._PLD.PLDP */
                            }
                        }
                    }
                }
            }

            Device (ALZA)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
            }

            Device (HECI)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
            }

            Device (HEC2)
            {
                Name (_ADR, 0x00160001)  // _ADR: Address
            }

            Device (IDER)
            {
                Name (_ADR, 0x00160002)  // _ADR: Address
            }

            Device (MEKT)
            {
                Name (_ADR, 0x00160003)  // _ADR: Address
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG17) /* \_SB_.AG17 */
                    }

                    Return (PG17) /* \_SB_.PG17 */
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG18) /* \_SB_.AG18 */
                    }

                    Return (PG18) /* \_SB_.PG18 */
                }

                Device (D077)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG19) /* \_SB_.AG19 */
                    }

                    Return (PG19) /* \_SB_.PG19 */
                }

                Device (D078)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (EVMR)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
            }

            Device (EVS0)
            {
                Name (_ADR, 0x00110001)  // _ADR: Address
            }

            Device (EVS1)
            {
                Name (_ADR, 0x00110002)  // _ADR: Address
            }

            Device (EVS2)
            {
                Name (_ADR, 0x00110003)  // _ADR: Address
            }

            Device (EVSS)
            {
                Name (_ADR, 0x00110004)  // _ADR: Address
                OperationRegion (IDER, PCI_Config, 0x40, 0x20)
                Field (IDER, AnyAcc, NoLock, Preserve)
                {
                    PFT0,   1, 
                    PIE0,   1, 
                    PPE0,   1, 
                    PDE0,   1, 
                    PFT1,   1, 
                    PIE1,   1, 
                    PPE1,   1, 
                    PDE1,   1, 
                    PRT0,   2, 
                        ,   2, 
                    PIP0,   2, 
                    PSIT,   1, 
                    PIDE,   1, 
                    SFT0,   1, 
                    SIE0,   1, 
                    SPE0,   1, 
                    SDE0,   1, 
                    SFT1,   1, 
                    SIE1,   1, 
                    SPE1,   1, 
                    SDE1,   1, 
                    SRT0,   2, 
                        ,   2, 
                    SIP0,   2, 
                    SSIT,   1, 
                    SIDE,   1, 
                    PRT1,   2, 
                    PIP1,   2, 
                    SRT1,   2, 
                    SIP1,   2, 
                    Offset (0x08), 
                    UDM0,   1, 
                    UDM1,   1, 
                    UDM2,   1, 
                    UDM3,   1, 
                    Offset (0x0A), 
                    PCT0,   2, 
                        ,   2, 
                    PCT1,   2, 
                    Offset (0x0B), 
                    SCT0,   2, 
                        ,   2, 
                    SCT1,   2, 
                    Offset (0x14), 
                    PCB0,   1, 
                    PCB1,   1, 
                    SCB0,   1, 
                    SCB1,   1, 
                    PCCR,   2, 
                    SCCR,   2, 
                        ,   4, 
                    PUM0,   1, 
                    PUM1,   1, 
                    SUM0,   1, 
                    SUM1,   1, 
                    PSIG,   2, 
                    SSIG,   2
                }

                Method (GPIO, 4, NotSerialized)
                {
                    If (((Arg0 | Arg1) == 0x00))
                    {
                        Return (0xFFFFFFFF)
                    }
                    ElseIf (((Arg0 == 0x00) & (Arg1 == 0x01)))
                    {
                        Return (0x0384)
                    }

                    Return ((0x1E * (0x09 - (Arg2 + Arg3))))
                }

                Method (GDMA, 5, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        If ((Arg1 == 0x01))
                        {
                            If ((Arg4 == 0x02))
                            {
                                Return (0x0F)
                            }

                            Return (0x14)
                        }

                        If ((Arg2 == 0x01))
                        {
                            Return ((0x0F * (0x04 - Arg4)))
                        }

                        Return ((0x1E * (0x04 - Arg4)))
                    }

                    Return (0xFFFFFFFE)
                }

                Method (SFLG, 5, NotSerialized)
                {
                    Local0 = 0x00
                    Local0 |= Arg1
                    Local0 |= (Arg0 << 0x01)
                    Local0 |= (Arg2 << 0x03)
                    Local0 |= (Arg3 << 0x02)
                    Local0 |= (Arg4 << 0x04)
                    Return (Local0)
                }

                Method (SPIO, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    CreateByteField (PBUF, 0x00, RCT)
                    CreateByteField (PBUF, 0x01, ISP)
                    CreateByteField (PBUF, 0x02, FAST)
                    CreateByteField (PBUF, 0x03, DMAE)
                    CreateByteField (PBUF, 0x04, PIOT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.EVSS.SPIO.PBUF */
                    }

                    If ((Arg0 > 0xF0))
                    {
                        DMAE = 0x01
                        PIOT = 0x00
                    }
                    Else
                    {
                        FAST = 0x01
                        If ((Arg1 & 0x02))
                        {
                            If (((Arg0 == 0x78) & (Arg2 & 0x02)))
                            {
                                RCT = 0x03
                                ISP = 0x02
                                PIOT = 0x04
                            }
                            ElseIf (((Arg0 <= 0xB4) & (Arg2 & 0x01)))
                            {
                                RCT = 0x01
                                ISP = 0x02
                                PIOT = 0x03
                            }
                            Else
                            {
                                RCT = 0x00
                                ISP = 0x01
                                PIOT = 0x02
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.EVSS.SPIO.PBUF */
                }

                Method (SDMA, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateByteField (PBUF, 0x00, PCT)
                    CreateByteField (PBUF, 0x01, PCB)
                    CreateByteField (PBUF, 0x02, UDMT)
                    CreateByteField (PBUF, 0x03, UDME)
                    CreateByteField (PBUF, 0x04, DMAT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.EVSS.SDMA.PBUF */
                    }

                    If ((Arg0 <= 0x78))
                    {
                        If ((Arg1 & 0x04))
                        {
                            UDME = 0x01
                            If (((Arg0 == 0x0F) & (Arg2 & 0x40)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x06
                            }
                            ElseIf (((Arg0 == 0x14) & (Arg2 & 0x20)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x05
                            }
                            ElseIf (((Arg0 <= 0x1E) & (Arg2 & 0x10)))
                            {
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x04
                            }
                            ElseIf (((Arg0 <= 0x2D) & (Arg2 & 0x08)))
                            {
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x03
                            }
                            ElseIf (((Arg0 <= 0x3C) & (Arg2 & 0x04)))
                            {
                                PCT = 0x02
                                DMAT = 0x02
                            }
                            ElseIf (((Arg0 <= 0x5A) & (Arg2 & 0x02)))
                            {
                                PCT = 0x01
                                DMAT = 0x01
                            }
                            ElseIf (((Arg0 <= 0x78) & (Arg2 & 0x01)))
                            {
                                DMAT = 0x00
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.EVSS.SDMA.PBUF */
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (PFT0, PDE0, PRT0, PIP0)
                        If ((PSIT & 0x01))
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT1, PIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT0, PIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.EVSS.PRID._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM0, PUM0, PCB0, (PCCR & 0x01), PCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.EVSS.PRID._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.EVSS.PRID._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM1, PUM1, PCB1, (PCCR & 0x02), PCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.EVSS.PRID._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (PIE0, UDM0, PIE1, UDM1, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.EVSS.PRID._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            PSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            PRT0 = RCT /* \_SB_.PCI0.EVSS.PRID._STM.RCT_ */
                            PIP0 = ISP /* \_SB_.PCI0.EVSS.PRID._STM.ISP_ */
                            PFT0 = FAST /* \_SB_.PCI0.EVSS.PRID._STM.FAST */
                            PDE0 = DMAE /* \_SB_.PCI0.EVSS.PRID._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.EVSS.PRID._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        If ((DMAE | FAST))
                        {
                            PFT1 = FAST /* \_SB_.PCI0.EVSS.PRID._STM.FAST */
                            PDE1 = DMAE /* \_SB_.PCI0.EVSS.PRID._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.EVSS.PRID._STM.TPIO */
                            If ((PSIT & 0x01))
                            {
                                PRT1 = RCT /* \_SB_.PCI0.EVSS.PRID._STM.RCT_ */
                                PIP1 = ISP /* \_SB_.PCI0.EVSS.PRID._STM.ISP_ */
                            }
                            Else
                            {
                                PRT0 = RCT /* \_SB_.PCI0.EVSS.PRID._STM.RCT_ */
                                PIP0 = ISP /* \_SB_.PCI0.EVSS.PRID._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            PCT0 = PCT /* \_SB_.PCI0.EVSS.PRID._STM.PCT_ */
                            PCB0 = PCB /* \_SB_.PCI0.EVSS.PRID._STM.PCB_ */
                            UDM0 = UDME /* \_SB_.PCI0.EVSS.PRID._STM.UDME */
                            PUM0 = UDMT /* \_SB_.PCI0.EVSS.PRID._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.EVSS.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM0 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            PCT1 = PCT /* \_SB_.PCI0.EVSS.PRID._STM.PCT_ */
                            PCB1 = PCB /* \_SB_.PCI0.EVSS.PRID._STM.PCB_ */
                            UDM1 = UDME /* \_SB_.PCI0.EVSS.PRID._STM.UDME */
                            PUM1 = UDMT /* \_SB_.PCI0.EVSS.PRID._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.EVSS.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM1 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            PIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            PIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.EVSS.PRID.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM0 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.EVSS.PRID.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.EVSS.PRID.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.EVSS.PRID.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.EVSS.PRID.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM1 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.EVSS.PRID.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.EVSS.PRID.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.EVSS.PRID.SLAV._GTF.ATA1 */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Name (DMT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (DMT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (STMI, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (SFT0, SDE0, SRT0, SIP0)
                        If ((SSIT & 0x01))
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT1, SIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT0, SIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.EVSS.SECD._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM2, SUM0, SCB0, (SCCR & 0x01), SCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.EVSS.SECD._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.EVSS.SECD._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM3, SUM1, SCB1, (SCCR & 0x02), SCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.EVSS.SECD._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (SIE0, UDM2, SIE1, UDM3, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.EVSS.SECD._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        STMI = Arg0
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            SSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            SRT0 = RCT /* \_SB_.PCI0.EVSS.SECD._STM.RCT_ */
                            SIP0 = ISP /* \_SB_.PCI0.EVSS.SECD._STM.ISP_ */
                            SFT0 = FAST /* \_SB_.PCI0.EVSS.SECD._STM.FAST */
                            SDE0 = DMAE /* \_SB_.PCI0.EVSS.SECD._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.EVSS.SECD._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        POT2 = IOTM /* \_SB_.PCI0.EVSS.SECD._STM.IOTM */
                        If ((DMAE | FAST))
                        {
                            SFT1 = FAST /* \_SB_.PCI0.EVSS.SECD._STM.FAST */
                            SDE1 = DMAE /* \_SB_.PCI0.EVSS.SECD._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.EVSS.SECD._STM.TPIO */
                            If ((SSIT & 0x01))
                            {
                                SRT1 = RCT /* \_SB_.PCI0.EVSS.SECD._STM.RCT_ */
                                SIP1 = ISP /* \_SB_.PCI0.EVSS.SECD._STM.ISP_ */
                            }
                            Else
                            {
                                SRT0 = RCT /* \_SB_.PCI0.EVSS.SECD._STM.RCT_ */
                                SIP0 = ISP /* \_SB_.PCI0.EVSS.SECD._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            SCT0 = PCT /* \_SB_.PCI0.EVSS.SECD._STM.PCT_ */
                            SCB0 = PCB /* \_SB_.PCI0.EVSS.SECD._STM.PCB_ */
                            UDM2 = UDME /* \_SB_.PCI0.EVSS.SECD._STM.UDME */
                            SUM0 = UDMT /* \_SB_.PCI0.EVSS.SECD._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.EVSS.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM2 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            SCT1 = PCT /* \_SB_.PCI0.EVSS.SECD._STM.PCT_ */
                            SCB1 = PCB /* \_SB_.PCI0.EVSS.SECD._STM.PCB_ */
                            UDM3 = UDME /* \_SB_.PCI0.EVSS.SECD._STM.UDME */
                            SUM1 = UDMT /* \_SB_.PCI0.EVSS.SECD._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.EVSS.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM3 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            SIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            SIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.EVSS.SECD.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM2 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.EVSS.SECD.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.EVSS.SECD.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.EVSS.SECD.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.EVSS.SECD.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM3 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.EVSS.SECD.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.EVSS.SECD.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.EVSS.SECD.SLAV._GTF.ATA1 */
                        }
                    }
                }
            }

            Device (DMI0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
            }

            Device (BR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR1A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR1A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR1A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR1A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR1A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR1A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR1A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR1A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR1A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR1A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR1A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR1A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR1A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR1A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR1A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR1A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR1A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG26) /* \_SB_.AG26 */
                    }

                    Return (PG26) /* \_SB_.PG26 */
                }

                Device (D079)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (BR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR1B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR1B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR1B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR1B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR1B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR1B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR1B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR1B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR1B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR1B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR1B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR1B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR1B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR1B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR1B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR1B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR1B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (BR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR2A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR2A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR2A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR2A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR2A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR2A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR2A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR2A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR2A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR2A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR2A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR2A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR2A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR2A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR2A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR2A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR2A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG28) /* \_SB_.AG28 */
                    }

                    Return (PG28) /* \_SB_.PG28 */
                }

                Device (D07A)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR2B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR2B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR2B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR2B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR2B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR2B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR2B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR2B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR2B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR2B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR2B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR2B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR2B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR2B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR2B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR2B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR2B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (BR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR2C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR2C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR2C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR2C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR2C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR2C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR2C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR2C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR2C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR2C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR2C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR2C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR2C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR2C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR2C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR2C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR2C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (BR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR2D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR2D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR2D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR2D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR2D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR2D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR2D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR2D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR2D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR2D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR2D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR2D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR2D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR2D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR2D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR2D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR2D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (BR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR3A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR3A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR3A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR3A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR3A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR3A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR3A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR3A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR3A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR3A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR3A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR3A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR3A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR3A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR3A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR3A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR3A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG2C) /* \_SB_.AG2C */
                    }

                    Return (PG2C) /* \_SB_.PG2C */
                }

                Device (D07B)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR3B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR3B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR3B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR3B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR3B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR3B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR3B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR3B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR3B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR3B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR3B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR3B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR3B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR3B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR3B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR3B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR3B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (BR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR3C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR3C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR3C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR3C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR3C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR3C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR3C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR3C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR3C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR3C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR3C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR3C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR3C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR3C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR3C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR3C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR3C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (BR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x8001A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR3D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR3D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR3D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR3D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR3D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR3D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR3D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR3D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR3D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR3D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR3D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR3D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR3D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR3D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR3D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR3D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR3D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (CB0A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB0B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB0C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB0D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB0E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB0F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB0G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB0H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }
        }

        Device (PCI1)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (^BN40, 0, NotSerialized)
            {
                Return (0x40)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN40 ())
            }

            Name (_UID, 0x40)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR40) /* \_SB_.AR40 */
                }

                Return (PR40) /* \_SB_.PR40 */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                Local0 = _BBN ()
                If ((Local0 == 0x00))
                {
                    If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                    {
                        Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                    }
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI1._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI1._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            Local1 = (IIOH >> 0x01)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^QRP0.OSHP ()
                                ^QR1A.OSHP ()
                                ^QR1B.OSHP ()
                                ^QR2A.OSHP ()
                                ^QR2B.OSHP ()
                                ^QR2C.OSHP ()
                                ^QR2D.OSHP ()
                                ^QR3A.OSHP ()
                                ^QR3B.OSHP ()
                                ^QR3C.OSHP ()
                                ^QR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x02)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI2.RRP0.OSHP ()
                                ^^PCI2.RR1A.OSHP ()
                                ^^PCI2.RR1B.OSHP ()
                                ^^PCI2.RR2A.OSHP ()
                                ^^PCI2.RR2B.OSHP ()
                                ^^PCI2.RR2C.OSHP ()
                                ^^PCI2.RR2D.OSHP ()
                                ^^PCI2.RR3A.OSHP ()
                                ^^PCI2.RR3B.OSHP ()
                                ^^PCI2.RR3C.OSHP ()
                                ^^PCI2.RR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x03)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI3.SRP0.OSHP ()
                                ^^PCI3.SR1A.OSHP ()
                                ^^PCI3.SR1B.OSHP ()
                                ^^PCI3.SR2A.OSHP ()
                                ^^PCI3.SR2B.OSHP ()
                                ^^PCI3.SR2C.OSHP ()
                                ^^PCI3.SR2D.OSHP ()
                                ^^PCI3.SR3A.OSHP ()
                                ^^PCI3.SR3B.OSHP ()
                                ^^PCI3.SR3C.OSHP ()
                                ^^PCI3.SR3D.OSHP ()
                            }

                            GPSH = 0x01
                        }

                        If ((Arg1 != One))
                        {
                            CDW1 |= 0x08
                        }

                        If ((CDW3 != CTRL))
                        {
                            CDW1 |= 0x10
                        }

                        CDW3 = CTRL /* \_SB_.PCI1._OSC.CTRL */
                        Return (Arg3)
                    }
                    Else
                    {
                        CDW1 |= 0x04
                        IO80 = 0xEE
                        Return (Arg3)
                    }
                }
            }

            Method (BN40, 0, NotSerialized)
            {
                Return (BBI1) /* \BBI1 */
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                If ((CLOD == 0x00))
                {
                    Return (0x01)
                }
                Else
                {
                    Return (0x02)
                }
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "IIO1PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("d8c1a3a6-be9b-4c9b-91bf-c3cb81fc5daf") /* Dynamic Enumeration */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Return (Buffer (0x01)
                                {
                                     0x1F                                             // .
                                })
                            }
                            Case (0x01)
                            {
                                Return (Buffer (0x025C)
                                {
                                    /* 0000 */  0x44, 0x52, 0x48, 0x31, 0x00, 0x00, 0x00, 0x00,  // DRH1....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0258 */  0x00, 0x00, 0x00, 0x00                           // ....
                                })
                            }
                            Case (0x02)
                            {
                                Return (Buffer (0xCC)
                                {
                                    /* 0000 */  0x41, 0x54, 0x53, 0x31, 0x00, 0x00, 0x00, 0x00,  // ATS1....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00                           // ....
                                })
                            }
                            Case (0x03)
                            {
                                Return (Buffer (0x68)
                                {
                                    /* 0000 */  0x52, 0x48, 0x53, 0x31, 0x00, 0x00, 0x00, 0x00,  // RHS1....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                })
                            }
                            Default
                            {
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local1 = (IIOH >> 0x01)
                Local1 &= 0x01
                If ((Local1 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (P1RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x007F,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x8000,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x8000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x5758,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x5858,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xF4000000,         // Range Minimum
                    0xFBFFBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x07FFC000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000384000000000, // Range Minimum
                    0x0000387FFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P1RS) /* \_SB_.PCI1.P1RS */
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "01-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x0E, 0x02)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    STM2,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "01-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x1E, 0x02)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    STM3,   7
                }
            }

            Name (_EJD, "\\_SB.SCK1")  // _EJD: Ejection Dependent Device
            Device (QRP0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x8001B188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QRP0.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QRP0.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QRP0.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QRP0.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QRP0.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QRP0.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QRP0.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QRP0.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QRP0.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QRP0.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QRP0.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QRP0.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QRP0.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QRP0.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QRP0.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QRP0.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QRP0.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x88000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR1A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR1A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR1A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR1A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR1A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR1A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR1A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR1A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR1A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR1A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR1A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR1A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR1A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR1A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR1A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR1A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR1A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG32) /* \_SB_.AG32 */
                    }

                    Return (PG32) /* \_SB_.PG32 */
                }

                Device (D07C)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (QR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x88008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR1B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR1B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR1B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR1B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR1B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR1B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR1B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR1B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR1B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR1B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR1B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR1B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR1B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR1B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR1B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR1B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR1B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x88009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR2A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR2A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR2A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR2A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR2A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR2A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR2A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR2A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR2A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR2A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR2A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR2A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR2A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR2A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR2A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR2A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR2A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG34) /* \_SB_.AG34 */
                    }

                    Return (PG34) /* \_SB_.PG34 */
                }

                Device (D07D)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (QR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x88010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR2B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR2B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR2B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR2B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR2B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR2B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR2B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR2B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR2B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR2B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR2B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR2B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR2B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR2B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR2B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR2B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR2B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x88011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR2C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR2C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR2C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR2C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR2C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR2C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR2C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR2C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR2C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR2C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR2C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR2C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR2C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR2C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR2C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR2C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR2C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x88012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR2D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR2D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR2D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR2D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR2D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR2D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR2D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR2D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR2D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR2D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR2D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR2D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR2D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR2D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR2D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR2D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR2D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x88013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR3A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR3A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR3A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR3A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR3A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR3A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR3A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR3A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR3A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR3A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR3A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR3A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR3A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR3A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR3A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR3A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR3A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x88018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR3B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR3B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR3B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR3B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR3B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR3B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR3B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR3B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR3B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR3B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR3B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR3B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR3B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR3B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR3B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR3B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR3B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x88019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR3C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR3C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR3C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR3C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR3C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR3C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR3C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR3C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR3C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR3C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR3C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR3C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR3C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR3C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR3C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR3C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR3C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3A) /* \_SB_.AG3A */
                    }

                    Return (PG3A) /* \_SB_.PG3A */
                }

                Device (D07E)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (QR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x8801A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR3D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR3D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR3D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR3D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR3D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR3D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR3D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR3D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR3D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR3D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR3D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR3D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR3D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR3D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR3D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR3D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR3D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (CB1A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB1B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB1C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB1D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB1E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB1F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB1G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB1H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }
        }

        Device (PCI2)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (^BN80, 0, NotSerialized)
            {
                Return (0x80)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN80 ())
            }

            Name (_UID, 0x80)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR80) /* \_SB_.AR80 */
                }

                Return (PR80) /* \_SB_.PR80 */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                Local0 = _BBN ()
                If ((Local0 == 0x00))
                {
                    If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                    {
                        Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                    }
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI2._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI2._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            Local1 = (IIOH >> 0x01)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI1.QRP0.OSHP ()
                                ^^PCI1.QR1A.OSHP ()
                                ^^PCI1.QR1B.OSHP ()
                                ^^PCI1.QR2A.OSHP ()
                                ^^PCI1.QR2B.OSHP ()
                                ^^PCI1.QR2C.OSHP ()
                                ^^PCI1.QR2D.OSHP ()
                                ^^PCI1.QR3A.OSHP ()
                                ^^PCI1.QR3B.OSHP ()
                                ^^PCI1.QR3C.OSHP ()
                                ^^PCI1.QR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x02)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^RRP0.OSHP ()
                                ^RR1A.OSHP ()
                                ^RR1B.OSHP ()
                                ^RR2A.OSHP ()
                                ^RR2B.OSHP ()
                                ^RR2C.OSHP ()
                                ^RR2D.OSHP ()
                                ^RR3A.OSHP ()
                                ^RR3B.OSHP ()
                                ^RR3C.OSHP ()
                                ^RR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x03)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI3.SRP0.OSHP ()
                                ^^PCI3.SR1A.OSHP ()
                                ^^PCI3.SR1B.OSHP ()
                                ^^PCI3.SR2A.OSHP ()
                                ^^PCI3.SR2B.OSHP ()
                                ^^PCI3.SR2C.OSHP ()
                                ^^PCI3.SR2D.OSHP ()
                                ^^PCI3.SR3A.OSHP ()
                                ^^PCI3.SR3B.OSHP ()
                                ^^PCI3.SR3C.OSHP ()
                                ^^PCI3.SR3D.OSHP ()
                            }

                            GPSH = 0x01
                        }

                        If ((Arg1 != One))
                        {
                            CDW1 |= 0x08
                        }

                        If ((CDW3 != CTRL))
                        {
                            CDW1 |= 0x10
                        }

                        CDW3 = CTRL /* \_SB_.PCI2._OSC.CTRL */
                        Return (Arg3)
                    }
                    Else
                    {
                        CDW1 |= 0x04
                        IO80 = 0xEE
                        Return (Arg3)
                    }
                }
            }

            Method (BN80, 0, NotSerialized)
            {
                Return (BBI2) /* \BBI2 */
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                If ((CLOD == 0x00))
                {
                    Return (0x02)
                }
                Else
                {
                    Return (0x04)
                }
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "IIO2PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("d8c1a3a6-be9b-4c9b-91bf-c3cb81fc5daf") /* Dynamic Enumeration */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Return (Buffer (0x01)
                                {
                                     0x1F                                             // .
                                })
                            }
                            Case (0x01)
                            {
                                Return (Buffer (0x025C)
                                {
                                    /* 0000 */  0x44, 0x52, 0x48, 0x32, 0x00, 0x00, 0x00, 0x00,  // DRH2....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0258 */  0x00, 0x00, 0x00, 0x00                           // ....
                                })
                            }
                            Case (0x02)
                            {
                                Return (Buffer (0xCC)
                                {
                                    /* 0000 */  0x41, 0x54, 0x53, 0x32, 0x00, 0x00, 0x00, 0x00,  // ATS2....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00                           // ....
                                })
                            }
                            Case (0x03)
                            {
                                Return (Buffer (0x68)
                                {
                                    /* 0000 */  0x52, 0x48, 0x53, 0x32, 0x00, 0x00, 0x00, 0x00,  // RHS2....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                })
                            }
                            Default
                            {
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local1 = (IIOH >> 0x02)
                Local1 &= 0x01
                If ((Local1 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (P2RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4558,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4259,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4359,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P2RS) /* \_SB_.PCI2.P2RS */
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "02-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x0E, 0x02)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    STM4,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "02-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x1E, 0x02)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    STM5,   7
                }
            }

            Name (_EJD, "\\_SB.SCK2")  // _EJD: Ejection Dependent Device
            Device (RRP0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x8801B188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RRP0.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RRP0.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RRP0.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RRP0.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RRP0.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RRP0.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RRP0.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RRP0.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RRP0.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RRP0.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RRP0.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RRP0.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RRP0.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RRP0.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RRP0.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RRP0.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RRP0.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR1A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR1A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR1A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR1A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR1A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR1A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR1A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR1A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR1A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR1A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR1A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR1A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR1A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR1A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR1A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR1A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR1A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR1B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR1B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR1B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR1B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR1B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR1B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR1B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR1B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR1B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR1B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR1B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR1B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR1B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR1B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR1B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR1B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR1B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR2A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR2A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR2A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR2A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR2A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR2A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR2A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR2A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR2A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR2A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR2A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR2A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR2A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR2A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR2A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR2A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR2A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR2B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR2B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR2B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR2B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR2B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR2B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR2B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR2B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR2B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR2B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR2B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR2B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR2B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR2B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR2B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR2B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR2B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR2C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR2C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR2C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR2C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR2C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR2C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR2C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR2C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR2C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR2C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR2C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR2C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR2C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR2C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR2C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR2C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR2C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR2D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR2D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR2D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR2D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR2D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR2D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR2D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR2D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR2D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR2D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR2D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR2D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR2D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR2D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR2D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR2D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR2D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR3A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR3A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR3A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR3A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR3A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR3A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR3A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR3A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR3A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR3A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR3A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR3A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR3A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR3A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR3A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR3A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR3A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR3B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR3B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR3B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR3B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR3B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR3B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR3B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR3B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR3B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR3B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR3B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR3B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR3B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR3B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR3B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR3B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR3B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR3C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR3C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR3C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR3C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR3C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR3C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR3C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR3C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR3C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR3C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR3C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR3C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR3C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR3C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR3C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR3C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR3C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x8001A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR3D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR3D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR3D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR3D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR3D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR3D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR3D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR3D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR3D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR3D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR3D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR3D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR3D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR3D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR3D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR3D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR3D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (CB2A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB2B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB2C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB2D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB2E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB2F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB2G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB2H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }
        }

        Device (PCI3)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (^BNC0, 0, NotSerialized)
            {
                Return (0xC0)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BNC0 ())
            }

            Name (_UID, 0xC0)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (ARC0) /* \_SB_.ARC0 */
                }

                Return (PRC0) /* \_SB_.PRC0 */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                Local0 = _BBN ()
                If ((Local0 == 0x00))
                {
                    If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                    {
                        Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                    }
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI3._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI3._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            Local1 = (IIOH >> 0x01)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI1.QRP0.OSHP ()
                                ^^PCI1.QR1A.OSHP ()
                                ^^PCI1.QR1B.OSHP ()
                                ^^PCI1.QR2A.OSHP ()
                                ^^PCI1.QR2B.OSHP ()
                                ^^PCI1.QR2C.OSHP ()
                                ^^PCI1.QR2D.OSHP ()
                                ^^PCI1.QR3A.OSHP ()
                                ^^PCI1.QR3B.OSHP ()
                                ^^PCI1.QR3C.OSHP ()
                                ^^PCI1.QR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x02)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI2.RRP0.OSHP ()
                                ^^PCI2.RR1A.OSHP ()
                                ^^PCI2.RR1B.OSHP ()
                                ^^PCI2.RR2A.OSHP ()
                                ^^PCI2.RR2B.OSHP ()
                                ^^PCI2.RR2C.OSHP ()
                                ^^PCI2.RR2D.OSHP ()
                                ^^PCI2.RR3A.OSHP ()
                                ^^PCI2.RR3B.OSHP ()
                                ^^PCI2.RR3C.OSHP ()
                                ^^PCI2.RR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x03)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^SRP0.OSHP ()
                                ^SR1A.OSHP ()
                                ^SR1B.OSHP ()
                                ^SR2A.OSHP ()
                                ^SR2B.OSHP ()
                                ^SR2C.OSHP ()
                                ^SR2D.OSHP ()
                                ^SR3A.OSHP ()
                                ^SR3B.OSHP ()
                                ^SR3C.OSHP ()
                                ^SR3D.OSHP ()
                            }

                            GPSH = 0x01
                        }

                        If ((Arg1 != One))
                        {
                            CDW1 |= 0x08
                        }

                        If ((CDW3 != CTRL))
                        {
                            CDW1 |= 0x10
                        }

                        CDW3 = CTRL /* \_SB_.PCI3._OSC.CTRL */
                        Return (Arg3)
                    }
                    Else
                    {
                        CDW1 |= 0x04
                        IO80 = 0xEE
                        Return (Arg3)
                    }
                }
            }

            Method (BNC0, 0, NotSerialized)
            {
                Return (BBI3) /* \BBI3 */
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                If ((CLOD == 0x00))
                {
                    Return (0x03)
                }
                Else
                {
                    Return (0x06)
                }
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "IIO3PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("d8c1a3a6-be9b-4c9b-91bf-c3cb81fc5daf") /* Dynamic Enumeration */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Return (Buffer (0x01)
                                {
                                     0x1F                                             // .
                                })
                            }
                            Case (0x01)
                            {
                                Return (Buffer (0x025C)
                                {
                                    /* 0000 */  0x44, 0x52, 0x48, 0x33, 0x00, 0x00, 0x00, 0x00,  // DRH3....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0258 */  0x00, 0x00, 0x00, 0x00                           // ....
                                })
                            }
                            Case (0x02)
                            {
                                Return (Buffer (0xCC)
                                {
                                    /* 0000 */  0x41, 0x54, 0x53, 0x33, 0x00, 0x00, 0x00, 0x00,  // ATS3....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00                           // ....
                                })
                            }
                            Case (0x03)
                            {
                                Return (Buffer (0x68)
                                {
                                    /* 0000 */  0x52, 0x48, 0x53, 0x33, 0x00, 0x00, 0x00, 0x00,  // RHS3....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                })
                            }
                            Default
                            {
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local1 = (IIOH >> 0x03)
                Local1 &= 0x01
                If ((Local1 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (P3RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4958,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4559,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4659,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P3RS) /* \_SB_.PCI3.P3RS */
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "03-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x0E, 0x02)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    STM6,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "03-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x1E, 0x02)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    STM7,   7
                }
            }

            Name (_EJD, "\\_SB.SCK3")  // _EJD: Ejection Dependent Device
            Device (SRP0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x8001B188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SRP0.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SRP0.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SRP0.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SRP0.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SRP0.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SRP0.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SRP0.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SRP0.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SRP0.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SRP0.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SRP0.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SRP0.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SRP0.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SRP0.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SRP0.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SRP0.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SRP0.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR1A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR1A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR1A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR1A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR1A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR1A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR1A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR1A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR1A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR1A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR1A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR1A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR1A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR1A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR1A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR1A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR1A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR1B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR1B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR1B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR1B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR1B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR1B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR1B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR1B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR1B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR1B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR1B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR1B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR1B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR1B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR1B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR1B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR1B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR2A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR2A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR2A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR2A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR2A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR2A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR2A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR2A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR2A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR2A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR2A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR2A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR2A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR2A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR2A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR2A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR2A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR2B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR2B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR2B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR2B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR2B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR2B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR2B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR2B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR2B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR2B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR2B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR2B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR2B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR2B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR2B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR2B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR2B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR2C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR2C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR2C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR2C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR2C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR2C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR2C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR2C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR2C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR2C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR2C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR2C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR2C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR2C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR2C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR2C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR2C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR2D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR2D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR2D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR2D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR2D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR2D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR2D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR2D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR2D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR2D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR2D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR2D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR2D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR2D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR2D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR2D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR2D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR3A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR3A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR3A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR3A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR3A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR3A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR3A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR3A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR3A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR3A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR3A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR3A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR3A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR3A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR3A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR3A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR3A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR3B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR3B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR3B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR3B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR3B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR3B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR3B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR3B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR3B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR3B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR3B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR3B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR3B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR3B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR3B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR3B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR3B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR3C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR3C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR3C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR3C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR3C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR3C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR3C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR3C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR3C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR3C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR3C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR3C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR3C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR3C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR3C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR3C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR3C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x8001A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR3D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR3D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR3D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR3D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR3D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR3D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR3D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR3D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR3D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR3D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR3D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR3D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR3D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR3D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR3D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR3D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR3D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (CB3A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB3B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB3C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB3D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB3E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB3F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB3G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB3H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.IP2P, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.XHCI, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x05, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        0x00, 
        0x00, 
        0x00
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.PCI0.LPC0.SPTS (Arg0)
            IPTS (Arg0)
            TBPS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        TBWK (Arg0)
        IWAK (Arg0)
        \_SB.PCI0.LPC0.SWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_GPE)
    {
        OperationRegion (TCOS, SystemIO, 0x0464, 0x02)
        Field (TCOS, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x01), 
                ,   1, 
            DSCI,   1
        }

        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Sleep (0xC8)
            IO80 = 0x01
            Sleep (0x0A)
            Local1 = 0x00
            If ((\_SB.PCI0.BR1A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR1A.PMEH (0x09)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR1A.HPEH (0x09)
            }

            If ((ToInteger (TBRP) == 0x22))
            {
                Local0 = 0xFF
                Local1 = 0x01
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x01
                Notify (\_SB.PCI0.BR1A.H000, Local0)
                Notify (\_SB.PCI0.BR1A.H001, Local0)
                Notify (\_SB.PCI0.BR1A.H002, Local0)
                Notify (\_SB.PCI0.BR1A.H003, Local0)
                Notify (\_SB.PCI0.BR1A.H004, Local0)
                Notify (\_SB.PCI0.BR1A.H005, Local0)
                Notify (\_SB.PCI0.BR1A.H006, Local0)
                Notify (\_SB.PCI0.BR1A.H007, Local0)
            }

            If ((\_SB.PCI0.BR1B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR1B.PMEH (0x09)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR1B.HPEH (0x09)
            }

            If ((ToInteger (TBRP) == 0x23))
            {
                Local0 = 0xFF
                Local1 = 0x02
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x02
                Notify (\_SB.PCI0.BR1B.H000, Local0)
                Notify (\_SB.PCI0.BR1B.H001, Local0)
                Notify (\_SB.PCI0.BR1B.H002, Local0)
                Notify (\_SB.PCI0.BR1B.H003, Local0)
                Notify (\_SB.PCI0.BR1B.H004, Local0)
                Notify (\_SB.PCI0.BR1B.H005, Local0)
                Notify (\_SB.PCI0.BR1B.H006, Local0)
                Notify (\_SB.PCI0.BR1B.H007, Local0)
            }

            If ((\_SB.PCI0.BR2A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR2A.PMEH (0x01)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR2A.HPEH (0x01)
                If ((ToInteger (TBRP) == 0x24))
                {
                    Local0 = 0xFF
                    Local1 = 0x03
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x03
                Notify (\_SB.PCI0.BR2A.H000, Local0)
                Notify (\_SB.PCI0.BR2A.H001, Local0)
                Notify (\_SB.PCI0.BR2A.H002, Local0)
                Notify (\_SB.PCI0.BR2A.H003, Local0)
                Notify (\_SB.PCI0.BR2A.H004, Local0)
                Notify (\_SB.PCI0.BR2A.H005, Local0)
                Notify (\_SB.PCI0.BR2A.H006, Local0)
                Notify (\_SB.PCI0.BR2A.H007, Local0)
            }

            If ((\_SB.PCI0.BR2B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR2B.PMEH (0x02)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR2B.HPEH (0x02)
                If ((ToInteger (TBRP) == 0x25))
                {
                    Local0 = 0xFF
                    Local1 = 0x04
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x04
                Notify (\_SB.PCI0.BR2B.H000, Local0)
                Notify (\_SB.PCI0.BR2B.H001, Local0)
                Notify (\_SB.PCI0.BR2B.H002, Local0)
                Notify (\_SB.PCI0.BR2B.H003, Local0)
                Notify (\_SB.PCI0.BR2B.H004, Local0)
                Notify (\_SB.PCI0.BR2B.H005, Local0)
                Notify (\_SB.PCI0.BR2B.H006, Local0)
                Notify (\_SB.PCI0.BR2B.H007, Local0)
            }

            If ((\_SB.PCI0.BR2C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR2C.PMEH (0x03)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR2C.HPEH (0x03)
                If ((ToInteger (TBRP) == 0x26))
                {
                    Local0 = 0xFF
                    Local1 = 0x05
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x05
                Notify (\_SB.PCI0.BR2C.H000, Local0)
                Notify (\_SB.PCI0.BR2C.H001, Local0)
                Notify (\_SB.PCI0.BR2C.H002, Local0)
                Notify (\_SB.PCI0.BR2C.H003, Local0)
                Notify (\_SB.PCI0.BR2C.H004, Local0)
                Notify (\_SB.PCI0.BR2C.H005, Local0)
                Notify (\_SB.PCI0.BR2C.H006, Local0)
                Notify (\_SB.PCI0.BR2C.H007, Local0)
            }

            If ((\_SB.PCI0.BR2D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR2D.PMEH (0x04)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR2D.HPEH (0x04)
                If ((ToInteger (TBRP) == 0x27))
                {
                    Local0 = 0xFF
                    Local1 = 0x06
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x06
                Notify (\_SB.PCI0.BR2D.H000, Local0)
                Notify (\_SB.PCI0.BR2D.H001, Local0)
                Notify (\_SB.PCI0.BR2D.H002, Local0)
                Notify (\_SB.PCI0.BR2D.H003, Local0)
                Notify (\_SB.PCI0.BR2D.H004, Local0)
                Notify (\_SB.PCI0.BR2D.H005, Local0)
                Notify (\_SB.PCI0.BR2D.H006, Local0)
                Notify (\_SB.PCI0.BR2D.H007, Local0)
            }

            If ((\_SB.PCI0.BR3A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR3A.PMEH (0x05)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR3A.HPEH (0x05)
                If ((ToInteger (TBRP) == 0x28))
                {
                    Local0 = 0xFF
                    Local1 = 0x07
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x07
                Notify (\_SB.PCI0.BR3A.H000, Local0)
                Notify (\_SB.PCI0.BR3A.H001, Local0)
                Notify (\_SB.PCI0.BR3A.H002, Local0)
                Notify (\_SB.PCI0.BR3A.H003, Local0)
                Notify (\_SB.PCI0.BR3A.H004, Local0)
                Notify (\_SB.PCI0.BR3A.H005, Local0)
                Notify (\_SB.PCI0.BR3A.H006, Local0)
                Notify (\_SB.PCI0.BR3A.H007, Local0)
            }

            If ((\_SB.PCI0.BR3B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR3B.PMEH (0x06)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR3B.HPEH (0x06)
                If ((ToInteger (TBRP) == 0x29))
                {
                    Local0 = 0xFF
                    Local1 = 0x08
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x08
                Notify (\_SB.PCI0.BR3B.H000, Local0)
                Notify (\_SB.PCI0.BR3B.H001, Local0)
                Notify (\_SB.PCI0.BR3B.H002, Local0)
                Notify (\_SB.PCI0.BR3B.H003, Local0)
                Notify (\_SB.PCI0.BR3B.H004, Local0)
                Notify (\_SB.PCI0.BR3B.H005, Local0)
                Notify (\_SB.PCI0.BR3B.H006, Local0)
                Notify (\_SB.PCI0.BR3B.H007, Local0)
            }

            If ((\_SB.PCI0.BR3C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR3C.PMEH (0x07)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR3C.HPEH (0x07)
                If ((ToInteger (TBRP) == 0x2A))
                {
                    Local0 = 0xFF
                    Local1 = 0x09
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x09
                Notify (\_SB.PCI0.BR3C.H000, Local0)
                Notify (\_SB.PCI0.BR3C.H001, Local0)
                Notify (\_SB.PCI0.BR3C.H002, Local0)
                Notify (\_SB.PCI0.BR3C.H003, Local0)
                Notify (\_SB.PCI0.BR3C.H004, Local0)
                Notify (\_SB.PCI0.BR3C.H005, Local0)
                Notify (\_SB.PCI0.BR3C.H006, Local0)
                Notify (\_SB.PCI0.BR3C.H007, Local0)
            }

            If ((\_SB.PCI0.BR3D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR3D.PMEH (0x08)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR3D.HPEH (0x08)
                If ((ToInteger (TBRP) == 0x2B))
                {
                    Local0 = 0xFF
                    Local1 = 0x0A
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0A
                Notify (\_SB.PCI0.BR3D.H000, Local0)
                Notify (\_SB.PCI0.BR3D.H001, Local0)
                Notify (\_SB.PCI0.BR3D.H002, Local0)
                Notify (\_SB.PCI0.BR3D.H003, Local0)
                Notify (\_SB.PCI0.BR3D.H004, Local0)
                Notify (\_SB.PCI0.BR3D.H005, Local0)
                Notify (\_SB.PCI0.BR3D.H006, Local0)
                Notify (\_SB.PCI0.BR3D.H007, Local0)
            }

            If ((\_SB.PCI1.QRP0.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QRP0.PMEH (0x09)
            }
            Else
            {
                Local0 = \_SB.PCI1.QRP0.HPEH (0x09)
                If ((ToInteger (TBRP) == 0x30))
                {
                    Local0 = 0xFF
                    Local1 = 0x10
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x10
                Notify (\_SB.PCI1.QRP0.H000, Local0)
                Notify (\_SB.PCI1.QRP0.H001, Local0)
                Notify (\_SB.PCI1.QRP0.H002, Local0)
                Notify (\_SB.PCI1.QRP0.H003, Local0)
                Notify (\_SB.PCI1.QRP0.H004, Local0)
                Notify (\_SB.PCI1.QRP0.H005, Local0)
                Notify (\_SB.PCI1.QRP0.H006, Local0)
                Notify (\_SB.PCI1.QRP0.H007, Local0)
            }

            If ((\_SB.PCI1.QR2A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR2A.PMEH (0x01)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR2A.HPEH (0x01)
                If ((ToInteger (TBRP) == 0x34))
                {
                    Local0 = 0xFF
                    Local1 = 0x11
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x11
                Notify (\_SB.PCI1.QR2A.H000, Local0)
                Notify (\_SB.PCI1.QR2A.H001, Local0)
                Notify (\_SB.PCI1.QR2A.H002, Local0)
                Notify (\_SB.PCI1.QR2A.H003, Local0)
                Notify (\_SB.PCI1.QR2A.H004, Local0)
                Notify (\_SB.PCI1.QR2A.H005, Local0)
                Notify (\_SB.PCI1.QR2A.H006, Local0)
                Notify (\_SB.PCI1.QR2A.H007, Local0)
            }

            If ((\_SB.PCI1.QR2B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR2B.PMEH (0x02)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR2B.HPEH (0x02)
                If ((ToInteger (TBRP) == 0x35))
                {
                    Local0 = 0xFF
                    Local1 = 0x12
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x12
                Notify (\_SB.PCI1.QR2B.H000, Local0)
                Notify (\_SB.PCI1.QR2B.H001, Local0)
                Notify (\_SB.PCI1.QR2B.H002, Local0)
                Notify (\_SB.PCI1.QR2B.H003, Local0)
                Notify (\_SB.PCI1.QR2B.H004, Local0)
                Notify (\_SB.PCI1.QR2B.H005, Local0)
                Notify (\_SB.PCI1.QR2B.H006, Local0)
                Notify (\_SB.PCI1.QR2B.H007, Local0)
            }

            If ((\_SB.PCI1.QR2C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR2C.PMEH (0x03)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR2C.HPEH (0x03)
                If ((ToInteger (TBRP) == 0x36))
                {
                    Local0 = 0xFF
                    Local1 = 0x13
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x13
                Notify (\_SB.PCI1.QR2C.H000, Local0)
                Notify (\_SB.PCI1.QR2C.H001, Local0)
                Notify (\_SB.PCI1.QR2C.H002, Local0)
                Notify (\_SB.PCI1.QR2C.H003, Local0)
                Notify (\_SB.PCI1.QR2C.H004, Local0)
                Notify (\_SB.PCI1.QR2C.H005, Local0)
                Notify (\_SB.PCI1.QR2C.H006, Local0)
                Notify (\_SB.PCI1.QR2C.H007, Local0)
            }

            If ((\_SB.PCI1.QR2D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR2D.PMEH (0x04)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR2D.HPEH (0x04)
                If ((ToInteger (TBRP) == 0x37))
                {
                    Local0 = 0xFF
                    Local1 = 0x14
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x14
                Notify (\_SB.PCI1.QR2D.H000, Local0)
                Notify (\_SB.PCI1.QR2D.H001, Local0)
                Notify (\_SB.PCI1.QR2D.H002, Local0)
                Notify (\_SB.PCI1.QR2D.H003, Local0)
                Notify (\_SB.PCI1.QR2D.H004, Local0)
                Notify (\_SB.PCI1.QR2D.H005, Local0)
                Notify (\_SB.PCI1.QR2D.H006, Local0)
                Notify (\_SB.PCI1.QR2D.H007, Local0)
            }

            If ((\_SB.PCI1.QR3A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR3A.PMEH (0x05)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR3A.HPEH (0x05)
                If ((ToInteger (TBRP) == 0x38))
                {
                    Local0 = 0xFF
                    Local1 = 0x15
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x15
                Notify (\_SB.PCI1.QR3A.H000, Local0)
                Notify (\_SB.PCI1.QR3A.H001, Local0)
                Notify (\_SB.PCI1.QR3A.H002, Local0)
                Notify (\_SB.PCI1.QR3A.H003, Local0)
                Notify (\_SB.PCI1.QR3A.H004, Local0)
                Notify (\_SB.PCI1.QR3A.H005, Local0)
                Notify (\_SB.PCI1.QR3A.H006, Local0)
                Notify (\_SB.PCI1.QR3A.H007, Local0)
            }

            If ((\_SB.PCI1.QR3B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR3B.PMEH (0x06)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR3B.HPEH (0x06)
                If ((ToInteger (TBRP) == 0x39))
                {
                    Local0 = 0xFF
                    Local1 = 0x16
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x16
                Notify (\_SB.PCI1.QR3B.H000, Local0)
                Notify (\_SB.PCI1.QR3B.H001, Local0)
                Notify (\_SB.PCI1.QR3B.H002, Local0)
                Notify (\_SB.PCI1.QR3B.H003, Local0)
                Notify (\_SB.PCI1.QR3B.H004, Local0)
                Notify (\_SB.PCI1.QR3B.H005, Local0)
                Notify (\_SB.PCI1.QR3B.H006, Local0)
                Notify (\_SB.PCI1.QR3B.H007, Local0)
            }

            If ((\_SB.PCI1.QR3C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR3C.PMEH (0x07)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR3C.HPEH (0x07)
                If ((ToInteger (TBRP) == 0x3A))
                {
                    Local0 = 0xFF
                    Local1 = 0x17
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x17
                Notify (\_SB.PCI1.QR3C.H000, Local0)
                Notify (\_SB.PCI1.QR3C.H001, Local0)
                Notify (\_SB.PCI1.QR3C.H002, Local0)
                Notify (\_SB.PCI1.QR3C.H003, Local0)
                Notify (\_SB.PCI1.QR3C.H004, Local0)
                Notify (\_SB.PCI1.QR3C.H005, Local0)
                Notify (\_SB.PCI1.QR3C.H006, Local0)
                Notify (\_SB.PCI1.QR3C.H007, Local0)
            }

            If ((\_SB.PCI1.QR3D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR3D.PMEH (0x08)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR3D.HPEH (0x08)
                If ((ToInteger (TBRP) == 0x3B))
                {
                    Local0 = 0xFF
                    Local1 = 0x18
                }
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x18
                Notify (\_SB.PCI1.QR3D.H000, Local0)
                Notify (\_SB.PCI1.QR3D.H001, Local0)
                Notify (\_SB.PCI1.QR3D.H002, Local0)
                Notify (\_SB.PCI1.QR3D.H003, Local0)
                Notify (\_SB.PCI1.QR3D.H004, Local0)
                Notify (\_SB.PCI1.QR3D.H005, Local0)
                Notify (\_SB.PCI1.QR3D.H006, Local0)
                Notify (\_SB.PCI1.QR3D.H007, Local0)
            }

            If ((\_SB.PCI2.RRP0.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RRP0.PMEH (0x09)
            }
            Else
            {
                Local0 = \_SB.PCI2.RRP0.HPEH (0x09)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x20
                Notify (\_SB.PCI2.RRP0.H000, Local0)
                Notify (\_SB.PCI2.RRP0.H001, Local0)
                Notify (\_SB.PCI2.RRP0.H002, Local0)
                Notify (\_SB.PCI2.RRP0.H003, Local0)
                Notify (\_SB.PCI2.RRP0.H004, Local0)
                Notify (\_SB.PCI2.RRP0.H005, Local0)
                Notify (\_SB.PCI2.RRP0.H006, Local0)
                Notify (\_SB.PCI2.RRP0.H007, Local0)
            }

            If ((\_SB.PCI2.RR2A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR2A.PMEH (0x01)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR2A.HPEH (0x01)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x21
                Notify (\_SB.PCI2.RR2A.H000, Local0)
                Notify (\_SB.PCI2.RR2A.H001, Local0)
                Notify (\_SB.PCI2.RR2A.H002, Local0)
                Notify (\_SB.PCI2.RR2A.H003, Local0)
                Notify (\_SB.PCI2.RR2A.H004, Local0)
                Notify (\_SB.PCI2.RR2A.H005, Local0)
                Notify (\_SB.PCI2.RR2A.H006, Local0)
                Notify (\_SB.PCI2.RR2A.H007, Local0)
            }

            If ((\_SB.PCI2.RR2B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR2B.PMEH (0x02)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR2B.HPEH (0x02)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x22
                Notify (\_SB.PCI2.RR2B.H000, Local0)
                Notify (\_SB.PCI2.RR2B.H001, Local0)
                Notify (\_SB.PCI2.RR2B.H002, Local0)
                Notify (\_SB.PCI2.RR2B.H003, Local0)
                Notify (\_SB.PCI2.RR2B.H004, Local0)
                Notify (\_SB.PCI2.RR2B.H005, Local0)
                Notify (\_SB.PCI2.RR2B.H006, Local0)
                Notify (\_SB.PCI2.RR2B.H007, Local0)
            }

            If ((\_SB.PCI2.RR2C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR2C.PMEH (0x03)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR2C.HPEH (0x03)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x23
                Notify (\_SB.PCI2.RR2C.H000, Local0)
                Notify (\_SB.PCI2.RR2C.H001, Local0)
                Notify (\_SB.PCI2.RR2C.H002, Local0)
                Notify (\_SB.PCI2.RR2C.H003, Local0)
                Notify (\_SB.PCI2.RR2C.H004, Local0)
                Notify (\_SB.PCI2.RR2C.H005, Local0)
                Notify (\_SB.PCI2.RR2C.H006, Local0)
                Notify (\_SB.PCI2.RR2C.H007, Local0)
            }

            If ((\_SB.PCI2.RR2D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR2D.PMEH (0x04)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR2D.HPEH (0x04)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x24
                Notify (\_SB.PCI2.RR2D.H000, Local0)
                Notify (\_SB.PCI2.RR2D.H001, Local0)
                Notify (\_SB.PCI2.RR2D.H002, Local0)
                Notify (\_SB.PCI2.RR2D.H003, Local0)
                Notify (\_SB.PCI2.RR2D.H004, Local0)
                Notify (\_SB.PCI2.RR2D.H005, Local0)
                Notify (\_SB.PCI2.RR2D.H006, Local0)
                Notify (\_SB.PCI2.RR2D.H007, Local0)
            }

            If ((\_SB.PCI2.RR3A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR3A.PMEH (0x05)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR3A.HPEH (0x05)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x25
                Notify (\_SB.PCI2.RR3A.H000, Local0)
                Notify (\_SB.PCI2.RR3A.H001, Local0)
                Notify (\_SB.PCI2.RR3A.H002, Local0)
                Notify (\_SB.PCI2.RR3A.H003, Local0)
                Notify (\_SB.PCI2.RR3A.H004, Local0)
                Notify (\_SB.PCI2.RR3A.H005, Local0)
                Notify (\_SB.PCI2.RR3A.H006, Local0)
                Notify (\_SB.PCI2.RR3A.H007, Local0)
            }

            If ((\_SB.PCI2.RR3B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR3B.PMEH (0x06)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR3B.HPEH (0x06)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x26
                Notify (\_SB.PCI2.RR3B.H000, Local0)
                Notify (\_SB.PCI2.RR3B.H001, Local0)
                Notify (\_SB.PCI2.RR3B.H002, Local0)
                Notify (\_SB.PCI2.RR3B.H003, Local0)
                Notify (\_SB.PCI2.RR3B.H004, Local0)
                Notify (\_SB.PCI2.RR3B.H005, Local0)
                Notify (\_SB.PCI2.RR3B.H006, Local0)
                Notify (\_SB.PCI2.RR3B.H007, Local0)
            }

            If ((\_SB.PCI2.RR3C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR3C.PMEH (0x07)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR3C.HPEH (0x07)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x27
                Notify (\_SB.PCI2.RR3C.H000, Local0)
                Notify (\_SB.PCI2.RR3C.H001, Local0)
                Notify (\_SB.PCI2.RR3C.H002, Local0)
                Notify (\_SB.PCI2.RR3C.H003, Local0)
                Notify (\_SB.PCI2.RR3C.H004, Local0)
                Notify (\_SB.PCI2.RR3C.H005, Local0)
                Notify (\_SB.PCI2.RR3C.H006, Local0)
                Notify (\_SB.PCI2.RR3C.H007, Local0)
            }

            If ((\_SB.PCI2.RR3D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR3D.PMEH (0x08)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR3D.HPEH (0x08)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x28
                Notify (\_SB.PCI2.RR3D.H000, Local0)
                Notify (\_SB.PCI2.RR3D.H001, Local0)
                Notify (\_SB.PCI2.RR3D.H002, Local0)
                Notify (\_SB.PCI2.RR3D.H003, Local0)
                Notify (\_SB.PCI2.RR3D.H004, Local0)
                Notify (\_SB.PCI2.RR3D.H005, Local0)
                Notify (\_SB.PCI2.RR3D.H006, Local0)
                Notify (\_SB.PCI2.RR3D.H007, Local0)
            }

            If ((\_SB.PCI3.SRP0.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SRP0.PMEH (0x00)
            }
            Else
            {
                Local0 = \_SB.PCI3.SRP0.HPEH (0x00)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x30
                Notify (\_SB.PCI3.SRP0.H000, Local0)
                Notify (\_SB.PCI3.SRP0.H001, Local0)
                Notify (\_SB.PCI3.SRP0.H002, Local0)
                Notify (\_SB.PCI3.SRP0.H003, Local0)
                Notify (\_SB.PCI3.SRP0.H004, Local0)
                Notify (\_SB.PCI3.SRP0.H005, Local0)
                Notify (\_SB.PCI3.SRP0.H006, Local0)
                Notify (\_SB.PCI3.SRP0.H007, Local0)
            }

            If ((\_SB.PCI3.SR2A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR2A.PMEH (0x01)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR2A.HPEH (0x01)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x31
                Notify (\_SB.PCI3.SR2A.H000, Local0)
                Notify (\_SB.PCI3.SR2A.H001, Local0)
                Notify (\_SB.PCI3.SR2A.H002, Local0)
                Notify (\_SB.PCI3.SR2A.H003, Local0)
                Notify (\_SB.PCI3.SR2A.H004, Local0)
                Notify (\_SB.PCI3.SR2A.H005, Local0)
                Notify (\_SB.PCI3.SR2A.H006, Local0)
                Notify (\_SB.PCI3.SR2A.H007, Local0)
            }

            If ((\_SB.PCI3.SR2B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR2B.PMEH (0x02)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR2B.HPEH (0x02)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x32
                Notify (\_SB.PCI3.SR2B.H000, Local0)
                Notify (\_SB.PCI3.SR2B.H001, Local0)
                Notify (\_SB.PCI3.SR2B.H002, Local0)
                Notify (\_SB.PCI3.SR2B.H003, Local0)
                Notify (\_SB.PCI3.SR2B.H004, Local0)
                Notify (\_SB.PCI3.SR2B.H005, Local0)
                Notify (\_SB.PCI3.SR2B.H006, Local0)
                Notify (\_SB.PCI3.SR2B.H007, Local0)
            }

            If ((\_SB.PCI3.SR2C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR2C.PMEH (0x03)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR2C.HPEH (0x03)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x33
                Notify (\_SB.PCI3.SR2C.H000, Local0)
                Notify (\_SB.PCI3.SR2C.H001, Local0)
                Notify (\_SB.PCI3.SR2C.H002, Local0)
                Notify (\_SB.PCI3.SR2C.H003, Local0)
                Notify (\_SB.PCI3.SR2C.H004, Local0)
                Notify (\_SB.PCI3.SR2C.H005, Local0)
                Notify (\_SB.PCI3.SR2C.H006, Local0)
                Notify (\_SB.PCI3.SR2C.H007, Local0)
            }

            If ((\_SB.PCI3.SR2D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR2D.PMEH (0x04)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR2D.HPEH (0x04)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x34
                Notify (\_SB.PCI3.SR2D.H000, Local0)
                Notify (\_SB.PCI3.SR2D.H001, Local0)
                Notify (\_SB.PCI3.SR2D.H002, Local0)
                Notify (\_SB.PCI3.SR2D.H003, Local0)
                Notify (\_SB.PCI3.SR2D.H004, Local0)
                Notify (\_SB.PCI3.SR2D.H005, Local0)
                Notify (\_SB.PCI3.SR2D.H006, Local0)
                Notify (\_SB.PCI3.SR2D.H007, Local0)
            }

            If ((\_SB.PCI3.SR3A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR3A.PMEH (0x05)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR3A.HPEH (0x05)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x35
                Notify (\_SB.PCI3.SR3A.H000, Local0)
                Notify (\_SB.PCI3.SR3A.H001, Local0)
                Notify (\_SB.PCI3.SR3A.H002, Local0)
                Notify (\_SB.PCI3.SR3A.H003, Local0)
                Notify (\_SB.PCI3.SR3A.H004, Local0)
                Notify (\_SB.PCI3.SR3A.H005, Local0)
                Notify (\_SB.PCI3.SR3A.H006, Local0)
                Notify (\_SB.PCI3.SR3A.H007, Local0)
            }

            If ((\_SB.PCI3.SR3B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR3B.PMEH (0x06)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR3B.HPEH (0x06)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x36
                Notify (\_SB.PCI3.SR3B.H000, Local0)
                Notify (\_SB.PCI3.SR3B.H001, Local0)
                Notify (\_SB.PCI3.SR3B.H002, Local0)
                Notify (\_SB.PCI3.SR3B.H003, Local0)
                Notify (\_SB.PCI3.SR3B.H004, Local0)
                Notify (\_SB.PCI3.SR3B.H005, Local0)
                Notify (\_SB.PCI3.SR3B.H006, Local0)
                Notify (\_SB.PCI3.SR3B.H007, Local0)
            }

            If ((\_SB.PCI3.SR3C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR3C.PMEH (0x07)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR3C.HPEH (0x07)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x37
                Notify (\_SB.PCI3.SR3C.H000, Local0)
                Notify (\_SB.PCI3.SR3C.H001, Local0)
                Notify (\_SB.PCI3.SR3C.H002, Local0)
                Notify (\_SB.PCI3.SR3C.H003, Local0)
                Notify (\_SB.PCI3.SR3C.H004, Local0)
                Notify (\_SB.PCI3.SR3C.H005, Local0)
                Notify (\_SB.PCI3.SR3C.H006, Local0)
                Notify (\_SB.PCI3.SR3C.H007, Local0)
            }

            If ((\_SB.PCI3.SR3D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR3D.PMEH (0x08)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR3D.HPEH (0x08)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x38
                Notify (\_SB.PCI3.SR3D.H000, Local0)
                Notify (\_SB.PCI3.SR3D.H001, Local0)
                Notify (\_SB.PCI3.SR3D.H002, Local0)
                Notify (\_SB.PCI3.SR3D.H003, Local0)
                Notify (\_SB.PCI3.SR3D.H004, Local0)
                Notify (\_SB.PCI3.SR3D.H005, Local0)
                Notify (\_SB.PCI3.SR3D.H006, Local0)
                Notify (\_SB.PCI3.SR3D.H007, Local0)
            }

            If ((Local0 != 0x00))
            {
                If ((Local1 == 0x01))
                {
                    \_SB.PCI0.BR1A.PMES = 0x01
                    \_SB.PCI0.BR1A.PMEP = 0x01
                }

                If ((Local1 == 0x02))
                {
                    \_SB.PCI0.BR1B.PMES = 0x01
                    \_SB.PCI0.BR1B.PMEP = 0x01
                }

                If ((Local1 == 0x03))
                {
                    \_SB.PCI0.BR2A.PMES = 0x01
                    \_SB.PCI0.BR2A.PMEP = 0x01
                }

                If ((Local1 == 0x04))
                {
                    \_SB.PCI0.BR2B.PMES = 0x01
                    \_SB.PCI0.BR2B.PMEP = 0x01
                }

                If ((Local1 == 0x05))
                {
                    \_SB.PCI0.BR2C.PMES = 0x01
                    \_SB.PCI0.BR2C.PMEP = 0x01
                }

                If ((Local1 == 0x06))
                {
                    \_SB.PCI0.BR2D.PMES = 0x01
                    \_SB.PCI0.BR2D.PMEP = 0x01
                }

                If ((Local1 == 0x07))
                {
                    \_SB.PCI0.BR3A.PMES = 0x01
                    \_SB.PCI0.BR3A.PMEP = 0x01
                }

                If ((Local1 == 0x08))
                {
                    \_SB.PCI0.BR3B.PMES = 0x01
                    \_SB.PCI0.BR3B.PMEP = 0x01
                }

                If ((Local1 == 0x09))
                {
                    \_SB.PCI0.BR3C.PMES = 0x01
                    \_SB.PCI0.BR3C.PMEP = 0x01
                }

                If ((Local1 == 0x0A))
                {
                    \_SB.PCI0.BR3D.PMES = 0x01
                    \_SB.PCI0.BR3D.PMEP = 0x01
                }

                If ((Local1 == 0x10))
                {
                    \_SB.PCI1.QRP0.PMES = 0x01
                    \_SB.PCI1.QRP0.PMEP = 0x01
                }

                If ((Local1 == 0x11))
                {
                    \_SB.PCI1.QR2A.PMES = 0x01
                    \_SB.PCI1.QR2A.PMEP = 0x01
                }

                If ((Local1 == 0x12))
                {
                    \_SB.PCI1.QR2B.PMES = 0x01
                    \_SB.PCI1.QR2B.PMEP = 0x01
                }

                If ((Local1 == 0x13))
                {
                    \_SB.PCI1.QR2C.PMES = 0x01
                    \_SB.PCI1.QR2C.PMEP = 0x01
                }

                If ((Local1 == 0x14))
                {
                    \_SB.PCI1.QR2D.PMES = 0x01
                    \_SB.PCI1.QR2D.PMEP = 0x01
                }

                If ((Local1 == 0x15))
                {
                    \_SB.PCI1.QR3A.PMES = 0x01
                    \_SB.PCI1.QR3A.PMEP = 0x01
                }

                If ((Local1 == 0x16))
                {
                    \_SB.PCI1.QR3B.PMES = 0x01
                    \_SB.PCI1.QR3B.PMEP = 0x01
                }

                If ((Local1 == 0x17))
                {
                    \_SB.PCI1.QR3C.PMES = 0x01
                    \_SB.PCI1.QR3C.PMEP = 0x01
                }

                If ((Local1 == 0x18))
                {
                    \_SB.PCI1.QR3D.PMES = 0x01
                    \_SB.PCI1.QR3D.PMEP = 0x01
                }

                If ((Local1 == 0x20))
                {
                    \_SB.PCI2.RRP0.PMES = 0x01
                    \_SB.PCI2.RRP0.PMEP = 0x01
                }

                If ((Local1 == 0x21))
                {
                    \_SB.PCI2.RR2A.PMES = 0x01
                    \_SB.PCI2.RR2A.PMEP = 0x01
                }

                If ((Local1 == 0x22))
                {
                    \_SB.PCI2.RR2B.PMES = 0x01
                    \_SB.PCI2.RR2B.PMEP = 0x01
                }

                If ((Local1 == 0x23))
                {
                    \_SB.PCI2.RR2C.PMES = 0x01
                    \_SB.PCI2.RR2C.PMEP = 0x01
                }

                If ((Local1 == 0x24))
                {
                    \_SB.PCI2.RR2D.PMES = 0x01
                    \_SB.PCI2.RR2D.PMEP = 0x01
                }

                If ((Local1 == 0x25))
                {
                    \_SB.PCI2.RR3A.PMES = 0x01
                    \_SB.PCI2.RR3A.PMEP = 0x01
                }

                If ((Local1 == 0x26))
                {
                    \_SB.PCI2.RR3B.PMES = 0x01
                    \_SB.PCI2.RR3B.PMEP = 0x01
                }

                If ((Local1 == 0x27))
                {
                    \_SB.PCI2.RR3C.PMES = 0x01
                    \_SB.PCI2.RR3C.PMEP = 0x01
                }

                If ((Local1 == 0x28))
                {
                    \_SB.PCI2.RR3D.PMES = 0x01
                    \_SB.PCI2.RR3D.PMEP = 0x01
                }

                If ((Local1 == 0x30))
                {
                    \_SB.PCI3.SRP0.PMES = 0x01
                    \_SB.PCI3.SRP0.PMEP = 0x01
                }

                If ((Local1 == 0x31))
                {
                    \_SB.PCI3.SR2A.PMES = 0x01
                    \_SB.PCI3.SR2A.PMEP = 0x01
                }

                If ((Local1 == 0x32))
                {
                    \_SB.PCI3.SR2B.PMES = 0x01
                    \_SB.PCI3.SR2B.PMEP = 0x01
                }

                If ((Local1 == 0x33))
                {
                    \_SB.PCI3.SR2C.PMES = 0x01
                    \_SB.PCI3.SR2C.PMEP = 0x01
                }

                If ((Local1 == 0x34))
                {
                    \_SB.PCI3.SR2D.PMES = 0x01
                    \_SB.PCI3.SR2D.PMEP = 0x01
                }

                If ((Local1 == 0x35))
                {
                    \_SB.PCI3.SR3A.PMES = 0x01
                    \_SB.PCI3.SR3A.PMEP = 0x01
                }

                If ((Local1 == 0x36))
                {
                    \_SB.PCI3.SR3B.PMES = 0x01
                    \_SB.PCI3.SR3B.PMEP = 0x01
                }

                If ((Local1 == 0x37))
                {
                    \_SB.PCI3.SR3C.PMES = 0x01
                    \_SB.PCI3.SR3C.PMEP = 0x01
                }

                If ((Local1 == 0x38))
                {
                    \_SB.PCI3.SR3D.PMES = 0x01
                    \_SB.PCI3.SR3D.PMEP = 0x01
                }

                PEES = 0x01
                PMEE = 0x00
            }
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PCI0.RP01.DEVS () != 0x00))
            {
                \_SB.PCI0.RP01.HPME ()
                Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP02.DEVS () != 0x00))
            {
                \_SB.PCI0.RP02.HPME ()
                Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP03.DEVS () != 0x00))
            {
                \_SB.PCI0.RP03.HPME ()
                Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP04.DEVS () != 0x00))
            {
                \_SB.PCI0.RP04.HPME ()
                Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP05.DEVS () != 0x00))
            {
                \_SB.PCI0.RP05.HPME ()
                Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP06.DEVS () != 0x00))
            {
                \_SB.PCI0.RP06.HPME ()
                Notify (\_SB.PCI0.RP06, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP07.DEVS () != 0x00))
            {
                \_SB.PCI0.RP07.HPME ()
                Notify (\_SB.PCI0.RP07, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP08.DEVS () != 0x00))
            {
                \_SB.PCI0.RP08.HPME ()
                Notify (\_SB.PCI0.RP08, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR1A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR1A, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR1B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR1B, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR2A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR2A, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR2B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR2B, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR2C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR2C, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR2D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR2D, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR3A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR3A, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR3B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR3B, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR3C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR3C, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR3D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR3D, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QRP0.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QRP0, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR1A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR1A, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR1B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR1B, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR2A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR2A, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR2B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR2B, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR2C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR2C, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR2D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR2D, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR3A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR3A, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR3B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR3B, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR3C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR3C, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR3D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR3D, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RRP0.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RRP0, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR1A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR1A, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR1B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR1B, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR2A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR2A, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR2B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR2B, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR2C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR2C, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR2D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR2D, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR3A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR3A, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR3B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR3B, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR3C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR3C, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR3D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR3D, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SRP0.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SRP0, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR1A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR1A, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR1B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR1B, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR2A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR2A, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR2B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR2B, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR2C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR2C, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR2D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR2D, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR3A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR3A, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR3B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR3B, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR3C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR3C, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR3D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR3D, 0x02) // Device Wake
            }
        }
    }

    Scope (_SB)
    {
        Name (\PCAP, 0x00010000)
        Name (\PSSW, 0x9B)
        Name (\HWPS, 0x00)
        OperationRegion (CMOS, SystemIO, 0x70, 0x04)
        Field (CMOS, ByteAcc, NoLock, Preserve)
        {
            IDX0,   7, 
            Offset (0x01), 
            DAT0,   8, 
            IDX1,   7, 
            Offset (0x03), 
            DAT1,   8
        }

        IndexField (IDX1, DAT1, ByteAcc, NoLock, Preserve)
        {
            Offset (0x1B), 
            WIWH,   8
        }

        Method (SWWE, 1, NotSerialized)
        {
            SMIS = 0x00
            SMIC = Arg0
        }

        Device (WERR)
        {
            Name (_HID, EisaId ("PNP0C33") /* Error Device */)  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSYS >= 0x0C))
                {
                    If (((PCAP & 0x00010000) && (WHEA == 0x01)))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = Arg3
            CreateDWordField (Local0, 0x00, CPB1)
            CreateDWordField (Local0, 0x04, CPB2)
            If ((Arg0 == ToUUID ("ed855e0c-6c90-47bf-a62a-26de0fc5ad5c") /* Unknown UUID */))
            {
                If ((CPB2 & 0x01))
                {
                    If (((PCAP & 0x00010000) && (WHEA == 0x01)))
                    {
                        If (~(CPB1 & 0x01))
                        {
                            SWWE (0x9E)
                        }
                    }
                    Else
                    {
                        CPB2 &= 0xFFFFFFFE
                        CPB1 |= 0x10
                        If (~(CPB1 & 0x01)){}
                    }
                }

                Return (Local0)
            }
            ElseIf ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If (_OSI ("Windows 2015"))
                {
                    If (((CPB2 & 0x60) == 0x60))
                    {
                        HWPS = 0x01
                    }
                }
                ElseIf (((CPB2 & 0x60) == 0x20))
                {
                    HWPS = 0x01
                }

                If ((CPB2 & 0x10))
                {
                    If (((PCAP & 0x00010000) && (WHEA == 0x01)))
                    {
                        WIWH = 0x1B
                        If (~(CPB1 & 0x01))
                        {
                            SWWE (0x9E)
                        }
                    }
                    Else
                    {
                        CPB2 &= 0xFFFFFFEF
                        CPB1 |= 0x10
                        If (~(CPB1 & 0x01)){}
                    }
                }

                Return (Local0)
            }
            Else
            {
                Return (^PCI0._OSC (Arg0, Arg1, Arg2, Arg3))
            }
        }

        Device (SRIO)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0xF2, 0xF9, 0x7A, 0x0E, 0xA1, 0x44, 0x6F, 0x4C,  // ..z..DoL
                /* 0008 */  0xA4, 0xB0, 0xA7, 0x67, 0x84, 0x80, 0xDA, 0x61,  // ...g...a
                /* 0010 */  0x41, 0x41, 0x01, 0x02                           // AA..
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (WMAA, 3, NotSerialized)
            {
                Local0 = Arg2
                CreateWordField (Local0, 0x00, CPW0)
                CreateByteField (Local0, 0x02, CPB2)
                CreateByteField (Local0, 0x04, CPB4)
                CreateByteField (Local0, 0x05, CPB5)
                WSIS = CPW0 /* \_SB_.SRIO.WMAA.CPW0 */
                WSIB = CPB2 /* \_SB_.SRIO.WMAA.CPB2 */
                WSIF = CPB4 /* \_SB_.SRIO.WMAA.CPB4 */
                If ((Arg1 == 0x01))
                {
                    WSIC = 0x01
                    SWWE (0x9B)
                }

                If ((Arg1 == 0x02))
                {
                    WSIC = 0x02
                    SWWE (0x9B)
                }

                If ((Arg1 == 0x03))
                {
                    WSIC = 0x03
                    SWWE (0x9B)
                }

                Return (WSTS) /* \WSTS */
            }
        }
    }

    Device (_SB.TPM)
    {
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == 0x00))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == 0x00))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, 0x01)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y01)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y02)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00001000,         // Address Length
                _Y03)
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00001000,         // Address Length
                _Y04)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == 0x01))
            {
                CreateDWordField (CRST, \_SB.TPM._Y01._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y01._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = 0x1000
                CreateDWordField (CRST, \_SB.TPM._Y02._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y02._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = 0x1000
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == 0x01))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y03._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y03._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x0880
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == 0x01))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y04._BAS, MTFD)  // _BAS: Base Address
                    CreateDWordField (CRSI, \_SB.TPM._Y04._LEN, LTFD)  // _LEN: Length
                    MTFD = 0xFED40000
                    LTFD = 0x5000
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }
                ElseIf ((TTPF == 0x00))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y04._BAS, MTFF)  // _BAS: Base Address
                    MTFF = TPMM /* \TPMM */
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }

                MTFE = 0x00
                LTFE = 0x00
                Return (CRSI) /* \_SB_.TPM_.CRSI */
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x04), 
            LCST,   32, 
            Offset (0x40), 
            CREQ,   32, 
            CSTS,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == 0x00))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (0x00)
            }
            ElseIf ((TTDP == 0x01))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (0x00)
            }

            Return (0x00)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, 0x00)
            Switch (ToInteger (Arg1))
            {
                Case (0x00)
                {
                    Return (Buffer (0x01)
                    {
                         0x03                                             // .
                    })
                }
                Case (0x01)
                {
                    TIMR = 0x00
                    If ((AMDT == 0x01))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (0x01)
                                TIMR++
                            }
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        If ((((HSTS & 0x02) | (HSTS & 0x01)) == 
                            0x03))
                        {
                            HCMD = 0x01
                        }
                        Else
                        {
                            FERR = 0x01
                            BEGN = 0x00
                        }

                        Return (0x00)
                    }
                }

            }

            Return (0x01)
        }

        Method (CRYF, 3, Serialized)
        {
            Switch (ToInteger (Arg1))
            {
                Case (0x00)
                {
                    Return (Buffer (0x01)
                    {
                         0x03                                             // .
                    })
                }
                Case (0x01)
                {
                    Name (TPMV, Package (0x02)
                    {
                        0x01, 
                        Package (0x02)
                        {
                            0x01, 
                            0x20
                        }
                    })
                    If ((_STA () == 0x00))
                    {
                        Return (Package (0x01)
                        {
                            0x00
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (0x01)
                    {
                        Return ("1.2")
                    }
                    Case (0x02)
                    {
                        ToInteger (DerefOf (Arg3 [0x00]), TMF2) /* \TMF2 */
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x1200 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        TMF2 <<= 0x08
                        TMF2 |= OFST /* \TMF2 */
                        SMI = TMF2 /* \TMF2 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        If ((TMF1 == 0xFF))
                        {
                            Return (0x01)
                        }

                        Return (Zero)
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            0x00, 
                            0x00
                        })
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x1100 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x01)
                        }

                        PPI1 [0x01] = TMF1 /* \TMF1 */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            0x00, 
                            0x00, 
                            0x00
                        })
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x2100 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        PPI2 [0x01] = TMF1 /* \TMF1 */
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x3100 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        If ((TMF1 == 0xF0))
                        {
                            TMF1 = OFST /* \OFST */
                            TMF1 |= 0x5100 /* \TMF1 */
                            SMI = TMF1 /* \TMF1 */
                            TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                            TMF1 >>= 0x08
                            If ((TMF1 == 0xFF))
                            {
                                PPI2 [0x02] = 0xFFFFFFF0
                                Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                            }
                        }
                        ElseIf ((TMF1 == 0xF1))
                        {
                            TMF1 = OFST /* \OFST */
                            TMF1 |= 0x5100 /* \TMF1 */
                            SMI = TMF1 /* \TMF1 */
                            TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                            TMF1 >>= 0x08
                            If ((TMF1 == 0xFF))
                            {
                                PPI2 [0x02] = 0xFFFFFFF1
                                Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                            }
                        }
                        Else
                        {
                            PPI2 [0x02] = TMF1 /* \TMF1 */
                        }

                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        ToInteger (DerefOf (Arg3 [0x00]), TMF2) /* \TMF2 */
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x1200 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        TMF2 <<= 0x08
                        TMF2 |= OFST /* \TMF2 */
                        SMI = TMF2 /* \TMF2 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        If ((TMF1 == 0xF1))
                        {
                            Return (0x01)
                        }

                        Return (Zero)
                    }
                    Case (0x08)
                    {
                        ToInteger (DerefOf (Arg3 [0x00]), TMF2) /* \TMF2 */
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x4300 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF2 <<= 0x08
                        TMF2 |= OFST /* \TMF2 */
                        SMI = TMF2 /* \TMF2 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        Return (TMF1) /* \TMF1 */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x01)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (0x01)
                    {
                        TMF1 = OFST /* \OFST */
                        TMF1 |= 0x2200 /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        ToInteger (DerefOf (Arg3 [0x00]), TMF1) /* \TMF1 */
                        TMF1 <<= 0x08
                        TMF1 |= OFST /* \TMF1 */
                        SMI = TMF1 /* \TMF1 */
                        TMF1 = SMI /* \_SB_.TPM_.SMI_ */
                        TMF1 >>= 0x08
                        If ((TMF1 == 0xFF))
                        {
                            Return (0x02)
                        }

                        Return (Zero)
                    }
                    Default
                    {
                    }

                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (\)
    {
        Mutex (OSUM, 0x00)
        Event (WFEV)
        Name (PEMA, 0x80000000)
        Name (TBRP, 0x04)
        Name (TBUS, 0x08)
        Name (TBHR, 0x03)
        Name (TBMV, 0x00)
        Name (RPR6, 0x00)
        Name (RPR7, 0x00)
        Name (RPR8, 0x00)
        Name (RPR9, 0x00)
        Name (RPRA, 0x00)
        Name (RPRB, 0x00)
        OperationRegion (TBNV, SystemMemory, 0x78899F98, 0x0003)
        Field (TBNV, AnyAcc, Lock, Preserve)
        {
            TBHS,   8, 
            THRS,   8, 
            TBWS,   8
        }

        OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
        Field (SPRT, ByteAcc, Lock, Preserve)
        {
            SSMP,   8
        }

        Method (TBWK, 1, NotSerialized)
        {
            \_SB.PCI0.RP05.TWAK (Arg0)
        }

        Method (TBPS, 1, NotSerialized)
        {
            \_SB.PCI0.RP05.TPTS (Arg0)
        }
    }

    Scope (_SB)
    {
        Method (TBFP, 1, NotSerialized)
        {
            If (Arg0){}
            Else
            {
            }
        }

        Device (WMTF)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "TBFP")  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0x48, 0xFD, 0xCC, 0x86, 0x5E, 0x20, 0x77, 0x4A,  // H...^ wJ
                /* 0008 */  0x9C, 0x48, 0x20, 0x21, 0xCB, 0xED, 0xE3, 0x41,  // .H !...A
                /* 0010 */  0x54, 0x46, 0x01, 0x02                           // TF..
            })
            Method (WMTF, 3, NotSerialized)
            {
                CreateByteField (Arg2, 0x00, FP)
                If (FP)
                {
                    TBFP (0x01)
                }
                Else
                {
                    TBFP (0x00)
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (OSUP, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x0548)
            OperationRegion (PXVD, SystemMemory, Local0, 0x08)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                TB2P,   32, 
                P2TB,   32
            }

            Local1 = 0x64
            P2TB = 0x0D
            While ((Local1 > 0x00))
            {
                Local1 = (Local1 - 0x01)
                Local2 = TB2P /* \_GPE.OSUP.TB2P */
                If ((Local2 == 0xFFFFFFFF))
                {
                    Return (0x02)
                }

                If ((Local2 & 0x01))
                {
                    Break
                }

                Sleep (0x32)
            }

            P2TB = 0x00
            Return (0x01)
        }

        Method (TSXE, 0, NotSerialized)
        {
            DBG8 = 0x14
            Local0 = MMTB ()
            OperationRegion (PXVD, SystemMemory, Local0, 0x0550)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                VIDI,   32, 
                Offset (0x548), 
                TB2P,   32, 
                P2TB,   32
            }

            P2TB = 0x09
            Local1 = 0x64
            While ((Local1 > 0x00))
            {
                Local1 = (Local1 - 0x01)
                Local2 = TB2P /* \_GPE.TSXE.TB2P */
                If ((Local2 == 0xFFFFFFFF))
                {
                    Return (Zero)
                }

                If ((Local2 & 0x01))
                {
                    Break
                }

                Sleep (0x32)
            }

            P2TB = 0x00
            Local1 = 0x01F4
            While ((Local1 > 0x00))
            {
                Local1 = (Local1 - 0x01)
                Local2 = VIDI /* \_GPE.TSXE.VIDI */
                If ((Local2 != 0xFFFFFFFF))
                {
                    Return (0x00)
                }

                Sleep (0x32)
            }

            Return (Zero)
        }

        Method (MMRP, 0, NotSerialized)
        {
            Local0 = PEMA /* \PEMA */
            If ((ToInteger (TBRP) < 0x08))
            {
                Local0 += 0x000E0000
                Local1 = ToInteger (TBRP)
                Local1 *= 0x1000
                Local0 += Local1
            }

            Return (Local0)
        }

        Method (MMTB, 0, NotSerialized)
        {
            Local0 = MMRP ()
            OperationRegion (MMMM, SystemMemory, Local0, 0x1A)
            Field (MMMM, AnyAcc, NoLock, Preserve)
            {
                Offset (0x19), 
                SBUS,   8
            }

            Local2 = SBUS /* \_GPE.MMTB.SBUS */
            Local0 = PEMA /* \PEMA */
            Local2 *= 0x00100000
            Local0 += Local2
            Return (Local0)
        }

        Method (GDRP, 0, NotSerialized)
        {
            Local0 = MMRP ()
            OperationRegion (RP_X, SystemMemory, Local0, 0x0100)
            Field (RP_X, AnyAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                NBPS,   2, 
                Offset (0xA4), 
                PSD3,   2, 
                Offset (0xE4), 
                HNPS,   2
            }

            If ((ToInteger (TBRP) < 0x20))
            {
                PSD3 = 0x00
                Return (PSD3) /* \_GPE.GDRP.PSD3 */
            }
            Else
            {
                HNPS = 0x00
                Return (HNPS) /* \_GPE.GDRP.HNPS */
            }
        }

        Method (RPDX, 1, NotSerialized)
        {
            Local0 = MMRP ()
            OperationRegion (RP_X, SystemMemory, Local0, 0x0100)
            Field (RP_X, AnyAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                NBPS,   2, 
                Offset (0xA4), 
                PSD3,   2, 
                Offset (0xE4), 
                HNPS,   2
            }

            If ((ToInteger (TBRP) < 0x20))
            {
                PSD3 = Arg0
            }
            Else
            {
                HNPS = Arg0
            }

            Sleep (0x64)
        }

        Method (TBAC, 0, NotSerialized)
        {
            Acquire (OSUM, 0xFFFF)
            Local0 = MMRP ()
            OperationRegion (RP_X, SystemMemory, Local0, 0x0100)
            Field (RP_X, AnyAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                RDCC,   32, 
                Offset (0x18), 
                PBUS,   8, 
                SBUS,   8, 
                SUBS,   8, 
                Offset (0x84), 
                NBPS,   2, 
                Offset (0xA4), 
                PSD3,   2, 
                Offset (0xE4), 
                HNPS,   2
            }

            Local1 = 0x00
            While (0x01)
            {
                If (((RDCC != 0xFFFFFFFF) && (SBUS != 0xFF)))
                {
                    If (((ToInteger (TBRP) < 0x10) && (PSD3 == 0x00)))
                    {
                        Break
                    }

                    If (((ToInteger (TBRP) >= 0x10) && (HNPS == 0x00)))
                    {
                        Break
                    }
                }
                Else
                {
                    Local1 += 0x01
                    If ((Local1 > 0x03E8))
                    {
                        DBG9 = 0x7BAC
                        Sleep (0x03E8)
                        Break
                    }
                    Else
                    {
                        Sleep (0x10)
                    }
                }
            }

            Release (OSUM)
        }

        Method (NTFY, 0, Serialized)
        {
            Sleep (0x64)
            Switch (ToInteger (TBRP))
            {
                Case (0x00)
                {
                    Notify (\_SB.PCI0.RP01, 0x00) // Bus Check
                }
                Case (0x01)
                {
                    Notify (\_SB.PCI0.RP02, 0x00) // Bus Check
                }
                Case (0x02)
                {
                    Notify (\_SB.PCI0.RP03, 0x00) // Bus Check
                }
                Case (0x03)
                {
                    Notify (\_SB.PCI0.RP04, 0x00) // Bus Check
                }
                Case (0x04)
                {
                    Notify (\_SB.PCI0.RP05, 0x00) // Bus Check
                }
                Case (0x05)
                {
                    Notify (\_SB.PCI0.RP06, 0x00) // Bus Check
                }
                Case (0x06)
                {
                    Notify (\_SB.PCI0.RP07, 0x00) // Bus Check
                }
                Case (0x07)
                {
                    Notify (\_SB.PCI0.RP08, 0x00) // Bus Check
                }
                Case (0x20)
                {
                    Notify (\_SB.PCI0.BR1A, 0x00) // Bus Check
                }
                Case (0x21)
                {
                    Notify (\_SB.PCI0.BR1B, 0x00) // Bus Check
                }
                Case (0x24)
                {
                    Notify (\_SB.PCI0.BR2A, 0x00) // Bus Check
                }
                Case (0x25)
                {
                    Notify (\_SB.PCI0.BR2B, 0x00) // Bus Check
                }
                Case (0x26)
                {
                    Notify (\_SB.PCI0.BR2C, 0x00) // Bus Check
                }
                Case (0x27)
                {
                    Notify (\_SB.PCI0.BR2D, 0x00) // Bus Check
                }
                Case (0x28)
                {
                    Notify (\_SB.PCI0.BR3A, 0x00) // Bus Check
                }
                Case (0x29)
                {
                    Notify (\_SB.PCI0.BR3B, 0x00) // Bus Check
                }
                Case (0x2A)
                {
                    Notify (\_SB.PCI0.BR3C, 0x00) // Bus Check
                }
                Case (0x2B)
                {
                    Notify (\_SB.PCI0.BR3D, 0x00) // Bus Check
                }

            }
        }

        Method (TBFF, 0, NotSerialized)
        {
            Local0 = MMTB ()
            OperationRegion (PXVD, SystemMemory, Local0, 0x04)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                VEDI,   32
            }

            Local1 = VEDI /* \_GPE.TBFF.VEDI */
            If ((Local1 == 0xFFFFFFFF))
            {
                Return (OSUP (Local0))
            }
            Else
            {
                Return (0x00)
            }
        }

        Method (_E1C, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            Name (TSNE, 0x03)
            If ((OSVR < 0x0E))
            {
                Return (Zero)
            }

            Wait (WFEV, 0xFFFF)
            Signal (WFEV)
            TBAC ()
            Acquire (OSUM, 0xFFFF)
            If ((TBHR != 0x01))
            {
                Local0 = TBFF ()
                If ((Local0 == 0x01))
                {
                    Sleep (0x10)
                    Release (OSUM)
                    Return (Zero)
                }

                If ((Local0 == 0x02))
                {
                    If ((TSNE & 0x02))
                    {
                        Sleep (0x10)
                        NTFY ()
                    }

                    DBG8 = 0x7D
                    Release (OSUM)
                    Return (Zero)
                }
            }

            If ((TSNE & 0x01))
            {
                SSMP = TBSW /* \TBSW */
            }

            If ((TSNE & 0x02))
            {
                NTFY ()
            }

            Sleep (0x10)
            Release (OSUM)
        }
    }

    Scope (_SB.PCI0.RP05.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            Return (TBMV) /* \TBMV */
        }
    }

    Scope (_SB.PCI0.RP05)
    {
        Method (TINI, 0, NotSerialized)
        {
            If ((OSVR < 0x0E))
            {
                Return (Zero)
            }

            If (((TBHR != 0xFF) && (TBHR != 0x01)))
            {
                Acquire (OSUM, 0xFFFF)
                DBG8 = 0x51
                \_GPE.TBAC ()
                Local3 = \_GPE.MMTB ()
                \_GPE.OSUP (Local3)
                Release (OSUM)
                Signal (WFEV)
            }
        }

        Method (TWAK, 1, NotSerialized)
        {
            Name (RPL1, 0x00)
            Name (RPL6, 0x00)
            Name (RPL7, 0x00)
            Name (RPL8, 0x00)
            Name (RPL9, 0x00)
            Name (RPLA, 0x00)
            Name (RPLB, 0x00)
            If ((OSVR < 0x0E))
            {
                Return (Zero)
            }

            If (((TBHR != 0xFF) && (TBHR != 0x01)))
            {
                Acquire (OSUM, 0xFFFF)
                \_GPE.TBAC ()
                If ((ToInteger (THRS) == 0x01))
                {
                    If ((ToInteger (TBWS) == 0x00))
                    {
                        Sleep (0x01F4)
                    }

                    \_GPE.TSXE ()
                    If ((ToInteger (TBRP) > 0x0F))
                    {
                        Sleep (0x0258)
                    }
                }

                Local0 = \_GPE.MMRP ()
                OperationRegion (RP_X, SystemMemory, Local0, 0x34)
                Field (RP_X, DWordAcc, NoLock, Preserve)
                {
                    REG0,   32, 
                    REG1,   32, 
                    REG2,   32, 
                    REG3,   32, 
                    REG4,   32, 
                    REG5,   32, 
                    REG6,   32, 
                    REG7,   32, 
                    REG8,   32, 
                    REG9,   32, 
                    REGA,   32, 
                    REGB,   32, 
                    REGC,   32
                }

                RPL1 = REG1 /* \_SB_.PCI0.RP05.TWAK.REG1 */
                RPL6 = REG6 /* \_SB_.PCI0.RP05.TWAK.REG6 */
                RPL7 = REG7 /* \_SB_.PCI0.RP05.TWAK.REG7 */
                RPL8 = REG8 /* \_SB_.PCI0.RP05.TWAK.REG8 */
                RPL9 = REG9 /* \_SB_.PCI0.RP05.TWAK.REG9 */
                RPLA = REGA /* \_SB_.PCI0.RP05.TWAK.REGA */
                RPLB = REGB /* \_SB_.PCI0.RP05.TWAK.REGB */
                REG6 = RPR6 /* \RPR6 */
                REG7 = RPR7 /* \RPR7 */
                REG8 = RPR8 /* \RPR8 */
                REG9 = RPR9 /* \RPR9 */
                REGA = RPRA /* \RPRA */
                REGB = RPRB /* \RPRB */
                REG1 = 0x00100007
                Local2 = \_GPE.GDRP ()
                \_GPE.RPDX (Zero)
                Local3 = \_GPE.MMTB ()
                \_GPE.OSUP (Local3)
                SSMP = TBSW /* \TBSW */
                REG1 = RPL1 /* \_SB_.PCI0.RP05.TWAK.RPL1 */
                REG6 = RPL6 /* \_SB_.PCI0.RP05.TWAK.RPL6 */
                REG7 = RPL7 /* \_SB_.PCI0.RP05.TWAK.RPL7 */
                REG8 = RPL8 /* \_SB_.PCI0.RP05.TWAK.RPL8 */
                REG9 = RPL9 /* \_SB_.PCI0.RP05.TWAK.RPL9 */
                REGA = RPLA /* \_SB_.PCI0.RP05.TWAK.RPLA */
                REGB = RPLB /* \_SB_.PCI0.RP05.TWAK.RPLB */
                \_GPE.RPDX (Local2)
                Release (OSUM)
                If ((ToInteger (TBRP) >= 0x20))
                {
                    \_GPE.NTFY ()
                }
            }

            Signal (WFEV)
        }

        Method (TPTS, 1, NotSerialized)
        {
            If ((OSVR < 0x0E))
            {
                Return (Zero)
            }

            If (((TBHR != 0xFF) && (TBHR != 0x01)))
            {
                Acquire (OSUM, 0xFFFF)
                Local0 = \_GPE.MMRP ()
                OperationRegion (RP_X, SystemMemory, Local0, 0x34)
                Field (RP_X, DWordAcc, NoLock, Preserve)
                {
                    REG0,   32, 
                    REG1,   32, 
                    REG2,   32, 
                    REG3,   32, 
                    REG4,   32, 
                    REG5,   32, 
                    REG6,   32, 
                    REG7,   32, 
                    REG8,   32, 
                    REG9,   32, 
                    REGA,   32, 
                    REGB,   32, 
                    REGC,   32
                }

                RPR6 = REG6 /* \_SB_.PCI0.RP05.TPTS.REG6 */
                RPR7 = REG7 /* \_SB_.PCI0.RP05.TPTS.REG7 */
                RPR8 = REG8 /* \_SB_.PCI0.RP05.TPTS.REG8 */
                RPR9 = REG9 /* \_SB_.PCI0.RP05.TPTS.REG9 */
                RPRA = REGA /* \_SB_.PCI0.RP05.TPTS.REGA */
                RPRB = REGB /* \_SB_.PCI0.RP05.TPTS.REGB */
                Release (OSUM)
            }

            Reset (WFEV)
        }
    }

    OperationRegion (_SB.PCI0.LPC0.PIX0, PCI_Config, 0x60, 0x0C)
    Field (\_SB.PCI0.LPC0.PIX0, ByteAcc, NoLock, Preserve)
    {
        PIRA,   8, 
        PIRB,   8, 
        PIRC,   8, 
        PIRD,   8, 
        Offset (0x08), 
        PIRE,   8, 
        PIRF,   8, 
        PIRG,   8, 
        PIRH,   8
    }

    Scope (_SB)
    {
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, _Y05)
                {15}
        })
        CreateWordField (BUFA, \_SB._Y05._INT, IRA0)  // _INT: Interrupts
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRA & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRA |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRA & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRB & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRB |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRB & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRD & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRD |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRD & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRE & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRE & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRF & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRF & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRG & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRG & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRH & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRH & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Scope (_SB)
    {
        Name (XCPD, 0x00)
        Name (XNPT, 0x01)
        Name (XCAP, 0x02)
        Name (XDCP, 0x04)
        Name (XDCT, 0x08)
        Name (XDST, 0x0A)
        Name (XLCP, 0x0C)
        Name (XLCT, 0x10)
        Name (XLST, 0x12)
        Name (XSCP, 0x14)
        Name (XSCT, 0x18)
        Name (XSST, 0x1A)
        Name (XRCT, 0x1C)
        Mutex (MUTE, 0x00)
        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x01)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RBPE.XCFG */
        }

        Method (RWPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RWPE.XCFG */
        }

        Method (RDPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RDPE.XCFG */
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x0FFF)
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x01)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WWPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WDPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (RWDP, 3, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Local1 = (XCFG & Arg2)
            XCFG = (Local1 | Arg1)
            Release (MUTE)
        }

        Method (RPME, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x84)
            Local1 = RDPE (Local0)
            If ((Local1 == 0xFFFFFFFF))
            {
                Return (0x00)
            }
            Else
            {
                If ((Local1 && 0x00010000))
                {
                    WDPE (Local0, (Local1 & 0x00010000))
                    Return (0x01)
                }

                Return (0x00)
            }
        }
    }

    Scope (_SB.PCI0.RP03)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x00, 
                        Unicode ("OnBoard LAN 1")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.RP04)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x00, 
                        Unicode ("OnBoard LAN 2")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.RP05)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x06, 
                        Unicode ("PCH SLOT6 PCI-E 3.0 X4")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.BR1A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x00, 
                        Unicode ("OnBoard SAS")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.BR2A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x01, 
                        Unicode ("CPU1 SLOT1 PCI-E 3.0 X16")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.BR3A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x03, 
                        Unicode ("CPU1 SLOT3 PCI-E 3.0 X16")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI1.QR1A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x04, 
                        Unicode ("CPU2 SLOT4 PCI-E 3.0 X8")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI1.QR2A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x05, 
                        Unicode ("CPU2 SLOT5 PCI-E 3.0 X16")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI1.QR3C)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x02, 
                        Unicode ("CPU2 SLOT2 PCI-E 3.0 X8")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }
}



EINJ
----
[000h 0000 004h]                   Signature : "EINJ"    [Error Injection Table]
[004h 0004 004h]                Table Length : 00000150
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 6E
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h]     Injection Header Length : 0000000C
[028h 0040 001h]                       Flags : 00
[029h 0041 003h]                    Reserved : 000000
[02Ch 0044 004h]       Injection Entry Count : 00000009

[030h 0048 001h]                      Action : 00 [Begin Operation]
[031h 0049 001h]                 Instruction : 03 [Write Register Value]
[032h 0050 001h]       Flags (decoded below) : 01
                      Preserve Register Bits : 1
[033h 0051 001h]                    Reserved : 00

[034h 0052 00Ch]             Register Region : [Generic Address Structure]
[034h 0052 001h]                    Space ID : 00 [SystemMemory]
[035h 0053 001h]                   Bit Width : 40
[036h 0054 001h]                  Bit Offset : 00
[037h 0055 001h]        Encoded Access Width : 04 [QWord Access:64]
[038h 0056 008h]                     Address : 00000000781F7018

[040h 0064 008h]                       Value : 0000000055AA55AA
[048h 0072 008h]                        Mask : 00000000FFFFFFFF

[050h 0080 001h]                      Action : 01 [Get Trigger Table]
[051h 0081 001h]                 Instruction : 00 [Read Register]
[052h 0082 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[053h 0083 001h]                    Reserved : 00

[054h 0084 00Ch]             Register Region : [Generic Address Structure]
[054h 0084 001h]                    Space ID : 00 [SystemMemory]
[055h 0085 001h]                   Bit Width : 40
[056h 0086 001h]                  Bit Offset : 00
[057h 0087 001h]        Encoded Access Width : 04 [QWord Access:64]
[058h 0088 008h]                     Address : 00000000781F7048

[060h 0096 008h]                       Value : 0000000000000000
[068h 0104 008h]                        Mask : FFFFFFFFFFFFFFFF

[070h 0112 001h]                      Action : 02 [Set Error Type]
[071h 0113 001h]                 Instruction : 02 [Write Register]
[072h 0114 001h]       Flags (decoded below) : 01
                      Preserve Register Bits : 1
[073h 0115 001h]                    Reserved : 00

[074h 0116 00Ch]             Register Region : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 00 [SystemMemory]
[075h 0117 001h]                   Bit Width : 40
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 04 [QWord Access:64]
[078h 0120 008h]                     Address : 00000000781F7020

[080h 0128 008h]                       Value : 0000000000000000
[088h 0136 008h]                        Mask : 00000000FFFFFFFF

[090h 0144 001h]                      Action : 03 [Get Error Type]
[091h 0145 001h]                 Instruction : 00 [Read Register]
[092h 0146 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[093h 0147 001h]                    Reserved : 00

[094h 0148 00Ch]             Register Region : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 00 [SystemMemory]
[095h 0149 001h]                   Bit Width : 40
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 04 [QWord Access:64]
[098h 0152 008h]                     Address : 00000000781F7050

[0A0h 0160 008h]                       Value : 0000000000000000
[0A8h 0168 008h]                        Mask : 00000000FFFFFFFF

[0B0h 0176 001h]                      Action : 04 [End Operation]
[0B1h 0177 001h]                 Instruction : 03 [Write Register Value]
[0B2h 0178 001h]       Flags (decoded below) : 01
                      Preserve Register Bits : 1
[0B3h 0179 001h]                    Reserved : 00

[0B4h 0180 00Ch]             Register Region : [Generic Address Structure]
[0B4h 0180 001h]                    Space ID : 00 [SystemMemory]
[0B5h 0181 001h]                   Bit Width : 40
[0B6h 0182 001h]                  Bit Offset : 00
[0B7h 0183 001h]        Encoded Access Width : 04 [QWord Access:64]
[0B8h 0184 008h]                     Address : 00000000781F7018

[0C0h 0192 008h]                       Value : 0000000000000000
[0C8h 0200 008h]                        Mask : 00000000FFFFFFFF

[0D0h 0208 001h]                      Action : 05 [Execute Operation]
[0D1h 0209 001h]                 Instruction : 03 [Write Register Value]
[0D2h 0210 001h]       Flags (decoded below) : 01
                      Preserve Register Bits : 1
[0D3h 0211 001h]                    Reserved : 00

[0D4h 0212 00Ch]             Register Region : [Generic Address Structure]
[0D4h 0212 001h]                    Space ID : 01 [SystemIO]
[0D5h 0213 001h]                   Bit Width : 10
[0D6h 0214 001h]                  Bit Offset : 00
[0D7h 0215 001h]        Encoded Access Width : 02 [Word Access:16]
[0D8h 0216 008h]                     Address : 00000000000000B2

[0E0h 0224 008h]                       Value : 000000000000009A
[0E8h 0232 008h]                        Mask : 000000000000FFFF

[0F0h 0240 001h]                      Action : 06 [Check Busy Status]
[0F1h 0241 001h]                 Instruction : 01 [Read Register Value]
[0F2h 0242 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0F3h 0243 001h]                    Reserved : 00

[0F4h 0244 00Ch]             Register Region : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 40
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 04 [QWord Access:64]
[0F8h 0248 008h]                     Address : 00000000781F7058

[100h 0256 008h]                       Value : 0000000000000001
[108h 0264 008h]                        Mask : 0000000000000001

[110h 0272 001h]                      Action : 07 [Get Command Status]
[111h 0273 001h]                 Instruction : 00 [Read Register]
[112h 0274 001h]       Flags (decoded below) : 01
                      Preserve Register Bits : 1
[113h 0275 001h]                    Reserved : 00

[114h 0276 00Ch]             Register Region : [Generic Address Structure]
[114h 0276 001h]                    Space ID : 00 [SystemMemory]
[115h 0277 001h]                   Bit Width : 40
[116h 0278 001h]                  Bit Offset : 00
[117h 0279 001h]        Encoded Access Width : 04 [QWord Access:64]
[118h 0280 008h]                     Address : 00000000781F7060

[120h 0288 008h]                       Value : 0000000000000000
[128h 0296 008h]                        Mask : 00000000000001FE

[130h 0304 001h]                      Action : 08 [Set Error Type With Address]
[131h 0305 001h]                 Instruction : 02 [Write Register]
[132h 0306 001h]       Flags (decoded below) : 01
                      Preserve Register Bits : 1
[133h 0307 001h]                    Reserved : 00

[134h 0308 00Ch]             Register Region : [Generic Address Structure]
[134h 0308 001h]                    Space ID : 00 [SystemMemory]
[135h 0309 001h]                   Bit Width : 40
[136h 0310 001h]                  Bit Offset : 00
[137h 0311 001h]        Encoded Access Width : 04 [QWord Access:64]
[138h 0312 008h]                     Address : 00000000781F7078

[140h 0320 008h]                       Value : 0000000000000000
[148h 0328 008h]                        Mask : 00000000FFFFFFFF

Raw Table Data: Length 336 (0x150)

    0000: 45 49 4E 4A 50 01 00 00 01 6E 41 4C 41 53 4B 41  // EINJP....nALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 01 00 00 00 0C 00 00 00 00 00 00 00 09 00 00 00  // ................
    0030: 00 03 01 00 00 40 00 04 18 70 1F 78 00 00 00 00  // .....@...p.x....
    0040: AA 55 AA 55 00 00 00 00 FF FF FF FF 00 00 00 00  // .U.U............
    0050: 01 00 00 00 00 40 00 04 48 70 1F 78 00 00 00 00  // .....@..Hp.x....
    0060: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    0070: 02 02 01 00 00 40 00 04 20 70 1F 78 00 00 00 00  // .....@.. p.x....
    0080: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0090: 03 00 00 00 00 40 00 04 50 70 1F 78 00 00 00 00  // .....@..Pp.x....
    00A0: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    00B0: 04 03 01 00 00 40 00 04 18 70 1F 78 00 00 00 00  // .....@...p.x....
    00C0: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    00D0: 05 03 01 00 01 10 00 02 B2 00 00 00 00 00 00 00  // ................
    00E0: 9A 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00  // ................
    00F0: 06 01 00 00 00 40 00 04 58 70 1F 78 00 00 00 00  // .....@..Xp.x....
    0100: 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    0110: 07 00 01 00 00 40 00 04 60 70 1F 78 00 00 00 00  // .....@..`p.x....
    0120: 00 00 00 00 00 00 00 00 FE 01 00 00 00 00 00 00  // ................
    0130: 08 02 01 00 00 40 00 04 78 70 1F 78 00 00 00 00  // .....@..xp.x....
    0140: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................


ERST
----
[000h 0000 004h]                   Signature : "ERST"    [Error Record Serialization Table]
[004h 0004 004h]                Table Length : 00000230
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : B1
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h] Serialization Header Length : 00000030
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 004h]     Instruction Entry Count : 00000010

[030h 0048 001h]                      Action : 00 [Begin Write Operation]
[031h 0049 001h]                 Instruction : 03 [Write Register Value]
[032h 0050 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[033h 0051 001h]                    Reserved : 00

[034h 0052 00Ch]             Register Region : [Generic Address Structure]
[034h 0052 001h]                    Space ID : 00 [SystemMemory]
[035h 0053 001h]                   Bit Width : 08
[036h 0054 001h]                  Bit Offset : 00
[037h 0055 001h]        Encoded Access Width : 01 [Byte Access:8]
[038h 0056 008h]                     Address : 00000000781FA018

[040h 0064 008h]                       Value : 0000000000000000
[048h 0072 008h]                        Mask : 00000000000000FF

[050h 0080 001h]                      Action : 01 [Begin Read Operation]
[051h 0081 001h]                 Instruction : 03 [Write Register Value]
[052h 0082 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[053h 0083 001h]                    Reserved : 00

[054h 0084 00Ch]             Register Region : [Generic Address Structure]
[054h 0084 001h]                    Space ID : 00 [SystemMemory]
[055h 0085 001h]                   Bit Width : 08
[056h 0086 001h]                  Bit Offset : 00
[057h 0087 001h]        Encoded Access Width : 01 [Byte Access:8]
[058h 0088 008h]                     Address : 00000000781FA018

[060h 0096 008h]                       Value : 0000000000000001
[068h 0104 008h]                        Mask : 00000000000000FF

[070h 0112 001h]                      Action : 02 [Begin Clear Operation]
[071h 0113 001h]                 Instruction : 03 [Write Register Value]
[072h 0114 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[073h 0115 001h]                    Reserved : 00

[074h 0116 00Ch]             Register Region : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 00 [SystemMemory]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 01 [Byte Access:8]
[078h 0120 008h]                     Address : 00000000781FA018

[080h 0128 008h]                       Value : 0000000000000002
[088h 0136 008h]                        Mask : 00000000000000FF

[090h 0144 001h]                      Action : 03 [End Operation]
[091h 0145 001h]                 Instruction : 03 [Write Register Value]
[092h 0146 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[093h 0147 001h]                    Reserved : 00

[094h 0148 00Ch]             Register Region : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 00 [SystemMemory]
[095h 0149 001h]                   Bit Width : 08
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 01 [Byte Access:8]
[098h 0152 008h]                     Address : 00000000781FA018

[0A0h 0160 008h]                       Value : 0000000000000003
[0A8h 0168 008h]                        Mask : 00000000000000FF

[0B0h 0176 001h]                      Action : 04 [Set Record Offset]
[0B1h 0177 001h]                 Instruction : 02 [Write Register]
[0B2h 0178 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0B3h 0179 001h]                    Reserved : 00

[0B4h 0180 00Ch]             Register Region : [Generic Address Structure]
[0B4h 0180 001h]                    Space ID : 00 [SystemMemory]
[0B5h 0181 001h]                   Bit Width : 20
[0B6h 0182 001h]                  Bit Offset : 00
[0B7h 0183 001h]        Encoded Access Width : 03 [DWord Access:32]
[0B8h 0184 008h]                     Address : 00000000781FA01C

[0C0h 0192 008h]                       Value : 0000000000000000
[0C8h 0200 008h]                        Mask : 00000000FFFFFFFF

[0D0h 0208 001h]                      Action : 05 [Execute Operation]
[0D1h 0209 001h]                 Instruction : 03 [Write Register Value]
[0D2h 0210 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0D3h 0211 001h]                    Reserved : 00

[0D4h 0212 00Ch]             Register Region : [Generic Address Structure]
[0D4h 0212 001h]                    Space ID : 01 [SystemIO]
[0D5h 0213 001h]                   Bit Width : 08
[0D6h 0214 001h]                  Bit Offset : 00
[0D7h 0215 001h]        Encoded Access Width : 01 [Byte Access:8]
[0D8h 0216 008h]                     Address : 00000000000000B2

[0E0h 0224 008h]                       Value : 000000000000009C
[0E8h 0232 008h]                        Mask : 00000000000000FF

[0F0h 0240 001h]                      Action : 06 [Check Busy Status]
[0F1h 0241 001h]                 Instruction : 01 [Read Register Value]
[0F2h 0242 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0F3h 0243 001h]                    Reserved : 00

[0F4h 0244 00Ch]             Register Region : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 08
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 01 [Byte Access:8]
[0F8h 0248 008h]                     Address : 00000000781FA020

[100h 0256 008h]                       Value : 0000000000000001
[108h 0264 008h]                        Mask : 00000000000000FF

[110h 0272 001h]                      Action : 07 [Get Command Status]
[111h 0273 001h]                 Instruction : 00 [Read Register]
[112h 0274 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[113h 0275 001h]                    Reserved : 00

[114h 0276 00Ch]             Register Region : [Generic Address Structure]
[114h 0276 001h]                    Space ID : 00 [SystemMemory]
[115h 0277 001h]                   Bit Width : 08
[116h 0278 001h]                  Bit Offset : 00
[117h 0279 001h]        Encoded Access Width : 01 [Byte Access:8]
[118h 0280 008h]                     Address : 00000000781FA021

[120h 0288 008h]                       Value : 0000000000000000
[128h 0296 008h]                        Mask : 00000000000000FF

[130h 0304 001h]                      Action : 08 [Get Record Identifier]
[131h 0305 001h]                 Instruction : 00 [Read Register]
[132h 0306 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[133h 0307 001h]                    Reserved : 00

[134h 0308 00Ch]             Register Region : [Generic Address Structure]
[134h 0308 001h]                    Space ID : 00 [SystemMemory]
[135h 0309 001h]                   Bit Width : 40
[136h 0310 001h]                  Bit Offset : 00
[137h 0311 001h]        Encoded Access Width : 04 [QWord Access:64]
[138h 0312 008h]                     Address : 00000000781FA028

[140h 0320 008h]                       Value : 0000000000000000
[148h 0328 008h]                        Mask : FFFFFFFFFFFFFFFF

[150h 0336 001h]                      Action : 09 [Set Record Identifier]
[151h 0337 001h]                 Instruction : 02 [Write Register]
[152h 0338 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[153h 0339 001h]                    Reserved : 00

[154h 0340 00Ch]             Register Region : [Generic Address Structure]
[154h 0340 001h]                    Space ID : 00 [SystemMemory]
[155h 0341 001h]                   Bit Width : 40
[156h 0342 001h]                  Bit Offset : 00
[157h 0343 001h]        Encoded Access Width : 04 [QWord Access:64]
[158h 0344 008h]                     Address : 00000000781FA030

[160h 0352 008h]                       Value : 0000000000000000
[168h 0360 008h]                        Mask : FFFFFFFFFFFFFFFF

[170h 0368 001h]                      Action : 0A [Get Record Count]
[171h 0369 001h]                 Instruction : 00 [Read Register]
[172h 0370 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[173h 0371 001h]                    Reserved : 00

[174h 0372 00Ch]             Register Region : [Generic Address Structure]
[174h 0372 001h]                    Space ID : 00 [SystemMemory]
[175h 0373 001h]                   Bit Width : 10
[176h 0374 001h]                  Bit Offset : 00
[177h 0375 001h]        Encoded Access Width : 02 [Word Access:16]
[178h 0376 008h]                     Address : 00000000781FA038

[180h 0384 008h]                       Value : 0000000000000000
[188h 0392 008h]                        Mask : 000000000000FFFF

[190h 0400 001h]                      Action : 0B [Begin Dummy Write]
[191h 0401 001h]                 Instruction : 03 [Write Register Value]
[192h 0402 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[193h 0403 001h]                    Reserved : 00

[194h 0404 00Ch]             Register Region : [Generic Address Structure]
[194h 0404 001h]                    Space ID : 00 [SystemMemory]
[195h 0405 001h]                   Bit Width : 08
[196h 0406 001h]                  Bit Offset : 00
[197h 0407 001h]        Encoded Access Width : 01 [Byte Access:8]
[198h 0408 008h]                     Address : 00000000781FA018

[1A0h 0416 008h]                       Value : 000000000000000B
[1A8h 0424 008h]                        Mask : 00000000000000FF

[1B0h 0432 001h]                      Action : 0C [Unused/Unknown Action]
[1B1h 0433 001h]                 Instruction : 04 [Noop]
[1B2h 0434 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[1B3h 0435 001h]                    Reserved : 00

[1B4h 0436 00Ch]             Register Region : [Generic Address Structure]
[1B4h 0436 001h]                    Space ID : 00 [SystemMemory]
[1B5h 0437 001h]                   Bit Width : 08
[1B6h 0438 001h]                  Bit Offset : 00
[1B7h 0439 001h]        Encoded Access Width : 01 [Byte Access:8]
[1B8h 0440 008h]                     Address : 0000000000000000

[1C0h 0448 008h]                       Value : 0000000000000000
[1C8h 0456 008h]                        Mask : 00000000000000FF

[1D0h 0464 001h]                      Action : 0D [Get Error Address Range]
[1D1h 0465 001h]                 Instruction : 00 [Read Register]
[1D2h 0466 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[1D3h 0467 001h]                    Reserved : 00

[1D4h 0468 00Ch]             Register Region : [Generic Address Structure]
[1D4h 0468 001h]                    Space ID : 00 [SystemMemory]
[1D5h 0469 001h]                   Bit Width : 40
[1D6h 0470 001h]                  Bit Offset : 00
[1D7h 0471 001h]        Encoded Access Width : 04 [QWord Access:64]
[1D8h 0472 008h]                     Address : 00000000781FA040

[1E0h 0480 008h]                       Value : 0000000000000000
[1E8h 0488 008h]                        Mask : FFFFFFFFFFFFFFFF

[1F0h 0496 001h]                      Action : 0E [Get Error Address Length]
[1F1h 0497 001h]                 Instruction : 00 [Read Register]
[1F2h 0498 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[1F3h 0499 001h]                    Reserved : 00

[1F4h 0500 00Ch]             Register Region : [Generic Address Structure]
[1F4h 0500 001h]                    Space ID : 00 [SystemMemory]
[1F5h 0501 001h]                   Bit Width : 20
[1F6h 0502 001h]                  Bit Offset : 00
[1F7h 0503 001h]        Encoded Access Width : 03 [DWord Access:32]
[1F8h 0504 008h]                     Address : 00000000781FA048

[200h 0512 008h]                       Value : 0000000000000000
[208h 0520 008h]                        Mask : 00000000FFFFFFFF

[210h 0528 001h]                      Action : 0F [Get Error Attributes]
[211h 0529 001h]                 Instruction : 00 [Read Register]
[212h 0530 001h]       Flags (decoded below) : 00
                      Preserve Register Bits : 0
[213h 0531 001h]                    Reserved : 00

[214h 0532 00Ch]             Register Region : [Generic Address Structure]
[214h 0532 001h]                    Space ID : 00 [SystemMemory]
[215h 0533 001h]                   Bit Width : 08
[216h 0534 001h]                  Bit Offset : 00
[217h 0535 001h]        Encoded Access Width : 01 [Byte Access:8]
[218h 0536 008h]                     Address : 00000000781FA04C

[220h 0544 008h]                       Value : 0000000000000000
[228h 0552 008h]                        Mask : 00000000000000FF

Raw Table Data: Length 560 (0x230)

    0000: 45 52 53 54 30 02 00 00 01 B1 41 4C 41 53 4B 41  // ERST0.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 01 00 00 00 30 00 00 00 00 00 00 00 10 00 00 00  // ....0...........
    0030: 00 03 00 00 00 08 00 01 18 A0 1F 78 00 00 00 00  // ...........x....
    0040: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0050: 01 03 00 00 00 08 00 01 18 A0 1F 78 00 00 00 00  // ...........x....
    0060: 01 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0070: 02 03 00 00 00 08 00 01 18 A0 1F 78 00 00 00 00  // ...........x....
    0080: 02 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0090: 03 03 00 00 00 08 00 01 18 A0 1F 78 00 00 00 00  // ...........x....
    00A0: 03 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    00B0: 04 02 00 00 00 20 00 03 1C A0 1F 78 00 00 00 00  // ..... .....x....
    00C0: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    00D0: 05 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    00E0: 9C 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    00F0: 06 01 00 00 00 08 00 01 20 A0 1F 78 00 00 00 00  // ........ ..x....
    0100: 01 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0110: 07 00 00 00 00 08 00 01 21 A0 1F 78 00 00 00 00  // ........!..x....
    0120: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0130: 08 00 00 00 00 40 00 04 28 A0 1F 78 00 00 00 00  // .....@..(..x....
    0140: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    0150: 09 02 00 00 00 40 00 04 30 A0 1F 78 00 00 00 00  // .....@..0..x....
    0160: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    0170: 0A 00 00 00 00 10 00 02 38 A0 1F 78 00 00 00 00  // ........8..x....
    0180: 00 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00  // ................
    0190: 0B 03 00 00 00 08 00 01 18 A0 1F 78 00 00 00 00  // ...........x....
    01A0: 0B 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    01B0: 0C 04 00 00 00 08 00 01 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    01D0: 0D 00 00 00 00 40 00 04 40 A0 1F 78 00 00 00 00  // .....@..@..x....
    01E0: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    01F0: 0E 00 00 00 00 20 00 03 48 A0 1F 78 00 00 00 00  // ..... ..H..x....
    0200: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0210: 0F 00 00 00 00 08 00 01 4C A0 1F 78 00 00 00 00  // ........L..x....
    0220: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................


FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 0000010C
[008h 0008 001h]                    Revision : 05
[009h 0009 001h]                    Checksum : 98
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]                FACS Address : 79783F80
[028h 0040 004h]                DSDT Address : 78F52220
[02Ch 0044 001h]                       Model : 01
[02Dh 0045 001h]                  PM Profile : 03 [Workstation]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00000400
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000404
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00000450
[04Ch 0076 004h]      PM Timer Block Address : 00000408
[050h 0080 004h]          GPE0 Block Address : 00000420
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 10
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0400
[066h 0102 002h]          Cache Flush Stride : 0010
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 000084A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120 008h]                     Address : 0000000000000CF9

[080h 0128 001h]        Value to cause reset : 06
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 0000000078F52220
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 02 [Word Access:16]
[098h 0152 008h]                     Address : 0000000000000400

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 01 [SystemIO]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 02 [Word Access:16]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000404

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 01 [SystemIO]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 02 [Word Access:16]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 0000000000000450

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000408

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 80
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224 008h]                     Address : 0000000000000420

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 01 [SystemIO]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 00
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248 008h]                     Address : 0000000000000000

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 00 [SystemMemory]
[101h 0257 001h]                   Bit Width : 00
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260 008h]                     Address : 0000000000000000

/**** ACPI table terminates in the middle of a data structure! (dump table) 
CurrentOffset: 10C, TableLength: 10C ***/
Raw Table Data: Length 268 (0x10C)

    0000: 46 41 43 50 0C 01 00 00 05 98 41 4C 41 53 4B 41  // FACP......ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 80 3F 78 79 20 22 F5 78 01 03 09 00  // .....?xy ".x....
    0030: B2 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 50 04 00 00 08 04 00 00  // ........P.......
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 10 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 00 00 00  // e...........2...
    0070: A5 84 00 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 00 00 00 00 00 00 00 00 20 22 F5 78  // ............ ".x
    0090: 00 00 00 00 01 20 00 02 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 04 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 80 00 01  // . ..............
    00E0: 20 04 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 15D0D57F
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 7F D5 D0 15 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000 004h]                   Signature : "FIDT"    
[004h 0004 004h]                Table Length : 0000009C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 25
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 25 41 4C 41 53 4B 41  // FIDT.....%ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 30 30 38 33 36  // ....$FID.x.00836
    0030: 33 31 61 00 99 C8 08 B9 FD 76 B9 4B 98 08 0C 9D  // 31a......v.K....
    0040: F4 0E 43 1F 30 35 00 30 36 00 30 33 00 32 36 00  // ..C.05.06.03.26.
    0050: 00 00 00 00 00 00 00 FF FF 41 4C 41 53 4B 41 41  // .........ALASKAA
    0060: 20 4D 20 49 20 00 00 00 00 00 00 00 00 00 00 00  //  M I ...........
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000044
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : DC
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013


[024h 0036 002h]               Subtable Type : 0001
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]         S3PT Record Address : 000000007B453730

[034h 0052 002h]               Subtable Type : 0000
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01
[038h 0056 004h]                    Reserved : 00000000
[03Ch 0060 008h]    FPDT Boot Record Address : 000000007B453750

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 DC 41 4C 41 53 4B 41  // FPDTD.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 01 00 10 01 00 00 00 00 30 37 45 7B  // ............07E{
    0030: 00 00 00 00 00 00 10 01 00 00 00 00 50 37 45 7B  // ............P7E{
    0040: 00 00 00 00                                      // ....


HEST
----
[000h 0000 004h]                   Signature : "HEST"    [Hardware Error Source Table]
[004h 0004 004h]                Table Length : 00000340
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : BB
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h]          Error Source Count : 00000003

[028h 0040 002h]               Subtable Type : 0001 [IA-32 Corrected Machine Check]
[02Ah 0042 002h]                   Source Id : 0000
[02Ch 0044 002h]                   Reserved1 : 0000
[02Eh 0046 001h]       Flags (decoded below) : 01
                              Firmware First : 1
                                 GHES Assist : 0
[02Fh 0047 001h]                     Enabled : 01
[030h 0048 004h]      Records To Preallocate : 00000001
[034h 0052 004h]     Max Sections Per Record : 00000001

[038h 0056 01Ch]                      Notify : [Hardware Error Notification Structure]
[038h 0056 001h]                 Notify Type : 00 [Polled]
[039h 0057 001h]               Notify Length : 1C
[03Ah 0058 002h]  Configuration Write Enable : 0000
[03Ch 0060 004h]                PollInterval : 00000000
[040h 0064 004h]                      Vector : 00000000
[044h 0068 004h]     Polling Threshold Value : 00000009
[048h 0072 004h]    Polling Threshold Window : 00000000
[04Ch 0076 004h]       Error Threshold Value : 00000009
[050h 0080 004h]      Error Threshold Window : 00000000

[054h 0084 001h]          Num Hardware Banks : 0A
[055h 0085 003h]                   Reserved2 : 000000

[058h 0088 001h]                 Bank Number : 07
[059h 0089 001h]        Clear Status On Init : 00
[05Ah 0090 001h]               Status Format : 00
[05Bh 0091 001h]                    Reserved : 00
[05Ch 0092 004h]            Control Register : 00000000
[060h 0096 008h]                Control Data : 0000000000000000
[068h 0104 004h]             Status Register : 00000000
[06Ch 0108 004h]            Address Register : 00000000
[070h 0112 004h]               Misc Register : 00000000

[074h 0116 001h]                 Bank Number : 08
[075h 0117 001h]        Clear Status On Init : 00
[076h 0118 001h]               Status Format : 00
[077h 0119 001h]                    Reserved : 00
[078h 0120 004h]            Control Register : 00000000
[07Ch 0124 008h]                Control Data : 0000000000000000
[084h 0132 004h]             Status Register : 00000000
[088h 0136 004h]            Address Register : 00000000
[08Ch 0140 004h]               Misc Register : 00000000

[090h 0144 001h]                 Bank Number : 09
[091h 0145 001h]        Clear Status On Init : 00
[092h 0146 001h]               Status Format : 00
[093h 0147 001h]                    Reserved : 00
[094h 0148 004h]            Control Register : 00000000
[098h 0152 008h]                Control Data : 0000000000000000
[0A0h 0160 004h]             Status Register : 00000000
[0A4h 0164 004h]            Address Register : 00000000
[0A8h 0168 004h]               Misc Register : 00000000

[0ACh 0172 001h]                 Bank Number : 0A
[0ADh 0173 001h]        Clear Status On Init : 00
[0AEh 0174 001h]               Status Format : 00
[0AFh 0175 001h]                    Reserved : 00
[0B0h 0176 004h]            Control Register : 00000000
[0B4h 0180 008h]                Control Data : 0000000000000000
[0BCh 0188 004h]             Status Register : 00000000
[0C0h 0192 004h]            Address Register : 00000000
[0C4h 0196 004h]               Misc Register : 00000000

[0C8h 0200 001h]                 Bank Number : 0B
[0C9h 0201 001h]        Clear Status On Init : 00
[0CAh 0202 001h]               Status Format : 00
[0CBh 0203 001h]                    Reserved : 00
[0CCh 0204 004h]            Control Register : 00000000
[0D0h 0208 008h]                Control Data : 0000000000000000
[0D8h 0216 004h]             Status Register : 00000000
[0DCh 0220 004h]            Address Register : 00000000
[0E0h 0224 004h]               Misc Register : 00000000

[0E4h 0228 001h]                 Bank Number : 0C
[0E5h 0229 001h]        Clear Status On Init : 00
[0E6h 0230 001h]               Status Format : 00
[0E7h 0231 001h]                    Reserved : 00
[0E8h 0232 004h]            Control Register : 00000000
[0ECh 0236 008h]                Control Data : 0000000000000000
[0F4h 0244 004h]             Status Register : 00000000
[0F8h 0248 004h]            Address Register : 00000000
[0FCh 0252 004h]               Misc Register : 00000000

[100h 0256 001h]                 Bank Number : 0D
[101h 0257 001h]        Clear Status On Init : 00
[102h 0258 001h]               Status Format : 00
[103h 0259 001h]                    Reserved : 00
[104h 0260 004h]            Control Register : 00000000
[108h 0264 008h]                Control Data : 0000000000000000
[110h 0272 004h]             Status Register : 00000000
[114h 0276 004h]            Address Register : 00000000
[118h 0280 004h]               Misc Register : 00000000

[11Ch 0284 001h]                 Bank Number : 0E
[11Dh 0285 001h]        Clear Status On Init : 00
[11Eh 0286 001h]               Status Format : 00
[11Fh 0287 001h]                    Reserved : 00
[120h 0288 004h]            Control Register : 00000000
[124h 0292 008h]                Control Data : 0000000000000000
[12Ch 0300 004h]             Status Register : 00000000
[130h 0304 004h]            Address Register : 00000000
[134h 0308 004h]               Misc Register : 00000000

[138h 0312 001h]                 Bank Number : 0F
[139h 0313 001h]        Clear Status On Init : 00
[13Ah 0314 001h]               Status Format : 00
[13Bh 0315 001h]                    Reserved : 00
[13Ch 0316 004h]            Control Register : 00000000
[140h 0320 008h]                Control Data : 0000000000000000
[148h 0328 004h]             Status Register : 00000000
[14Ch 0332 004h]            Address Register : 00000000
[150h 0336 004h]               Misc Register : 00000000

[154h 0340 001h]                 Bank Number : 10
[155h 0341 001h]        Clear Status On Init : 00
[156h 0342 001h]               Status Format : 00
[157h 0343 001h]                    Reserved : 00
[158h 0344 004h]            Control Register : 00000000
[15Ch 0348 008h]                Control Data : 0000000000000000
[164h 0356 004h]             Status Register : 00000000
[168h 0360 004h]            Address Register : 00000000
[16Ch 0364 004h]               Misc Register : 00000000

[170h 0368 002h]               Subtable Type : 0000 [IA-32 Machine Check Exception]
[172h 0370 002h]                   Source Id : 0000
[174h 0372 002h]                   Reserved1 : 0000
[176h 0374 001h]       Flags (decoded below) : 00
                              Firmware First : 0
                                 GHES Assist : 0
[177h 0375 001h]                     Enabled : 00
[178h 0376 004h]      Records To Preallocate : 00000000
[17Ch 0380 004h]     Max Sections Per Record : 00000000
[180h 0384 008h]      Global Capability Data : 0000000000000000
[188h 0392 008h]         Global Control Data : 0000000000000000
[190h 0400 001h]          Num Hardware Banks : 00
[191h 0401 007h]                   Reserved2 : 00000000000000

[198h 0408 002h]               Subtable Type : 0000 [IA-32 Machine Check Exception]
[19Ah 0410 002h]                   Source Id : 0000
[19Ch 0412 002h]                   Reserved1 : 0000
[19Eh 0414 001h]       Flags (decoded below) : 00
                              Firmware First : 0
                                 GHES Assist : 0
[19Fh 0415 001h]                     Enabled : 00
[1A0h 0416 004h]      Records To Preallocate : 00000000
[1A4h 0420 004h]     Max Sections Per Record : 00000000
[1A8h 0424 008h]      Global Capability Data : 0000000000000000
[1B0h 0432 008h]         Global Control Data : 0000000000000000
[1B8h 0440 001h]          Num Hardware Banks : 00
[1B9h 0441 007h]                   Reserved2 : 00000000000000

[1C0h 0448 002h]               Subtable Type : 0000 [IA-32 Machine Check Exception]
[1C2h 0450 002h]                   Source Id : 0000
[1C4h 0452 002h]                   Reserved1 : 0000
[1C6h 0454 001h]       Flags (decoded below) : 00
                              Firmware First : 0
                                 GHES Assist : 0
[1C7h 0455 001h]                     Enabled : 00
[1C8h 0456 004h]      Records To Preallocate : 00000000
[1CCh 0460 004h]     Max Sections Per Record : 00000000
[1D0h 0464 008h]      Global Capability Data : 0000000000000000
[1D8h 0472 008h]         Global Control Data : 0000000000000000
[1E0h 0480 001h]          Num Hardware Banks : 00
[1E1h 0481 007h]                   Reserved2 : 00000000000000

[1E8h 0488 002h]               Subtable Type : 0000 [IA-32 Machine Check Exception]
[1EAh 0490 002h]                   Source Id : 0000
[1ECh 0492 002h]                   Reserved1 : 0000
[1EEh 0494 001h]       Flags (decoded below) : 00
                              Firmware First : 0
                                 GHES Assist : 0
[1EFh 0495 001h]                     Enabled : 00
[1F0h 0496 004h]      Records To Preallocate : 00000000
[1F4h 0500 004h]     Max Sections Per Record : 00000000
[1F8h 0504 008h]      Global Capability Data : 0000000000000000
[200h 0512 008h]         Global Control Data : 0000000000000000
[208h 0520 001h]          Num Hardware Banks : 00
[209h 0521 007h]                   Reserved2 : 00000000000000

[210h 0528 002h]               Subtable Type : 0000 [IA-32 Machine Check Exception]
[212h 0530 002h]                   Source Id : 0000
[214h 0532 002h]                   Reserved1 : 0000
[216h 0534 001h]       Flags (decoded below) : 00
                              Firmware First : 0
                                 GHES Assist : 0
[217h 0535 001h]                     Enabled : 00
[218h 0536 004h]      Records To Preallocate : 00000000
[21Ch 0540 004h]     Max Sections Per Record : 00000000
[220h 0544 008h]      Global Capability Data : 0000000000000000
[228h 0552 008h]         Global Control Data : 0000000000000000
[230h 0560 001h]          Num Hardware Banks : 00
[231h 0561 007h]                   Reserved2 : 00000000000000

[238h 0568 002h]               Subtable Type : 0000 [IA-32 Machine Check Exception]
[23Ah 0570 002h]                   Source Id : 0000
[23Ch 0572 002h]                   Reserved1 : 0000
[23Eh 0574 001h]       Flags (decoded below) : 00
                              Firmware First : 0
                                 GHES Assist : 0
[23Fh 0575 001h]                     Enabled : 00
[240h 0576 004h]      Records To Preallocate : 00000000
[244h 0580 004h]     Max Sections Per Record : 00000000
[248h 0584 008h]      Global Capability Data : 0000000000000000
[250h 0592 008h]         Global Control Data : 0000000000000000
[258h 0600 001h]          Num Hardware Banks : 00
[259h 0601 007h]                   Reserved2 : 00000000000000

[260h 0608 002h]               Subtable Type : 0000 [IA-32 Machine Check Exception]
[262h 0610 002h]                   Source Id : 0000
[264h 0612 002h]                   Reserved1 : 0000
[266h 0614 001h]       Flags (decoded below) : 00
                              Firmware First : 0
                                 GHES Assist : 0
[267h 0615 001h]                     Enabled : 00
[268h 0616 004h]      Records To Preallocate : 00000000
[26Ch 0620 004h]     Max Sections Per Record : 00000000
[270h 0624 008h]      Global Capability Data : 0000000000000000
[278h 0632 008h]         Global Control Data : 0000000000000000
[280h 0640 001h]          Num Hardware Banks : 00
[281h 0641 007h]                   Reserved2 : 00000000000000

[288h 0648 002h]               Subtable Type : 0000 [IA-32 Machine Check Exception]
[28Ah 0650 002h]                   Source Id : 0000
[28Ch 0652 002h]                   Reserved1 : 0000
[28Eh 0654 001h]       Flags (decoded below) : 00
                              Firmware First : 0
                                 GHES Assist : 0
[28Fh 0655 001h]                     Enabled : 00
[290h 0656 004h]      Records To Preallocate : 00000000
[294h 0660 004h]     Max Sections Per Record : 00000000
[298h 0664 008h]      Global Capability Data : 0000000000000000
[2A0h 0672 008h]         Global Control Data : 0000000000000000
[2A8h 0680 001h]          Num Hardware Banks : 00
[2A9h 0681 007h]                   Reserved2 : 00000000000000

[2B0h 0688 002h]               Subtable Type : 0000 [IA-32 Machine Check Exception]
[2B2h 0690 002h]                   Source Id : 0000
[2B4h 0692 002h]                   Reserved1 : 0000
[2B6h 0694 001h]       Flags (decoded below) : 00
                              Firmware First : 0
                                 GHES Assist : 0
[2B7h 0695 001h]                     Enabled : 00
[2B8h 0696 004h]      Records To Preallocate : 00000000
[2BCh 0700 004h]     Max Sections Per Record : 00000000
[2C0h 0704 008h]      Global Capability Data : 0100FFFF00010009
[2C8h 0712 008h]         Global Control Data : 0000000100000001
[2D0h 0720 001h]          Num Hardware Banks : 00
[2D1h 0721 007h]                   Reserved2 : 04004000000010

**** Unknown HEST subtable type 0x1018

Raw Table Data: Length 832 (0x340)

    0000: 48 45 53 54 40 03 00 00 01 BB 41 4C 41 53 4B 41  // HEST@.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 01 00 00 00 03 00 00 00 01 00 00 00 00 00 01 01  // ................
    0030: 01 00 00 00 01 00 00 00 00 1C 00 00 00 00 00 00  // ................
    0040: 00 00 00 00 09 00 00 00 00 00 00 00 09 00 00 00  // ................
    0050: 00 00 00 00 0A 00 00 00 07 00 00 00 00 00 00 00  // ................
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 0A 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 0B 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00E0: 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 0D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 0E 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 0F 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00  // ................
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02C0: 09 00 01 00 FF FF 00 01 01 00 00 00 01 00 00 00  // ................
    02D0: 00 10 00 00 00 40 00 04 18 10 80 78 00 00 00 00  // .....@.....x....
    02E0: 00 1C 3E 00 60 EA 00 00 02 00 00 00 00 00 00 00  // ..>.`...........
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 10 00 00  // ................
    0300: 09 00 02 00 FF FF 00 01 01 00 00 00 01 00 00 00  // ................
    0310: 00 10 00 00 00 40 00 04 20 20 80 78 00 00 00 00  // .....@..  .x....
    0320: 04 1C 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 10 00 00  // ................


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 4D
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 20091013

[024h 0036 004h]           Hardware Block ID : 8086A701

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 40
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 37EE
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 4D 41 4C 41 53 4B 41  // HPET8....MALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 01 A7 86 80 00 40 00 00 00 00 D0 FE  // ... .....@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


MCEJ
----
[000h 0000 004h]                   Signature : "MCEJ"    
[004h 0004 004h]                Table Length : 00000130
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 3E
[00Ah 0010 006h]                      Oem ID : "INTEL "
[010h 0016 008h]                Oem Table ID : ""
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 0100000D


**** Unknown ACPI table signature [MCEJ]


Raw Table Data: Length 304 (0x130)

    0000: 4D 43 45 4A 30 01 00 00 01 3E 49 4E 54 45 4C 20  // MCEJ0....>INTEL 
    0010: 00 00 00 00 00 00 00 00 01 00 00 00 49 4E 54 4C  // ............INTL
    0020: 0D 00 00 01 30 00 00 00 00 00 00 00 08 00 00 00  // ....0...........
    0030: 00 03 01 00 00 40 00 04 40 DC 7F 78 00 00 00 00  // .....@..@..x....
    0040: AA 55 AA 55 00 00 00 00 FF FF FF FF 00 00 00 00  // .U.U............
    0050: 01 00 00 00 00 40 00 04 28 DC 7F 78 00 00 00 00  // .....@..(..x....
    0060: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    0070: 02 00 00 00 00 40 00 04 18 DC 7F 78 00 00 00 00  // .....@.....x....
    0080: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0090: 03 02 01 00 00 40 00 04 20 DC 7F 78 00 00 00 00  // .....@.. ..x....
    00A0: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    00B0: 04 03 01 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    00C0: 9F 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    00D0: 05 03 01 00 00 40 00 04 40 DC 7F 78 00 00 00 00  // .....@..@..x....
    00E0: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    00F0: 06 01 00 00 00 40 00 04 38 DC 7F 78 00 00 00 00  // .....@..8..x....
    0100: 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    0110: 07 00 01 00 00 40 00 04 30 DC 7F 78 00 00 00 00  // .....@..0..x....
    0120: 00 00 00 00 00 00 00 00 FE 01 00 00 00 00 00 00  // ................


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 61
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "MSFT"
[020h 0032 004h]       Asl Compiler Revision : 00000097

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 0000000080000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : FF
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 61 41 4C 41 53 4B 41  // MCFG<....aALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


MSCT
----
[000h 0000 004h]                   Signature : "MSCT"    [Maximum System Characteristics Table]
[004h 0004 004h]                Table Length : 00000090
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : F2
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 20091013

[024h 0036 004h]            Proximity Offset : 00000038
[028h 0040 004h]       Max Proximity Domains : 00000003
[02Ch 0044 004h]           Max Clock Domains : 00000000
[030h 0048 008h]        Max Physical Address : 00000FFFFFFFFFFF

[038h 0056 001h]                    Revision : 01
[039h 0057 001h]                      Length : 16
[03Ah 0058 004h]          Domain Range Start : 00000000
[03Eh 0062 004h]            Domain Range End : 00000003
[042h 0066 004h]          Processor Capacity : 00000030
[046h 0070 008h]             Memory Capacity : 00000FFFFFFFFFFF

[04Eh 0078 001h]                    Revision : 01
[04Fh 0079 001h]                      Length : 16
[050h 0080 004h]          Domain Range Start : 00000000
[054h 0084 004h]            Domain Range End : 00000000
[058h 0088 004h]          Processor Capacity : 00000000
[05Ch 0092 008h]             Memory Capacity : 0000000000000000

[064h 0100 001h]                    Revision : 01
[065h 0101 001h]                      Length : 16
[066h 0102 004h]          Domain Range Start : 00000000
[06Ah 0106 004h]            Domain Range End : 00000000
[06Eh 0110 004h]          Processor Capacity : 00000000
[072h 0114 008h]             Memory Capacity : 0000000000000000

[07Ah 0122 001h]                    Revision : 01
[07Bh 0123 001h]                      Length : 16
[07Ch 0124 004h]          Domain Range Start : 00000000
[080h 0128 004h]            Domain Range End : 00000000
[084h 0132 004h]          Processor Capacity : 00000000
[088h 0136 008h]             Memory Capacity : 0000000000000000

Raw Table Data: Length 144 (0x90)

    0000: 4D 53 43 54 90 00 00 00 01 F2 41 4C 41 53 4B 41  // MSCT......ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 38 00 00 00 03 00 00 00 00 00 00 00  // ... 8...........
    0030: FF FF FF FF FF 0F 00 00 01 16 00 00 00 00 03 00  // ................
    0040: 00 00 30 00 00 00 FF FF FF FF FF 0F 00 00 01 16  // ..0.............
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 00 00 00 00 01 16 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 00 00 01 16 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


PRAD
----
[000h 0000 004h]                   Signature : "PRAD"    
[004h 0004 004h]                Table Length : 00000102
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : 95
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 20120913


**** Unknown ACPI table signature [PRAD]


Raw Table Data: Length 258 (0x102)

    0000: 50 52 41 44 02 01 00 00 02 95 41 4C 41 53 4B 41  // PRAD......ALASKA
    0010: 41 20 4D 20 49 20 00 00 02 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 09 12 20 10 4D 0D 5C 5F 53 42 5F 5B 82 44 0D  // ... .M.\_SB_[.D.
    0030: 50 52 41 44 08 5F 48 49 44 0D 41 43 50 49 30 30  // PRAD._HID.ACPI00
    0040: 30 43 00 14 09 5F 53 54 41 00 A4 0A 0F 14 44 05  // 0C..._STA.....D.
    0050: 5F 50 55 52 00 70 0D 50 52 41 44 3A 20 45 6E 74  // _PUR.p.PRAD: Ent
    0060: 65 72 69 6E 67 20 5F 50 55 52 00 5B 31 08 49 44  // ering _PUR.[1.ID
    0070: 4C 5F 12 04 02 01 00 7B 7D 5C 50 55 52 41 0A 80  // L_.....{}\PURA..
    0080: 00 0B FF FF 5C 50 55 52 42 7B 7A 5C 50 55 52 41  // ....\PURB{z\PURA
    0090: 0A 10 00 0B FF FF 88 49 44 4C 5F 01 00 A4 49 44  // .......IDL_...ID
    00A0: 4C 5F 14 4F 05 5F 4F 53 54 0B 70 0D 50 52 41 44  // L_.O._OST.p.PRAD
    00B0: 3A 20 45 6E 74 65 72 69 6E 67 20 5F 4F 53 54 00  // : Entering _OST.
    00C0: 5B 31 A0 3F 93 7B 5C 50 55 52 42 0A FF 00 0A 83  // [1.?.{\PURB.....
    00D0: 74 5C 54 48 4E 55 99 6A 00 60 7D 5C 50 55 52 42  // t\THNU.j.`}\PURB
    00E0: 79 60 0A 10 00 5C 50 55 52 42 5C 2F 04 5F 53 42  // y`...\PURB\/._SB
    00F0: 5F 50 43 49 30 48 45 43 32 44 43 4E 46 5C 50 55  // _PCI0HEC2DCNF\PU
    0100: 52 42                                            // RB


SLIT
----
[000h 0000 004h]                   Signature : "SLIT"    [System Locality Information Table]
[004h 0004 004h]                Table Length : 00000030
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : EB
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 20091013

[024h 0036 008h]                  Localities : 0000000000000002
[02Ch 0044 002h]                 Locality   0 : 0A 15
[02Eh 0046 002h]                 Locality   1 : 15 0A

Raw Table Data: Length 48 (0x30)

    0000: 53 4C 49 54 30 00 00 00 01 EB 41 4C 41 53 4B 41  // SLIT0.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 02 00 00 00 00 00 00 00 0A 15 15 0A  // ... ............


SRAT
----
[000h 0000 004h]                   Signature : "SRAT"    [System Resource Affinity Table]
[004h 0004 004h]                Table Length : 00001158
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 89
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 20091013

[024h 0036 004h]              Table Revision : 00000001
[028h 0040 008h]                    Reserved : 0000000000000000

[030h 0048 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[031h 0049 001h]                      Length : 10

[032h 0050 001h]     Proximity Domain Low(8) : 00
[033h 0051 001h]                     Apic ID : 00
[034h 0052 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[038h 0056 001h]             Local Sapic EID : 00
[039h 0057 003h]   Proximity Domain High(24) : 000000
[03Ch 0060 004h]                Clock Domain : 00000000

[040h 0064 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[041h 0065 001h]                      Length : 10

[042h 0066 001h]     Proximity Domain Low(8) : 00
[043h 0067 001h]                     Apic ID : 02
[044h 0068 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[048h 0072 001h]             Local Sapic EID : 00
[049h 0073 003h]   Proximity Domain High(24) : 000000
[04Ch 0076 004h]                Clock Domain : 00000000

[050h 0080 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[051h 0081 001h]                      Length : 10

[052h 0082 001h]     Proximity Domain Low(8) : 00
[053h 0083 001h]                     Apic ID : 04
[054h 0084 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[058h 0088 001h]             Local Sapic EID : 00
[059h 0089 003h]   Proximity Domain High(24) : 000000
[05Ch 0092 004h]                Clock Domain : 00000000

[060h 0096 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[061h 0097 001h]                      Length : 10

[062h 0098 001h]     Proximity Domain Low(8) : 00
[063h 0099 001h]                     Apic ID : 06
[064h 0100 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[068h 0104 001h]             Local Sapic EID : 00
[069h 0105 003h]   Proximity Domain High(24) : 000000
[06Ch 0108 004h]                Clock Domain : 00000000

[070h 0112 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[071h 0113 001h]                      Length : 10

[072h 0114 001h]     Proximity Domain Low(8) : 00
[073h 0115 001h]                     Apic ID : 08
[074h 0116 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[078h 0120 001h]             Local Sapic EID : 00
[079h 0121 003h]   Proximity Domain High(24) : 000000
[07Ch 0124 004h]                Clock Domain : 00000000

[080h 0128 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[081h 0129 001h]                      Length : 10

[082h 0130 001h]     Proximity Domain Low(8) : 00
[083h 0131 001h]                     Apic ID : 10
[084h 0132 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[088h 0136 001h]             Local Sapic EID : 00
[089h 0137 003h]   Proximity Domain High(24) : 000000
[08Ch 0140 004h]                Clock Domain : 00000000

[090h 0144 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[091h 0145 001h]                      Length : 10

[092h 0146 001h]     Proximity Domain Low(8) : 00
[093h 0147 001h]                     Apic ID : 12
[094h 0148 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[098h 0152 001h]             Local Sapic EID : 00
[099h 0153 003h]   Proximity Domain High(24) : 000000
[09Ch 0156 004h]                Clock Domain : 00000000

[0A0h 0160 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0A1h 0161 001h]                      Length : 10

[0A2h 0162 001h]     Proximity Domain Low(8) : 00
[0A3h 0163 001h]                     Apic ID : 14
[0A4h 0164 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[0A8h 0168 001h]             Local Sapic EID : 00
[0A9h 0169 003h]   Proximity Domain High(24) : 000000
[0ACh 0172 004h]                Clock Domain : 00000000

[0B0h 0176 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0B1h 0177 001h]                      Length : 10

[0B2h 0178 001h]     Proximity Domain Low(8) : 00
[0B3h 0179 001h]                     Apic ID : 16
[0B4h 0180 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[0B8h 0184 001h]             Local Sapic EID : 00
[0B9h 0185 003h]   Proximity Domain High(24) : 000000
[0BCh 0188 004h]                Clock Domain : 00000000

[0C0h 0192 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0C1h 0193 001h]                      Length : 10

[0C2h 0194 001h]     Proximity Domain Low(8) : 00
[0C3h 0195 001h]                     Apic ID : 18
[0C4h 0196 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[0C8h 0200 001h]             Local Sapic EID : 00
[0C9h 0201 003h]   Proximity Domain High(24) : 000000
[0CCh 0204 004h]                Clock Domain : 00000000

[0D0h 0208 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0D1h 0209 001h]                      Length : 10

[0D2h 0210 001h]     Proximity Domain Low(8) : 01
[0D3h 0211 001h]                     Apic ID : 20
[0D4h 0212 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[0D8h 0216 001h]             Local Sapic EID : 00
[0D9h 0217 003h]   Proximity Domain High(24) : 000000
[0DCh 0220 004h]                Clock Domain : 00000000

[0E0h 0224 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0E1h 0225 001h]                      Length : 10

[0E2h 0226 001h]     Proximity Domain Low(8) : 01
[0E3h 0227 001h]                     Apic ID : 22
[0E4h 0228 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[0E8h 0232 001h]             Local Sapic EID : 00
[0E9h 0233 003h]   Proximity Domain High(24) : 000000
[0ECh 0236 004h]                Clock Domain : 00000000

[0F0h 0240 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0F1h 0241 001h]                      Length : 10

[0F2h 0242 001h]     Proximity Domain Low(8) : 01
[0F3h 0243 001h]                     Apic ID : 24
[0F4h 0244 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[0F8h 0248 001h]             Local Sapic EID : 00
[0F9h 0249 003h]   Proximity Domain High(24) : 000000
[0FCh 0252 004h]                Clock Domain : 00000000

[100h 0256 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[101h 0257 001h]                      Length : 10

[102h 0258 001h]     Proximity Domain Low(8) : 01
[103h 0259 001h]                     Apic ID : 26
[104h 0260 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[108h 0264 001h]             Local Sapic EID : 00
[109h 0265 003h]   Proximity Domain High(24) : 000000
[10Ch 0268 004h]                Clock Domain : 00000000

[110h 0272 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[111h 0273 001h]                      Length : 10

[112h 0274 001h]     Proximity Domain Low(8) : 01
[113h 0275 001h]                     Apic ID : 28
[114h 0276 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[118h 0280 001h]             Local Sapic EID : 00
[119h 0281 003h]   Proximity Domain High(24) : 000000
[11Ch 0284 004h]                Clock Domain : 00000000

[120h 0288 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[121h 0289 001h]                      Length : 10

[122h 0290 001h]     Proximity Domain Low(8) : 01
[123h 0291 001h]                     Apic ID : 30
[124h 0292 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[128h 0296 001h]             Local Sapic EID : 00
[129h 0297 003h]   Proximity Domain High(24) : 000000
[12Ch 0300 004h]                Clock Domain : 00000000

[130h 0304 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[131h 0305 001h]                      Length : 10

[132h 0306 001h]     Proximity Domain Low(8) : 01
[133h 0307 001h]                     Apic ID : 32
[134h 0308 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[138h 0312 001h]             Local Sapic EID : 00
[139h 0313 003h]   Proximity Domain High(24) : 000000
[13Ch 0316 004h]                Clock Domain : 00000000

[140h 0320 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[141h 0321 001h]                      Length : 10

[142h 0322 001h]     Proximity Domain Low(8) : 01
[143h 0323 001h]                     Apic ID : 34
[144h 0324 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[148h 0328 001h]             Local Sapic EID : 00
[149h 0329 003h]   Proximity Domain High(24) : 000000
[14Ch 0332 004h]                Clock Domain : 00000000

[150h 0336 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[151h 0337 001h]                      Length : 10

[152h 0338 001h]     Proximity Domain Low(8) : 01
[153h 0339 001h]                     Apic ID : 36
[154h 0340 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[158h 0344 001h]             Local Sapic EID : 00
[159h 0345 003h]   Proximity Domain High(24) : 000000
[15Ch 0348 004h]                Clock Domain : 00000000

[160h 0352 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[161h 0353 001h]                      Length : 10

[162h 0354 001h]     Proximity Domain Low(8) : 01
[163h 0355 001h]                     Apic ID : 38
[164h 0356 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[168h 0360 001h]             Local Sapic EID : 00
[169h 0361 003h]   Proximity Domain High(24) : 000000
[16Ch 0364 004h]                Clock Domain : 00000000

[170h 0368 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[171h 0369 001h]                      Length : 10

[172h 0370 001h]     Proximity Domain Low(8) : 00
[173h 0371 001h]                     Apic ID : 01
[174h 0372 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[178h 0376 001h]             Local Sapic EID : 00
[179h 0377 003h]   Proximity Domain High(24) : 000000
[17Ch 0380 004h]                Clock Domain : 00000000

[180h 0384 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[181h 0385 001h]                      Length : 10

[182h 0386 001h]     Proximity Domain Low(8) : 00
[183h 0387 001h]                     Apic ID : 03
[184h 0388 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[188h 0392 001h]             Local Sapic EID : 00
[189h 0393 003h]   Proximity Domain High(24) : 000000
[18Ch 0396 004h]                Clock Domain : 00000000

[190h 0400 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[191h 0401 001h]                      Length : 10

[192h 0402 001h]     Proximity Domain Low(8) : 00
[193h 0403 001h]                     Apic ID : 05
[194h 0404 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[198h 0408 001h]             Local Sapic EID : 00
[199h 0409 003h]   Proximity Domain High(24) : 000000
[19Ch 0412 004h]                Clock Domain : 00000000

[1A0h 0416 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1A1h 0417 001h]                      Length : 10

[1A2h 0418 001h]     Proximity Domain Low(8) : 00
[1A3h 0419 001h]                     Apic ID : 07
[1A4h 0420 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[1A8h 0424 001h]             Local Sapic EID : 00
[1A9h 0425 003h]   Proximity Domain High(24) : 000000
[1ACh 0428 004h]                Clock Domain : 00000000

[1B0h 0432 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1B1h 0433 001h]                      Length : 10

[1B2h 0434 001h]     Proximity Domain Low(8) : 00
[1B3h 0435 001h]                     Apic ID : 09
[1B4h 0436 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[1B8h 0440 001h]             Local Sapic EID : 00
[1B9h 0441 003h]   Proximity Domain High(24) : 000000
[1BCh 0444 004h]                Clock Domain : 00000000

[1C0h 0448 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1C1h 0449 001h]                      Length : 10

[1C2h 0450 001h]     Proximity Domain Low(8) : 00
[1C3h 0451 001h]                     Apic ID : 11
[1C4h 0452 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[1C8h 0456 001h]             Local Sapic EID : 00
[1C9h 0457 003h]   Proximity Domain High(24) : 000000
[1CCh 0460 004h]                Clock Domain : 00000000

[1D0h 0464 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1D1h 0465 001h]                      Length : 10

[1D2h 0466 001h]     Proximity Domain Low(8) : 00
[1D3h 0467 001h]                     Apic ID : 13
[1D4h 0468 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[1D8h 0472 001h]             Local Sapic EID : 00
[1D9h 0473 003h]   Proximity Domain High(24) : 000000
[1DCh 0476 004h]                Clock Domain : 00000000

[1E0h 0480 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1E1h 0481 001h]                      Length : 10

[1E2h 0482 001h]     Proximity Domain Low(8) : 00
[1E3h 0483 001h]                     Apic ID : 15
[1E4h 0484 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[1E8h 0488 001h]             Local Sapic EID : 00
[1E9h 0489 003h]   Proximity Domain High(24) : 000000
[1ECh 0492 004h]                Clock Domain : 00000000

[1F0h 0496 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1F1h 0497 001h]                      Length : 10

[1F2h 0498 001h]     Proximity Domain Low(8) : 00
[1F3h 0499 001h]                     Apic ID : 17
[1F4h 0500 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[1F8h 0504 001h]             Local Sapic EID : 00
[1F9h 0505 003h]   Proximity Domain High(24) : 000000
[1FCh 0508 004h]                Clock Domain : 00000000

[200h 0512 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[201h 0513 001h]                      Length : 10

[202h 0514 001h]     Proximity Domain Low(8) : 00
[203h 0515 001h]                     Apic ID : 19
[204h 0516 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[208h 0520 001h]             Local Sapic EID : 00
[209h 0521 003h]   Proximity Domain High(24) : 000000
[20Ch 0524 004h]                Clock Domain : 00000000

[210h 0528 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[211h 0529 001h]                      Length : 10

[212h 0530 001h]     Proximity Domain Low(8) : 01
[213h 0531 001h]                     Apic ID : 21
[214h 0532 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[218h 0536 001h]             Local Sapic EID : 00
[219h 0537 003h]   Proximity Domain High(24) : 000000
[21Ch 0540 004h]                Clock Domain : 00000000

[220h 0544 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[221h 0545 001h]                      Length : 10

[222h 0546 001h]     Proximity Domain Low(8) : 01
[223h 0547 001h]                     Apic ID : 23
[224h 0548 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[228h 0552 001h]             Local Sapic EID : 00
[229h 0553 003h]   Proximity Domain High(24) : 000000
[22Ch 0556 004h]                Clock Domain : 00000000

[230h 0560 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[231h 0561 001h]                      Length : 10

[232h 0562 001h]     Proximity Domain Low(8) : 01
[233h 0563 001h]                     Apic ID : 25
[234h 0564 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[238h 0568 001h]             Local Sapic EID : 00
[239h 0569 003h]   Proximity Domain High(24) : 000000
[23Ch 0572 004h]                Clock Domain : 00000000

[240h 0576 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[241h 0577 001h]                      Length : 10

[242h 0578 001h]     Proximity Domain Low(8) : 01
[243h 0579 001h]                     Apic ID : 27
[244h 0580 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[248h 0584 001h]             Local Sapic EID : 00
[249h 0585 003h]   Proximity Domain High(24) : 000000
[24Ch 0588 004h]                Clock Domain : 00000000

[250h 0592 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[251h 0593 001h]                      Length : 10

[252h 0594 001h]     Proximity Domain Low(8) : 01
[253h 0595 001h]                     Apic ID : 29
[254h 0596 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[258h 0600 001h]             Local Sapic EID : 00
[259h 0601 003h]   Proximity Domain High(24) : 000000
[25Ch 0604 004h]                Clock Domain : 00000000

[260h 0608 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[261h 0609 001h]                      Length : 10

[262h 0610 001h]     Proximity Domain Low(8) : 01
[263h 0611 001h]                     Apic ID : 31
[264h 0612 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[268h 0616 001h]             Local Sapic EID : 00
[269h 0617 003h]   Proximity Domain High(24) : 000000
[26Ch 0620 004h]                Clock Domain : 00000000

[270h 0624 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[271h 0625 001h]                      Length : 10

[272h 0626 001h]     Proximity Domain Low(8) : 01
[273h 0627 001h]                     Apic ID : 33
[274h 0628 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[278h 0632 001h]             Local Sapic EID : 00
[279h 0633 003h]   Proximity Domain High(24) : 000000
[27Ch 0636 004h]                Clock Domain : 00000000

[280h 0640 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[281h 0641 001h]                      Length : 10

[282h 0642 001h]     Proximity Domain Low(8) : 01
[283h 0643 001h]                     Apic ID : 35
[284h 0644 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[288h 0648 001h]             Local Sapic EID : 00
[289h 0649 003h]   Proximity Domain High(24) : 000000
[28Ch 0652 004h]                Clock Domain : 00000000

[290h 0656 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[291h 0657 001h]                      Length : 10

[292h 0658 001h]     Proximity Domain Low(8) : 01
[293h 0659 001h]                     Apic ID : 37
[294h 0660 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[298h 0664 001h]             Local Sapic EID : 00
[299h 0665 003h]   Proximity Domain High(24) : 000000
[29Ch 0668 004h]                Clock Domain : 00000000

[2A0h 0672 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2A1h 0673 001h]                      Length : 10

[2A2h 0674 001h]     Proximity Domain Low(8) : 01
[2A3h 0675 001h]                     Apic ID : 39
[2A4h 0676 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
[2A8h 0680 001h]             Local Sapic EID : 00
[2A9h 0681 003h]   Proximity Domain High(24) : 000000
[2ACh 0684 004h]                Clock Domain : 00000000

[2B0h 0688 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2B1h 0689 001h]                      Length : 10

[2B2h 0690 001h]     Proximity Domain Low(8) : 01
[2B3h 0691 001h]                     Apic ID : FF
[2B4h 0692 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[2B8h 0696 001h]             Local Sapic EID : 00
[2B9h 0697 003h]   Proximity Domain High(24) : 000000
[2BCh 0700 004h]                Clock Domain : 00000000

[2C0h 0704 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2C1h 0705 001h]                      Length : 10

[2C2h 0706 001h]     Proximity Domain Low(8) : 01
[2C3h 0707 001h]                     Apic ID : FF
[2C4h 0708 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[2C8h 0712 001h]             Local Sapic EID : 00
[2C9h 0713 003h]   Proximity Domain High(24) : 000000
[2CCh 0716 004h]                Clock Domain : 00000000

[2D0h 0720 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2D1h 0721 001h]                      Length : 10

[2D2h 0722 001h]     Proximity Domain Low(8) : 01
[2D3h 0723 001h]                     Apic ID : FF
[2D4h 0724 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[2D8h 0728 001h]             Local Sapic EID : 00
[2D9h 0729 003h]   Proximity Domain High(24) : 000000
[2DCh 0732 004h]                Clock Domain : 00000000

[2E0h 0736 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2E1h 0737 001h]                      Length : 10

[2E2h 0738 001h]     Proximity Domain Low(8) : 01
[2E3h 0739 001h]                     Apic ID : FF
[2E4h 0740 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[2E8h 0744 001h]             Local Sapic EID : 00
[2E9h 0745 003h]   Proximity Domain High(24) : 000000
[2ECh 0748 004h]                Clock Domain : 00000000

[2F0h 0752 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2F1h 0753 001h]                      Length : 10

[2F2h 0754 001h]     Proximity Domain Low(8) : 01
[2F3h 0755 001h]                     Apic ID : FF
[2F4h 0756 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[2F8h 0760 001h]             Local Sapic EID : 00
[2F9h 0761 003h]   Proximity Domain High(24) : 000000
[2FCh 0764 004h]                Clock Domain : 00000000

[300h 0768 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[301h 0769 001h]                      Length : 10

[302h 0770 001h]     Proximity Domain Low(8) : 01
[303h 0771 001h]                     Apic ID : FF
[304h 0772 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[308h 0776 001h]             Local Sapic EID : 00
[309h 0777 003h]   Proximity Domain High(24) : 000000
[30Ch 0780 004h]                Clock Domain : 00000000

[310h 0784 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[311h 0785 001h]                      Length : 10

[312h 0786 001h]     Proximity Domain Low(8) : 01
[313h 0787 001h]                     Apic ID : FF
[314h 0788 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[318h 0792 001h]             Local Sapic EID : 00
[319h 0793 003h]   Proximity Domain High(24) : 000000
[31Ch 0796 004h]                Clock Domain : 00000000

[320h 0800 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[321h 0801 001h]                      Length : 10

[322h 0802 001h]     Proximity Domain Low(8) : 01
[323h 0803 001h]                     Apic ID : FF
[324h 0804 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[328h 0808 001h]             Local Sapic EID : 00
[329h 0809 003h]   Proximity Domain High(24) : 000000
[32Ch 0812 004h]                Clock Domain : 00000000

[330h 0816 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[331h 0817 001h]                      Length : 10

[332h 0818 001h]     Proximity Domain Low(8) : 02
[333h 0819 001h]                     Apic ID : FF
[334h 0820 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[338h 0824 001h]             Local Sapic EID : 00
[339h 0825 003h]   Proximity Domain High(24) : 000000
[33Ch 0828 004h]                Clock Domain : 00000000

[340h 0832 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[341h 0833 001h]                      Length : 10

[342h 0834 001h]     Proximity Domain Low(8) : 02
[343h 0835 001h]                     Apic ID : FF
[344h 0836 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[348h 0840 001h]             Local Sapic EID : 00
[349h 0841 003h]   Proximity Domain High(24) : 000000
[34Ch 0844 004h]                Clock Domain : 00000000

[350h 0848 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[351h 0849 001h]                      Length : 10

[352h 0850 001h]     Proximity Domain Low(8) : 02
[353h 0851 001h]                     Apic ID : FF
[354h 0852 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[358h 0856 001h]             Local Sapic EID : 00
[359h 0857 003h]   Proximity Domain High(24) : 000000
[35Ch 0860 004h]                Clock Domain : 00000000

[360h 0864 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[361h 0865 001h]                      Length : 10

[362h 0866 001h]     Proximity Domain Low(8) : 02
[363h 0867 001h]                     Apic ID : FF
[364h 0868 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[368h 0872 001h]             Local Sapic EID : 00
[369h 0873 003h]   Proximity Domain High(24) : 000000
[36Ch 0876 004h]                Clock Domain : 00000000

[370h 0880 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[371h 0881 001h]                      Length : 10

[372h 0882 001h]     Proximity Domain Low(8) : 02
[373h 0883 001h]                     Apic ID : FF
[374h 0884 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[378h 0888 001h]             Local Sapic EID : 00
[379h 0889 003h]   Proximity Domain High(24) : 000000
[37Ch 0892 004h]                Clock Domain : 00000000

[380h 0896 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[381h 0897 001h]                      Length : 10

[382h 0898 001h]     Proximity Domain Low(8) : 02
[383h 0899 001h]                     Apic ID : FF
[384h 0900 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[388h 0904 001h]             Local Sapic EID : 00
[389h 0905 003h]   Proximity Domain High(24) : 000000
[38Ch 0908 004h]                Clock Domain : 00000000

[390h 0912 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[391h 0913 001h]                      Length : 10

[392h 0914 001h]     Proximity Domain Low(8) : 02
[393h 0915 001h]                     Apic ID : FF
[394h 0916 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[398h 0920 001h]             Local Sapic EID : 00
[399h 0921 003h]   Proximity Domain High(24) : 000000
[39Ch 0924 004h]                Clock Domain : 00000000

[3A0h 0928 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[3A1h 0929 001h]                      Length : 10

[3A2h 0930 001h]     Proximity Domain Low(8) : 02
[3A3h 0931 001h]                     Apic ID : FF
[3A4h 0932 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[3A8h 0936 001h]             Local Sapic EID : 00
[3A9h 0937 003h]   Proximity Domain High(24) : 000000
[3ACh 0940 004h]                Clock Domain : 00000000

[3B0h 0944 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[3B1h 0945 001h]                      Length : 10

[3B2h 0946 001h]     Proximity Domain Low(8) : 02
[3B3h 0947 001h]                     Apic ID : FF
[3B4h 0948 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[3B8h 0952 001h]             Local Sapic EID : 00
[3B9h 0953 003h]   Proximity Domain High(24) : 000000
[3BCh 0956 004h]                Clock Domain : 00000000

[3C0h 0960 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[3C1h 0961 001h]                      Length : 10

[3C2h 0962 001h]     Proximity Domain Low(8) : 02
[3C3h 0963 001h]                     Apic ID : FF
[3C4h 0964 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[3C8h 0968 001h]             Local Sapic EID : 00
[3C9h 0969 003h]   Proximity Domain High(24) : 000000
[3CCh 0972 004h]                Clock Domain : 00000000

[3D0h 0976 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[3D1h 0977 001h]                      Length : 10

[3D2h 0978 001h]     Proximity Domain Low(8) : 02
[3D3h 0979 001h]                     Apic ID : FF
[3D4h 0980 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[3D8h 0984 001h]             Local Sapic EID : 00
[3D9h 0985 003h]   Proximity Domain High(24) : 000000
[3DCh 0988 004h]                Clock Domain : 00000000

[3E0h 0992 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[3E1h 0993 001h]                      Length : 10

[3E2h 0994 001h]     Proximity Domain Low(8) : 02
[3E3h 0995 001h]                     Apic ID : FF
[3E4h 0996 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[3E8h 1000 001h]             Local Sapic EID : 00
[3E9h 1001 003h]   Proximity Domain High(24) : 000000
[3ECh 1004 004h]                Clock Domain : 00000000

[3F0h 1008 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[3F1h 1009 001h]                      Length : 10

[3F2h 1010 001h]     Proximity Domain Low(8) : 02
[3F3h 1011 001h]                     Apic ID : FF
[3F4h 1012 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[3F8h 1016 001h]             Local Sapic EID : 00
[3F9h 1017 003h]   Proximity Domain High(24) : 000000
[3FCh 1020 004h]                Clock Domain : 00000000

[400h 1024 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[401h 1025 001h]                      Length : 10

[402h 1026 001h]     Proximity Domain Low(8) : 02
[403h 1027 001h]                     Apic ID : FF
[404h 1028 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[408h 1032 001h]             Local Sapic EID : 00
[409h 1033 003h]   Proximity Domain High(24) : 000000
[40Ch 1036 004h]                Clock Domain : 00000000

[410h 1040 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[411h 1041 001h]                      Length : 10

[412h 1042 001h]     Proximity Domain Low(8) : 02
[413h 1043 001h]                     Apic ID : FF
[414h 1044 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[418h 1048 001h]             Local Sapic EID : 00
[419h 1049 003h]   Proximity Domain High(24) : 000000
[41Ch 1052 004h]                Clock Domain : 00000000

[420h 1056 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[421h 1057 001h]                      Length : 10

[422h 1058 001h]     Proximity Domain Low(8) : 02
[423h 1059 001h]                     Apic ID : FF
[424h 1060 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[428h 1064 001h]             Local Sapic EID : 00
[429h 1065 003h]   Proximity Domain High(24) : 000000
[42Ch 1068 004h]                Clock Domain : 00000000

[430h 1072 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[431h 1073 001h]                      Length : 10

[432h 1074 001h]     Proximity Domain Low(8) : 02
[433h 1075 001h]                     Apic ID : FF
[434h 1076 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[438h 1080 001h]             Local Sapic EID : 00
[439h 1081 003h]   Proximity Domain High(24) : 000000
[43Ch 1084 004h]                Clock Domain : 00000000

[440h 1088 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[441h 1089 001h]                      Length : 10

[442h 1090 001h]     Proximity Domain Low(8) : 02
[443h 1091 001h]                     Apic ID : FF
[444h 1092 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[448h 1096 001h]             Local Sapic EID : 00
[449h 1097 003h]   Proximity Domain High(24) : 000000
[44Ch 1100 004h]                Clock Domain : 00000000

[450h 1104 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[451h 1105 001h]                      Length : 10

[452h 1106 001h]     Proximity Domain Low(8) : 02
[453h 1107 001h]                     Apic ID : FF
[454h 1108 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[458h 1112 001h]             Local Sapic EID : 00
[459h 1113 003h]   Proximity Domain High(24) : 000000
[45Ch 1116 004h]                Clock Domain : 00000000

[460h 1120 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[461h 1121 001h]                      Length : 10

[462h 1122 001h]     Proximity Domain Low(8) : 02
[463h 1123 001h]                     Apic ID : FF
[464h 1124 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[468h 1128 001h]             Local Sapic EID : 00
[469h 1129 003h]   Proximity Domain High(24) : 000000
[46Ch 1132 004h]                Clock Domain : 00000000

[470h 1136 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[471h 1137 001h]                      Length : 10

[472h 1138 001h]     Proximity Domain Low(8) : 02
[473h 1139 001h]                     Apic ID : FF
[474h 1140 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[478h 1144 001h]             Local Sapic EID : 00
[479h 1145 003h]   Proximity Domain High(24) : 000000
[47Ch 1148 004h]                Clock Domain : 00000000

[480h 1152 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[481h 1153 001h]                      Length : 10

[482h 1154 001h]     Proximity Domain Low(8) : 02
[483h 1155 001h]                     Apic ID : FF
[484h 1156 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[488h 1160 001h]             Local Sapic EID : 00
[489h 1161 003h]   Proximity Domain High(24) : 000000
[48Ch 1164 004h]                Clock Domain : 00000000

[490h 1168 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[491h 1169 001h]                      Length : 10

[492h 1170 001h]     Proximity Domain Low(8) : 02
[493h 1171 001h]                     Apic ID : FF
[494h 1172 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[498h 1176 001h]             Local Sapic EID : 00
[499h 1177 003h]   Proximity Domain High(24) : 000000
[49Ch 1180 004h]                Clock Domain : 00000000

[4A0h 1184 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[4A1h 1185 001h]                      Length : 10

[4A2h 1186 001h]     Proximity Domain Low(8) : 02
[4A3h 1187 001h]                     Apic ID : FF
[4A4h 1188 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[4A8h 1192 001h]             Local Sapic EID : 00
[4A9h 1193 003h]   Proximity Domain High(24) : 000000
[4ACh 1196 004h]                Clock Domain : 00000000

[4B0h 1200 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[4B1h 1201 001h]                      Length : 10

[4B2h 1202 001h]     Proximity Domain Low(8) : 03
[4B3h 1203 001h]                     Apic ID : FF
[4B4h 1204 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[4B8h 1208 001h]             Local Sapic EID : 00
[4B9h 1209 003h]   Proximity Domain High(24) : 000000
[4BCh 1212 004h]                Clock Domain : 00000000

[4C0h 1216 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[4C1h 1217 001h]                      Length : 10

[4C2h 1218 001h]     Proximity Domain Low(8) : 03
[4C3h 1219 001h]                     Apic ID : FF
[4C4h 1220 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[4C8h 1224 001h]             Local Sapic EID : 00
[4C9h 1225 003h]   Proximity Domain High(24) : 000000
[4CCh 1228 004h]                Clock Domain : 00000000

[4D0h 1232 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[4D1h 1233 001h]                      Length : 10

[4D2h 1234 001h]     Proximity Domain Low(8) : 03
[4D3h 1235 001h]                     Apic ID : FF
[4D4h 1236 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[4D8h 1240 001h]             Local Sapic EID : 00
[4D9h 1241 003h]   Proximity Domain High(24) : 000000
[4DCh 1244 004h]                Clock Domain : 00000000

[4E0h 1248 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[4E1h 1249 001h]                      Length : 10

[4E2h 1250 001h]     Proximity Domain Low(8) : 03
[4E3h 1251 001h]                     Apic ID : FF
[4E4h 1252 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[4E8h 1256 001h]             Local Sapic EID : 00
[4E9h 1257 003h]   Proximity Domain High(24) : 000000
[4ECh 1260 004h]                Clock Domain : 00000000

[4F0h 1264 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[4F1h 1265 001h]                      Length : 10

[4F2h 1266 001h]     Proximity Domain Low(8) : 03
[4F3h 1267 001h]                     Apic ID : FF
[4F4h 1268 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[4F8h 1272 001h]             Local Sapic EID : 00
[4F9h 1273 003h]   Proximity Domain High(24) : 000000
[4FCh 1276 004h]                Clock Domain : 00000000

[500h 1280 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[501h 1281 001h]                      Length : 10

[502h 1282 001h]     Proximity Domain Low(8) : 03
[503h 1283 001h]                     Apic ID : FF
[504h 1284 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[508h 1288 001h]             Local Sapic EID : 00
[509h 1289 003h]   Proximity Domain High(24) : 000000
[50Ch 1292 004h]                Clock Domain : 00000000

[510h 1296 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[511h 1297 001h]                      Length : 10

[512h 1298 001h]     Proximity Domain Low(8) : 03
[513h 1299 001h]                     Apic ID : FF
[514h 1300 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[518h 1304 001h]             Local Sapic EID : 00
[519h 1305 003h]   Proximity Domain High(24) : 000000
[51Ch 1308 004h]                Clock Domain : 00000000

[520h 1312 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[521h 1313 001h]                      Length : 10

[522h 1314 001h]     Proximity Domain Low(8) : 03
[523h 1315 001h]                     Apic ID : FF
[524h 1316 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[528h 1320 001h]             Local Sapic EID : 00
[529h 1321 003h]   Proximity Domain High(24) : 000000
[52Ch 1324 004h]                Clock Domain : 00000000

[530h 1328 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[531h 1329 001h]                      Length : 10

[532h 1330 001h]     Proximity Domain Low(8) : 03
[533h 1331 001h]                     Apic ID : FF
[534h 1332 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[538h 1336 001h]             Local Sapic EID : 00
[539h 1337 003h]   Proximity Domain High(24) : 000000
[53Ch 1340 004h]                Clock Domain : 00000000

[540h 1344 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[541h 1345 001h]                      Length : 10

[542h 1346 001h]     Proximity Domain Low(8) : 03
[543h 1347 001h]                     Apic ID : FF
[544h 1348 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[548h 1352 001h]             Local Sapic EID : 00
[549h 1353 003h]   Proximity Domain High(24) : 000000
[54Ch 1356 004h]                Clock Domain : 00000000

[550h 1360 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[551h 1361 001h]                      Length : 10

[552h 1362 001h]     Proximity Domain Low(8) : 03
[553h 1363 001h]                     Apic ID : FF
[554h 1364 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[558h 1368 001h]             Local Sapic EID : 00
[559h 1369 003h]   Proximity Domain High(24) : 000000
[55Ch 1372 004h]                Clock Domain : 00000000

[560h 1376 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[561h 1377 001h]                      Length : 10

[562h 1378 001h]     Proximity Domain Low(8) : 03
[563h 1379 001h]                     Apic ID : FF
[564h 1380 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[568h 1384 001h]             Local Sapic EID : 00
[569h 1385 003h]   Proximity Domain High(24) : 000000
[56Ch 1388 004h]                Clock Domain : 00000000

[570h 1392 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[571h 1393 001h]                      Length : 10

[572h 1394 001h]     Proximity Domain Low(8) : 03
[573h 1395 001h]                     Apic ID : FF
[574h 1396 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[578h 1400 001h]             Local Sapic EID : 00
[579h 1401 003h]   Proximity Domain High(24) : 000000
[57Ch 1404 004h]                Clock Domain : 00000000

[580h 1408 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[581h 1409 001h]                      Length : 10

[582h 1410 001h]     Proximity Domain Low(8) : 03
[583h 1411 001h]                     Apic ID : FF
[584h 1412 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[588h 1416 001h]             Local Sapic EID : 00
[589h 1417 003h]   Proximity Domain High(24) : 000000
[58Ch 1420 004h]                Clock Domain : 00000000

[590h 1424 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[591h 1425 001h]                      Length : 10

[592h 1426 001h]     Proximity Domain Low(8) : 03
[593h 1427 001h]                     Apic ID : FF
[594h 1428 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[598h 1432 001h]             Local Sapic EID : 00
[599h 1433 003h]   Proximity Domain High(24) : 000000
[59Ch 1436 004h]                Clock Domain : 00000000

[5A0h 1440 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[5A1h 1441 001h]                      Length : 10

[5A2h 1442 001h]     Proximity Domain Low(8) : 03
[5A3h 1443 001h]                     Apic ID : FF
[5A4h 1444 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[5A8h 1448 001h]             Local Sapic EID : 00
[5A9h 1449 003h]   Proximity Domain High(24) : 000000
[5ACh 1452 004h]                Clock Domain : 00000000

[5B0h 1456 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[5B1h 1457 001h]                      Length : 10

[5B2h 1458 001h]     Proximity Domain Low(8) : 03
[5B3h 1459 001h]                     Apic ID : FF
[5B4h 1460 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[5B8h 1464 001h]             Local Sapic EID : 00
[5B9h 1465 003h]   Proximity Domain High(24) : 000000
[5BCh 1468 004h]                Clock Domain : 00000000

[5C0h 1472 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[5C1h 1473 001h]                      Length : 10

[5C2h 1474 001h]     Proximity Domain Low(8) : 03
[5C3h 1475 001h]                     Apic ID : FF
[5C4h 1476 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[5C8h 1480 001h]             Local Sapic EID : 00
[5C9h 1481 003h]   Proximity Domain High(24) : 000000
[5CCh 1484 004h]                Clock Domain : 00000000

[5D0h 1488 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[5D1h 1489 001h]                      Length : 10

[5D2h 1490 001h]     Proximity Domain Low(8) : 03
[5D3h 1491 001h]                     Apic ID : FF
[5D4h 1492 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[5D8h 1496 001h]             Local Sapic EID : 00
[5D9h 1497 003h]   Proximity Domain High(24) : 000000
[5DCh 1500 004h]                Clock Domain : 00000000

[5E0h 1504 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[5E1h 1505 001h]                      Length : 10

[5E2h 1506 001h]     Proximity Domain Low(8) : 03
[5E3h 1507 001h]                     Apic ID : FF
[5E4h 1508 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[5E8h 1512 001h]             Local Sapic EID : 00
[5E9h 1513 003h]   Proximity Domain High(24) : 000000
[5ECh 1516 004h]                Clock Domain : 00000000

[5F0h 1520 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[5F1h 1521 001h]                      Length : 10

[5F2h 1522 001h]     Proximity Domain Low(8) : 03
[5F3h 1523 001h]                     Apic ID : FF
[5F4h 1524 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[5F8h 1528 001h]             Local Sapic EID : 00
[5F9h 1529 003h]   Proximity Domain High(24) : 000000
[5FCh 1532 004h]                Clock Domain : 00000000

[600h 1536 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[601h 1537 001h]                      Length : 10

[602h 1538 001h]     Proximity Domain Low(8) : 03
[603h 1539 001h]                     Apic ID : FF
[604h 1540 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[608h 1544 001h]             Local Sapic EID : 00
[609h 1545 003h]   Proximity Domain High(24) : 000000
[60Ch 1548 004h]                Clock Domain : 00000000

[610h 1552 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[611h 1553 001h]                      Length : 10

[612h 1554 001h]     Proximity Domain Low(8) : 03
[613h 1555 001h]                     Apic ID : FF
[614h 1556 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[618h 1560 001h]             Local Sapic EID : 00
[619h 1561 003h]   Proximity Domain High(24) : 000000
[61Ch 1564 004h]                Clock Domain : 00000000

[620h 1568 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[621h 1569 001h]                      Length : 10

[622h 1570 001h]     Proximity Domain Low(8) : 03
[623h 1571 001h]                     Apic ID : FF
[624h 1572 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[628h 1576 001h]             Local Sapic EID : 00
[629h 1577 003h]   Proximity Domain High(24) : 000000
[62Ch 1580 004h]                Clock Domain : 00000000

[630h 1584 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[631h 1585 001h]                      Length : 10

[632h 1586 001h]     Proximity Domain Low(8) : 00
[633h 1587 001h]                     Apic ID : FF
[634h 1588 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[638h 1592 001h]             Local Sapic EID : 00
[639h 1593 003h]   Proximity Domain High(24) : 000000
[63Ch 1596 004h]                Clock Domain : 00000000

[640h 1600 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[641h 1601 001h]                      Length : 10

[642h 1602 001h]     Proximity Domain Low(8) : 00
[643h 1603 001h]                     Apic ID : FF
[644h 1604 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[648h 1608 001h]             Local Sapic EID : 00
[649h 1609 003h]   Proximity Domain High(24) : 000000
[64Ch 1612 004h]                Clock Domain : 00000000

[650h 1616 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[651h 1617 001h]                      Length : 10

[652h 1618 001h]     Proximity Domain Low(8) : 00
[653h 1619 001h]                     Apic ID : FF
[654h 1620 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[658h 1624 001h]             Local Sapic EID : 00
[659h 1625 003h]   Proximity Domain High(24) : 000000
[65Ch 1628 004h]                Clock Domain : 00000000

[660h 1632 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[661h 1633 001h]                      Length : 10

[662h 1634 001h]     Proximity Domain Low(8) : 00
[663h 1635 001h]                     Apic ID : FF
[664h 1636 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[668h 1640 001h]             Local Sapic EID : 00
[669h 1641 003h]   Proximity Domain High(24) : 000000
[66Ch 1644 004h]                Clock Domain : 00000000

[670h 1648 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[671h 1649 001h]                      Length : 10

[672h 1650 001h]     Proximity Domain Low(8) : 00
[673h 1651 001h]                     Apic ID : FF
[674h 1652 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[678h 1656 001h]             Local Sapic EID : 00
[679h 1657 003h]   Proximity Domain High(24) : 000000
[67Ch 1660 004h]                Clock Domain : 00000000

[680h 1664 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[681h 1665 001h]                      Length : 10

[682h 1666 001h]     Proximity Domain Low(8) : 00
[683h 1667 001h]                     Apic ID : FF
[684h 1668 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[688h 1672 001h]             Local Sapic EID : 00
[689h 1673 003h]   Proximity Domain High(24) : 000000
[68Ch 1676 004h]                Clock Domain : 00000000

[690h 1680 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[691h 1681 001h]                      Length : 10

[692h 1682 001h]     Proximity Domain Low(8) : 00
[693h 1683 001h]                     Apic ID : FF
[694h 1684 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[698h 1688 001h]             Local Sapic EID : 00
[699h 1689 003h]   Proximity Domain High(24) : 000000
[69Ch 1692 004h]                Clock Domain : 00000000

[6A0h 1696 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[6A1h 1697 001h]                      Length : 10

[6A2h 1698 001h]     Proximity Domain Low(8) : 00
[6A3h 1699 001h]                     Apic ID : FF
[6A4h 1700 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[6A8h 1704 001h]             Local Sapic EID : 00
[6A9h 1705 003h]   Proximity Domain High(24) : 000000
[6ACh 1708 004h]                Clock Domain : 00000000

[6B0h 1712 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[6B1h 1713 001h]                      Length : 10

[6B2h 1714 001h]     Proximity Domain Low(8) : 00
[6B3h 1715 001h]                     Apic ID : FF
[6B4h 1716 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[6B8h 1720 001h]             Local Sapic EID : 00
[6B9h 1721 003h]   Proximity Domain High(24) : 000000
[6BCh 1724 004h]                Clock Domain : 00000000

[6C0h 1728 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[6C1h 1729 001h]                      Length : 10

[6C2h 1730 001h]     Proximity Domain Low(8) : 00
[6C3h 1731 001h]                     Apic ID : FF
[6C4h 1732 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[6C8h 1736 001h]             Local Sapic EID : 00
[6C9h 1737 003h]   Proximity Domain High(24) : 000000
[6CCh 1740 004h]                Clock Domain : 00000000

[6D0h 1744 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[6D1h 1745 001h]                      Length : 10

[6D2h 1746 001h]     Proximity Domain Low(8) : 00
[6D3h 1747 001h]                     Apic ID : FF
[6D4h 1748 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[6D8h 1752 001h]             Local Sapic EID : 00
[6D9h 1753 003h]   Proximity Domain High(24) : 000000
[6DCh 1756 004h]                Clock Domain : 00000000

[6E0h 1760 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[6E1h 1761 001h]                      Length : 10

[6E2h 1762 001h]     Proximity Domain Low(8) : 00
[6E3h 1763 001h]                     Apic ID : FF
[6E4h 1764 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[6E8h 1768 001h]             Local Sapic EID : 00
[6E9h 1769 003h]   Proximity Domain High(24) : 000000
[6ECh 1772 004h]                Clock Domain : 00000000

[6F0h 1776 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[6F1h 1777 001h]                      Length : 10

[6F2h 1778 001h]     Proximity Domain Low(8) : 00
[6F3h 1779 001h]                     Apic ID : FF
[6F4h 1780 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[6F8h 1784 001h]             Local Sapic EID : 00
[6F9h 1785 003h]   Proximity Domain High(24) : 000000
[6FCh 1788 004h]                Clock Domain : 00000000

[700h 1792 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[701h 1793 001h]                      Length : 10

[702h 1794 001h]     Proximity Domain Low(8) : 00
[703h 1795 001h]                     Apic ID : FF
[704h 1796 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[708h 1800 001h]             Local Sapic EID : 00
[709h 1801 003h]   Proximity Domain High(24) : 000000
[70Ch 1804 004h]                Clock Domain : 00000000

[710h 1808 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[711h 1809 001h]                      Length : 10

[712h 1810 001h]     Proximity Domain Low(8) : 00
[713h 1811 001h]                     Apic ID : FF
[714h 1812 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[718h 1816 001h]             Local Sapic EID : 00
[719h 1817 003h]   Proximity Domain High(24) : 000000
[71Ch 1820 004h]                Clock Domain : 00000000

[720h 1824 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[721h 1825 001h]                      Length : 10

[722h 1826 001h]     Proximity Domain Low(8) : 00
[723h 1827 001h]                     Apic ID : FF
[724h 1828 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[728h 1832 001h]             Local Sapic EID : 00
[729h 1833 003h]   Proximity Domain High(24) : 000000
[72Ch 1836 004h]                Clock Domain : 00000000

[730h 1840 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[731h 1841 001h]                      Length : 10

[732h 1842 001h]     Proximity Domain Low(8) : 00
[733h 1843 001h]                     Apic ID : FF
[734h 1844 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[738h 1848 001h]             Local Sapic EID : 00
[739h 1849 003h]   Proximity Domain High(24) : 000000
[73Ch 1852 004h]                Clock Domain : 00000000

[740h 1856 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[741h 1857 001h]                      Length : 10

[742h 1858 001h]     Proximity Domain Low(8) : 00
[743h 1859 001h]                     Apic ID : FF
[744h 1860 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[748h 1864 001h]             Local Sapic EID : 00
[749h 1865 003h]   Proximity Domain High(24) : 000000
[74Ch 1868 004h]                Clock Domain : 00000000

[750h 1872 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[751h 1873 001h]                      Length : 10

[752h 1874 001h]     Proximity Domain Low(8) : 00
[753h 1875 001h]                     Apic ID : FF
[754h 1876 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[758h 1880 001h]             Local Sapic EID : 00
[759h 1881 003h]   Proximity Domain High(24) : 000000
[75Ch 1884 004h]                Clock Domain : 00000000

[760h 1888 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[761h 1889 001h]                      Length : 10

[762h 1890 001h]     Proximity Domain Low(8) : 00
[763h 1891 001h]                     Apic ID : FF
[764h 1892 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[768h 1896 001h]             Local Sapic EID : 00
[769h 1897 003h]   Proximity Domain High(24) : 000000
[76Ch 1900 004h]                Clock Domain : 00000000

[770h 1904 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[771h 1905 001h]                      Length : 10

[772h 1906 001h]     Proximity Domain Low(8) : 00
[773h 1907 001h]                     Apic ID : FF
[774h 1908 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[778h 1912 001h]             Local Sapic EID : 00
[779h 1913 003h]   Proximity Domain High(24) : 000000
[77Ch 1916 004h]                Clock Domain : 00000000

[780h 1920 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[781h 1921 001h]                      Length : 10

[782h 1922 001h]     Proximity Domain Low(8) : 00
[783h 1923 001h]                     Apic ID : FF
[784h 1924 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[788h 1928 001h]             Local Sapic EID : 00
[789h 1929 003h]   Proximity Domain High(24) : 000000
[78Ch 1932 004h]                Clock Domain : 00000000

[790h 1936 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[791h 1937 001h]                      Length : 10

[792h 1938 001h]     Proximity Domain Low(8) : 00
[793h 1939 001h]                     Apic ID : FF
[794h 1940 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[798h 1944 001h]             Local Sapic EID : 00
[799h 1945 003h]   Proximity Domain High(24) : 000000
[79Ch 1948 004h]                Clock Domain : 00000000

[7A0h 1952 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[7A1h 1953 001h]                      Length : 10

[7A2h 1954 001h]     Proximity Domain Low(8) : 00
[7A3h 1955 001h]                     Apic ID : FF
[7A4h 1956 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[7A8h 1960 001h]             Local Sapic EID : 00
[7A9h 1961 003h]   Proximity Domain High(24) : 000000
[7ACh 1964 004h]                Clock Domain : 00000000

[7B0h 1968 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[7B1h 1969 001h]                      Length : 10

[7B2h 1970 001h]     Proximity Domain Low(8) : 01
[7B3h 1971 001h]                     Apic ID : FF
[7B4h 1972 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[7B8h 1976 001h]             Local Sapic EID : 00
[7B9h 1977 003h]   Proximity Domain High(24) : 000000
[7BCh 1980 004h]                Clock Domain : 00000000

[7C0h 1984 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[7C1h 1985 001h]                      Length : 10

[7C2h 1986 001h]     Proximity Domain Low(8) : 01
[7C3h 1987 001h]                     Apic ID : FF
[7C4h 1988 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[7C8h 1992 001h]             Local Sapic EID : 00
[7C9h 1993 003h]   Proximity Domain High(24) : 000000
[7CCh 1996 004h]                Clock Domain : 00000000

[7D0h 2000 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[7D1h 2001 001h]                      Length : 10

[7D2h 2002 001h]     Proximity Domain Low(8) : 01
[7D3h 2003 001h]                     Apic ID : FF
[7D4h 2004 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[7D8h 2008 001h]             Local Sapic EID : 00
[7D9h 2009 003h]   Proximity Domain High(24) : 000000
[7DCh 2012 004h]                Clock Domain : 00000000

[7E0h 2016 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[7E1h 2017 001h]                      Length : 10

[7E2h 2018 001h]     Proximity Domain Low(8) : 01
[7E3h 2019 001h]                     Apic ID : FF
[7E4h 2020 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[7E8h 2024 001h]             Local Sapic EID : 00
[7E9h 2025 003h]   Proximity Domain High(24) : 000000
[7ECh 2028 004h]                Clock Domain : 00000000

[7F0h 2032 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[7F1h 2033 001h]                      Length : 10

[7F2h 2034 001h]     Proximity Domain Low(8) : 01
[7F3h 2035 001h]                     Apic ID : FF
[7F4h 2036 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[7F8h 2040 001h]             Local Sapic EID : 00
[7F9h 2041 003h]   Proximity Domain High(24) : 000000
[7FCh 2044 004h]                Clock Domain : 00000000

[800h 2048 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[801h 2049 001h]                      Length : 10

[802h 2050 001h]     Proximity Domain Low(8) : 01
[803h 2051 001h]                     Apic ID : FF
[804h 2052 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[808h 2056 001h]             Local Sapic EID : 00
[809h 2057 003h]   Proximity Domain High(24) : 000000
[80Ch 2060 004h]                Clock Domain : 00000000

[810h 2064 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[811h 2065 001h]                      Length : 10

[812h 2066 001h]     Proximity Domain Low(8) : 01
[813h 2067 001h]                     Apic ID : FF
[814h 2068 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[818h 2072 001h]             Local Sapic EID : 00
[819h 2073 003h]   Proximity Domain High(24) : 000000
[81Ch 2076 004h]                Clock Domain : 00000000

[820h 2080 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[821h 2081 001h]                      Length : 10

[822h 2082 001h]     Proximity Domain Low(8) : 01
[823h 2083 001h]                     Apic ID : FF
[824h 2084 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[828h 2088 001h]             Local Sapic EID : 00
[829h 2089 003h]   Proximity Domain High(24) : 000000
[82Ch 2092 004h]                Clock Domain : 00000000

[830h 2096 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[831h 2097 001h]                      Length : 10

[832h 2098 001h]     Proximity Domain Low(8) : 01
[833h 2099 001h]                     Apic ID : FF
[834h 2100 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[838h 2104 001h]             Local Sapic EID : 00
[839h 2105 003h]   Proximity Domain High(24) : 000000
[83Ch 2108 004h]                Clock Domain : 00000000

[840h 2112 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[841h 2113 001h]                      Length : 10

[842h 2114 001h]     Proximity Domain Low(8) : 01
[843h 2115 001h]                     Apic ID : FF
[844h 2116 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[848h 2120 001h]             Local Sapic EID : 00
[849h 2121 003h]   Proximity Domain High(24) : 000000
[84Ch 2124 004h]                Clock Domain : 00000000

[850h 2128 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[851h 2129 001h]                      Length : 10

[852h 2130 001h]     Proximity Domain Low(8) : 01
[853h 2131 001h]                     Apic ID : FF
[854h 2132 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[858h 2136 001h]             Local Sapic EID : 00
[859h 2137 003h]   Proximity Domain High(24) : 000000
[85Ch 2140 004h]                Clock Domain : 00000000

[860h 2144 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[861h 2145 001h]                      Length : 10

[862h 2146 001h]     Proximity Domain Low(8) : 01
[863h 2147 001h]                     Apic ID : FF
[864h 2148 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[868h 2152 001h]             Local Sapic EID : 00
[869h 2153 003h]   Proximity Domain High(24) : 000000
[86Ch 2156 004h]                Clock Domain : 00000000

[870h 2160 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[871h 2161 001h]                      Length : 10

[872h 2162 001h]     Proximity Domain Low(8) : 01
[873h 2163 001h]                     Apic ID : FF
[874h 2164 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[878h 2168 001h]             Local Sapic EID : 00
[879h 2169 003h]   Proximity Domain High(24) : 000000
[87Ch 2172 004h]                Clock Domain : 00000000

[880h 2176 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[881h 2177 001h]                      Length : 10

[882h 2178 001h]     Proximity Domain Low(8) : 01
[883h 2179 001h]                     Apic ID : FF
[884h 2180 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[888h 2184 001h]             Local Sapic EID : 00
[889h 2185 003h]   Proximity Domain High(24) : 000000
[88Ch 2188 004h]                Clock Domain : 00000000

[890h 2192 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[891h 2193 001h]                      Length : 10

[892h 2194 001h]     Proximity Domain Low(8) : 01
[893h 2195 001h]                     Apic ID : FF
[894h 2196 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[898h 2200 001h]             Local Sapic EID : 00
[899h 2201 003h]   Proximity Domain High(24) : 000000
[89Ch 2204 004h]                Clock Domain : 00000000

[8A0h 2208 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[8A1h 2209 001h]                      Length : 10

[8A2h 2210 001h]     Proximity Domain Low(8) : 01
[8A3h 2211 001h]                     Apic ID : FF
[8A4h 2212 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[8A8h 2216 001h]             Local Sapic EID : 00
[8A9h 2217 003h]   Proximity Domain High(24) : 000000
[8ACh 2220 004h]                Clock Domain : 00000000

[8B0h 2224 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[8B1h 2225 001h]                      Length : 10

[8B2h 2226 001h]     Proximity Domain Low(8) : 01
[8B3h 2227 001h]                     Apic ID : FF
[8B4h 2228 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[8B8h 2232 001h]             Local Sapic EID : 00
[8B9h 2233 003h]   Proximity Domain High(24) : 000000
[8BCh 2236 004h]                Clock Domain : 00000000

[8C0h 2240 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[8C1h 2241 001h]                      Length : 10

[8C2h 2242 001h]     Proximity Domain Low(8) : 01
[8C3h 2243 001h]                     Apic ID : FF
[8C4h 2244 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[8C8h 2248 001h]             Local Sapic EID : 00
[8C9h 2249 003h]   Proximity Domain High(24) : 000000
[8CCh 2252 004h]                Clock Domain : 00000000

[8D0h 2256 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[8D1h 2257 001h]                      Length : 10

[8D2h 2258 001h]     Proximity Domain Low(8) : 01
[8D3h 2259 001h]                     Apic ID : FF
[8D4h 2260 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[8D8h 2264 001h]             Local Sapic EID : 00
[8D9h 2265 003h]   Proximity Domain High(24) : 000000
[8DCh 2268 004h]                Clock Domain : 00000000

[8E0h 2272 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[8E1h 2273 001h]                      Length : 10

[8E2h 2274 001h]     Proximity Domain Low(8) : 01
[8E3h 2275 001h]                     Apic ID : FF
[8E4h 2276 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[8E8h 2280 001h]             Local Sapic EID : 00
[8E9h 2281 003h]   Proximity Domain High(24) : 000000
[8ECh 2284 004h]                Clock Domain : 00000000

[8F0h 2288 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[8F1h 2289 001h]                      Length : 10

[8F2h 2290 001h]     Proximity Domain Low(8) : 01
[8F3h 2291 001h]                     Apic ID : FF
[8F4h 2292 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[8F8h 2296 001h]             Local Sapic EID : 00
[8F9h 2297 003h]   Proximity Domain High(24) : 000000
[8FCh 2300 004h]                Clock Domain : 00000000

[900h 2304 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[901h 2305 001h]                      Length : 10

[902h 2306 001h]     Proximity Domain Low(8) : 01
[903h 2307 001h]                     Apic ID : FF
[904h 2308 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[908h 2312 001h]             Local Sapic EID : 00
[909h 2313 003h]   Proximity Domain High(24) : 000000
[90Ch 2316 004h]                Clock Domain : 00000000

[910h 2320 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[911h 2321 001h]                      Length : 10

[912h 2322 001h]     Proximity Domain Low(8) : 01
[913h 2323 001h]                     Apic ID : FF
[914h 2324 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[918h 2328 001h]             Local Sapic EID : 00
[919h 2329 003h]   Proximity Domain High(24) : 000000
[91Ch 2332 004h]                Clock Domain : 00000000

[920h 2336 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[921h 2337 001h]                      Length : 10

[922h 2338 001h]     Proximity Domain Low(8) : 01
[923h 2339 001h]                     Apic ID : FF
[924h 2340 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[928h 2344 001h]             Local Sapic EID : 00
[929h 2345 003h]   Proximity Domain High(24) : 000000
[92Ch 2348 004h]                Clock Domain : 00000000

[930h 2352 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[931h 2353 001h]                      Length : 10

[932h 2354 001h]     Proximity Domain Low(8) : 02
[933h 2355 001h]                     Apic ID : FF
[934h 2356 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[938h 2360 001h]             Local Sapic EID : 00
[939h 2361 003h]   Proximity Domain High(24) : 000000
[93Ch 2364 004h]                Clock Domain : 00000000

[940h 2368 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[941h 2369 001h]                      Length : 10

[942h 2370 001h]     Proximity Domain Low(8) : 02
[943h 2371 001h]                     Apic ID : FF
[944h 2372 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[948h 2376 001h]             Local Sapic EID : 00
[949h 2377 003h]   Proximity Domain High(24) : 000000
[94Ch 2380 004h]                Clock Domain : 00000000

[950h 2384 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[951h 2385 001h]                      Length : 10

[952h 2386 001h]     Proximity Domain Low(8) : 02
[953h 2387 001h]                     Apic ID : FF
[954h 2388 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[958h 2392 001h]             Local Sapic EID : 00
[959h 2393 003h]   Proximity Domain High(24) : 000000
[95Ch 2396 004h]                Clock Domain : 00000000

[960h 2400 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[961h 2401 001h]                      Length : 10

[962h 2402 001h]     Proximity Domain Low(8) : 02
[963h 2403 001h]                     Apic ID : FF
[964h 2404 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[968h 2408 001h]             Local Sapic EID : 00
[969h 2409 003h]   Proximity Domain High(24) : 000000
[96Ch 2412 004h]                Clock Domain : 00000000

[970h 2416 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[971h 2417 001h]                      Length : 10

[972h 2418 001h]     Proximity Domain Low(8) : 02
[973h 2419 001h]                     Apic ID : FF
[974h 2420 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[978h 2424 001h]             Local Sapic EID : 00
[979h 2425 003h]   Proximity Domain High(24) : 000000
[97Ch 2428 004h]                Clock Domain : 00000000

[980h 2432 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[981h 2433 001h]                      Length : 10

[982h 2434 001h]     Proximity Domain Low(8) : 02
[983h 2435 001h]                     Apic ID : FF
[984h 2436 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[988h 2440 001h]             Local Sapic EID : 00
[989h 2441 003h]   Proximity Domain High(24) : 000000
[98Ch 2444 004h]                Clock Domain : 00000000

[990h 2448 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[991h 2449 001h]                      Length : 10

[992h 2450 001h]     Proximity Domain Low(8) : 02
[993h 2451 001h]                     Apic ID : FF
[994h 2452 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[998h 2456 001h]             Local Sapic EID : 00
[999h 2457 003h]   Proximity Domain High(24) : 000000
[99Ch 2460 004h]                Clock Domain : 00000000

[9A0h 2464 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[9A1h 2465 001h]                      Length : 10

[9A2h 2466 001h]     Proximity Domain Low(8) : 02
[9A3h 2467 001h]                     Apic ID : FF
[9A4h 2468 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[9A8h 2472 001h]             Local Sapic EID : 00
[9A9h 2473 003h]   Proximity Domain High(24) : 000000
[9ACh 2476 004h]                Clock Domain : 00000000

[9B0h 2480 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[9B1h 2481 001h]                      Length : 10

[9B2h 2482 001h]     Proximity Domain Low(8) : 02
[9B3h 2483 001h]                     Apic ID : FF
[9B4h 2484 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[9B8h 2488 001h]             Local Sapic EID : 00
[9B9h 2489 003h]   Proximity Domain High(24) : 000000
[9BCh 2492 004h]                Clock Domain : 00000000

[9C0h 2496 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[9C1h 2497 001h]                      Length : 10

[9C2h 2498 001h]     Proximity Domain Low(8) : 02
[9C3h 2499 001h]                     Apic ID : FF
[9C4h 2500 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[9C8h 2504 001h]             Local Sapic EID : 00
[9C9h 2505 003h]   Proximity Domain High(24) : 000000
[9CCh 2508 004h]                Clock Domain : 00000000

[9D0h 2512 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[9D1h 2513 001h]                      Length : 10

[9D2h 2514 001h]     Proximity Domain Low(8) : 02
[9D3h 2515 001h]                     Apic ID : FF
[9D4h 2516 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[9D8h 2520 001h]             Local Sapic EID : 00
[9D9h 2521 003h]   Proximity Domain High(24) : 000000
[9DCh 2524 004h]                Clock Domain : 00000000

[9E0h 2528 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[9E1h 2529 001h]                      Length : 10

[9E2h 2530 001h]     Proximity Domain Low(8) : 02
[9E3h 2531 001h]                     Apic ID : FF
[9E4h 2532 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[9E8h 2536 001h]             Local Sapic EID : 00
[9E9h 2537 003h]   Proximity Domain High(24) : 000000
[9ECh 2540 004h]                Clock Domain : 00000000

[9F0h 2544 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[9F1h 2545 001h]                      Length : 10

[9F2h 2546 001h]     Proximity Domain Low(8) : 02
[9F3h 2547 001h]                     Apic ID : FF
[9F4h 2548 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[9F8h 2552 001h]             Local Sapic EID : 00
[9F9h 2553 003h]   Proximity Domain High(24) : 000000
[9FCh 2556 004h]                Clock Domain : 00000000

[A00h 2560 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[A01h 2561 001h]                      Length : 10

[A02h 2562 001h]     Proximity Domain Low(8) : 02
[A03h 2563 001h]                     Apic ID : FF
[A04h 2564 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[A08h 2568 001h]             Local Sapic EID : 00
[A09h 2569 003h]   Proximity Domain High(24) : 000000
[A0Ch 2572 004h]                Clock Domain : 00000000

[A10h 2576 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[A11h 2577 001h]                      Length : 10

[A12h 2578 001h]     Proximity Domain Low(8) : 02
[A13h 2579 001h]                     Apic ID : FF
[A14h 2580 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[A18h 2584 001h]             Local Sapic EID : 00
[A19h 2585 003h]   Proximity Domain High(24) : 000000
[A1Ch 2588 004h]                Clock Domain : 00000000

[A20h 2592 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[A21h 2593 001h]                      Length : 10

[A22h 2594 001h]     Proximity Domain Low(8) : 02
[A23h 2595 001h]                     Apic ID : FF
[A24h 2596 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[A28h 2600 001h]             Local Sapic EID : 00
[A29h 2601 003h]   Proximity Domain High(24) : 000000
[A2Ch 2604 004h]                Clock Domain : 00000000

[A30h 2608 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[A31h 2609 001h]                      Length : 10

[A32h 2610 001h]     Proximity Domain Low(8) : 02
[A33h 2611 001h]                     Apic ID : FF
[A34h 2612 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[A38h 2616 001h]             Local Sapic EID : 00
[A39h 2617 003h]   Proximity Domain High(24) : 000000
[A3Ch 2620 004h]                Clock Domain : 00000000

[A40h 2624 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[A41h 2625 001h]                      Length : 10

[A42h 2626 001h]     Proximity Domain Low(8) : 02
[A43h 2627 001h]                     Apic ID : FF
[A44h 2628 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[A48h 2632 001h]             Local Sapic EID : 00
[A49h 2633 003h]   Proximity Domain High(24) : 000000
[A4Ch 2636 004h]                Clock Domain : 00000000

[A50h 2640 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[A51h 2641 001h]                      Length : 10

[A52h 2642 001h]     Proximity Domain Low(8) : 02
[A53h 2643 001h]                     Apic ID : FF
[A54h 2644 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[A58h 2648 001h]             Local Sapic EID : 00
[A59h 2649 003h]   Proximity Domain High(24) : 000000
[A5Ch 2652 004h]                Clock Domain : 00000000

[A60h 2656 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[A61h 2657 001h]                      Length : 10

[A62h 2658 001h]     Proximity Domain Low(8) : 02
[A63h 2659 001h]                     Apic ID : FF
[A64h 2660 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[A68h 2664 001h]             Local Sapic EID : 00
[A69h 2665 003h]   Proximity Domain High(24) : 000000
[A6Ch 2668 004h]                Clock Domain : 00000000

[A70h 2672 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[A71h 2673 001h]                      Length : 10

[A72h 2674 001h]     Proximity Domain Low(8) : 02
[A73h 2675 001h]                     Apic ID : FF
[A74h 2676 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[A78h 2680 001h]             Local Sapic EID : 00
[A79h 2681 003h]   Proximity Domain High(24) : 000000
[A7Ch 2684 004h]                Clock Domain : 00000000

[A80h 2688 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[A81h 2689 001h]                      Length : 10

[A82h 2690 001h]     Proximity Domain Low(8) : 02
[A83h 2691 001h]                     Apic ID : FF
[A84h 2692 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[A88h 2696 001h]             Local Sapic EID : 00
[A89h 2697 003h]   Proximity Domain High(24) : 000000
[A8Ch 2700 004h]                Clock Domain : 00000000

[A90h 2704 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[A91h 2705 001h]                      Length : 10

[A92h 2706 001h]     Proximity Domain Low(8) : 02
[A93h 2707 001h]                     Apic ID : FF
[A94h 2708 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[A98h 2712 001h]             Local Sapic EID : 00
[A99h 2713 003h]   Proximity Domain High(24) : 000000
[A9Ch 2716 004h]                Clock Domain : 00000000

[AA0h 2720 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[AA1h 2721 001h]                      Length : 10

[AA2h 2722 001h]     Proximity Domain Low(8) : 02
[AA3h 2723 001h]                     Apic ID : FF
[AA4h 2724 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[AA8h 2728 001h]             Local Sapic EID : 00
[AA9h 2729 003h]   Proximity Domain High(24) : 000000
[AACh 2732 004h]                Clock Domain : 00000000

[AB0h 2736 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[AB1h 2737 001h]                      Length : 10

[AB2h 2738 001h]     Proximity Domain Low(8) : 03
[AB3h 2739 001h]                     Apic ID : FF
[AB4h 2740 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[AB8h 2744 001h]             Local Sapic EID : 00
[AB9h 2745 003h]   Proximity Domain High(24) : 000000
[ABCh 2748 004h]                Clock Domain : 00000000

[AC0h 2752 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[AC1h 2753 001h]                      Length : 10

[AC2h 2754 001h]     Proximity Domain Low(8) : 03
[AC3h 2755 001h]                     Apic ID : FF
[AC4h 2756 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[AC8h 2760 001h]             Local Sapic EID : 00
[AC9h 2761 003h]   Proximity Domain High(24) : 000000
[ACCh 2764 004h]                Clock Domain : 00000000

[AD0h 2768 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[AD1h 2769 001h]                      Length : 10

[AD2h 2770 001h]     Proximity Domain Low(8) : 03
[AD3h 2771 001h]                     Apic ID : FF
[AD4h 2772 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[AD8h 2776 001h]             Local Sapic EID : 00
[AD9h 2777 003h]   Proximity Domain High(24) : 000000
[ADCh 2780 004h]                Clock Domain : 00000000

[AE0h 2784 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[AE1h 2785 001h]                      Length : 10

[AE2h 2786 001h]     Proximity Domain Low(8) : 03
[AE3h 2787 001h]                     Apic ID : FF
[AE4h 2788 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[AE8h 2792 001h]             Local Sapic EID : 00
[AE9h 2793 003h]   Proximity Domain High(24) : 000000
[AECh 2796 004h]                Clock Domain : 00000000

[AF0h 2800 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[AF1h 2801 001h]                      Length : 10

[AF2h 2802 001h]     Proximity Domain Low(8) : 03
[AF3h 2803 001h]                     Apic ID : FF
[AF4h 2804 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[AF8h 2808 001h]             Local Sapic EID : 00
[AF9h 2809 003h]   Proximity Domain High(24) : 000000
[AFCh 2812 004h]                Clock Domain : 00000000

[B00h 2816 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[B01h 2817 001h]                      Length : 10

[B02h 2818 001h]     Proximity Domain Low(8) : 03
[B03h 2819 001h]                     Apic ID : FF
[B04h 2820 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[B08h 2824 001h]             Local Sapic EID : 00
[B09h 2825 003h]   Proximity Domain High(24) : 000000
[B0Ch 2828 004h]                Clock Domain : 00000000

[B10h 2832 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[B11h 2833 001h]                      Length : 10

[B12h 2834 001h]     Proximity Domain Low(8) : 03
[B13h 2835 001h]                     Apic ID : FF
[B14h 2836 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[B18h 2840 001h]             Local Sapic EID : 00
[B19h 2841 003h]   Proximity Domain High(24) : 000000
[B1Ch 2844 004h]                Clock Domain : 00000000

[B20h 2848 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[B21h 2849 001h]                      Length : 10

[B22h 2850 001h]     Proximity Domain Low(8) : 03
[B23h 2851 001h]                     Apic ID : FF
[B24h 2852 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[B28h 2856 001h]             Local Sapic EID : 00
[B29h 2857 003h]   Proximity Domain High(24) : 000000
[B2Ch 2860 004h]                Clock Domain : 00000000

[B30h 2864 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[B31h 2865 001h]                      Length : 10

[B32h 2866 001h]     Proximity Domain Low(8) : 03
[B33h 2867 001h]                     Apic ID : FF
[B34h 2868 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[B38h 2872 001h]             Local Sapic EID : 00
[B39h 2873 003h]   Proximity Domain High(24) : 000000
[B3Ch 2876 004h]                Clock Domain : 00000000

[B40h 2880 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[B41h 2881 001h]                      Length : 10

[B42h 2882 001h]     Proximity Domain Low(8) : 03
[B43h 2883 001h]                     Apic ID : FF
[B44h 2884 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[B48h 2888 001h]             Local Sapic EID : 00
[B49h 2889 003h]   Proximity Domain High(24) : 000000
[B4Ch 2892 004h]                Clock Domain : 00000000

[B50h 2896 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[B51h 2897 001h]                      Length : 10

[B52h 2898 001h]     Proximity Domain Low(8) : 03
[B53h 2899 001h]                     Apic ID : FF
[B54h 2900 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[B58h 2904 001h]             Local Sapic EID : 00
[B59h 2905 003h]   Proximity Domain High(24) : 000000
[B5Ch 2908 004h]                Clock Domain : 00000000

[B60h 2912 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[B61h 2913 001h]                      Length : 10

[B62h 2914 001h]     Proximity Domain Low(8) : 03
[B63h 2915 001h]                     Apic ID : FF
[B64h 2916 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[B68h 2920 001h]             Local Sapic EID : 00
[B69h 2921 003h]   Proximity Domain High(24) : 000000
[B6Ch 2924 004h]                Clock Domain : 00000000

[B70h 2928 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[B71h 2929 001h]                      Length : 10

[B72h 2930 001h]     Proximity Domain Low(8) : 03
[B73h 2931 001h]                     Apic ID : FF
[B74h 2932 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[B78h 2936 001h]             Local Sapic EID : 00
[B79h 2937 003h]   Proximity Domain High(24) : 000000
[B7Ch 2940 004h]                Clock Domain : 00000000

[B80h 2944 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[B81h 2945 001h]                      Length : 10

[B82h 2946 001h]     Proximity Domain Low(8) : 03
[B83h 2947 001h]                     Apic ID : FF
[B84h 2948 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[B88h 2952 001h]             Local Sapic EID : 00
[B89h 2953 003h]   Proximity Domain High(24) : 000000
[B8Ch 2956 004h]                Clock Domain : 00000000

[B90h 2960 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[B91h 2961 001h]                      Length : 10

[B92h 2962 001h]     Proximity Domain Low(8) : 03
[B93h 2963 001h]                     Apic ID : FF
[B94h 2964 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[B98h 2968 001h]             Local Sapic EID : 00
[B99h 2969 003h]   Proximity Domain High(24) : 000000
[B9Ch 2972 004h]                Clock Domain : 00000000

[BA0h 2976 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[BA1h 2977 001h]                      Length : 10

[BA2h 2978 001h]     Proximity Domain Low(8) : 03
[BA3h 2979 001h]                     Apic ID : FF
[BA4h 2980 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[BA8h 2984 001h]             Local Sapic EID : 00
[BA9h 2985 003h]   Proximity Domain High(24) : 000000
[BACh 2988 004h]                Clock Domain : 00000000

[BB0h 2992 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[BB1h 2993 001h]                      Length : 10

[BB2h 2994 001h]     Proximity Domain Low(8) : 03
[BB3h 2995 001h]                     Apic ID : FF
[BB4h 2996 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[BB8h 3000 001h]             Local Sapic EID : 00
[BB9h 3001 003h]   Proximity Domain High(24) : 000000
[BBCh 3004 004h]                Clock Domain : 00000000

[BC0h 3008 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[BC1h 3009 001h]                      Length : 10

[BC2h 3010 001h]     Proximity Domain Low(8) : 03
[BC3h 3011 001h]                     Apic ID : FF
[BC4h 3012 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[BC8h 3016 001h]             Local Sapic EID : 00
[BC9h 3017 003h]   Proximity Domain High(24) : 000000
[BCCh 3020 004h]                Clock Domain : 00000000

[BD0h 3024 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[BD1h 3025 001h]                      Length : 10

[BD2h 3026 001h]     Proximity Domain Low(8) : 03
[BD3h 3027 001h]                     Apic ID : FF
[BD4h 3028 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[BD8h 3032 001h]             Local Sapic EID : 00
[BD9h 3033 003h]   Proximity Domain High(24) : 000000
[BDCh 3036 004h]                Clock Domain : 00000000

[BE0h 3040 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[BE1h 3041 001h]                      Length : 10

[BE2h 3042 001h]     Proximity Domain Low(8) : 03
[BE3h 3043 001h]                     Apic ID : FF
[BE4h 3044 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[BE8h 3048 001h]             Local Sapic EID : 00
[BE9h 3049 003h]   Proximity Domain High(24) : 000000
[BECh 3052 004h]                Clock Domain : 00000000

[BF0h 3056 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[BF1h 3057 001h]                      Length : 10

[BF2h 3058 001h]     Proximity Domain Low(8) : 03
[BF3h 3059 001h]                     Apic ID : FF
[BF4h 3060 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[BF8h 3064 001h]             Local Sapic EID : 00
[BF9h 3065 003h]   Proximity Domain High(24) : 000000
[BFCh 3068 004h]                Clock Domain : 00000000

[C00h 3072 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[C01h 3073 001h]                      Length : 10

[C02h 3074 001h]     Proximity Domain Low(8) : 03
[C03h 3075 001h]                     Apic ID : FF
[C04h 3076 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[C08h 3080 001h]             Local Sapic EID : 00
[C09h 3081 003h]   Proximity Domain High(24) : 000000
[C0Ch 3084 004h]                Clock Domain : 00000000

[C10h 3088 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[C11h 3089 001h]                      Length : 10

[C12h 3090 001h]     Proximity Domain Low(8) : 03
[C13h 3091 001h]                     Apic ID : FF
[C14h 3092 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[C18h 3096 001h]             Local Sapic EID : 00
[C19h 3097 003h]   Proximity Domain High(24) : 000000
[C1Ch 3100 004h]                Clock Domain : 00000000

[C20h 3104 001h]               Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[C21h 3105 001h]                      Length : 10

[C22h 3106 001h]     Proximity Domain Low(8) : 03
[C23h 3107 001h]                     Apic ID : FF
[C24h 3108 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
[C28h 3112 001h]             Local Sapic EID : 00
[C29h 3113 003h]   Proximity Domain High(24) : 000000
[C2Ch 3116 004h]                Clock Domain : 00000000

[C30h 3120 001h]               Subtable Type : 01 [Memory Affinity]
[C31h 3121 001h]                      Length : 28

[C32h 3122 004h]            Proximity Domain : 00000000
[C36h 3126 002h]                   Reserved1 : 0000
[C38h 3128 008h]                Base Address : 0000000000000000
[C40h 3136 008h]              Address Length : 0000000080000000
[C48h 3144 004h]                   Reserved2 : 00000000
[C4Ch 3148 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[C50h 3152 008h]                   Reserved3 : 0000000000000000

[C58h 3160 001h]               Subtable Type : 01 [Memory Affinity]
[C59h 3161 001h]                      Length : 28

[C5Ah 3162 004h]            Proximity Domain : 00000000
[C5Eh 3166 002h]                   Reserved1 : 0000
[C60h 3168 008h]                Base Address : 0000000100000000
[C68h 3176 008h]              Address Length : 0000000F80000000
[C70h 3184 004h]                   Reserved2 : 00000000
[C74h 3188 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[C78h 3192 008h]                   Reserved3 : 0000000000000000

[C80h 3200 001h]               Subtable Type : 01 [Memory Affinity]
[C81h 3201 001h]                      Length : 28

[C82h 3202 004h]            Proximity Domain : 00000000
[C86h 3206 002h]                   Reserved1 : 0000
[C88h 3208 008h]                Base Address : 0000001080000000
[C90h 3216 008h]              Address Length : 0000000400000000
[C98h 3224 004h]                   Reserved2 : 00000000
[C9Ch 3228 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[CA0h 3232 008h]                   Reserved3 : 0000000000000000

[CA8h 3240 001h]               Subtable Type : 01 [Memory Affinity]
[CA9h 3241 001h]                      Length : 28

[CAAh 3242 004h]            Proximity Domain : 00000001
[CAEh 3246 002h]                   Reserved1 : 0000
[CB0h 3248 008h]                Base Address : 0000001480000000
[CB8h 3256 008h]              Address Length : 0000001000000000
[CC0h 3264 004h]                   Reserved2 : 00000000
[CC4h 3268 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[CC8h 3272 008h]                   Reserved3 : 0000000000000000

[CD0h 3280 001h]               Subtable Type : 01 [Memory Affinity]
[CD1h 3281 001h]                      Length : 28

[CD2h 3282 004h]            Proximity Domain : 00000001
[CD6h 3286 002h]                   Reserved1 : 0000
[CD8h 3288 008h]                Base Address : 0000002480000000
[CE0h 3296 008h]              Address Length : 0000000400000000
[CE8h 3304 004h]                   Reserved2 : 00000000
[CECh 3308 004h]       Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[CF0h 3312 008h]                   Reserved3 : 0000000000000000

[CF8h 3320 001h]               Subtable Type : 01 [Memory Affinity]
[CF9h 3321 001h]                      Length : 28

[CFAh 3322 004h]            Proximity Domain : 00000000
[CFEh 3326 002h]                   Reserved1 : 0000
[D00h 3328 008h]                Base Address : 0000000000000000
[D08h 3336 008h]              Address Length : 0000000000000000
[D10h 3344 004h]                   Reserved2 : 00000000
[D14h 3348 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[D18h 3352 008h]                   Reserved3 : 0000000000000000

[D20h 3360 001h]               Subtable Type : 01 [Memory Affinity]
[D21h 3361 001h]                      Length : 28

[D22h 3362 004h]            Proximity Domain : 00000000
[D26h 3366 002h]                   Reserved1 : 0000
[D28h 3368 008h]                Base Address : 0000000000000000
[D30h 3376 008h]              Address Length : 0000000000000000
[D38h 3384 004h]                   Reserved2 : 00000000
[D3Ch 3388 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[D40h 3392 008h]                   Reserved3 : 0000000000000000

[D48h 3400 001h]               Subtable Type : 01 [Memory Affinity]
[D49h 3401 001h]                      Length : 28

[D4Ah 3402 004h]            Proximity Domain : 00000000
[D4Eh 3406 002h]                   Reserved1 : 0000
[D50h 3408 008h]                Base Address : 0000000000000000
[D58h 3416 008h]              Address Length : 0000000000000000
[D60h 3424 004h]                   Reserved2 : 00000000
[D64h 3428 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[D68h 3432 008h]                   Reserved3 : 0000000000000000

[D70h 3440 001h]               Subtable Type : 01 [Memory Affinity]
[D71h 3441 001h]                      Length : 28

[D72h 3442 004h]            Proximity Domain : 00000000
[D76h 3446 002h]                   Reserved1 : 0000
[D78h 3448 008h]                Base Address : 0000000000000000
[D80h 3456 008h]              Address Length : 0000000000000000
[D88h 3464 004h]                   Reserved2 : 00000000
[D8Ch 3468 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[D90h 3472 008h]                   Reserved3 : 0000000000000000

[D98h 3480 001h]               Subtable Type : 01 [Memory Affinity]
[D99h 3481 001h]                      Length : 28

[D9Ah 3482 004h]            Proximity Domain : 00000000
[D9Eh 3486 002h]                   Reserved1 : 0000
[DA0h 3488 008h]                Base Address : 0000000000000000
[DA8h 3496 008h]              Address Length : 0000000000000000
[DB0h 3504 004h]                   Reserved2 : 00000000
[DB4h 3508 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[DB8h 3512 008h]                   Reserved3 : 0000000000000000

[DC0h 3520 001h]               Subtable Type : 01 [Memory Affinity]
[DC1h 3521 001h]                      Length : 28

[DC2h 3522 004h]            Proximity Domain : 00000000
[DC6h 3526 002h]                   Reserved1 : 0000
[DC8h 3528 008h]                Base Address : 0000000000000000
[DD0h 3536 008h]              Address Length : 0000000000000000
[DD8h 3544 004h]                   Reserved2 : 00000000
[DDCh 3548 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[DE0h 3552 008h]                   Reserved3 : 0000000000000000

[DE8h 3560 001h]               Subtable Type : 01 [Memory Affinity]
[DE9h 3561 001h]                      Length : 28

[DEAh 3562 004h]            Proximity Domain : 00000000
[DEEh 3566 002h]                   Reserved1 : 0000
[DF0h 3568 008h]                Base Address : 0000000000000000
[DF8h 3576 008h]              Address Length : 0000000000000000
[E00h 3584 004h]                   Reserved2 : 00000000
[E04h 3588 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[E08h 3592 008h]                   Reserved3 : 0000000000000000

[E10h 3600 001h]               Subtable Type : 01 [Memory Affinity]
[E11h 3601 001h]                      Length : 28

[E12h 3602 004h]            Proximity Domain : 00000000
[E16h 3606 002h]                   Reserved1 : 0000
[E18h 3608 008h]                Base Address : 0000000000000000
[E20h 3616 008h]              Address Length : 0000000000000000
[E28h 3624 004h]                   Reserved2 : 00000000
[E2Ch 3628 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[E30h 3632 008h]                   Reserved3 : 0000000000000000

[E38h 3640 001h]               Subtable Type : 01 [Memory Affinity]
[E39h 3641 001h]                      Length : 28

[E3Ah 3642 004h]            Proximity Domain : 00000000
[E3Eh 3646 002h]                   Reserved1 : 0000
[E40h 3648 008h]                Base Address : 0000000000000000
[E48h 3656 008h]              Address Length : 0000000000000000
[E50h 3664 004h]                   Reserved2 : 00000000
[E54h 3668 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[E58h 3672 008h]                   Reserved3 : 0000000000000000

[E60h 3680 001h]               Subtable Type : 01 [Memory Affinity]
[E61h 3681 001h]                      Length : 28

[E62h 3682 004h]            Proximity Domain : 00000000
[E66h 3686 002h]                   Reserved1 : 0000
[E68h 3688 008h]                Base Address : 0000000000000000
[E70h 3696 008h]              Address Length : 0000000000000000
[E78h 3704 004h]                   Reserved2 : 00000000
[E7Ch 3708 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[E80h 3712 008h]                   Reserved3 : 0000000000000000

[E88h 3720 001h]               Subtable Type : 01 [Memory Affinity]
[E89h 3721 001h]                      Length : 28

[E8Ah 3722 004h]            Proximity Domain : 00000000
[E8Eh 3726 002h]                   Reserved1 : 0000
[E90h 3728 008h]                Base Address : 0000000000000000
[E98h 3736 008h]              Address Length : 0000000000000000
[EA0h 3744 004h]                   Reserved2 : 00000000
[EA4h 3748 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[EA8h 3752 008h]                   Reserved3 : 0000000000000000

[EB0h 3760 001h]               Subtable Type : 01 [Memory Affinity]
[EB1h 3761 001h]                      Length : 28

[EB2h 3762 004h]            Proximity Domain : 00000000
[EB6h 3766 002h]                   Reserved1 : 0000
[EB8h 3768 008h]                Base Address : 0000000000000000
[EC0h 3776 008h]              Address Length : 0000000000000000
[EC8h 3784 004h]                   Reserved2 : 00000000
[ECCh 3788 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[ED0h 3792 008h]                   Reserved3 : 0000000000000000

[ED8h 3800 001h]               Subtable Type : 01 [Memory Affinity]
[ED9h 3801 001h]                      Length : 28

[EDAh 3802 004h]            Proximity Domain : 00000000
[EDEh 3806 002h]                   Reserved1 : 0000
[EE0h 3808 008h]                Base Address : 0000000000000000
[EE8h 3816 008h]              Address Length : 0000000000000000
[EF0h 3824 004h]                   Reserved2 : 00000000
[EF4h 3828 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[EF8h 3832 008h]                   Reserved3 : 0000000000000000

[F00h 3840 001h]               Subtable Type : 01 [Memory Affinity]
[F01h 3841 001h]                      Length : 28

[F02h 3842 004h]            Proximity Domain : 00000000
[F06h 3846 002h]                   Reserved1 : 0000
[F08h 3848 008h]                Base Address : 0000000000000000
[F10h 3856 008h]              Address Length : 0000000000000000
[F18h 3864 004h]                   Reserved2 : 00000000
[F1Ch 3868 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[F20h 3872 008h]                   Reserved3 : 0000000000000000

[F28h 3880 001h]               Subtable Type : 01 [Memory Affinity]
[F29h 3881 001h]                      Length : 28

[F2Ah 3882 004h]            Proximity Domain : 00000000
[F2Eh 3886 002h]                   Reserved1 : 0000
[F30h 3888 008h]                Base Address : 0000000000000000
[F38h 3896 008h]              Address Length : 0000000000000000
[F40h 3904 004h]                   Reserved2 : 00000000
[F44h 3908 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[F48h 3912 008h]                   Reserved3 : 0000000000000000

[F50h 3920 001h]               Subtable Type : 01 [Memory Affinity]
[F51h 3921 001h]                      Length : 28

[F52h 3922 004h]            Proximity Domain : 00000000
[F56h 3926 002h]                   Reserved1 : 0000
[F58h 3928 008h]                Base Address : 0000000000000000
[F60h 3936 008h]              Address Length : 0000000000000000
[F68h 3944 004h]                   Reserved2 : 00000000
[F6Ch 3948 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[F70h 3952 008h]                   Reserved3 : 0000000000000000

[F78h 3960 001h]               Subtable Type : 01 [Memory Affinity]
[F79h 3961 001h]                      Length : 28

[F7Ah 3962 004h]            Proximity Domain : 00000000
[F7Eh 3966 002h]                   Reserved1 : 0000
[F80h 3968 008h]                Base Address : 0000000000000000
[F88h 3976 008h]              Address Length : 0000000000000000
[F90h 3984 004h]                   Reserved2 : 00000000
[F94h 3988 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[F98h 3992 008h]                   Reserved3 : 0000000000000000

[FA0h 4000 001h]               Subtable Type : 01 [Memory Affinity]
[FA1h 4001 001h]                      Length : 28

[FA2h 4002 004h]            Proximity Domain : 00000000
[FA6h 4006 002h]                   Reserved1 : 0000
[FA8h 4008 008h]                Base Address : 0000000000000000
[FB0h 4016 008h]              Address Length : 0000000000000000
[FB8h 4024 004h]                   Reserved2 : 00000000
[FBCh 4028 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[FC0h 4032 008h]                   Reserved3 : 0000000000000000

[FC8h 4040 001h]               Subtable Type : 01 [Memory Affinity]
[FC9h 4041 001h]                      Length : 28

[FCAh 4042 004h]            Proximity Domain : 00000000
[FCEh 4046 002h]                   Reserved1 : 0000
[FD0h 4048 008h]                Base Address : 0000000000000000
[FD8h 4056 008h]              Address Length : 0000000000000000
[FE0h 4064 004h]                   Reserved2 : 00000000
[FE4h 4068 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[FE8h 4072 008h]                   Reserved3 : 0000000000000000

[FF0h 4080 001h]               Subtable Type : 01 [Memory Affinity]
[FF1h 4081 001h]                      Length : 28

[FF2h 4082 004h]            Proximity Domain : 00000000
[FF6h 4086 002h]                   Reserved1 : 0000
[FF8h 4088 008h]                Base Address : 0000000000000000
[1000h 4096 008h]              Address Length : 0000000000000000
[1008h 4104 004h]                   Reserved2 : 00000000
[100Ch 4108 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[1010h 4112 008h]                   Reserved3 : 0000000000000000

[1018h 4120 001h]               Subtable Type : 01 [Memory Affinity]
[1019h 4121 001h]                      Length : 28

[101Ah 4122 004h]            Proximity Domain : 00000000
[101Eh 4126 002h]                   Reserved1 : 0000
[1020h 4128 008h]                Base Address : 0000000000000000
[1028h 4136 008h]              Address Length : 0000000000000000
[1030h 4144 004h]                   Reserved2 : 00000000
[1034h 4148 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[1038h 4152 008h]                   Reserved3 : 0000000000000000

[1040h 4160 001h]               Subtable Type : 01 [Memory Affinity]
[1041h 4161 001h]                      Length : 28

[1042h 4162 004h]            Proximity Domain : 00000000
[1046h 4166 002h]                   Reserved1 : 0000
[1048h 4168 008h]                Base Address : 0000000000000000
[1050h 4176 008h]              Address Length : 0000000000000000
[1058h 4184 004h]                   Reserved2 : 00000000
[105Ch 4188 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[1060h 4192 008h]                   Reserved3 : 0000000000000000

[1068h 4200 001h]               Subtable Type : 01 [Memory Affinity]
[1069h 4201 001h]                      Length : 28

[106Ah 4202 004h]            Proximity Domain : 00000000
[106Eh 4206 002h]                   Reserved1 : 0000
[1070h 4208 008h]                Base Address : 0000000000000000
[1078h 4216 008h]              Address Length : 0000000000000000
[1080h 4224 004h]                   Reserved2 : 00000000
[1084h 4228 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[1088h 4232 008h]                   Reserved3 : 0000000000000000

[1090h 4240 001h]               Subtable Type : 01 [Memory Affinity]
[1091h 4241 001h]                      Length : 28

[1092h 4242 004h]            Proximity Domain : 00000000
[1096h 4246 002h]                   Reserved1 : 0000
[1098h 4248 008h]                Base Address : 0000000000000000
[10A0h 4256 008h]              Address Length : 0000000000000000
[10A8h 4264 004h]                   Reserved2 : 00000000
[10ACh 4268 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[10B0h 4272 008h]                   Reserved3 : 0000000000000000

[10B8h 4280 001h]               Subtable Type : 01 [Memory Affinity]
[10B9h 4281 001h]                      Length : 28

[10BAh 4282 004h]            Proximity Domain : 00000000
[10BEh 4286 002h]                   Reserved1 : 0000
[10C0h 4288 008h]                Base Address : 0000000000000000
[10C8h 4296 008h]              Address Length : 0000000000000000
[10D0h 4304 004h]                   Reserved2 : 00000000
[10D4h 4308 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[10D8h 4312 008h]                   Reserved3 : 0000000000000000

[10E0h 4320 001h]               Subtable Type : 01 [Memory Affinity]
[10E1h 4321 001h]                      Length : 28

[10E2h 4322 004h]            Proximity Domain : 00000000
[10E6h 4326 002h]                   Reserved1 : 0000
[10E8h 4328 008h]                Base Address : 0000000000000000
[10F0h 4336 008h]              Address Length : 0000000000000000
[10F8h 4344 004h]                   Reserved2 : 00000000
[10FCh 4348 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[1100h 4352 008h]                   Reserved3 : 0000000000000000

[1108h 4360 001h]               Subtable Type : 01 [Memory Affinity]
[1109h 4361 001h]                      Length : 28

[110Ah 4362 004h]            Proximity Domain : 00000000
[110Eh 4366 002h]                   Reserved1 : 0000
[1110h 4368 008h]                Base Address : 0000000000000000
[1118h 4376 008h]              Address Length : 0000000000000000
[1120h 4384 004h]                   Reserved2 : 00000000
[1124h 4388 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[1128h 4392 008h]                   Reserved3 : 0000000000000000

[1130h 4400 001h]               Subtable Type : 01 [Memory Affinity]
[1131h 4401 001h]                      Length : 28

[1132h 4402 004h]            Proximity Domain : 00000000
[1136h 4406 002h]                   Reserved1 : 0000
[1138h 4408 008h]                Base Address : 0000000000000000
[1140h 4416 008h]              Address Length : 0000000000000000
[1148h 4424 004h]                   Reserved2 : 00000000
[114Ch 4428 004h]       Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[1150h 4432 008h]                   Reserved3 : 0000000000000000

Raw Table Data: Length 4440 (0x1158)

    0000: 53 52 41 54 58 11 00 00 03 89 41 4C 41 53 4B 41  // SRATX.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 01 00 00 00 00 00 00 00 00 00 00 00  // ... ............
    0030: 00 10 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 10 00 02 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0050: 00 10 00 04 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 00 10 00 06 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 10 00 08 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 10 00 10 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 10 00 12 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 10 00 14 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 10 00 16 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 10 00 18 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 10 01 20 01 00 00 00 00 00 00 00 00 00 00 00  // ... ............
    00E0: 00 10 01 22 01 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    00F0: 00 10 01 24 01 00 00 00 00 00 00 00 00 00 00 00  // ...$............
    0100: 00 10 01 26 01 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    0110: 00 10 01 28 01 00 00 00 00 00 00 00 00 00 00 00  // ...(............
    0120: 00 10 01 30 01 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    0130: 00 10 01 32 01 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    0140: 00 10 01 34 01 00 00 00 00 00 00 00 00 00 00 00  // ...4............
    0150: 00 10 01 36 01 00 00 00 00 00 00 00 00 00 00 00  // ...6............
    0160: 00 10 01 38 01 00 00 00 00 00 00 00 00 00 00 00  // ...8............
    0170: 00 10 00 01 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 10 00 03 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 10 00 05 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    01A0: 00 10 00 07 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 10 00 09 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 10 00 11 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 10 00 13 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    01E0: 00 10 00 15 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 10 00 17 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 10 00 19 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 10 01 21 01 00 00 00 00 00 00 00 00 00 00 00  // ...!............
    0220: 00 10 01 23 01 00 00 00 00 00 00 00 00 00 00 00  // ...#............
    0230: 00 10 01 25 01 00 00 00 00 00 00 00 00 00 00 00  // ...%............
    0240: 00 10 01 27 01 00 00 00 00 00 00 00 00 00 00 00  // ...'............
    0250: 00 10 01 29 01 00 00 00 00 00 00 00 00 00 00 00  // ...)............
    0260: 00 10 01 31 01 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    0270: 00 10 01 33 01 00 00 00 00 00 00 00 00 00 00 00  // ...3............
    0280: 00 10 01 35 01 00 00 00 00 00 00 00 00 00 00 00  // ...5............
    0290: 00 10 01 37 01 00 00 00 00 00 00 00 00 00 00 00  // ...7............
    02A0: 00 10 01 39 01 00 00 00 00 00 00 00 00 00 00 00  // ...9............
    02B0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02C0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02E0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0320: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0360: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0390: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03A0: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03D0: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03E0: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0410: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0420: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0450: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0460: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04A0: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04E0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0510: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0520: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0560: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0580: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0590: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05A0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05C0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05D0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05E0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0600: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0610: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0620: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0640: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0650: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0660: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0680: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0690: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06A0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06C0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06D0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06E0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0710: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0720: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0730: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0740: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0750: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0760: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0770: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0780: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07A0: 00 10 00 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07B0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07C0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07D0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07E0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07F0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0800: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0820: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0850: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0860: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0870: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0880: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0890: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08A0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08B0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08C0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08D0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08E0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08F0: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0900: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0910: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0920: 00 10 01 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0930: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0940: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0950: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0960: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0970: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0990: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09A0: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09D0: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09E0: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09F0: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A00: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A10: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A20: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A30: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A40: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A50: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A60: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A80: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A90: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AA0: 00 10 02 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AB0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AD0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AE0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B00: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B20: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B30: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B40: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B50: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B60: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B70: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B80: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B90: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BA0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BB0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BC0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BD0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BE0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BF0: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C00: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C10: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C20: 00 10 03 FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C30: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0C40: 00 00 00 80 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0C50: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0C60: 00 00 00 00 01 00 00 00 00 00 00 80 0F 00 00 00  // ................
    0C70: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C80: 01 28 00 00 00 00 00 00 00 00 00 80 10 00 00 00  // .(..............
    0C90: 00 00 00 00 04 00 00 00 00 00 00 00 01 00 00 00  // ................
    0CA0: 00 00 00 00 00 00 00 00 01 28 01 00 00 00 00 00  // .........(......
    0CB0: 00 00 00 80 14 00 00 00 00 00 00 00 10 00 00 00  // ................
    0CC0: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CD0: 01 28 01 00 00 00 00 00 00 00 00 80 24 00 00 00  // .(..........$...
    0CE0: 00 00 00 00 04 00 00 00 00 00 00 00 01 00 00 00  // ................
    0CF0: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D20: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0D30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D40: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D70: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D90: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DC0: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DE0: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0DF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E10: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E30: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E60: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0E70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E80: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EB0: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0ED0: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F00: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0F10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F20: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F50: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0F60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F70: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FA0: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FC0: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0FD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FF0: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    1000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1010: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    1020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1040: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    1050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1060: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    1070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1090: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    10A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    10B0: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    10C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    10D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    10E0: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    10F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1100: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    1110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1130: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    1140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1150: 00 00 00 00 00 00 00 00                          // ........


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "SpsNm   ", 0x00000002)
{
    External (_SB_.OSYS, UnknownObj)
    External (_SB_.PCI0.HEC2, DeviceObj)
    External (_SB_.PCI0.HECI, DeviceObj)
    External (_SB_.PRAD, UnknownObj)
    External (_SB_.SCK0.CP00, UnknownObj)
    External (_SB_.SCK0.CP01, UnknownObj)
    External (_SB_.SCK0.CP02, UnknownObj)
    External (_SB_.SCK0.CP03, UnknownObj)
    External (_SB_.SCK0.CP04, UnknownObj)
    External (_SB_.SCK0.CP05, UnknownObj)
    External (_SB_.SCK0.CP06, UnknownObj)
    External (_SB_.SCK0.CP07, UnknownObj)
    External (_SB_.SCK0.CP08, UnknownObj)
    External (_SB_.SCK0.CP09, UnknownObj)
    External (_SB_.SCK0.CP0A, UnknownObj)
    External (_SB_.SCK0.CP0B, UnknownObj)
    External (_SB_.SCK0.CP0C, UnknownObj)
    External (_SB_.SCK0.CP0D, UnknownObj)
    External (_SB_.SCK0.CP0E, UnknownObj)
    External (_SB_.SCK0.CP0F, UnknownObj)
    External (_SB_.SCK0.CP10, UnknownObj)
    External (_SB_.SCK0.CP11, UnknownObj)
    External (_SB_.SCK0.CP12, UnknownObj)
    External (_SB_.SCK0.CP13, UnknownObj)
    External (_SB_.SCK0.CP14, UnknownObj)
    External (_SB_.SCK0.CP15, UnknownObj)
    External (_SB_.SCK0.CP16, UnknownObj)
    External (_SB_.SCK0.CP17, UnknownObj)
    External (_SB_.SCK0.CP18, UnknownObj)
    External (_SB_.SCK0.CP19, UnknownObj)
    External (_SB_.SCK0.CP1A, UnknownObj)
    External (_SB_.SCK0.CP1B, UnknownObj)
    External (_SB_.SCK0.CP1C, UnknownObj)
    External (_SB_.SCK0.CP1D, UnknownObj)
    External (_SB_.SCK0.CP1E, UnknownObj)
    External (_SB_.SCK0.CP1F, UnknownObj)
    External (_SB_.SCK0.CP20, UnknownObj)
    External (_SB_.SCK0.CP21, UnknownObj)
    External (_SB_.SCK0.CP22, UnknownObj)
    External (_SB_.SCK0.CP23, UnknownObj)
    External (_SB_.SCK0.CP24, UnknownObj)
    External (_SB_.SCK0.CP25, UnknownObj)
    External (_SB_.SCK0.CP26, UnknownObj)
    External (_SB_.SCK0.CP27, UnknownObj)
    External (_SB_.SCK0.CP28, UnknownObj)
    External (_SB_.SCK0.CP29, UnknownObj)
    External (_SB_.SCK0.CP2A, UnknownObj)
    External (_SB_.SCK0.CP2B, UnknownObj)
    External (_SB_.SCK0.CP2C, UnknownObj)
    External (_SB_.SCK0.CP2D, UnknownObj)
    External (_SB_.SCK0.CP2E, UnknownObj)
    External (_SB_.SCK0.CP2F, UnknownObj)
    External (_SB_.SCK1.CP00, UnknownObj)
    External (_SB_.SCK1.CP01, UnknownObj)
    External (_SB_.SCK1.CP02, UnknownObj)
    External (_SB_.SCK1.CP03, UnknownObj)
    External (_SB_.SCK1.CP04, UnknownObj)
    External (_SB_.SCK1.CP05, UnknownObj)
    External (_SB_.SCK1.CP06, UnknownObj)
    External (_SB_.SCK1.CP07, UnknownObj)
    External (_SB_.SCK1.CP08, UnknownObj)
    External (_SB_.SCK1.CP09, UnknownObj)
    External (_SB_.SCK1.CP0A, UnknownObj)
    External (_SB_.SCK1.CP0B, UnknownObj)
    External (_SB_.SCK1.CP0C, UnknownObj)
    External (_SB_.SCK1.CP0D, UnknownObj)
    External (_SB_.SCK1.CP0E, UnknownObj)
    External (_SB_.SCK1.CP0F, UnknownObj)
    External (_SB_.SCK1.CP10, UnknownObj)
    External (_SB_.SCK1.CP11, UnknownObj)
    External (_SB_.SCK1.CP12, UnknownObj)
    External (_SB_.SCK1.CP13, UnknownObj)
    External (_SB_.SCK1.CP14, UnknownObj)
    External (_SB_.SCK1.CP15, UnknownObj)
    External (_SB_.SCK1.CP16, UnknownObj)
    External (_SB_.SCK1.CP17, UnknownObj)
    External (_SB_.SCK1.CP18, UnknownObj)
    External (_SB_.SCK1.CP19, UnknownObj)
    External (_SB_.SCK1.CP1A, UnknownObj)
    External (_SB_.SCK1.CP1B, UnknownObj)
    External (_SB_.SCK1.CP1C, UnknownObj)
    External (_SB_.SCK1.CP1D, UnknownObj)
    External (_SB_.SCK1.CP1E, UnknownObj)
    External (_SB_.SCK1.CP1F, UnknownObj)
    External (_SB_.SCK1.CP20, UnknownObj)
    External (_SB_.SCK1.CP21, UnknownObj)
    External (_SB_.SCK1.CP22, UnknownObj)
    External (_SB_.SCK1.CP23, UnknownObj)
    External (_SB_.SCK1.CP24, UnknownObj)
    External (_SB_.SCK1.CP25, UnknownObj)
    External (_SB_.SCK1.CP26, UnknownObj)
    External (_SB_.SCK1.CP27, UnknownObj)
    External (_SB_.SCK1.CP28, UnknownObj)
    External (_SB_.SCK1.CP29, UnknownObj)
    External (_SB_.SCK1.CP2A, UnknownObj)
    External (_SB_.SCK1.CP2B, UnknownObj)
    External (_SB_.SCK1.CP2C, UnknownObj)
    External (_SB_.SCK1.CP2D, UnknownObj)
    External (_SB_.SCK1.CP2E, UnknownObj)
    External (_SB_.SCK1.CP2F, UnknownObj)
    External (_SB_.SCK2.CP00, UnknownObj)
    External (_SB_.SCK2.CP01, UnknownObj)
    External (_SB_.SCK2.CP02, UnknownObj)
    External (_SB_.SCK2.CP03, UnknownObj)
    External (_SB_.SCK2.CP04, UnknownObj)
    External (_SB_.SCK2.CP05, UnknownObj)
    External (_SB_.SCK2.CP06, UnknownObj)
    External (_SB_.SCK2.CP07, UnknownObj)
    External (_SB_.SCK2.CP08, UnknownObj)
    External (_SB_.SCK2.CP09, UnknownObj)
    External (_SB_.SCK2.CP0A, UnknownObj)
    External (_SB_.SCK2.CP0B, UnknownObj)
    External (_SB_.SCK2.CP0C, UnknownObj)
    External (_SB_.SCK2.CP0D, UnknownObj)
    External (_SB_.SCK2.CP0E, UnknownObj)
    External (_SB_.SCK2.CP0F, UnknownObj)
    External (_SB_.SCK2.CP10, UnknownObj)
    External (_SB_.SCK2.CP11, UnknownObj)
    External (_SB_.SCK2.CP12, UnknownObj)
    External (_SB_.SCK2.CP13, UnknownObj)
    External (_SB_.SCK2.CP14, UnknownObj)
    External (_SB_.SCK2.CP15, UnknownObj)
    External (_SB_.SCK2.CP16, UnknownObj)
    External (_SB_.SCK2.CP17, UnknownObj)
    External (_SB_.SCK2.CP18, UnknownObj)
    External (_SB_.SCK2.CP19, UnknownObj)
    External (_SB_.SCK2.CP1A, UnknownObj)
    External (_SB_.SCK2.CP1B, UnknownObj)
    External (_SB_.SCK2.CP1C, UnknownObj)
    External (_SB_.SCK2.CP1D, UnknownObj)
    External (_SB_.SCK2.CP1E, UnknownObj)
    External (_SB_.SCK2.CP1F, UnknownObj)
    External (_SB_.SCK2.CP20, UnknownObj)
    External (_SB_.SCK2.CP21, UnknownObj)
    External (_SB_.SCK2.CP22, UnknownObj)
    External (_SB_.SCK2.CP23, UnknownObj)
    External (_SB_.SCK2.CP24, UnknownObj)
    External (_SB_.SCK2.CP25, UnknownObj)
    External (_SB_.SCK2.CP26, UnknownObj)
    External (_SB_.SCK2.CP27, UnknownObj)
    External (_SB_.SCK2.CP28, UnknownObj)
    External (_SB_.SCK2.CP29, UnknownObj)
    External (_SB_.SCK2.CP2A, UnknownObj)
    External (_SB_.SCK2.CP2B, UnknownObj)
    External (_SB_.SCK2.CP2C, UnknownObj)
    External (_SB_.SCK2.CP2D, UnknownObj)
    External (_SB_.SCK2.CP2E, UnknownObj)
    External (_SB_.SCK2.CP2F, UnknownObj)
    External (_SB_.SCK3.CP00, UnknownObj)
    External (_SB_.SCK3.CP01, UnknownObj)
    External (_SB_.SCK3.CP02, UnknownObj)
    External (_SB_.SCK3.CP03, UnknownObj)
    External (_SB_.SCK3.CP04, UnknownObj)
    External (_SB_.SCK3.CP05, UnknownObj)
    External (_SB_.SCK3.CP06, UnknownObj)
    External (_SB_.SCK3.CP07, UnknownObj)
    External (_SB_.SCK3.CP08, UnknownObj)
    External (_SB_.SCK3.CP09, UnknownObj)
    External (_SB_.SCK3.CP0A, UnknownObj)
    External (_SB_.SCK3.CP0B, UnknownObj)
    External (_SB_.SCK3.CP0C, UnknownObj)
    External (_SB_.SCK3.CP0D, UnknownObj)
    External (_SB_.SCK3.CP0E, UnknownObj)
    External (_SB_.SCK3.CP0F, UnknownObj)
    External (_SB_.SCK3.CP10, UnknownObj)
    External (_SB_.SCK3.CP11, UnknownObj)
    External (_SB_.SCK3.CP12, UnknownObj)
    External (_SB_.SCK3.CP13, UnknownObj)
    External (_SB_.SCK3.CP14, UnknownObj)
    External (_SB_.SCK3.CP15, UnknownObj)
    External (_SB_.SCK3.CP16, UnknownObj)
    External (_SB_.SCK3.CP17, UnknownObj)
    External (_SB_.SCK3.CP18, UnknownObj)
    External (_SB_.SCK3.CP19, UnknownObj)
    External (_SB_.SCK3.CP1A, UnknownObj)
    External (_SB_.SCK3.CP1B, UnknownObj)
    External (_SB_.SCK3.CP1C, UnknownObj)
    External (_SB_.SCK3.CP1D, UnknownObj)
    External (_SB_.SCK3.CP1E, UnknownObj)
    External (_SB_.SCK3.CP1F, UnknownObj)
    External (_SB_.SCK3.CP20, UnknownObj)
    External (_SB_.SCK3.CP21, UnknownObj)
    External (_SB_.SCK3.CP22, UnknownObj)
    External (_SB_.SCK3.CP23, UnknownObj)
    External (_SB_.SCK3.CP24, UnknownObj)
    External (_SB_.SCK3.CP25, UnknownObj)
    External (_SB_.SCK3.CP26, UnknownObj)
    External (_SB_.SCK3.CP27, UnknownObj)
    External (_SB_.SCK3.CP28, UnknownObj)
    External (_SB_.SCK3.CP29, UnknownObj)
    External (_SB_.SCK3.CP2A, UnknownObj)
    External (_SB_.SCK3.CP2B, UnknownObj)
    External (_SB_.SCK3.CP2C, UnknownObj)
    External (_SB_.SCK3.CP2D, UnknownObj)
    External (_SB_.SCK3.CP2E, UnknownObj)
    External (_SB_.SCK3.CP2F, UnknownObj)
    External (HWPE, IntObj)
    External (PETE, UnknownObj)
    External (PSLM, UnknownObj)
    External (PURA, UnknownObj)
    External (PURE, IntObj)
    External (TSLM, UnknownObj)

    Scope (\_SB.PCI0.HECI)
    {
        OperationRegion (MFS1, PCI_Config, 0x40, 0x04)
        Field (MFS1, DWordAcc, NoLock, Preserve)
        {
            MECS,   4, 
            RVD1,   12, 
            OPMD,   4, 
            RVD2,   12
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((MECS == 0x05))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        OperationRegion (H1CS, SystemMemory, 0x00000000F2505000, 0x10)
        Field (H1CS, DWordAcc, NoLock, Preserve)
        {
            CBWW,   32, 
            HIE,    1, 
            HIS,    1, 
            HIG,    1, 
            HRD,    1, 
            HRS,    1, 
            Offset (0x05), 
            HRP,    8, 
            HWP,    8, 
            HBD,    8, 
            CBRW,   32, 
            MIE,    1, 
            MIS,    1, 
            MIG,    1, 
            MRD,    1, 
            MRS,    1, 
            Offset (0x0D), 
            MRP,    8, 
            MWP,    8, 
            MBD,    8
        }
    }

    Scope (\_SB.PCI0.HEC2)
    {
        OperationRegion (NMFS, PCI_Config, 0x40, 0x04)
        Field (NMFS, DWordAcc, NoLock, Preserve)
        {
                ,   31, 
            NMEN,   1
        }

        OperationRegion (H2RP, PCI_Config, 0x60, 0x04)
        Field (H2RP, DWordAcc, NoLock, Preserve)
        {
            RPS0,   4, 
            RPS1,   4, 
            RPS2,   4, 
            RPS3,   4, 
            RPS4,   4, 
            RPS5,   4, 
            RPS6,   4, 
            RPS7,   4
        }

        OperationRegion (H2RT, PCI_Config, 0x64, 0x04)
        Field (H2RT, DWordAcc, NoLock, Preserve)
        {
            RTS0,   4, 
            RTS1,   4, 
            RTS2,   4, 
            RTS3,   4, 
            RTS4,   4, 
            RTS5,   4, 
            RTS6,   4, 
            RTS7,   4
        }

        OperationRegion (H2CP, PCI_Config, 0x70, 0x04)
        Field (H2CP, DWordAcc, NoLock, Preserve)
        {
            CPS0,   4, 
            CPS1,   4, 
            CPS2,   4, 
            CPS3,   4, 
            CPS4,   4, 
            CPS5,   4, 
            CPS6,   4, 
            CPS7,   4
        }

        OperationRegion (H2CT, PCI_Config, 0x74, 0x04)
        Field (H2CT, DWordAcc, NoLock, Preserve)
        {
            CTS0,   4, 
            CTS1,   4, 
            CTS2,   4, 
            CTS3,   4, 
            CTS4,   4, 
            CTS5,   4, 
            CTS6,   4, 
            CTS7,   4
        }

        OperationRegion (H2IM, PCI_Config, 0xA0, One)
        Field (H2IM, ByteAcc, NoLock, Preserve)
        {
            HIDM,   8
        }

        OperationRegion (H2CS, SystemMemory, 0x00000000F2504000, 0x10)
        Field (H2CS, DWordAcc, Lock, Preserve)
        {
            CBWW,   32, 
            HIE,    1, 
            HIS,    1, 
            HIG,    1, 
            HRD,    1, 
            HRS,    1, 
            Offset (0x05), 
            HRP,    8, 
            HWP,    8, 
            HBD,    8, 
            CBRW,   32, 
            MIE,    1, 
            MIS,    1, 
            MIG,    1, 
            MRD,    1, 
            MRS,    1, 
            Offset (0x0D), 
            MRP,    8, 
            MWP,    8, 
            MBD,    8
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (((HIDM != One) || !NMEN))
            {
                Return (Zero)
            }

            If ((\_SB.PCI0.HECI.MECS == 0x05))
            {
                Return (0x0B)
            }
            Else
            {
                Return (One)
            }
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            If (CondRefOf (\_OSI, Local0))
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    \PURE = One
                    LoadTable ("PRAD", "ALASKA", "A M I ", "", "", Zero)
                }
            }

            HWAK ()
        }

        Method (HWAK, 0, Serialized)
        {
            If ((HIDM == One))
            {
                HRD = One
                HIE = One
                HIG = One
            }
        }

        Method (HPTS, 0, Serialized)
        {
            If ((HIDM == One))
            {
                HIE = Zero
                HRD = Zero
                HIG = One
            }
        }

        Method (DCNF, 1, Serialized)
        {
            If ((HIDM == One))
            {
                CBWW = 0x80040011
                CBWW = Arg0
                HIG = One
            }
        }

        Method (H2RD, 0, Serialized)
        {
            If ((HIDM != One))
            {
                Return (0xFF)
            }

            If (MRS)
            {
                HRS = One
                HIG = One
            }
            ElseIf (MRD)
            {
                If (!HRD)
                {
                    HRS = Zero
                    HRD = One
                    HIG = One
                }

                If ((MWP != MRP))
                {
                    Local1 = CBRW /* \_SB_.PCI0.HEC2.CBRW */
                    Local0 = CBRW /* \_SB_.PCI0.HEC2.CBRW */
                    HIG = One
                    Local5 = (Local0 & 0xFF)
                    If ((Local5 == Zero))
                    {
                        If (\HWPE)
                        {
                            CBWW = Local1
                            CBWW = (Local0 | One)
                            HIG = One
                        }
                        Else
                        {
                            \PSLM [Zero] = RPS0 /* \_SB_.PCI0.HEC2.RPS0 */
                            \TSLM [Zero] = RTS0 /* \_SB_.PCI0.HEC2.RTS0 */
                            \PSLM [One] = RPS1 /* \_SB_.PCI0.HEC2.RPS1 */
                            \TSLM [One] = RTS1 /* \_SB_.PCI0.HEC2.RTS1 */
                            \PSLM [0x02] = RPS2 /* \_SB_.PCI0.HEC2.RPS2 */
                            \TSLM [0x02] = RTS2 /* \_SB_.PCI0.HEC2.RTS2 */
                            \PSLM [0x03] = RPS3 /* \_SB_.PCI0.HEC2.RPS3 */
                            \TSLM [0x03] = RTS3 /* \_SB_.PCI0.HEC2.RTS3 */
                            If ((\PETE & 0x80))
                            {
                                Notify (\_SB.SCK0.CP00, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP01, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP02, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP03, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP04, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP05, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP06, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP07, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP08, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP09, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP0A, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP0B, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP0C, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP0D, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP0E, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP0F, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP10, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP11, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP12, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP13, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP14, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP15, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP16, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP17, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP18, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP19, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP1A, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP1B, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP1C, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP1D, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP1E, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP1F, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP20, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP21, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP22, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP23, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP24, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP25, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP26, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP27, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP28, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP29, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP2A, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP2B, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP2C, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP2D, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP2E, 0x80) // Status Change
                                Notify (\_SB.SCK0.CP2F, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP00, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP01, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP02, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP03, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP04, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP05, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP06, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP07, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP08, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP09, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP0A, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP0B, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP0C, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP0D, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP0E, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP0F, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP10, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP11, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP12, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP13, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP14, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP15, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP16, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP17, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP18, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP19, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP1A, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP1B, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP1C, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP1D, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP1E, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP1F, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP20, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP21, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP22, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP23, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP24, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP25, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP26, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP27, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP28, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP29, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP2A, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP2B, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP2C, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP2D, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP2E, 0x80) // Status Change
                                Notify (\_SB.SCK1.CP2F, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP00, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP01, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP02, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP03, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP04, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP05, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP06, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP07, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP08, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP09, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP0A, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP0B, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP0C, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP0D, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP0E, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP0F, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP10, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP11, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP12, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP13, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP14, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP15, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP16, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP17, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP18, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP19, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP1A, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP1B, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP1C, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP1D, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP1E, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP1F, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP20, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP21, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP22, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP23, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP24, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP25, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP26, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP27, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP28, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP29, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP2A, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP2B, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP2C, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP2D, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP2E, 0x80) // Status Change
                                Notify (\_SB.SCK2.CP2F, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP00, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP01, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP02, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP03, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP04, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP05, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP06, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP07, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP08, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP09, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP0A, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP0B, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP0C, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP0D, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP0E, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP0F, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP10, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP11, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP12, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP13, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP14, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP15, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP16, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP17, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP18, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP19, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP1A, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP1B, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP1C, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP1D, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP1E, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP1F, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP20, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP21, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP22, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP23, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP24, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP25, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP26, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP27, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP28, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP29, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP2A, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP2B, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP2C, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP2D, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP2E, 0x80) // Status Change
                                Notify (\_SB.SCK3.CP2F, 0x80) // Status Change
                            }

                            If ((\PETE & 0x40))
                            {
                                Notify (\_SB.SCK0.CP00, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP01, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP02, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP03, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP04, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP05, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP06, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP07, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP08, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP09, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP0A, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP0B, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP0C, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP0D, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP0E, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP0F, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP10, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP11, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP12, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP13, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP14, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP15, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP16, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP17, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP18, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP19, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP1A, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP1B, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP1C, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP1D, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP1E, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP1F, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP20, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP21, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP22, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP23, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP24, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP25, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP26, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP27, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP28, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP29, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP2A, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP2B, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP2C, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP2D, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP2E, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK0.CP2F, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP00, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP01, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP02, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP03, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP04, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP05, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP06, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP07, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP08, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP09, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP0A, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP0B, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP0C, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP0D, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP0E, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP0F, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP10, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP11, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP12, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP13, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP14, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP15, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP16, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP17, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP18, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP19, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP1A, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP1B, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP1C, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP1D, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP1E, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP1F, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP20, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP21, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP22, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP23, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP24, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP25, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP26, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP27, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP28, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP29, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP2A, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP2B, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP2C, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP2D, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP2E, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK1.CP2F, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP00, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP01, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP02, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP03, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP04, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP05, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP06, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP07, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP08, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP09, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP0A, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP0B, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP0C, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP0D, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP0E, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP0F, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP10, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP11, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP12, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP13, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP14, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP15, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP16, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP17, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP18, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP19, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP1A, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP1B, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP1C, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP1D, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP1E, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP1F, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP20, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP21, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP22, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP23, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP24, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP25, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP26, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP27, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP28, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP29, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP2A, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP2B, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP2C, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP2D, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP2E, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK2.CP2F, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP00, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP01, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP02, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP03, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP04, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP05, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP06, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP07, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP08, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP09, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP0A, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP0B, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP0C, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP0D, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP0E, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP0F, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP10, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP11, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP12, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP13, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP14, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP15, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP16, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP17, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP18, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP19, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP1A, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP1B, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP1C, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP1D, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP1E, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP1F, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP20, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP21, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP22, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP23, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP24, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP25, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP26, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP27, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP28, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP29, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP2A, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP2B, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP2C, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP2D, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP2E, 0x82) // Device-Specific Change
                                Notify (\_SB.SCK3.CP2F, 0x82) // Device-Specific Change
                                CTS0 = DerefOf (\TSLM [Zero])
                                CTS1 = DerefOf (\TSLM [One])
                                CTS2 = DerefOf (\TSLM [0x02])
                                CTS3 = DerefOf (\TSLM [0x03])
                            }

                            If ((\PETE & 0x80))
                            {
                                CPS0 = DerefOf (\PSLM [Zero])
                                CPS1 = DerefOf (\PSLM [One])
                                CPS2 = DerefOf (\PSLM [0x02])
                                CPS3 = DerefOf (\PSLM [0x03])
                            }

                            CBWW = Local1
                            CBWW = (Local0 | (\PETE & 0xFF))
                            HIG = One
                        }
                    }
                    ElseIf ((Local5 == 0x03))
                    {
                        If (\PURE)
                        {
                            \PURA = Local0
                            Notify (\_SB.PRAD, 0x80) // Status Change
                        }
                        Else
                        {
                            DCNF (Local0)
                        }
                    }
                    ElseIf ((Local5 == 0x04))
                    {
                        PWR = (((Local0 >> 0x10) & 0xFFFF) * 0x03E8)
                        DCNF ((Local0 | 0x80))
                    }
                    ElseIf ((Local5 == 0x05))
                    {
                        PMAI = (((Local0 >> 0x10) & 0xFFFF) * 0x03E8)
                        DCNF ((Local0 | 0x80))
                        Notify (\_SB.PMT1, 0x84) // Reserved
                    }
                    ElseIf ((Local5 == 0x06))
                    {
                        HWL = (((Local0 >> 0x10) & 0xFFFF) * 0x03E8)
                        DCNF ((Local0 | 0x80))
                        Notify (\_SB.PMT1, 0x82) // Device-Specific Change
                    }
                    ElseIf ((Local5 == 0x0C))
                    {
                        DCNF (((PMAV << 0x10) | ((Local0 | 0x80) & 0xFFFF
                            )))
                        If ((One == PMAV))
                        {
                            If ((((Local0 >> 0x10) & 0xFF) == One))
                            {
                                \_SB.PCI0.HEC2.SSFW (Zero, 0x08, Zero, Zero)
                            }

                            Local2 = (HWL / 0x03E8)
                            \_SB.PCI0.HEC2.SSFW (Zero, 0x07, Local2, Zero)
                            Local2 = (PMAI / 0x03E8)
                            \_SB.PCI0.HEC2.SSFW (Zero, 0x0A, Local2, Zero)
                            Local2 = (PTPU / 0x03E8)
                            Local3 = (PTPL / 0x03E8)
                            \_SB.PCI0.HEC2.SSFW (One, 0x0B, Local2, Local3)
                        }
                    }
                    ElseIf (((Local5 == 0x88) | (Local5 == 0x0D)))
                    {
                        PMCP [Zero] = ((Local0 >> 0x18) & 0xFF)
                        PMCP [0x02] = ((Local0 >> 0x11) & One)
                        If ((((Local0 >> 0x10) & One) == One))
                        {
                            PMCP [0x08] = 0xFFFFFFFF
                        }
                        Else
                        {
                            PMCP [0x08] = Zero
                        }

                        PMCP [0x03] = CBRW /* \_SB_.PCI0.HEC2.CBRW */
                        PMCP [0x04] = CBRW /* \_SB_.PCI0.HEC2.CBRW */
                        PMCP [0x05] = CBRW /* \_SB_.PCI0.HEC2.CBRW */
                        PMCP [0x06] = CBRW /* \_SB_.PCI0.HEC2.CBRW */
                        PMCP [0x07] = CBRW /* \_SB_.PCI0.HEC2.CBRW */
                        PMCP [0x09] = CBRW /* \_SB_.PCI0.HEC2.CBRW */
                        PMCP [0x0A] = CBRW /* \_SB_.PCI0.HEC2.CBRW */
                        If ((Local5 == 0x0D))
                        {
                            DCNF (((Local0 | 0x80) & 0xFFFF))
                        }
                        Else
                        {
                            HIG = One
                        }

                        PMAV = One
                        Notify (\_SB.PMT1, 0x80) // Status Change
                    }
                    ElseIf ((Local5 == 0x09))
                    {
                        DCNF ((Local0 | 0x80))
                        Notify (\_SB.PMT1, 0x81) // Information Change
                    }
                    ElseIf ((Local5 == 0x87))
                    {
                        HLST = ((Local0 >> 0x08) & 0xFF)
                    }
                    ElseIf ((Local5 == 0x8A))
                    {
                        AIST = ((Local0 >> 0x08) & 0xFF)
                    }
                    ElseIf ((Local5 == 0x8B))
                    {
                        TPST = ((Local0 >> 0x08) & 0xFF)
                    }

                    Return (Local5)
                }
            }

            Return (0xFF)
        }

        Method (HSCI, 0, Serialized)
        {
            If (HIS)
            {
                HIS = One
                Local0 = Zero
                H2RD ()
            }

            HIE = One
        }

        Method (SSFW, 4, Serialized)
        {
            Local1 = HIE /* \_SB_.PCI0.HEC2.HIE_ */
            HIE = Zero
            If ((Arg0 == Zero))
            {
                CBWW = 0x80040011
                CBWW = ((Arg2 << 0x10) | (Arg1 & 0xFF))
            }
            ElseIf ((Arg0 == One))
            {
                CBWW = 0x80080011
                CBWW = (Arg1 & 0xFF)
                CBWW = ((Arg3 << 0x10) | (Arg2 & 0xFFFF))
            }

            HIG = One
            Local0 = Zero
            While ((Local0 != 0x0A))
            {
                If ((One == HIS))
                {
                    HIS = One
                    If ((H2RD () == (Arg1 | 0x80)))
                    {
                        Break
                    }
                }

                Local0 += One
                Sleep (0x64)
            }

            HIE = Local1
        }
    }

    Scope (\_SB)
    {
        Name (PWR, 0xFFFFFFFF)
        Name (PMAI, 0xFFFFFFFF)
        Name (HWL, 0xFFFFFFFF)
        Name (PTPU, Zero)
        Name (PTPL, Zero)
        Name (PMAV, Zero)
        Name (HLST, Zero)
        Name (AIST, Zero)
        Name (TPST, Zero)
        Name (PMCP, Package (0x0E)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0xFFFFFFFF, 
            Zero, 
            Zero, 
            0xFFFFFFFF, 
            Zero, 
            Zero, 
            Zero, 
            "Intel(R) Node Manager", 
            "", 
            "Meter measures total domain"
        })
        Device (PMT1)
        {
            Name (_HID, "ACPI000D" /* Power Meter Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\_SB.OSYS >= 0x0C))
                {
                    Return ((\_SB.PCI0.HEC2._STA () | 0x04))
                }
                Else
                {
                    Return (\_SB.PCI0.HEC2._STA ())
                }
            }

            Method (_PMC, 0, NotSerialized)  // _PMC: Power Meter Capabilities
            {
                If ((PMAV == Zero))
                {
                    \_SB.PCI0.HEC2.SSFW (Zero, 0x08, Zero, Zero)
                }

                Return (PMCP) /* \_SB_.PMCP */
            }

            Method (_PMD, 0, NotSerialized)  // _PMD: Power Metered Devices
            {
                Return (Package (0x01)
                {
                    \_SB
                })
            }

            Method (_PMM, 0, NotSerialized)  // _PMM: Power Meter Measurement
            {
                Return (PWR) /* \_SB_.PWR_ */
            }

            Method (_PAI, 1, NotSerialized)  // _PAI: Power Averaging Interval
            {
                Local0 = (Arg0 / 0x03E8)
                AIST = 0x02
                \_SB.PCI0.HEC2.SSFW (Zero, 0x0A, Local0, Zero)
                If (((AIST & 0xFF) == Zero))
                {
                    PMAI = Arg0
                    Notify (\_SB.PMT1, 0x84) // Reserved
                }

                Return (AIST) /* \_SB_.AIST */
            }

            Method (_GAI, 0, NotSerialized)  // _GAI: Get Averaging Interval
            {
                Return (PMAI) /* \_SB_.PMAI */
            }

            Method (_PTP, 2, NotSerialized)  // _PTP: Power Trip Points
            {
                Local0 = (Arg0 / 0x03E8)
                Local1 = (Arg1 + 0x01F4)
                Local1 = (Arg1 / 0x03E8)
                TPST = 0x02
                \_SB.PCI0.HEC2.SSFW (One, 0x0B, Local0, Local1)
                If (((TPST & 0xFF) == Zero))
                {
                    PTPU = Arg0
                    PTPL = Arg1
                }

                Return (TPST) /* \_SB_.TPST */
            }

            Method (_GHL, 0, NotSerialized)  // _GHL: Get Hardware Limit
            {
                Return (HWL) /* \_SB_.HWL_ */
            }

            Method (_SHL, 1, NotSerialized)  // _SHL: Set Hardware Limit
            {
                Local0 = (Arg0 / 0x03E8)
                HLST = 0x02
                \_SB.PCI0.HEC2.SSFW (Zero, 0x07, Local0, Zero)
                If (((HLST & 0xFF) == Zero))
                {
                    HWL = Arg0
                    Notify (\_SB.PMT1, 0x83) // Device-Specific Change
                }

                Return (HLST) /* \_SB_.HLST */
            }
        }
    }

    Scope (\_GPE)
    {
        Method (_L24, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.HEC2.HSCI ()
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "SpsNvs  ", 0x00000002)
{
    Scope (\)
    {
        Name (PURA, Zero)
        Name (PURB, Zero)
        Name (PURE, Zero)
        OperationRegion (MEVS, SystemMemory, 0x79782000, 0x04)
        Field (MEVS, AnyAcc, Lock, Preserve)
        {
            THNU,   8, 
            H1UI,   8, 
            H2UI,   8, 
            OSLD,   8
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "PmMgt", 0x00000001)
{
    External (_SB_.SCK0.CP00, DeviceObj)
    External (_SB_.SCK0.CP01, DeviceObj)
    External (_SB_.SCK0.CP02, DeviceObj)
    External (_SB_.SCK0.CP03, DeviceObj)
    External (_SB_.SCK0.CP04, DeviceObj)
    External (_SB_.SCK0.CP05, DeviceObj)
    External (_SB_.SCK0.CP06, DeviceObj)
    External (_SB_.SCK0.CP07, DeviceObj)
    External (_SB_.SCK0.CP08, DeviceObj)
    External (_SB_.SCK0.CP09, DeviceObj)
    External (_SB_.SCK0.CP0A, DeviceObj)
    External (_SB_.SCK0.CP0B, DeviceObj)
    External (_SB_.SCK0.CP0C, DeviceObj)
    External (_SB_.SCK0.CP0D, DeviceObj)
    External (_SB_.SCK0.CP0E, DeviceObj)
    External (_SB_.SCK0.CP0F, DeviceObj)
    External (_SB_.SCK0.CP10, DeviceObj)
    External (_SB_.SCK0.CP11, DeviceObj)
    External (_SB_.SCK0.CP12, DeviceObj)
    External (_SB_.SCK0.CP13, DeviceObj)
    External (_SB_.SCK0.CP14, DeviceObj)
    External (_SB_.SCK0.CP15, DeviceObj)
    External (_SB_.SCK0.CP16, DeviceObj)
    External (_SB_.SCK0.CP17, DeviceObj)
    External (_SB_.SCK0.CP18, DeviceObj)
    External (_SB_.SCK0.CP19, DeviceObj)
    External (_SB_.SCK0.CP1A, DeviceObj)
    External (_SB_.SCK0.CP1B, DeviceObj)
    External (_SB_.SCK0.CP1C, DeviceObj)
    External (_SB_.SCK0.CP1D, DeviceObj)
    External (_SB_.SCK0.CP1E, DeviceObj)
    External (_SB_.SCK0.CP1F, DeviceObj)
    External (_SB_.SCK0.CP20, DeviceObj)
    External (_SB_.SCK0.CP21, DeviceObj)
    External (_SB_.SCK0.CP22, DeviceObj)
    External (_SB_.SCK0.CP23, DeviceObj)
    External (_SB_.SCK0.CP24, DeviceObj)
    External (_SB_.SCK0.CP25, DeviceObj)
    External (_SB_.SCK0.CP26, DeviceObj)
    External (_SB_.SCK0.CP27, DeviceObj)
    External (_SB_.SCK0.CP28, DeviceObj)
    External (_SB_.SCK0.CP29, DeviceObj)
    External (_SB_.SCK0.CP2A, DeviceObj)
    External (_SB_.SCK0.CP2B, DeviceObj)
    External (_SB_.SCK0.CP2C, DeviceObj)
    External (_SB_.SCK0.CP2D, DeviceObj)
    External (_SB_.SCK0.CP2E, DeviceObj)
    External (_SB_.SCK0.CP2F, DeviceObj)
    External (_SB_.SCK1.CP00, DeviceObj)
    External (_SB_.SCK1.CP01, DeviceObj)
    External (_SB_.SCK1.CP02, DeviceObj)
    External (_SB_.SCK1.CP03, DeviceObj)
    External (_SB_.SCK1.CP04, DeviceObj)
    External (_SB_.SCK1.CP05, DeviceObj)
    External (_SB_.SCK1.CP06, DeviceObj)
    External (_SB_.SCK1.CP07, DeviceObj)
    External (_SB_.SCK1.CP08, DeviceObj)
    External (_SB_.SCK1.CP09, DeviceObj)
    External (_SB_.SCK1.CP0A, DeviceObj)
    External (_SB_.SCK1.CP0B, DeviceObj)
    External (_SB_.SCK1.CP0C, DeviceObj)
    External (_SB_.SCK1.CP0D, DeviceObj)
    External (_SB_.SCK1.CP0E, DeviceObj)
    External (_SB_.SCK1.CP0F, DeviceObj)
    External (_SB_.SCK1.CP10, DeviceObj)
    External (_SB_.SCK1.CP11, DeviceObj)
    External (_SB_.SCK1.CP12, DeviceObj)
    External (_SB_.SCK1.CP13, DeviceObj)
    External (_SB_.SCK1.CP14, DeviceObj)
    External (_SB_.SCK1.CP15, DeviceObj)
    External (_SB_.SCK1.CP16, DeviceObj)
    External (_SB_.SCK1.CP17, DeviceObj)
    External (_SB_.SCK1.CP18, DeviceObj)
    External (_SB_.SCK1.CP19, DeviceObj)
    External (_SB_.SCK1.CP1A, DeviceObj)
    External (_SB_.SCK1.CP1B, DeviceObj)
    External (_SB_.SCK1.CP1C, DeviceObj)
    External (_SB_.SCK1.CP1D, DeviceObj)
    External (_SB_.SCK1.CP1E, DeviceObj)
    External (_SB_.SCK1.CP1F, DeviceObj)
    External (_SB_.SCK1.CP20, DeviceObj)
    External (_SB_.SCK1.CP21, DeviceObj)
    External (_SB_.SCK1.CP22, DeviceObj)
    External (_SB_.SCK1.CP23, DeviceObj)
    External (_SB_.SCK1.CP24, DeviceObj)
    External (_SB_.SCK1.CP25, DeviceObj)
    External (_SB_.SCK1.CP26, DeviceObj)
    External (_SB_.SCK1.CP27, DeviceObj)
    External (_SB_.SCK1.CP28, DeviceObj)
    External (_SB_.SCK1.CP29, DeviceObj)
    External (_SB_.SCK1.CP2A, DeviceObj)
    External (_SB_.SCK1.CP2B, DeviceObj)
    External (_SB_.SCK1.CP2C, DeviceObj)
    External (_SB_.SCK1.CP2D, DeviceObj)
    External (_SB_.SCK1.CP2E, DeviceObj)
    External (_SB_.SCK1.CP2F, DeviceObj)
    External (_SB_.SCK2.CP00, DeviceObj)
    External (_SB_.SCK2.CP01, DeviceObj)
    External (_SB_.SCK2.CP02, DeviceObj)
    External (_SB_.SCK2.CP03, DeviceObj)
    External (_SB_.SCK2.CP04, DeviceObj)
    External (_SB_.SCK2.CP05, DeviceObj)
    External (_SB_.SCK2.CP06, DeviceObj)
    External (_SB_.SCK2.CP07, DeviceObj)
    External (_SB_.SCK2.CP08, DeviceObj)
    External (_SB_.SCK2.CP09, DeviceObj)
    External (_SB_.SCK2.CP0A, DeviceObj)
    External (_SB_.SCK2.CP0B, DeviceObj)
    External (_SB_.SCK2.CP0C, DeviceObj)
    External (_SB_.SCK2.CP0D, DeviceObj)
    External (_SB_.SCK2.CP0E, DeviceObj)
    External (_SB_.SCK2.CP0F, DeviceObj)
    External (_SB_.SCK2.CP10, DeviceObj)
    External (_SB_.SCK2.CP11, DeviceObj)
    External (_SB_.SCK2.CP12, DeviceObj)
    External (_SB_.SCK2.CP13, DeviceObj)
    External (_SB_.SCK2.CP14, DeviceObj)
    External (_SB_.SCK2.CP15, DeviceObj)
    External (_SB_.SCK2.CP16, DeviceObj)
    External (_SB_.SCK2.CP17, DeviceObj)
    External (_SB_.SCK2.CP18, DeviceObj)
    External (_SB_.SCK2.CP19, DeviceObj)
    External (_SB_.SCK2.CP1A, DeviceObj)
    External (_SB_.SCK2.CP1B, DeviceObj)
    External (_SB_.SCK2.CP1C, DeviceObj)
    External (_SB_.SCK2.CP1D, DeviceObj)
    External (_SB_.SCK2.CP1E, DeviceObj)
    External (_SB_.SCK2.CP1F, DeviceObj)
    External (_SB_.SCK2.CP20, DeviceObj)
    External (_SB_.SCK2.CP21, DeviceObj)
    External (_SB_.SCK2.CP22, DeviceObj)
    External (_SB_.SCK2.CP23, DeviceObj)
    External (_SB_.SCK2.CP24, DeviceObj)
    External (_SB_.SCK2.CP25, DeviceObj)
    External (_SB_.SCK2.CP26, DeviceObj)
    External (_SB_.SCK2.CP27, DeviceObj)
    External (_SB_.SCK2.CP28, DeviceObj)
    External (_SB_.SCK2.CP29, DeviceObj)
    External (_SB_.SCK2.CP2A, DeviceObj)
    External (_SB_.SCK2.CP2B, DeviceObj)
    External (_SB_.SCK2.CP2C, DeviceObj)
    External (_SB_.SCK2.CP2D, DeviceObj)
    External (_SB_.SCK2.CP2E, DeviceObj)
    External (_SB_.SCK2.CP2F, DeviceObj)
    External (_SB_.SCK3.CP00, DeviceObj)
    External (_SB_.SCK3.CP01, DeviceObj)
    External (_SB_.SCK3.CP02, DeviceObj)
    External (_SB_.SCK3.CP03, DeviceObj)
    External (_SB_.SCK3.CP04, DeviceObj)
    External (_SB_.SCK3.CP05, DeviceObj)
    External (_SB_.SCK3.CP06, DeviceObj)
    External (_SB_.SCK3.CP07, DeviceObj)
    External (_SB_.SCK3.CP08, DeviceObj)
    External (_SB_.SCK3.CP09, DeviceObj)
    External (_SB_.SCK3.CP0A, DeviceObj)
    External (_SB_.SCK3.CP0B, DeviceObj)
    External (_SB_.SCK3.CP0C, DeviceObj)
    External (_SB_.SCK3.CP0D, DeviceObj)
    External (_SB_.SCK3.CP0E, DeviceObj)
    External (_SB_.SCK3.CP0F, DeviceObj)
    External (_SB_.SCK3.CP10, DeviceObj)
    External (_SB_.SCK3.CP11, DeviceObj)
    External (_SB_.SCK3.CP12, DeviceObj)
    External (_SB_.SCK3.CP13, DeviceObj)
    External (_SB_.SCK3.CP14, DeviceObj)
    External (_SB_.SCK3.CP15, DeviceObj)
    External (_SB_.SCK3.CP16, DeviceObj)
    External (_SB_.SCK3.CP17, DeviceObj)
    External (_SB_.SCK3.CP18, DeviceObj)
    External (_SB_.SCK3.CP19, DeviceObj)
    External (_SB_.SCK3.CP1A, DeviceObj)
    External (_SB_.SCK3.CP1B, DeviceObj)
    External (_SB_.SCK3.CP1C, DeviceObj)
    External (_SB_.SCK3.CP1D, DeviceObj)
    External (_SB_.SCK3.CP1E, DeviceObj)
    External (_SB_.SCK3.CP1F, DeviceObj)
    External (_SB_.SCK3.CP20, DeviceObj)
    External (_SB_.SCK3.CP21, DeviceObj)
    External (_SB_.SCK3.CP22, DeviceObj)
    External (_SB_.SCK3.CP23, DeviceObj)
    External (_SB_.SCK3.CP24, DeviceObj)
    External (_SB_.SCK3.CP25, DeviceObj)
    External (_SB_.SCK3.CP26, DeviceObj)
    External (_SB_.SCK3.CP27, DeviceObj)
    External (_SB_.SCK3.CP28, DeviceObj)
    External (_SB_.SCK3.CP29, DeviceObj)
    External (_SB_.SCK3.CP2A, DeviceObj)
    External (_SB_.SCK3.CP2B, DeviceObj)
    External (_SB_.SCK3.CP2C, DeviceObj)
    External (_SB_.SCK3.CP2D, DeviceObj)
    External (_SB_.SCK3.CP2E, DeviceObj)
    External (_SB_.SCK3.CP2F, DeviceObj)
    External (ACEN, UnknownObj)
    External (HWEN, UnknownObj)
    External (MWOS, UnknownObj)
    External (PETE, UnknownObj)
    External (PSEN, IntObj)
    External (PSLM, UnknownObj)
    External (SCK0.CP00, DeviceObj)
    External (SCK0.CP01, DeviceObj)
    External (SCK0.CP02, DeviceObj)
    External (SCK0.CP03, DeviceObj)
    External (SCK0.CP04, DeviceObj)
    External (SCK0.CP05, DeviceObj)
    External (SCK0.CP06, DeviceObj)
    External (SCK0.CP07, DeviceObj)
    External (SCK0.CP08, DeviceObj)
    External (SCK0.CP09, DeviceObj)
    External (SCK0.CP0A, DeviceObj)
    External (SCK0.CP0B, DeviceObj)
    External (SCK0.CP0C, DeviceObj)
    External (SCK0.CP0D, DeviceObj)
    External (SCK0.CP0E, DeviceObj)
    External (SCK0.CP0F, DeviceObj)
    External (SCK0.CP10, DeviceObj)
    External (SCK0.CP11, DeviceObj)
    External (SCK0.CP12, DeviceObj)
    External (SCK0.CP13, DeviceObj)
    External (SCK0.CP14, DeviceObj)
    External (SCK0.CP15, DeviceObj)
    External (SCK0.CP16, DeviceObj)
    External (SCK0.CP17, DeviceObj)
    External (SCK0.CP18, DeviceObj)
    External (SCK0.CP19, DeviceObj)
    External (SCK0.CP1A, DeviceObj)
    External (SCK0.CP1B, DeviceObj)
    External (SCK0.CP1C, DeviceObj)
    External (SCK0.CP1D, DeviceObj)
    External (SCK0.CP1E, DeviceObj)
    External (SCK0.CP1F, DeviceObj)
    External (SCK0.CP20, DeviceObj)
    External (SCK0.CP21, DeviceObj)
    External (SCK0.CP22, DeviceObj)
    External (SCK0.CP23, DeviceObj)
    External (SCK0.CP24, DeviceObj)
    External (SCK0.CP25, DeviceObj)
    External (SCK0.CP26, DeviceObj)
    External (SCK0.CP27, DeviceObj)
    External (SCK0.CP28, DeviceObj)
    External (SCK0.CP29, DeviceObj)
    External (SCK0.CP2A, DeviceObj)
    External (SCK0.CP2B, DeviceObj)
    External (SCK0.CP2C, DeviceObj)
    External (SCK0.CP2D, DeviceObj)
    External (SCK0.CP2E, DeviceObj)
    External (SCK0.CP2F, DeviceObj)
    External (SCK1.CP00, DeviceObj)
    External (SCK1.CP01, DeviceObj)
    External (SCK1.CP02, DeviceObj)
    External (SCK1.CP03, DeviceObj)
    External (SCK1.CP04, DeviceObj)
    External (SCK1.CP05, DeviceObj)
    External (SCK1.CP06, DeviceObj)
    External (SCK1.CP07, DeviceObj)
    External (SCK1.CP08, DeviceObj)
    External (SCK1.CP09, DeviceObj)
    External (SCK1.CP0A, DeviceObj)
    External (SCK1.CP0B, DeviceObj)
    External (SCK1.CP0C, DeviceObj)
    External (SCK1.CP0D, DeviceObj)
    External (SCK1.CP0E, DeviceObj)
    External (SCK1.CP0F, DeviceObj)
    External (SCK1.CP10, DeviceObj)
    External (SCK1.CP11, DeviceObj)
    External (SCK1.CP12, DeviceObj)
    External (SCK1.CP13, DeviceObj)
    External (SCK1.CP14, DeviceObj)
    External (SCK1.CP15, DeviceObj)
    External (SCK1.CP16, DeviceObj)
    External (SCK1.CP17, DeviceObj)
    External (SCK1.CP18, DeviceObj)
    External (SCK1.CP19, DeviceObj)
    External (SCK1.CP1A, DeviceObj)
    External (SCK1.CP1B, DeviceObj)
    External (SCK1.CP1C, DeviceObj)
    External (SCK1.CP1D, DeviceObj)
    External (SCK1.CP1E, DeviceObj)
    External (SCK1.CP1F, DeviceObj)
    External (SCK1.CP20, DeviceObj)
    External (SCK1.CP21, DeviceObj)
    External (SCK1.CP22, DeviceObj)
    External (SCK1.CP23, DeviceObj)
    External (SCK1.CP24, DeviceObj)
    External (SCK1.CP25, DeviceObj)
    External (SCK1.CP26, DeviceObj)
    External (SCK1.CP27, DeviceObj)
    External (SCK1.CP28, DeviceObj)
    External (SCK1.CP29, DeviceObj)
    External (SCK1.CP2A, DeviceObj)
    External (SCK1.CP2B, DeviceObj)
    External (SCK1.CP2C, DeviceObj)
    External (SCK1.CP2D, DeviceObj)
    External (SCK1.CP2E, DeviceObj)
    External (SCK1.CP2F, DeviceObj)
    External (SCK2.CP00, DeviceObj)
    External (SCK2.CP01, DeviceObj)
    External (SCK2.CP02, DeviceObj)
    External (SCK2.CP03, DeviceObj)
    External (SCK2.CP04, DeviceObj)
    External (SCK2.CP05, DeviceObj)
    External (SCK2.CP06, DeviceObj)
    External (SCK2.CP07, DeviceObj)
    External (SCK2.CP08, DeviceObj)
    External (SCK2.CP09, DeviceObj)
    External (SCK2.CP0A, DeviceObj)
    External (SCK2.CP0B, DeviceObj)
    External (SCK2.CP0C, DeviceObj)
    External (SCK2.CP0D, DeviceObj)
    External (SCK2.CP0E, DeviceObj)
    External (SCK2.CP0F, DeviceObj)
    External (SCK2.CP10, DeviceObj)
    External (SCK2.CP11, DeviceObj)
    External (SCK2.CP12, DeviceObj)
    External (SCK2.CP13, DeviceObj)
    External (SCK2.CP14, DeviceObj)
    External (SCK2.CP15, DeviceObj)
    External (SCK2.CP16, DeviceObj)
    External (SCK2.CP17, DeviceObj)
    External (SCK2.CP18, DeviceObj)
    External (SCK2.CP19, DeviceObj)
    External (SCK2.CP1A, DeviceObj)
    External (SCK2.CP1B, DeviceObj)
    External (SCK2.CP1C, DeviceObj)
    External (SCK2.CP1D, DeviceObj)
    External (SCK2.CP1E, DeviceObj)
    External (SCK2.CP1F, DeviceObj)
    External (SCK2.CP20, DeviceObj)
    External (SCK2.CP21, DeviceObj)
    External (SCK2.CP22, DeviceObj)
    External (SCK2.CP23, DeviceObj)
    External (SCK2.CP24, DeviceObj)
    External (SCK2.CP25, DeviceObj)
    External (SCK2.CP26, DeviceObj)
    External (SCK2.CP27, DeviceObj)
    External (SCK2.CP28, DeviceObj)
    External (SCK2.CP29, DeviceObj)
    External (SCK2.CP2A, DeviceObj)
    External (SCK2.CP2B, DeviceObj)
    External (SCK2.CP2C, DeviceObj)
    External (SCK2.CP2D, DeviceObj)
    External (SCK2.CP2E, DeviceObj)
    External (SCK2.CP2F, DeviceObj)
    External (SCK3.CP00, DeviceObj)
    External (SCK3.CP01, DeviceObj)
    External (SCK3.CP02, DeviceObj)
    External (SCK3.CP03, DeviceObj)
    External (SCK3.CP04, DeviceObj)
    External (SCK3.CP05, DeviceObj)
    External (SCK3.CP06, DeviceObj)
    External (SCK3.CP07, DeviceObj)
    External (SCK3.CP08, DeviceObj)
    External (SCK3.CP09, DeviceObj)
    External (SCK3.CP0A, DeviceObj)
    External (SCK3.CP0B, DeviceObj)
    External (SCK3.CP0C, DeviceObj)
    External (SCK3.CP0D, DeviceObj)
    External (SCK3.CP0E, DeviceObj)
    External (SCK3.CP0F, DeviceObj)
    External (SCK3.CP10, DeviceObj)
    External (SCK3.CP11, DeviceObj)
    External (SCK3.CP12, DeviceObj)
    External (SCK3.CP13, DeviceObj)
    External (SCK3.CP14, DeviceObj)
    External (SCK3.CP15, DeviceObj)
    External (SCK3.CP16, DeviceObj)
    External (SCK3.CP17, DeviceObj)
    External (SCK3.CP18, DeviceObj)
    External (SCK3.CP19, DeviceObj)
    External (SCK3.CP1A, DeviceObj)
    External (SCK3.CP1B, DeviceObj)
    External (SCK3.CP1C, DeviceObj)
    External (SCK3.CP1D, DeviceObj)
    External (SCK3.CP1E, DeviceObj)
    External (SCK3.CP1F, DeviceObj)
    External (SCK3.CP20, DeviceObj)
    External (SCK3.CP21, DeviceObj)
    External (SCK3.CP22, DeviceObj)
    External (SCK3.CP23, DeviceObj)
    External (SCK3.CP24, DeviceObj)
    External (SCK3.CP25, DeviceObj)
    External (SCK3.CP26, DeviceObj)
    External (SCK3.CP27, DeviceObj)
    External (SCK3.CP28, DeviceObj)
    External (SCK3.CP29, DeviceObj)
    External (SCK3.CP2A, DeviceObj)
    External (SCK3.CP2B, DeviceObj)
    External (SCK3.CP2C, DeviceObj)
    External (SCK3.CP2D, DeviceObj)
    External (SCK3.CP2E, DeviceObj)
    External (SCK3.CP2F, DeviceObj)
    External (TSEN, UnknownObj)
    External (TSLM, UnknownObj)

    Scope (\_SB)
    {
        Name (HWOB, 0x00)
        Name (TYPE, 0xFFFFFFFF)
        Name (HWAL, 0x00)
        Name (ZPSS, Package (0x01)
        {
            Package (0x06)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (PSS0, Package (0x0D)
        {
            Package (0x06)
            {
                0x08FD, 
                0x00019A28, 
                0x000A, 
                0x000A, 
                0x1E00, 
                0x1E00
            }, 

            Package (0x06)
            {
                0x08FC, 
                0x00019A28, 
                0x000A, 
                0x000A, 
                0x1700, 
                0x1700
            }, 

            Package (0x06)
            {
                0x0898, 
                0x00018139, 
                0x000A, 
                0x000A, 
                0x1600, 
                0x1600
            }, 

            Package (0x06)
            {
                0x0834, 
                0x00016CCC, 
                0x000A, 
                0x000A, 
                0x1500, 
                0x1500
            }, 

            Package (0x06)
            {
                0x07D0, 
                0x000154CE, 
                0x000A, 
                0x000A, 
                0x1400, 
                0x1400
            }, 

            Package (0x06)
            {
                0x076C, 
                0x00014135, 
                0x000A, 
                0x000A, 
                0x1300, 
                0x1300
            }, 

            Package (0x06)
            {
                0x0708, 
                0x00012DFF, 
                0x000A, 
                0x000A, 
                0x1200, 
                0x1200
            }, 

            Package (0x06)
            {
                0x06A4, 
                0x00011757, 
                0x000A, 
                0x000A, 
                0x1100, 
                0x1100
            }, 

            Package (0x06)
            {
                0x0640, 
                0x000104EF, 
                0x000A, 
                0x000A, 
                0x1000, 
                0x1000
            }, 

            Package (0x06)
            {
                0x05DC, 
                0x0000F2E9, 
                0x000A, 
                0x000A, 
                0x0F00, 
                0x0F00
            }, 

            Package (0x06)
            {
                0x0578, 
                0x0000DD8F, 
                0x000A, 
                0x000A, 
                0x0E00, 
                0x0E00
            }, 

            Package (0x06)
            {
                0x0514, 
                0x0000CC52, 
                0x000A, 
                0x000A, 
                0x0D00, 
                0x0D00
            }, 

            Package (0x06)
            {
                0x04B0, 
                0x0000BB73, 
                0x000A, 
                0x000A, 
                0x0C00, 
                0x0C00
            }
        })
        Name (PSS1, Package (0x0D)
        {
            Package (0x06)
            {
                0x08FD, 
                0x00019A28, 
                0x000A, 
                0x000A, 
                0x1E00, 
                0x1E00
            }, 

            Package (0x06)
            {
                0x08FC, 
                0x00019A28, 
                0x000A, 
                0x000A, 
                0x1700, 
                0x1700
            }, 

            Package (0x06)
            {
                0x0898, 
                0x00018139, 
                0x000A, 
                0x000A, 
                0x1600, 
                0x1600
            }, 

            Package (0x06)
            {
                0x0834, 
                0x00016CCC, 
                0x000A, 
                0x000A, 
                0x1500, 
                0x1500
            }, 

            Package (0x06)
            {
                0x07D0, 
                0x000154CE, 
                0x000A, 
                0x000A, 
                0x1400, 
                0x1400
            }, 

            Package (0x06)
            {
                0x076C, 
                0x00014135, 
                0x000A, 
                0x000A, 
                0x1300, 
                0x1300
            }, 

            Package (0x06)
            {
                0x0708, 
                0x00012DFF, 
                0x000A, 
                0x000A, 
                0x1200, 
                0x1200
            }, 

            Package (0x06)
            {
                0x06A4, 
                0x00011757, 
                0x000A, 
                0x000A, 
                0x1100, 
                0x1100
            }, 

            Package (0x06)
            {
                0x0640, 
                0x000104EF, 
                0x000A, 
                0x000A, 
                0x1000, 
                0x1000
            }, 

            Package (0x06)
            {
                0x05DC, 
                0x0000F2E9, 
                0x000A, 
                0x000A, 
                0x0F00, 
                0x0F00
            }, 

            Package (0x06)
            {
                0x0578, 
                0x0000DD8F, 
                0x000A, 
                0x000A, 
                0x0E00, 
                0x0E00
            }, 

            Package (0x06)
            {
                0x0514, 
                0x0000CC52, 
                0x000A, 
                0x000A, 
                0x0D00, 
                0x0D00
            }, 

            Package (0x06)
            {
                0x04B0, 
                0x0000BB73, 
                0x000A, 
                0x000A, 
                0x0C00, 
                0x0C00
            }
        })
        Name (PSS2, Package (0x0D)
        {
            Package (0x06)
            {
                0x08FD, 
                0x00019A28, 
                0x000A, 
                0x000A, 
                0x1E00, 
                0x1E00
            }, 

            Package (0x06)
            {
                0x08FC, 
                0x00019A28, 
                0x000A, 
                0x000A, 
                0x1700, 
                0x1700
            }, 

            Package (0x06)
            {
                0x0898, 
                0x00018139, 
                0x000A, 
                0x000A, 
                0x1600, 
                0x1600
            }, 

            Package (0x06)
            {
                0x0834, 
                0x00016CCC, 
                0x000A, 
                0x000A, 
                0x1500, 
                0x1500
            }, 

            Package (0x06)
            {
                0x07D0, 
                0x000154CE, 
                0x000A, 
                0x000A, 
                0x1400, 
                0x1400
            }, 

            Package (0x06)
            {
                0x076C, 
                0x00014135, 
                0x000A, 
                0x000A, 
                0x1300, 
                0x1300
            }, 

            Package (0x06)
            {
                0x0708, 
                0x00012DFF, 
                0x000A, 
                0x000A, 
                0x1200, 
                0x1200
            }, 

            Package (0x06)
            {
                0x06A4, 
                0x00011757, 
                0x000A, 
                0x000A, 
                0x1100, 
                0x1100
            }, 

            Package (0x06)
            {
                0x0640, 
                0x000104EF, 
                0x000A, 
                0x000A, 
                0x1000, 
                0x1000
            }, 

            Package (0x06)
            {
                0x05DC, 
                0x0000F2E9, 
                0x000A, 
                0x000A, 
                0x0F00, 
                0x0F00
            }, 

            Package (0x06)
            {
                0x0578, 
                0x0000DD8F, 
                0x000A, 
                0x000A, 
                0x0E00, 
                0x0E00
            }, 

            Package (0x06)
            {
                0x0514, 
                0x0000CC52, 
                0x000A, 
                0x000A, 
                0x0D00, 
                0x0D00
            }, 

            Package (0x06)
            {
                0x04B0, 
                0x0000BB73, 
                0x000A, 
                0x000A, 
                0x0C00, 
                0x0C00
            }
        })
        Name (PSS3, Package (0x0D)
        {
            Package (0x06)
            {
                0x08FD, 
                0x00019A28, 
                0x000A, 
                0x000A, 
                0x1E00, 
                0x1E00
            }, 

            Package (0x06)
            {
                0x08FC, 
                0x00019A28, 
                0x000A, 
                0x000A, 
                0x1700, 
                0x1700
            }, 

            Package (0x06)
            {
                0x0898, 
                0x00018139, 
                0x000A, 
                0x000A, 
                0x1600, 
                0x1600
            }, 

            Package (0x06)
            {
                0x0834, 
                0x00016CCC, 
                0x000A, 
                0x000A, 
                0x1500, 
                0x1500
            }, 

            Package (0x06)
            {
                0x07D0, 
                0x000154CE, 
                0x000A, 
                0x000A, 
                0x1400, 
                0x1400
            }, 

            Package (0x06)
            {
                0x076C, 
                0x00014135, 
                0x000A, 
                0x000A, 
                0x1300, 
                0x1300
            }, 

            Package (0x06)
            {
                0x0708, 
                0x00012DFF, 
                0x000A, 
                0x000A, 
                0x1200, 
                0x1200
            }, 

            Package (0x06)
            {
                0x06A4, 
                0x00011757, 
                0x000A, 
                0x000A, 
                0x1100, 
                0x1100
            }, 

            Package (0x06)
            {
                0x0640, 
                0x000104EF, 
                0x000A, 
                0x000A, 
                0x1000, 
                0x1000
            }, 

            Package (0x06)
            {
                0x05DC, 
                0x0000F2E9, 
                0x000A, 
                0x000A, 
                0x0F00, 
                0x0F00
            }, 

            Package (0x06)
            {
                0x0578, 
                0x0000DD8F, 
                0x000A, 
                0x000A, 
                0x0E00, 
                0x0E00
            }, 

            Package (0x06)
            {
                0x0514, 
                0x0000CC52, 
                0x000A, 
                0x000A, 
                0x0D00, 
                0x0D00
            }, 

            Package (0x06)
            {
                0x04B0, 
                0x0000BB73, 
                0x000A, 
                0x000A, 
                0x0C00, 
                0x0C00
            }
        })
        Name (CMST, Package (0x03)
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x01, 
                0x03F8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000020, // Address
                        0x03,               // Access Size
                        )
                }, 

                0x02, 
                0x29, 
                0x015E
            }
        })
        Name (CIST, Package (0x03)
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x01, 
                0x03F8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        ,)
                }, 

                0x02, 
                0x29, 
                0x015E
            }
        })
        Method (CST, 0, NotSerialized)
        {
            If ((MWOS && (TYPE & 0x0200)))
            {
                Return (CMST) /* \_SB_.CMST */
            }

            Return (CIST) /* \_SB_.CIST */
        }

        Name (TSSA, Package (0x01)
        {
            Package (0x05)
            {
                0x64, 
                0x0000BA23, 
                0x00, 
                0x00, 
                0x00
            }
        })
        Name (TSS0, Package (0x0F)
        {
            Package (0x05)
            {
                0x64, 
                0x0000BA23, 
                0x00, 
                0x00, 
                0x00
            }, 

            Package (0x05)
            {
                0x5E, 
                0x0000AE83, 
                0x00, 
                0x1F, 
                0x00
            }, 

            Package (0x05)
            {
                0x58, 
                0x0000A2E4, 
                0x00, 
                0x1E, 
                0x00
            }, 

            Package (0x05)
            {
                0x52, 
                0x00009745, 
                0x00, 
                0x1D, 
                0x00
            }, 

            Package (0x05)
            {
                0x4B, 
                0x00008BA6, 
                0x00, 
                0x1C, 
                0x00
            }, 

            Package (0x05)
            {
                0x45, 
                0x00008007, 
                0x00, 
                0x1B, 
                0x00
            }, 

            Package (0x05)
            {
                0x3F, 
                0x00007467, 
                0x00, 
                0x1A, 
                0x00
            }, 

            Package (0x05)
            {
                0x39, 
                0x000068C8, 
                0x00, 
                0x19, 
                0x00
            }, 

            Package (0x05)
            {
                0x32, 
                0x00005D29, 
                0x00, 
                0x18, 
                0x00
            }, 

            Package (0x05)
            {
                0x2C, 
                0x0000518A, 
                0x00, 
                0x17, 
                0x00
            }, 

            Package (0x05)
            {
                0x26, 
                0x000045EB, 
                0x00, 
                0x16, 
                0x00
            }, 

            Package (0x05)
            {
                0x20, 
                0x00003A4B, 
                0x00, 
                0x15, 
                0x00
            }, 

            Package (0x05)
            {
                0x19, 
                0x00002EAC, 
                0x00, 
                0x14, 
                0x00
            }, 

            Package (0x05)
            {
                0x13, 
                0x0000230D, 
                0x00, 
                0x13, 
                0x00
            }, 

            Package (0x05)
            {
                0x0D, 
                0x0000176E, 
                0x00, 
                0x12, 
                0x00
            }
        })
        Name (TSS1, Package (0x0F)
        {
            Package (0x05)
            {
                0x64, 
                0x0000BA23, 
                0x00, 
                0x00, 
                0x00
            }, 

            Package (0x05)
            {
                0x5E, 
                0x0000AE83, 
                0x00, 
                0x1F, 
                0x00
            }, 

            Package (0x05)
            {
                0x58, 
                0x0000A2E4, 
                0x00, 
                0x1E, 
                0x00
            }, 

            Package (0x05)
            {
                0x52, 
                0x00009745, 
                0x00, 
                0x1D, 
                0x00
            }, 

            Package (0x05)
            {
                0x4B, 
                0x00008BA6, 
                0x00, 
                0x1C, 
                0x00
            }, 

            Package (0x05)
            {
                0x45, 
                0x00008007, 
                0x00, 
                0x1B, 
                0x00
            }, 

            Package (0x05)
            {
                0x3F, 
                0x00007467, 
                0x00, 
                0x1A, 
                0x00
            }, 

            Package (0x05)
            {
                0x39, 
                0x000068C8, 
                0x00, 
                0x19, 
                0x00
            }, 

            Package (0x05)
            {
                0x32, 
                0x00005D29, 
                0x00, 
                0x18, 
                0x00
            }, 

            Package (0x05)
            {
                0x2C, 
                0x0000518A, 
                0x00, 
                0x17, 
                0x00
            }, 

            Package (0x05)
            {
                0x26, 
                0x000045EB, 
                0x00, 
                0x16, 
                0x00
            }, 

            Package (0x05)
            {
                0x20, 
                0x00003A4B, 
                0x00, 
                0x15, 
                0x00
            }, 

            Package (0x05)
            {
                0x19, 
                0x00002EAC, 
                0x00, 
                0x14, 
                0x00
            }, 

            Package (0x05)
            {
                0x13, 
                0x0000230D, 
                0x00, 
                0x13, 
                0x00
            }, 

            Package (0x05)
            {
                0x0D, 
                0x0000176E, 
                0x00, 
                0x12, 
                0x00
            }
        })
        Name (TSS2, Package (0x0F)
        {
            Package (0x05)
            {
                0x64, 
                0x0000BA23, 
                0x00, 
                0x00, 
                0x00
            }, 

            Package (0x05)
            {
                0x5E, 
                0x0000AE83, 
                0x00, 
                0x1F, 
                0x00
            }, 

            Package (0x05)
            {
                0x58, 
                0x0000A2E4, 
                0x00, 
                0x1E, 
                0x00
            }, 

            Package (0x05)
            {
                0x52, 
                0x00009745, 
                0x00, 
                0x1D, 
                0x00
            }, 

            Package (0x05)
            {
                0x4B, 
                0x00008BA6, 
                0x00, 
                0x1C, 
                0x00
            }, 

            Package (0x05)
            {
                0x45, 
                0x00008007, 
                0x00, 
                0x1B, 
                0x00
            }, 

            Package (0x05)
            {
                0x3F, 
                0x00007467, 
                0x00, 
                0x1A, 
                0x00
            }, 

            Package (0x05)
            {
                0x39, 
                0x000068C8, 
                0x00, 
                0x19, 
                0x00
            }, 

            Package (0x05)
            {
                0x32, 
                0x00005D29, 
                0x00, 
                0x18, 
                0x00
            }, 

            Package (0x05)
            {
                0x2C, 
                0x0000518A, 
                0x00, 
                0x17, 
                0x00
            }, 

            Package (0x05)
            {
                0x26, 
                0x000045EB, 
                0x00, 
                0x16, 
                0x00
            }, 

            Package (0x05)
            {
                0x20, 
                0x00003A4B, 
                0x00, 
                0x15, 
                0x00
            }, 

            Package (0x05)
            {
                0x19, 
                0x00002EAC, 
                0x00, 
                0x14, 
                0x00
            }, 

            Package (0x05)
            {
                0x13, 
                0x0000230D, 
                0x00, 
                0x13, 
                0x00
            }, 

            Package (0x05)
            {
                0x0D, 
                0x0000176E, 
                0x00, 
                0x12, 
                0x00
            }
        })
        Name (TSS3, Package (0x0F)
        {
            Package (0x05)
            {
                0x64, 
                0x0000BA23, 
                0x00, 
                0x00, 
                0x00
            }, 

            Package (0x05)
            {
                0x5E, 
                0x0000AE83, 
                0x00, 
                0x1F, 
                0x00
            }, 

            Package (0x05)
            {
                0x58, 
                0x0000A2E4, 
                0x00, 
                0x1E, 
                0x00
            }, 

            Package (0x05)
            {
                0x52, 
                0x00009745, 
                0x00, 
                0x1D, 
                0x00
            }, 

            Package (0x05)
            {
                0x4B, 
                0x00008BA6, 
                0x00, 
                0x1C, 
                0x00
            }, 

            Package (0x05)
            {
                0x45, 
                0x00008007, 
                0x00, 
                0x1B, 
                0x00
            }, 

            Package (0x05)
            {
                0x3F, 
                0x00007467, 
                0x00, 
                0x1A, 
                0x00
            }, 

            Package (0x05)
            {
                0x39, 
                0x000068C8, 
                0x00, 
                0x19, 
                0x00
            }, 

            Package (0x05)
            {
                0x32, 
                0x00005D29, 
                0x00, 
                0x18, 
                0x00
            }, 

            Package (0x05)
            {
                0x2C, 
                0x0000518A, 
                0x00, 
                0x17, 
                0x00
            }, 

            Package (0x05)
            {
                0x26, 
                0x000045EB, 
                0x00, 
                0x16, 
                0x00
            }, 

            Package (0x05)
            {
                0x20, 
                0x00003A4B, 
                0x00, 
                0x15, 
                0x00
            }, 

            Package (0x05)
            {
                0x19, 
                0x00002EAC, 
                0x00, 
                0x14, 
                0x00
            }, 

            Package (0x05)
            {
                0x13, 
                0x0000230D, 
                0x00, 
                0x13, 
                0x00
            }, 

            Package (0x05)
            {
                0x0D, 
                0x0000176E, 
                0x00, 
                0x12, 
                0x00
            }
        })
        Method (PDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (OSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_SB_.OSC_.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            HWOB = 0x00
            If ((HWEN == 0x02))
            {
                HWOB = 0x01
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_SB_.OSC_.CAP0 */
            Return (Arg3)
        }

        Scope (SCK0.CP00)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP00.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP00.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP00.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP00.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP01)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP01.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP01.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP01.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP01.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP02)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x02, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x02, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x02, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP02.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP02.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP02.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP02.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP03)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x03, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x03, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x03, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP03.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP03.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP03.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP03.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP04)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x04, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x04, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x04, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP04.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP04.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP04.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP04.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP05)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x05, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x05, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x05, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP05.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP05.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP05.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP05.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP06)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x06, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x06, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x06, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP06.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP06.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP06.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP06.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP07)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x07, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x07, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x07, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP07.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP07.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP07.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP07.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP08)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x08, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x08, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x08, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP08.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP08.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP08.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP08.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP09)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x09, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x09, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x09, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP09.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP09.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP09.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP09.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP0A)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0A, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0A, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0A, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP0A.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP0A.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP0A.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP0A.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP0B)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0B, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0B, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0B, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP0B.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP0B.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP0B.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP0B.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP0C)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0C, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0C, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0C, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP0C.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP0C.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP0C.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP0C.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP0D)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0D, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0D, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0D, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP0D.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP0D.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP0D.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP0D.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP0E)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0E, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0E, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0E, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP0E.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP0E.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP0E.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP0E.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP0F)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0F, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0F, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x0F, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP0F.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP0F.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP0F.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP0F.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP10)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x10, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x10, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x10, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP10.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP10.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP10.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP10.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP11)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x11, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x11, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x11, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP11.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP11.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP11.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP11.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP12)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x12, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x12, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x12, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP12.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP12.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP12.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP12.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP13)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x13, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x13, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x13, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP13.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP13.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP13.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP13.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP14)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x14, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x14, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x14, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP14.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP14.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP14.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP14.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP15)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x15, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x15, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x15, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP15.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP15.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP15.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP15.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP16)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x16, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x16, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x16, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP16.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP16.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP16.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP16.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP17)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x17, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x17, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x17, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP17.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP17.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP17.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP17.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP18)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x18, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x18, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x18, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP18.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP18.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP18.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP18.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP19)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x19, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x19, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x19, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP19.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP19.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP19.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP19.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP1A)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1A, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1A, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1A, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP1A.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP1A.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP1A.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP1A.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP1B)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1B, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1B, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1B, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP1B.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP1B.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP1B.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP1B.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP1C)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1C, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1C, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1C, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP1C.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP1C.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP1C.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP1C.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP1D)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1D, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1D, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1D, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP1D.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP1D.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP1D.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP1D.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP1E)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1E, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1E, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1E, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP1E.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP1E.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP1E.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP1E.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP1F)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1F, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1F, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x1F, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP1F.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP1F.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP1F.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP1F.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP20)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x20, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x20, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x20, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP20.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP20.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP20.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP20.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP21)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x21, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x21, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x21, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP21.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP21.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP21.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP21.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP22)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x22, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x22, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x22, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP22.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP22.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP22.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP22.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP23)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x23, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x23, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x23, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP23.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP23.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP23.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP23.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP24)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x24, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x24, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x24, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP24.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP24.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP24.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP24.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP25)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x25, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x25, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x25, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP25.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP25.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP25.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP25.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP26)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x26, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x26, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x26, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP26.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP26.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP26.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP26.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP27)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x27, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x27, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x27, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP27.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP27.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP27.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP27.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP28)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x28, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x28, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x28, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP28.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP28.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP28.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP28.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP29)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x29, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x29, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x29, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP29.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP29.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP29.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP29.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP2A)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2A, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2A, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2A, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP2A.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP2A.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP2A.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP2A.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP2B)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2B, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2B, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2B, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP2B.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP2B.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP2B.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP2B.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP2C)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2C, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2C, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2C, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP2C.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP2C.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP2C.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP2C.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP2D)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2D, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2D, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2D, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP2D.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP2D.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP2D.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP2D.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP2E)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2E, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2E, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2E, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP2E.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP2E.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP2E.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP2E.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK0.CP2F)
        {
            Name (SCKN, 0x00)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2F, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2F, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x2F, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK0.CP2F.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK0.CP2F.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK0.CP2F.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS0) /* \_SB_.PSS0 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK0.CP2F.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS0) /* \_SB_.TSS0 */
            }
        }

        Scope (SCK1.CP00)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x30, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x30, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x30, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP00.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP00.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP00.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP00.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP01)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x31, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x31, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x31, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP01.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP01.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP01.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP01.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP02)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x32, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x32, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x32, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP02.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP02.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP02.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP02.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP03)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x33, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x33, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x33, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP03.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP03.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP03.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP03.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP04)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x34, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x34, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x34, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP04.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP04.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP04.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP04.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP05)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x35, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x35, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x35, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP05.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP05.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP05.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP05.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP06)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x36, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x36, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x36, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP06.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP06.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP06.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP06.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP07)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x37, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x37, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x37, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP07.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP07.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP07.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP07.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP08)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x38, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x38, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x38, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP08.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP08.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP08.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP08.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP09)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x39, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x39, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x39, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP09.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP09.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP09.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP09.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP0A)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3A, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3A, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3A, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP0A.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP0A.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP0A.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP0A.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP0B)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3B, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3B, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3B, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP0B.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP0B.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP0B.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP0B.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP0C)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3C, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3C, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3C, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP0C.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP0C.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP0C.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP0C.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP0D)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3D, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3D, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3D, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP0D.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP0D.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP0D.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP0D.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP0E)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3E, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3E, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3E, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP0E.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP0E.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP0E.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP0E.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP0F)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3F, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3F, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x3F, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP0F.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP0F.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP0F.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP0F.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP10)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x40, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x40, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x40, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP10.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP10.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP10.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP10.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP11)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x41, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x41, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x41, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP11.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP11.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP11.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP11.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP12)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x42, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x42, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x42, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP12.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP12.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP12.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP12.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP13)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x43, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x43, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x43, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP13.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP13.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP13.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP13.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP14)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x44, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x44, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x44, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP14.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP14.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP14.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP14.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP15)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x45, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x45, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x45, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP15.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP15.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP15.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP15.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP16)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x46, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x46, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x46, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP16.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP16.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP16.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP16.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP17)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x47, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x47, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x47, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP17.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP17.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP17.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP17.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP18)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x48, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x48, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x48, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP18.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP18.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP18.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP18.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP19)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x49, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x49, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x49, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP19.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP19.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP19.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP19.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP1A)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4A, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4A, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4A, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP1A.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP1A.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP1A.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP1A.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP1B)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4B, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4B, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4B, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP1B.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP1B.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP1B.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP1B.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP1C)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4C, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4C, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4C, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP1C.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP1C.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP1C.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP1C.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP1D)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4D, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4D, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4D, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP1D.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP1D.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP1D.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP1D.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP1E)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4E, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4E, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4E, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP1E.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP1E.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP1E.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP1E.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP1F)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4F, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4F, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x4F, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP1F.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP1F.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP1F.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP1F.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP20)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x50, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x50, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x50, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP20.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP20.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP20.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP20.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP21)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x51, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x51, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x51, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP21.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP21.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP21.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP21.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP22)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x52, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x52, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x52, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP22.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP22.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP22.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP22.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP23)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x53, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x53, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x53, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP23.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP23.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP23.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP23.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP24)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x54, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x54, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x54, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP24.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP24.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP24.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP24.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP25)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x55, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x55, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x55, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP25.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP25.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP25.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP25.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP26)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x56, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x56, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x56, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP26.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP26.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP26.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP26.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP27)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x57, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x57, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x57, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP27.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP27.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP27.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP27.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP28)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x58, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x58, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x58, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP28.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP28.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP28.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP28.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP29)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x59, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x59, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x59, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP29.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP29.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP29.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP29.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP2A)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5A, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5A, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5A, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP2A.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP2A.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP2A.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP2A.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP2B)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5B, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5B, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5B, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP2B.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP2B.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP2B.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP2B.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP2C)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5C, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5C, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5C, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP2C.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP2C.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP2C.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP2C.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP2D)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5D, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5D, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5D, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP2D.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP2D.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP2D.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP2D.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP2E)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5E, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5E, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5E, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP2E.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP2E.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP2E.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP2E.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK1.CP2F)
        {
            Name (SCKN, 0x01)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5F, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5F, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x5F, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK1.CP2F.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK1.CP2F.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK1.CP2F.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS1) /* \_SB_.PSS1 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK1.CP2F.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS1) /* \_SB_.TSS1 */
            }
        }

        Scope (SCK2.CP00)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x60, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x60, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x60, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP00.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP00.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP00.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP00.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP01)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x61, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x61, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x61, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP01.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP01.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP01.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP01.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP02)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x62, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x62, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x62, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP02.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP02.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP02.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP02.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP03)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x63, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x63, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x63, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP03.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP03.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP03.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP03.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP04)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x64, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x64, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x64, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP04.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP04.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP04.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP04.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP05)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x65, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x65, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x65, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP05.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP05.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP05.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP05.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP06)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x66, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x66, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x66, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP06.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP06.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP06.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP06.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP07)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x67, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x67, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x67, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP07.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP07.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP07.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP07.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP08)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x68, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x68, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x68, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP08.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP08.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP08.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP08.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP09)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x69, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x69, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x69, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP09.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP09.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP09.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP09.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP0A)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6A, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6A, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6A, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP0A.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP0A.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP0A.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP0A.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP0B)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6B, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6B, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6B, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP0B.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP0B.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP0B.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP0B.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP0C)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6C, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6C, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6C, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP0C.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP0C.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP0C.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP0C.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP0D)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6D, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6D, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6D, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP0D.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP0D.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP0D.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP0D.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP0E)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6E, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6E, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6E, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP0E.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP0E.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP0E.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP0E.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP0F)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6F, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6F, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x6F, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP0F.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP0F.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP0F.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP0F.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP10)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x70, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x70, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x70, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP10.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP10.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP10.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP10.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP11)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x71, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x71, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x71, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP11.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP11.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP11.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP11.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP12)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x72, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x72, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x72, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP12.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP12.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP12.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP12.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP13)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x73, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x73, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x73, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP13.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP13.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP13.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP13.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP14)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x74, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x74, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x74, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP14.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP14.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP14.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP14.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP15)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x75, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x75, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x75, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP15.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP15.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP15.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP15.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP16)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x76, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x76, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x76, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP16.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP16.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP16.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP16.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP17)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x77, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x77, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x77, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP17.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP17.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP17.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP17.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP18)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x78, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x78, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x78, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP18.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP18.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP18.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP18.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP19)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x79, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x79, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x79, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP19.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP19.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP19.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP19.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP1A)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7A, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7A, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7A, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP1A.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP1A.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP1A.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP1A.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP1B)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7B, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7B, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7B, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP1B.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP1B.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP1B.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP1B.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP1C)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7C, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7C, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7C, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP1C.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP1C.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP1C.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP1C.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP1D)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7D, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7D, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7D, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP1D.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP1D.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP1D.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP1D.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP1E)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7E, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7E, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7E, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP1E.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP1E.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP1E.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP1E.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP1F)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7F, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7F, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x7F, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP1F.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP1F.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP1F.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP1F.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP20)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x80, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x80, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x80, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP20.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP20.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP20.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP20.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP21)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x81, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x81, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x81, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP21.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP21.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP21.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP21.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP22)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x82, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x82, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x82, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP22.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP22.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP22.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP22.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP23)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x83, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x83, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x83, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP23.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP23.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP23.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP23.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP24)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x84, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x84, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x84, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP24.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP24.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP24.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP24.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP25)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x85, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x85, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x85, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP25.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP25.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP25.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP25.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP26)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x86, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x86, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x86, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP26.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP26.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP26.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP26.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP27)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x87, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x87, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x87, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP27.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP27.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP27.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP27.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP28)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x88, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x88, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x88, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP28.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP28.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP28.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP28.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP29)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x89, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x89, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x89, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP29.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP29.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP29.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP29.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP2A)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8A, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8A, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8A, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP2A.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP2A.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP2A.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP2A.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP2B)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8B, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8B, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8B, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP2B.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP2B.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP2B.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP2B.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP2C)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8C, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8C, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8C, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP2C.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP2C.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP2C.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP2C.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP2D)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8D, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8D, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8D, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP2D.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP2D.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP2D.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP2D.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP2E)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8E, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8E, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8E, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP2E.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP2E.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP2E.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP2E.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK2.CP2F)
        {
            Name (SCKN, 0x02)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8F, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8F, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x8F, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK2.CP2F.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK2.CP2F.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK2.CP2F.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS2) /* \_SB_.PSS2 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK2.CP2F.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS2) /* \_SB_.TSS2 */
            }
        }

        Scope (SCK3.CP00)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x90, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x90, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x90, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP00.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP00.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP00.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP00.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP01)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x91, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x91, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x91, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP01.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP01.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP01.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP01.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP02)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x92, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x92, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x92, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP02.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP02.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP02.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP02.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP03)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x93, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x93, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x93, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP03.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP03.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP03.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP03.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP04)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x94, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x94, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x94, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP04.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP04.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP04.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP04.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP05)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x95, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x95, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x95, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP05.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP05.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP05.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP05.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP06)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x96, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x96, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x96, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP06.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP06.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP06.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP06.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP07)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x97, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x97, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x97, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP07.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP07.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP07.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP07.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP08)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x98, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x98, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x98, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP08.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP08.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP08.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP08.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP09)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x99, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x99, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x99, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP09.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP09.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP09.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP09.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP0A)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9A, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9A, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9A, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP0A.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP0A.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP0A.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP0A.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP0B)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9B, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9B, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9B, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP0B.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP0B.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP0B.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP0B.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP0C)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9C, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9C, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9C, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP0C.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP0C.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP0C.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP0C.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP0D)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9D, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9D, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9D, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP0D.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP0D.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP0D.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP0D.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP0E)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9E, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9E, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9E, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP0E.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP0E.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP0E.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP0E.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP0F)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9F, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9F, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x9F, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP0F.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP0F.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP0F.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP0F.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP10)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA0, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA0, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA0, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP10.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP10.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP10.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP10.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP11)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA1, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA1, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA1, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP11.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP11.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP11.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP11.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP12)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA2, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA2, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA2, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP12.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP12.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP12.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP12.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP13)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA3, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA3, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA3, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP13.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP13.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP13.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP13.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP14)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA4, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA4, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA4, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP14.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP14.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP14.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP14.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP15)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA5, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA5, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA5, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP15.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP15.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP15.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP15.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP16)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA6, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA6, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA6, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP16.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP16.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP16.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP16.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP17)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA7, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA7, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA7, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP17.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP17.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP17.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP17.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP18)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA8, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA8, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA8, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP18.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP18.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP18.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP18.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP19)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA9, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA9, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xA9, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP19.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP19.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP19.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP19.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP1A)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAA, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAA, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAA, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP1A.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP1A.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP1A.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP1A.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP1B)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAB, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAB, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAB, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP1B.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP1B.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP1B.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP1B.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP1C)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAC, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAC, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAC, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP1C.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP1C.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP1C.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP1C.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP1D)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAD, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAD, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAD, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP1D.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP1D.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP1D.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP1D.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP1E)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAE, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAE, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAE, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP1E.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP1E.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP1E.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP1E.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP1F)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAF, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAF, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xAF, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP1F.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP1F.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP1F.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP1F.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP20)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB0, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB0, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB0, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP20.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP20.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP20.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP20.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP21)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB1, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB1, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB1, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP21.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP21.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP21.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP21.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP22)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB2, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB2, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB2, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP22.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP22.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP22.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP22.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP23)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB3, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB3, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB3, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP23.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP23.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP23.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP23.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP24)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB4, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB4, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB4, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP24.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP24.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP24.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP24.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP25)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB5, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB5, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB5, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP25.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP25.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP25.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP25.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP26)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB6, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB6, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB6, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP26.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP26.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP26.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP26.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP27)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB7, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB7, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB7, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP27.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP27.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP27.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP27.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP28)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB8, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB8, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB8, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP28.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP28.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP28.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP28.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP29)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB9, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB9, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xB9, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP29.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP29.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP29.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP29.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP2A)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBA, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBA, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBA, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP2A.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP2A.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP2A.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP2A.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP2B)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBB, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBB, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBB, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP2B.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP2B.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP2B.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP2B.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP2C)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBC, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBC, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBC, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP2C.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP2C.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP2C.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP2C.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP2D)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBD, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBD, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBD, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP2D.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP2D.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP2D.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP2D.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP2E)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBE, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBE, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBE, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP2E.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP2E.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP2E.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP2E.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }

        Scope (SCK3.CP2F)
        {
            Name (SCKN, 0x03)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                PDC (Arg0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Return (OSC (Arg0, Arg1, Arg2, Arg3))
            }

            Name (PSDC, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBF, 
                    0xFC, 
                    0x01
                }
            })
            Name (PSDD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBF, 
                    0xFD, 
                    0x01
                }
            })
            Name (PSDE, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0xBF, 
                    0xFE, 
                    0x01
                }
            })
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                PETE |= 0x80
                Return (DerefOf (\PSLM [SCKN]))
            }

            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                If ((((TYPE & 0x0820) == 0x0820) && (HWAL == 0x00)))
                {
                    Return (PSDE) /* \_SB_.SCK3.CP2F.PSDE */
                }

                If ((((TYPE & 0x0820) == 0x20) && (HWAL == 0x02)))
                {
                    Return (PSDD) /* \_SB_.SCK3.CP2F.PSDD */
                }

                Return (PSDC) /* \_SB_.SCK3.CP2F.PSDC */
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                If (PSEN)
                {
                    If ((HWOB == 0x00))
                    {
                        Return (PSS3) /* \_SB_.PSS3 */
                    }
                }

                Return (ZPSS) /* \_SB_.ZPSS */
            }

            Name (_PCT, Package (0x02)  // _PCT: Performance Control
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
            Name (CST1, Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03F8
                }
            })
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                If ((ACEN == 0x00))
                {
                    Return (CST ())
                }

                Return (CST1) /* \_SB_.SCK3.CP2F.CST1 */
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                PETE |= 0x40
                Return (DerefOf (\TSLM [SCKN]))
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                If (((TSEN == 0x00) || (PSEN == 0x00)))
                {
                    Return (TSSA) /* \_SB_.TSSA */
                }

                Return (TSS3) /* \_SB_.TSS3 */
            }
        }
    }
}



UEFI
----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 00000042
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : F7
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : ""
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 010h]             UUID Identifier : C68ED8E2-9DC6-4CBD-9D94-DB65ACC5C332
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 66 (0x42)

    0000: 55 45 46 49 42 00 00 00 01 F7 41 4C 41 53 4B 41  // UEFIB.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 00 00 00 00  // A M I ... ......
    0020: 00 00 00 00 E2 D8 8E C6 C6 9D BD 4C 9D 94 DB 65  // ...........L...e
    0030: AC C5 C3 32 36 00 01 00 00 00 00 00 00 00 00 00  // ...26...........
    0040: 00 00                                            // ..


VFCT
----
[000h 0000 004h]                   Signature : "VFCT"    
[004h 0004 004h]                Table Length : 0000EC84
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : CE
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD"
[020h 0032 004h]       Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 60548 (0xEC84)

    0000: 56 46 43 54 84 EC 00 00 01 CE 41 4C 41 53 4B 41  // VFCT......ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 00  // A M I ......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 7F 68 00 00 00 00  // ...........h....
    0060: 01 00 00 00 00 EC 00 00 55 AA 76 E9 EB 02 00 00  // ........U.v.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 9C 02 00 00 00 00 49 42 4D 26 AA 8A 00 00 00 00  // ......IBM&......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 72 02 00 00 00 00 00 00 30 37 2F 32 38 2F 31 37  // r.......07/28/17
    00C0: 20 31 35 3A 35 37 00 00 37 00 00 00 E9 D9 03 00  //  15:57..7.......
    00D0: E9 E3 03 00 00 00 48 01 09 00 00 00 0B 80 13 E8  // ......H.........
    00E0: 03 00 00 00 00 80 00 80 00 80 00 18 F4 38 8A 50  // .............8.P
    00F0: E3 28 44 20 7A C1 CB 38 9E F2 FF FF 00 00 00 00  // .(D z..8........
    0100: 00 00 8C AF 00 00 00 7F 68 F8 AA 0C 01 F1 00 00  // ........h.......
    0110: 30 55 00 38 88 6F 00 B8 63 B3 80 AF 3A 14 84 00  // 0U.8.o..c...:...
    0120: 60 C0 FB 48 00 42 00 82 80 CD 31 32 00 00 00 00  // `..H.B....12....
    0130: 1E 10 00 29 40 0C 06 07 05 00 00 00 00 68 01 00  // ...)@........h..
    0140: 00 00 02 00 00 00 00 00 22 10 06 04 1C 00 00 00  // ........".......
    0150: 08 00 00 00 01 00 00 00 07 01 00 00 32 00 00 00  // ............2...
    0160: 0C 00 00 00 00 00 00 00 01 00 00 00 00 87 0C 00  // ................
    0170: 02 10 36 0B 00 00 00 00 C3 04 00 00 00 00 00 00  // ..6.............
    0180: 00 00 00 00 F9 49 22 10 04 06 00 19 00 00 00 00  // .....I".........
    0190: 30 24 30 10 00 80 5E 00 20 70 00 00 65 00 00 00  // 0$0...^. p..e...
    01A0: 00 04 00 C0 E8 A2 00 00 F8 D0 8F 08 00 00 00 00  // ................
    01B0: 31 31 33 2D 44 30 35 30 30 31 30 30 2D 31 30 33  // 113-D0500100-103
    01C0: 00 56 45 47 41 31 30 00 50 43 49 5F 45 58 50 52  // .VEGA10.PCI_EXPR
    01D0: 45 53 53 00 48 42 4D 32 00 0D 0A 56 65 67 61 31  // ESS.HBM2...Vega1
    01E0: 30 20 41 31 20 58 54 20 44 30 35 30 30 31 20 33  // 0 A1 XT D05001 3
    01F0: 32 4D 78 31 32 38 20 38 35 32 65 2F 39 34 35 6D  // 2Mx128 852e/945m
    0200: 20 30 2E 39 35 56 20 20 20 20 20 20 20 20 20 20  //  0.95V          
    0210: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0220: 20 20 20 20 20 20 20 0D 0A 00 0D 0A 20 0D 0A 00  //        ..... ...
    0230: 28 43 29 20 31 39 38 38 2D 32 30 31 30 2C 20 41  // (C) 1988-2010, A
    0240: 64 76 61 6E 63 65 64 20 4D 69 63 72 6F 20 44 65  // dvanced Micro De
    0250: 76 69 63 65 73 2C 20 49 6E 63 2E 00 41 54 4F 4D  // vices, Inc..ATOM
    0260: 42 49 4F 53 42 4B 2D 41 4D 44 20 56 45 52 30 31  // BIOSBK-AMD VER01
    0270: 36 2E 30 30 31 2E 30 30 31 2E 30 30 30 2E 30 30  // 6.001.001.000.00
    0280: 38 37 33 30 00 44 30 35 30 30 31 30 30 2E 31 30  // 8730.D0500100.10
    0290: 33 00 31 34 33 39 39 39 39 20 00 33 39 32 31 37  // 3.1439999 .39217
    02A0: 30 20 20 00 20 20 20 20 20 20 20 20 00 41 4D 44  // 0  .        .AMD
    02B0: 5F 56 45 47 41 31 30 5F 44 30 35 30 30 31 5F 4D  // _VEGA10_D05001_M
    02C0: 42 41 5F 41 31 5F 48 42 4D 5F 38 47 42 5C 63 6F  // BA_A1_HBM_8GB\co
    02D0: 6E 66 69 67 2E 68 00 00 00 90 28 00 02 02 41 54  // nfig.h....(...AT
    02E0: 4F 4D 00 C0 EB 03 1D 02 C1 02 71 01 1E 04 00 00  // OM........q.....
    02F0: 00 00 02 10 36 0B 9C 02 F6 8D 9C 8E 00 00 DE 9A  // ....6...........
    0300: 00 00 00 00 50 43 49 52 02 10 7F 68 00 00 18 00  // ....PCIR...h....
    0310: 00 00 00 03 76 00 01 10 00 00 00 00 41 4D 44 20  // ....v.......AMD 
    0320: 41 54 4F 4D 42 49 4F 53 00 34 86 66 20 00 00 00  // ATOMBIOS.4.f ...
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 00 00 00 00 00 00 00 00 1E 06 66 50 66 51 66  // ...........fPfQf
    0360: 52 66 53 66 55 66 56 66 57 0E 1F A3 14 00 8C 0E  // RfSfUfVfW.......
    0370: 08 00 B2 20 E8 D3 28 0B C0 75 14 A2 02 00 66 5F  // ... ..(..u....f_
    0380: 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F CB E8  // f^f]f[fZfYfX....
    0390: ED 29 E8 BF 27 32 D2 8D 3E 72 02 89 55 16 E8 81  // .)..'2..>r..U...
    03A0: 0E E8 41 0E E8 95 0F E8 B1 02 E8 D2 24 0B C0 74  // ..A.........$..t
    03B0: 0C E8 39 00 E8 A9 4F E8 40 0E E8 FE 4F E8 A9 00  // ..9...O.@...O...
    03C0: B4 80 E8 B9 27 8A C7 66 C1 E0 10 8A E3 B0 20 66  // ....'..f...... f
    03D0: A3 AA 8A E8 B0 02 E8 53 0E E8 C8 29 66 5F 66 5E  // .......S...)f_f^
    03E0: 66 5D 66 5B 66 5A 66 59 66 58 07 1F CB 2E 8B 1E  // f]f[fZfYfX......
    03F0: 08 00 83 3E FD 03 00 75 04 89 1E FB 03 1E 2E 8E  // ...>...u........
    0400: 1E F3 03 9C FA 66 C7 06 08 01 65 F0 00 F0 C7 06  // .....f....e.....
    0410: 40 00 1E 04 89 1E 42 00 C7 06 B4 01 1E 04 89 1E  // @.....B.........
    0420: B6 01 C7 06 7C 00 8C 58 89 1E 7E 00 C7 06 0C 01  // ....|..X..~.....
    0430: 9F 5C 89 1E 0E 01 C7 06 A8 04 BE 52 89 1E AA 04  // .\.........R....
    0440: 2E 8E 1E FB 03 8B C3 A3 C0 52 A3 D0 52 A3 E2 52  // .........R..R..R
    0450: 9D 1F C3 50 4D 49 44 1E 04 F0 42 00 00 00 A0 00  // ...PMID...B.....
    0460: B0 00 B8 00 C0 00 00 00 00 BB 00 00 E8 A6 0D 66  // ...............f
    0470: C1 E8 10 A3 A2 02 BB 0B 00 E8 99 0D 8D 3E 72 02  // .............>r.
    0480: 66 89 45 18 C3 00 E8 F6 28 80 FC A0 75 05 E8 3D  // f.E.....(...u..=
    0490: 00 EB 11 80 FC 4F 75 05 E8 E3 3D EB 07 E8 38 43  // .....Ou...=...8C
    04A0: EB 02 B4 01 E8 FD 28 CF E8 D4 28 E8 20 00 EB 02  // ......(...(. ...
    04B0: B4 01 E8 EF 28 CB E8 C6 28 80 FC 4F 75 05 E8 BD  // ....(...(..Ou...
    04C0: 3D EB 07 E8 12 43 EB 02 B4 01 E8 D7 28 CB 1E 06  // =....C......(...
    04D0: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    04E0: 3C 04 75 29 2E A1 1A 00 66 C1 E0 10 2E A1 18 00  // <.u)....f.......
    04F0: 8D 36 6F 01 8A 3C 80 EF 30 B3 02 8B EC 89 5E 0C  // .6o..<..0.....^.
    0500: 89 46 04 66 C1 E8 10 89 46 00 E9 2C 01 3C 05 75  // .F.f....F..,.<.u
    0510: 18 E8 6A 26 E8 3D 26 2E A1 08 00 8B EC 89 56 10  // ..j&.=&.......V.
    0520: 89 46 00 89 5E 04 E9 10 01 3C 06 75 32 E8 CD 0C  // .F..^....<.u2...
    0530: 66 D1 E0 8B EC 89 46 14 BB 02 00 E8 D7 0C 88 46  // f.....F........F
    0540: 18 E8 C1 0C 66 89 46 0C BB 09 00 E8 C7 0C 33 C0  // ....f.F.......3.
    0550: 66 89 46 00 2E 8B 16 A2 02 89 56 10 E9 DA 00 3C  // f.F.......V....<
    0560: 0B 75 24 0A DB 75 11 B9 80 00 BB 02 00 8B EC 89  // .u$..u..........
    0570: 5E 0C 89 4E 14 E9 C1 00 8A C7 E8 D4 00 E8 38 01  // ^..N..........8.
    0580: 0F 84 AD 00 E9 B2 00 3C 17 75 21 E8 70 0F 74 06  // .......<.u!.p.t.
    0590: E8 E7 0A E8 48 14 E8 26 06 E8 3C 0C 33 C9 66 C1  // ....H..&..<.3.f.
    05A0: E8 10 0A E8 8B EC 89 4E 14 E9 8D 00 3C 18 75 45  // .......N....<.uE
    05B0: 0A FF 75 10 E8 F3 0E 8B EC 89 46 0C E8 6F 06 89  // ..u.......F..o..
    05C0: 4E 10 EB 75 E8 37 0F 75 68 BB 00 1C E8 6C 27 66  // N..u.7.uh....l'f
    05D0: 0B C0 74 5D 23 C9 74 59 E8 0B 0F BE 00 1C E8 61  // ..t]#.tY.......a
    05E0: 0C 74 4E BE 00 1C B0 40 E8 AC 0C E8 BC 0E 8B EC  // .tN....@........
    05F0: 89 46 0C EB 44 3C 82 75 1A 80 FB 05 75 15 0A FF  // .F..D<.u....u...
    0600: 75 0A E8 00 0E 8B EC 89 46 14 EB 2D E8 CD 0D 74  // u.......F..-...t
    0610: 18 EB 26 3C 8E 75 12 80 FF 01 74 08 80 FF 02 75  // ..&<.u....t....u
    0620: 08 80 C1 02 E8 26 0E EB 10 8B EC C6 46 19 02 EB  // .....&......F...
    0630: 0F 8B EC C6 46 19 01 EB 07 32 E4 8B EC 88 66 19  // ....F....2....f.
    0640: 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F  // f_f^f]f[fZfYfX..
    0650: C3 51 8A C8 B8 01 00 D3 E0 59 C3 E8 6C 27 C3 0C  // .Q.......Y..l'..
    0660: 01 C3 50 51 B0 B6 E6 43 B0 33 E6 42 B0 05 E6 42  // ..PQ...C.3.B...B
    0670: E4 61 8A E0 0C 03 E6 61 8A C4 B9 C8 00 E8 74 23  // .a.....a......t#
    0680: E6 61 59 58 C3 00 1E 56 0E 1F 80 3E 02 00 80 76  // .aYX...V...>...v
    0690: 05 C6 06 02 00 80 8A 0E 02 00 C1 E1 09 FC C6 06  // ................
    06A0: 21 00 00 33 F6 32 E4 AC 02 E0 E2 FB F6 D4 FE C4  // !..3.2..........
    06B0: 88 26 21 00 5E 1F C3 00 57 0B C0 75 0F E8 82 09  // .&!.^...W..u....
    06C0: 74 25 E8 24 00 F6 C3 04 74 F3 EB 11 8B C8 E8 AE  // t%.$....t.......
    06D0: 21 23 C1 74 12 E8 11 00 F6 C3 04 74 0A 5F 8D 5C  // !#.t.......t._.\
    06E0: 28 E8 D2 04 0B F6 C3 5F C3 50 E8 37 09 E8 00 21  // (......_.P.7...!
    06F0: E8 0E 21 0A C9 74 59 0A ED 74 10 8A CD B5 02 E8  // ..!..tY..t......
    0700: 75 22 B1 02 8D 9C 48 01 E8 D4 25 E8 25 02 F6 C3  // u"....H...%.%...
    0710: 04 74 08 E8 4A 0A E8 71 1F 74 35 8D 5C 28 E8 34  // .t..J..q.t5.\(.4
    0720: 00 E8 59 14 33 C9 50 8D 9C 28 01 E8 0D 26 66 0B  // ..Y.3.P..(...&f.
    0730: C0 74 03 B9 00 08 58 0A C0 75 0E 8D 5C 28 80 CD  // .t....X..u..\(..
    0740: 02 E8 1A 00 74 03 80 CD 04 8D 9C 48 01 E8 8F 25  // ....t......H...%
    0750: E8 E0 01 58 C3 51 B9 49 00 E8 47 22 59 C3 51 E8  // ...X.Q.I..G"Y.Q.
    0760: 1A 00 75 14 E8 9D 01 3C 01 75 0D B9 20 00 E8 27  // ..u....<.u.. ..'
    0770: 00 75 05 80 C9 01 EB 02 33 C9 59 C3 53 E8 BB 25  // .u......3.Y.S..%
    0780: 66 3D 00 FF FF FF 75 0E 83 C3 04 E8 AD 25 66 3D  // f=....u......%f=
    0790: FF FF FF 00 75 00 5B C3 50 52 32 D2 E8 9C 25 02  // ....u.[.PR2...%.
    07A0: D0 02 D4 66 C1 E8 10 02 D0 02 D4 83 C3 04 E2 EC  // ...f............
    07B0: 0A D2 5A 58 C3 E8 6C 08 8D 9C 4C 01 E8 1D 01 E8  // ..ZX..l...L.....
    07C0: 71 01 B5 13 F6 C3 08 75 0C E8 94 09 8A EA 80 FD  // q......u........
    07D0: 13 75 02 B5 03 66 50 8D 9C B8 02 66 33 C0 8A C5  // .u...fP....f3...
    07E0: E8 B8 24 66 58 A9 C8 0E 74 48 E8 46 01 F6 C3 08  // ..$fX...tH.F....
    07F0: 74 0C 8D 5C 28 E8 EB 00 75 04 E8 5D 00 C3 B5 02  // t..\(...u..]....
    0800: E8 0A 01 E8 2D 01 F6 C3 04 74 17 8D 5C 28 E8 30  // ....-....t..\(.0
    0810: 01 E8 30 03 E8 12 01 80 FD 00 75 3D B5 02 E8 FE  // ..0.......u=....
    0820: 00 C3 8D 9C 68 01 B8 00 55 E8 CB 0E B5 02 E8 EE  // ....h...U.......
    0830: 00 C3 A9 02 00 74 22 B5 04 E8 D1 00 8D 9C 68 01  // .....t".......h.
    0840: 56 E8 C6 22 8B F7 E8 3B 03 5E E8 74 22 E8 CF 00  // V.."...;.^.t"...
    0850: 8D 5C 28 E8 94 22 E8 EB 02 C3 B5 01 E8 AE 00 B5  // .\(.."..........
    0860: 02 E8 BB 00 E8 CC 00 F6 C3 04 75 0C B8 00 55 E8  // ..........u...U.
    0870: 85 0E B5 02 E8 17 00 C3 E8 C6 00 B5 02 8D 5C 28  // ..............\(
    0880: E8 6E 00 75 02 B5 01 E8 04 00 E8 B7 02 C3 8D 9C  // .n.u............
    0890: B4 02 B1 02 E8 48 24 B5 02 E8 83 00 C3 8D 9C 4C  // .....H$........L
    08A0: 01 E8 38 00 E8 8C 00 F6 C3 04 74 23 8D 5C 28 E8  // ..8.......t#.\(.
    08B0: 8F 00 E8 55 22 8D 9C 68 01 06 0E 07 B9 07 00 E8  // ...U"..h........
    08C0: 1B 21 07 E8 63 00 E8 97 08 8D 5C 28 E8 46 22 8D  // .!..c.....\(.F".
    08D0: 5C 28 E8 F5 21 B8 02 00 E8 DA FE C3 B9 61 00 E8  // \(..!........a..
    08E0: C1 20 C3 53 81 C3 05 01 E8 50 24 24 06 3C 02 5B  // . .S.....P$$.<.[
    08F0: C3 E8 10 00 3D 01 04 75 0A 53 83 C3 18 E8 3B 24  // ....=..u.S....;$
    0900: 5B A8 01 C3 53 83 C3 12 E8 30 24 5B C3 8D 9C B4  // [...S....0$[....
    0910: 02 32 C9 E8 C9 23 C3 8D 9C B4 02 E8 1D 24 C3 8D  // .2...#.......$..
    0920: 9C B4 02 B1 01 E8 B7 23 C3 8D 9C B4 02 B1 01 E8  // .......#........
    0930: C5 23 C3 66 50 8D 9C 48 01 E8 FF 23 8A D8 66 58  // .#.fP..H...#..fX
    0940: C3 55 57 51 B9 08 00 BD 00 00 BB 08 00 2B D9 D1  // .UWQ.........+..
    0950: E3 8D 58 4E E8 E4 23 E8 98 01 E2 EE 8D 5C 4B E8  // ..XN..#......\K.
    0960: D9 23 B9 04 00 8B D0 BF 66 09 85 55 06 74 17 66  // .#......f..U.t.f
    0970: 8B 05 8D 9A F4 01 E8 22 23 8B 45 04 8D 9A F8 01  // ......."#.E.....
    0980: E8 30 23 83 C5 08 83 C7 08 E2 DF 8D 7C 5E B9 04  // .0#.........|^..
    0990: 00 33 ED 8B DF E8 A3 23 0B C0 74 09 E8 12 01 E8  // .3.....#..t.....
    09A0: 4C 00 83 C5 1C 83 C7 12 E2 E9 32 ED E8 70 FF 8D  // L.........2..p..
    09B0: 5C 28 E8 4F FF 3D 01 04 75 10 83 C3 14 E8 7B 23  // \(.O.=..u.....{#
    09C0: 24 70 C0 E8 04 8A E8 E8 55 FF 59 5F 5D C3 20 03  // $p......U.Y_]. .
    09D0: 58 02 3C 00 01 00 00 04 00 03 3C 00 00 08 00 05  // X.<.......<.....
    09E0: 00 04 4B 00 00 01 80 02 E0 01 3C 00 20 00 51 8D  // ..K.......<. .Q.
    09F0: 1D E8 47 23 8D 9A 68 01 E8 B8 22 8D 5D 02 E8 3A  // ..G#..h...".]..:
    0A00: 23 8D 9A 6A 01 E8 89 00 8D 5D 05 E8 2D 23 8D 9A  // #..j.....]..-#..
    0A10: 6E 01 E8 7C 00 8D 5D 08 E8 20 23 8B C8 8A DC 66  // n..|..].. #....f
    0A20: C1 C8 10 8A D0 80 E2 0F 8A F0 C0 EE 04 8A EC C0  // ................
    0A30: E5 06 8A FC C0 E7 04 80 E7 03 80 E4 0F C0 E4 04  // ................
    0A40: 0A D4 80 E2 3F 80 E4 C0 C0 EC 02 0A F4 8B C3 8D  // ....?...........
    0A50: 9A 74 01 E8 5D 22 8D 9A 72 01 8B C1 E8 54 22 8D  // .t..]"..r....T".
    0A60: 9A 76 01 33 C0 8A C6 E8 49 22 8D 9A 78 01 33 C0  // .v.3....I"..x.3.
    0A70: 8A C2 E8 3E 22 8D 5D 0C E8 C0 22 8D 9A 7A 01 E8  // ...>".]..."..z..
    0A80: 0F 00 8D 5D 0F E8 B3 22 8D 9A 7E 01 E8 24 22 59  // ...]..."..~..$"Y
    0A90: C3 8B C8 8A D4 66 C1 C8 10 8A F0 80 E6 0F 8A E8  // .....f..........
    0AA0: C0 ED 04 8B C1 E8 0B 22 83 C3 02 8B C2 E8 03 22  // ......."......."
    0AB0: C3 8D 5D 11 E8 84 22 8A E0 BA 06 00 C0 E8 07 74  // ..]..."........t
    0AC0: 03 80 CA 80 8A C4 C0 E8 03 24 03 3C 02 75 03 80  // .........$.<.u..
    0AD0: CA 40 3C 03 75 12 8A C4 D0 E8 A8 01 74 03 80 E2  // .@<.u.......t...
    0AE0: FD A8 02 74 03 80 E2 FB 8B C2 8D 9A 80 01 E8 C2  // ...t............
    0AF0: 21 C3 3C 01 74 3D 8B D0 0F B6 C6 24 3F 04 3C 8D  // !.<.t=.....$?.<.
    0B00: 9A F8 01 E8 AD 21 0F B6 C2 83 C0 1F C1 E0 03 8D  // .....!..........
    0B10: 9A F4 01 E8 9D 21 0F B6 DE C1 EB 06 C1 E3 02 2E  // .....!..........
    0B20: F7 A7 CE 0A 2E F7 B7 CC 0A 8D 9A F6 01 E8 83 21  // ...............!
    0B30: 83 C5 08 C3 01 00 01 00 04 00 03 00 05 00 04 00  // ................
    0B40: 10 00 09 00 57 66 51 8D 9C 68 01 8B FB 8B DF E8  // ....WfQ..h......
    0B50: 3D 00 0B C9 74 0B 66 8B D1 E8 49 0E 83 C7 1C EB  // =...t.f...I.....
    0B60: EC 66 59 5F C3 50 53 51 B9 07 00 53 8B DA E8 CA  // .fY_.PSQ...S....
    0B70: 21 83 F8 00 5B 74 09 66 C1 E3 10 8B DA E8 38 1E  // !...[t.f......8.
    0B80: 59 5B 58 C3 51 53 B9 07 00 E8 45 1E 5B 59 C3 66  // Y[X.QS....E.[Y.f
    0B90: 50 53 83 C3 06 E8 A3 21 5B 8B C8 66 C1 E1 10 53  // PS.....![..f...S
    0BA0: 83 C3 02 E8 95 21 8B C8 5B 66 58 C3 8D 9C 48 01  // .....!..[fX...H.
    0BB0: 32 C9 E8 2A 21 C3 57 B9 20 00 E8 20 1E 5F C3 33  // 2..*!.W. .. ._.3
    0BC0: C9 E8 A9 1E 75 3C 66 BA 37 F1 FF FF 66 33 C0 E8  // ....u<f.7...f3..
    0BD0: ED 05 33 C0 E8 6B 04 74 1C A9 C8 0E 74 F6 E8 08  // ..3..k.t....t...
    0BE0: FB F6 C3 04 75 05 F6 C3 18 74 E9 E8 30 00 50 E8  // ....u....t..0.P.
    0BF0: C3 FB 58 EB DF E8 1C 00 75 08 E8 31 00 8B C1 E8  // ..X.....u..1....
    0C00: B3 FB C3 8D 5D 28 66 C1 E3 10 8D 5C 28 B9 49 00  // ....](f....\(.I.
    0C10: E8 A5 1D C3 66 50 E8 BF 05 8B C8 66 58 C3 66 52  // ....fP.....fX.fR
    0C20: 66 BA FF FF FF FF 33 D0 E8 94 05 66 5A C3 50 53  // f.....3....fZ.PS
    0C30: 52 E8 E0 FF 75 09 33 C0 E8 07 04 8B C8 EB 10 83  // R...u.3.........
    0C40: F9 02 74 0B E8 36 09 80 FB 01 75 03 83 E1 FD 5A  // ..t..6....u....Z
    0C50: 5B 58 C3 56 66 33 C0 66 BA 00 F0 FF FF E8 59 08  // [X.Vf3.f......Y.
    0C60: 66 C1 E6 10 E8 E8 03 0B C0 74 03 E8 1C 00 E8 39  // f........t.....9
    0C70: 08 5E C3 66 52 66 8B D0 E8 40 16 8D 9C 1C 03 E8  // .^.fRf...@......
    0C80: B9 20 8A C2 E8 14 20 66 5A C3 50 51 E8 95 03 50  // . .... fZ.PQ...P
    0C90: 32 C0 E8 0A 05 E8 16 03 E8 98 00 8D 9C 40 03 E8  // 2............@..
    0CA0: 99 20 38 E8 74 0A 8A C5 E8 F0 1F B0 02 E8 EF 04  // . 8.t...........
    0CB0: 58 E8 CA 00 E8 A8 00 E8 8C 00 8D 9C 4C 01 E8 7A  // X...........L..z
    0CC0: 20 8B C8 8B D3 8D 9C 00 03 E8 6F 20 3B C1 74 05  //  .........o ;.t.
    0CD0: B0 02 E8 CA 04 E8 8D FE 8D 9C 00 03 E8 B9 15 8D  // ................
    0CE0: 9C D8 02 E8 B5 1F E8 8A FF 66 C1 CE 10 8B FE 66  // .........f.....f
    0CF0: C1 CE 10 E8 95 00 E8 D1 00 E8 48 04 8A E9 8D 9C  // ..........H.....
    0D00: DC 02 32 C9 E8 D8 1F E8 31 04 66 25 FF 0F 00 00  // ..2.....1.f%....
    0D10: 59 58 66 BA FF FF FF FF 33 D0 E8 9C 07 33 D2 C3  // YXf.....3....3..
    0D20: 53 66 50 8D 9C D4 02 E8 11 20 8A C4 E8 6C 1F 66  // SfP...... ...l.f
    0D30: 58 5B C3 53 66 50 8D 9C D4 02 E8 FE 1F 8A E0 E8  // X[.SfP..........
    0D40: 59 1F 66 58 5B C3 E8 97 03 E8 52 03 8A DD E8 FF  // Y.fX[.....R.....
    0D50: 16 8A E9 8D 9C 3C 03 32 C9 E8 83 1F 0B DB C3 83  // .....<.2........
    0D60: EC 08 8B EC E8 79 03 E8 34 03 E8 85 16 8D 9C 4C  // .....y..4......L
    0D70: 03 E8 C7 1F 8A 46 00 E8 21 1F 83 C4 08 C3 8D 9C  // .....F..!.......
    0D80: D4 02 E8 B6 1F 32 C0 E8 11 1F C3 E8 0A 00 8D 9C  // .....2..........
    0D90: D0 02 32 C9 E8 48 1F C3 B5 00 8D 1D E8 9C 1F 66  // ..2..H.........f
    0DA0: 8B D0 8D 9C 02 03 E8 92 1F 0B C0 74 1C 51 8B C8  // ...........t.Q..
    0DB0: 8D 9C 06 03 E8 84 1F 66 C1 E0 10 8B C1 59 66 3B  // .......f.....Yf;
    0DC0: C2 75 04 B5 00 EB 02 B5 02 C3 E8 4F 03 8D 9C 40  // .u.........O...@
    0DD0: 03 B1 03 E8 09 1F E8 50 FB 8D 9C 40 03 B1 02 E8  // .......P...@....
    0DE0: FD 1E E8 B9 02 80 FD 00 75 1D E8 94 00 66 81 FA  // ........u....f..
    0DF0: F0 D2 00 00 75 06 66 BA 78 69 00 00 E8 BE 00 E8  // ....u.f.xi......
    0E00: F7 00 E8 8D 03 EB 38 E8 63 03 E8 85 03 66 52 E8  // ......8.c....fR.
    0E10: D9 02 0B D2 74 07 E8 31 16 66 5A EB 22 E8 40 03  // ....t..1.fZ.".@.
    0E20: E8 97 18 66 5A 51 E8 75 02 80 FD 02 59 75 10 B5  // ...fZQ.u....Yu..
    0E30: 04 66 81 FA 74 40 00 00 76 05 B5 08 66 D1 EA 8D  // .f..t@..v...f...
    0E40: 9C 54 03 66 8B C2 E8 52 1E 8D 9C 40 03 E8 EB 1E  // .T.f...R...@....
    0E50: 8A E5 E8 46 1E E8 26 01 8D 9C 48 03 32 C9 E8 7E  // ...F..&...H.2..~
    0E60: 1E E8 7C 02 E8 37 02 E8 E3 15 8D 9C 58 03 32 C9  // ..|..7......X.2.
    0E70: E8 6C 1E E8 6A 02 E8 25 02 8D 9C 60 03 E8 90 15  // .l..j..%...`....
    0E80: C3 53 8D 9C 29 01 E8 B2 1E 66 33 D2 0A C0 75 05  // .S..)....f3...u.
    0E90: BA 48 3F 5B C3 8A D0 66 B8 8C 0A 00 00 66 F7 E2  // .H?[...f.....f..
    0EA0: 66 8B F8 E8 BA 02 E8 E1 17 74 0D E8 32 02 B3 00  // f........t..2...
    0EB0: E8 CC 14 66 3B D7 76 03 66 8B D7 5B C3 B7 01 53  // ...f;.v.f..[...S
    0EC0: 8D 9C 42 03 E8 74 1E 8A C8 5B 66 52 E8 83 00 E8  // ..B..t...[fR....
    0ED0: 9B 02 66 3B D1 66 5A 76 09 D0 E7 E8 07 00 38 EF  // ..f;.fZv......8.
    0EE0: 72 DD 8A EF C3 53 8D 9C 2A 01 E8 4E 1E 24 0F 8A  // r....S..*..N.$..
    0EF0: E8 0A ED 75 02 B5 01 5B C3 51 83 EC 08 8B EC 66  // ...u...[.Q.....f
    0F00: C7 46 00 48 3F 78 69 66 C7 46 04 F0 D2 00 00 E8  // .F.H?xif.F......
    0F10: D9 01 0B D2 74 03 E8 47 15 8A FD 53 8D 9C 42 03  // ....t..G...S..B.
    0F20: E8 18 1E 8A C8 5B E8 58 FF 66 33 C0 8B 46 00 66  // .....[.X.f3..F.f
    0F30: 3B C2 73 19 66 8B D0 E8 18 00 E8 30 02 66 3B D1  // ;.s.f......0.f;.
    0F40: 72 05 83 C5 02 EB D4 66 33 D2 8B 56 00 83 C4 08  // r......f3..V....
    0F50: 59 C3 66 52 52 32 ED 83 C1 02 B8 06 00 F7 E1 66  // Y.fRR2.........f
    0F60: 33 C9 8B C8 5A 51 66 33 C0 8B C2 8A CF 66 F7 E1  // 3...ZQf3.....f..
    0F70: 66 C1 E0 03 59 66 F7 F1 66 8B C8 66 5A C3 E8 6A  // f...Yf..f..fZ..j
    0F80: 01 0B D2 74 0B E8 16 00 0A ED 75 11 E8 45 14 C3  // ...t......u..E..
    0F90: B5 00 E8 CB 01 E8 EE 16 75 03 E8 01 00 C3 B5 00  // ........u.......
    0FA0: 8D 9C 31 01 E8 94 1D A8 01 74 02 B5 01 C3 53 E8  // ..1......t....S.
    0FB0: 39 01 66 C1 E2 10 E8 27 01 8D 9C B8 02 E8 7B 1D  // 9.f....'......{.
    0FC0: 8A E8 E8 EC 13 8A EB 5B C3 57 53 53 E8 DF FF E8  // .......[.WSS....
    0FD0: 0E 01 5B E8 4A 14 74 49 80 FD 00 75 24 53 E8 A0  // ..[.J.tI...u$S..
    0FE0: FE E8 45 F9 8A CD E8 FC FE 8A FD E8 64 FF 5B E8  // ..E.........d.[.
    0FF0: 49 1D 66 25 FF FF 00 00 66 3B C8 73 21 32 DB EB  // I.f%....f;.s!2..
    1000: 20 80 FD 02 75 18 53 E8 56 01 E8 8A 16 5B 74 0E  //  ...u.S.V....[t.
    1010: 8D 1F E8 26 1D 3D 74 40 76 04 32 DB EB 03 80 CB  // ...&.=t@v.2.....
    1020: 01 5B 5F C3 53 8B F0 E8 55 18 23 F0 74 09 8B C6  // .[_.S...U.#.t...
    1030: E8 F4 16 8B F3 0B DB 5B C3 51 E8 F1 FB E8 0F 00  // .......[.Q......
    1040: 59 C3 51 50 E8 38 18 8B C8 58 E8 02 00 59 C3 57  // Y.QP.8...X...Y.W
    1050: 53 E8 69 18 0B C0 74 09 8B 1D 83 C7 02 3B C3 75  // S.i...t......;.u
    1060: F7 8B 1D 83 FB FF 74 0B 83 C7 02 85 D9 74 F2 8B  // ......t......t..
    1070: C3 EB 02 33 C0 0B C0 5B 5F C3 33 C0 E8 C3 FF 74  // ...3...[_.3....t
    1080: 13 E8 A0 FF 8B DE B9 FB 00 E8 17 19 83 C6 08 E8  // ................
    1090: 9D 17 EB E8 BB F0 16 B8 5A A5 E8 16 1C C3 53 66  // ........Z.....Sf
    10A0: 50 8D 9C 40 03 E8 93 1C 8A E8 66 58 5B C3 8D 9C  // P..@......fX[...
    10B0: 69 03 E8 86 1C C3 8D 9C 64 03 E8 7E 1C 0B C0 C3  // i.......d..~....
    10C0: 53 66 50 8D 9C D4 02 E8 71 1C 8A C8 66 58 5B C3  // SfP.....q...fX[.
    10D0: 53 66 50 8D 9C D5 02 E8 61 1C 8A C8 66 58 5B C3  // SfP.....a...fX[.
    10E0: 53 8D 5C 14 E8 54 1C 8B D0 5B C3 53 66 50 8D 5C  // S.\..T...[.SfP.\
    10F0: 16 E8 47 1C 8B D0 66 58 5B C3 53 66 50 8D 9C 50  // ..G...fX[.SfP..P
    1100: 03 E8 37 1C 66 8B D0 66 58 5B C3 53 66 50 8D 9C  // ..7.f..fX[.SfP..
    1110: 54 03 E8 26 1C 66 8B D0 66 58 5B C3 53 66 50 8D  // T..&.f..fX[.SfP.
    1120: 5C 10 E8 16 1C 8B C8 66 58 5B C3 66 50 53 8D 9C  // \......fX[.fPS..
    1130: 41 03 E8 06 1C 5B 8A D8 66 58 C3 53 8D 5C 08 E8  // A....[..fX.S.\..
    1140: F9 1B 5B C3 53 50 8D 9C 4C 03 E8 EE 1B 8A C8 58  // ..[.SP..L......X
    1150: 5B C3 53 50 8D 9C 4D 03 E8 E0 1B 8A C8 58 5B C3  // [.SP..M......X[.
    1160: 53 50 8D 5C 0C E8 D3 1B 8B D0 58 5B C3 53 66 50  // SP.\......X[.SfP
    1170: 8D 9C 00 03 E8 C4 1B 66 33 D2 8B D0 66 58 5B C3  // .......f3...fX[.
    1180: 8D 5C 04 E8 B5 1B C3 51 8D 5C 04 32 C9 E8 4F 1B  // .\.....Q.\.2..O.
    1190: 59 C3 8D 9C 50 03 E8 A2 1B 8B C2 E8 FD 1A C3 53  // Y...P..........S
    11A0: 51 8A E8 E8 DA FF 24 FD 0A E8 E8 DA FF 59 5B C3  // Q.....$......Y[.
    11B0: 66 50 8D 9C D8 02 E8 82 1B 66 8B D0 66 58 C3 53  // fP.......f..fX.S
    11C0: 66 50 51 66 8B C8 BB 00 00 E8 3C 15 23 C2 0B C1  // fPQf......<.#...
    11D0: E8 3E 15 59 66 58 5B C3 BB 00 00 E8 2A 15 66 25  // .>.YfX[.....*.f%
    11E0: CA 0E 00 00 C3 E8 79 17 E8 43 17 E8 21 17 75 09  // ......y..C..!.u.
    11F0: E8 BB 18 E8 9B 16 E8 22 17 C3 B0 01 C3 55 B3 01  // .......".....U..
    1200: E8 2B 19 5D C3 66 53 66 BB 04 00 00 00 E8 05 00  // .+.].fSf........
    1210: 33 C0 66 5B C3 55 66 C1 E3 10 BB 00 00 E8 0E 19  // 3.f[.Uf.........
    1220: 5D C3 E8 35 18 BB 0A 00 E8 E6 14 C3 BB 0A 00 E8  // ]..5............
    1230: D6 14 66 8B C8 E8 22 18 BB 0A 00 66 2B C1 E8 D0  // ..f..."....f+...
    1240: 14 C3 E8 29 00 0B C9 74 22 E8 07 FA E8 1B 07 66  // ...)...t"......f
    1250: 51 66 8B C8 BB 07 00 E8 AE 14 66 25 00 FE 00 00  // Qf........f%....
    1260: 66 0B C1 E8 AB 14 66 59 0C 01 C3 32 C0 C3 E8 65  // f.....fY...2...e
    1270: 02 0B C9 75 06 E8 B6 F9 E8 6B 02 E8 B0 F9 66 C1  // ...u.....k....f.
    1280: E6 10 33 C0 E8 B2 FD 74 09 E8 04 03 75 F6 33 C8  // ..3....t....u.3.
    1290: EB F2 66 C1 EE 10 C3 A8 10 75 63 E8 DE 06 66 C1  // ..f......uc...f.
    12A0: E6 10 33 C0 E8 9B FD 74 35 E8 78 FD 50 51 8B C8  // ..3....t5.x.PQ..
    12B0: E8 F7 01 85 C1 59 58 74 0D 50 E8 C3 FE 24 03 3C  // .....YXt.P...$.<
    12C0: 03 58 75 E0 EB 0C 50 E8 B6 FE A8 01 58 74 D5 E8  // .Xu...P.....Xt..
    12D0: 61 FA 50 E8 C8 07 58 B5 00 E8 AB FE EB C6 E8 C9  // a.P...X.........
    12E0: 01 E8 40 FD E8 32 01 B1 00 E8 3C 07 66 C1 EE 10  // ..@..2....<.f...
    12F0: E8 82 06 A8 20 75 40 A8 40 75 03 E8 44 0D E8 69  // .... u@.@u..D..i
    1300: 06 0A C0 75 05 B5 01 E8 BC 0D E8 9D 01 E8 14 FD  // ...u............
    1310: E8 4D FE E8 74 13 75 14 E8 62 02 0A DB 74 0D E8  // .M..t.u..b...t..
    1320: 11 FA E8 79 07 B5 00 E8 5D FE EB 08 E8 51 07 B5  // ...y....]....Q..
    1330: 01 E8 53 FE E8 E6 00 C3 E8 44 15 C3 E8 3B FD E8  // ..S......D...;..
    1340: 9C 06 33 C9 E8 9F 01 66 33 D2 66 33 C0 E8 6F FE  // ..3....f3.f3..o.
    1350: E8 52 00 B1 FF E8 84 00 33 C0 E8 E5 FC 74 0A E8  // .R......3....t..
    1360: C2 FC 50 E8 CC 07 58 EB F1 32 C9 E8 C4 01 E8 0E  // ..P...X..2......
    1370: 15 0B C0 C3 E8 03 FD E8 64 06 66 33 C0 66 BA 00  // ........d.f3.f..
    1380: F0 FF FF E8 33 01 51 B1 01 E8 8C 01 59 33 C0 E8  // ....3.Q.....Y3..
    1390: B0 FC 74 0A E8 8D FC 50 E8 67 07 58 EB F1 E8 B1  // ..t....P.g.X....
    13A0: 0C E8 1B F8 C3 B8 02 00 E8 79 FC 74 2E B1 07 E8  // .........y.t....
    13B0: 2F 11 B8 02 00 E8 31 F3 F6 C3 04 75 12 E8 4A 17  // /.....1....u..J.
    13C0: 83 3D 00 75 0A E8 B7 14 83 E0 FD E8 BA 14 C3 66  // .=.u...........f
    13D0: B8 02 00 00 00 E8 E7 FD E8 C2 F4 C3 E8 3B 13 74  // .............;.t
    13E0: 23 38 E1 76 04 8A CC EB 06 38 C1 73 02 8A C8 BB  // #8.v.....8.s....
    13F0: 02 00 E8 13 13 8A E1 E8 17 13 B1 04 E8 E2 10 0C  // ................
    1400: 01 C3 0C 01 C3 51 E8 11 13 74 0C 8A CC BB 02 00  // .....Q...t......
    1410: E8 F5 12 8A C4 8A E1 59 C3 E8 EE 05 C3 E8 F9 05  // .......Y........
    1420: C3 E8 49 16 75 18 E8 81 00 E8 F8 FB 80 F9 01 75  // ..I.u..........u
    1430: 0E 51 E8 4B 06 B5 01 E8 4D FD 59 E8 DF FF C3 E8  // .Q.K....M.Y.....
    1440: D7 FF 51 E8 BC 06 B5 00 E8 3C FD 59 C3 B8 02 00  // ..Q......<.Y....
    1450: E8 D1 FB 74 03 E8 89 10 C3 E8 AD 04 3B C1 7C 3A  // ...t........;.|:
    1460: 8B C1 E8 ED 04 E8 21 0E 8B C8 51 E8 1D 05 E8 E1  // ......!...Q.....
    1470: 04 59 E8 14 0E 3B C8 72 02 8B C1 8D 5C 04 E8 32  // .Y...;.r....\..2
    1480: 18 32 C9 B5 0F E8 02 0C E8 0F 15 FE C1 38 C1 72  // .2...........8.r
    1490: F2 8D 5C 04 E8 A4 18 0B C0 C3 33 C0 C3 BB 00 18  // ..\.......3.....
    14A0: 33 C0 8A C2 C1 E0 02 03 D8 C3 53 BB 03 00 E8 57  // 3.........S....W
    14B0: 12 66 25 FF 0F 00 00 5B C3 53 66 50 66 51 66 8B  // .f%....[.SfPfQf.
    14C0: C8 BB 03 00 E8 41 12 66 23 C2 66 0B C1 E8 41 12  // .....A.f#.f...A.
    14D0: 66 59 66 58 5B C3 66 50 BB 05 00 E8 2A 12 25 FF  // fYfX[.fP....*.%.
    14E0: 0F 8B C8 66 58 C3 E8 96 13 23 C8 66 50 BB 05 00  // ...fX....#.fP...
    14F0: E8 15 12 25 00 F0 0B C1 E8 16 12 66 58 C3 66 50  // ...%.......fX.fP
    1500: 53 BB 06 00 E8 01 12 A8 10 75 09 BB F0 16 E8 2A  // S........u.....*
    1510: 18 3D 5A A5 5B 66 58 C3 66 50 53 BB 06 00 E8 E7  // .=Z.[fX.fPS.....
    1520: 11 80 F1 01 C0 E1 04 24 EF 0A C1 E8 E3 11 5B 66  // .......$......[f
    1530: 58 C3 53 66 50 BB F8 16 E8 00 18 8A C1 E8 5B 17  // X.SfP.........[.
    1540: 66 58 5B C3 53 BB F8 16 E8 F0 17 83 E0 01 5B C3  // fX[.S.........[.
    1550: 53 66 50 BB 07 00 E8 AF 11 F6 C4 01 66 58 B0 06  // SfP.........fX..
    1560: 74 02 B0 08 5B C3 53 BB 07 00 E8 9B 11 80 E4 FE  // t...[.S.........
    1570: 80 FD 06 74 03 80 CC 01 E8 96 11 5B C3 66 50 BB  // ...t.......[.fP.
    1580: 06 00 E8 83 11 24 40 C0 E8 06 8A D8 66 58 C3 C3  // .....$@.....fX..
    1590: 50 66 51 E8 8E FA 83 EC 04 8B EC 66 33 C0 66 89  // PfQ........f3.f.
    15A0: 46 00 33 D2 8D BC 68 01 8D 1D E8 8E 17 0B C0 74  // F.3...h........t
    15B0: 1F 8B DF B0 00 E8 0F 01 74 11 8B DF E8 D0 F5 66  // ........t......f
    15C0: 3B 4E 00 72 06 8B D7 66 89 4E 00 83 C7 1C EB D8  // ;N.r...f.N......
    15D0: 0B D2 74 0A 8D 9C 4C 01 E8 8A F5 E9 88 00 66 33  // ..t...L.......f3
    15E0: C0 66 89 46 00 8D BC F4 01 33 D2 8D 1D E8 4B 17  // .f.F.....3....K.
    15F0: 0B C0 74 58 66 50 E8 1E F3 3C 01 66 58 74 05 3D  // ..tXfP...<.fXt.=
    1600: 40 06 73 43 66 52 66 8B D0 8D 5D 04 E8 2C 17 E8  // @.sCfRf...]..,..
    1610: 5D 00 8B CA 66 5A 74 2F 56 8D 9C 4C 01 8B F1 E8  // ]...fZt/V..L....
    1620: 62 F5 5E B0 00 E8 9F 00 74 1D 8D 1D E8 0C 17 8B  // b.^.....t.......
    1630: D9 8B 47 06 66 C1 E0 10 8B 47 02 66 3B 46 00 72  // ..G.f....G.f;F.r
    1640: 06 8B D1 66 89 46 00 83 C7 08 EB 9F 0B D2 74 16  // ...f.F........t.
    1650: 56 8D 9C 4C 01 8B F2 E8 2A F5 5E 53 8D 9C 62 01  // V..L....*.^S..b.
    1660: 33 C0 E8 4E 16 5B 83 C4 04 0B D2 66 59 58 C3 57  // 3..N.[.....fYX.W
    1670: 53 51 E8 66 12 3B 55 02 75 18 66 C1 CA 10 8B DA  // SQ.f.;U.u.f.....
    1680: 66 C1 CA 10 3B 5D 06 75 09 0A C0 74 0E 3A 45 1B  // f...;].u...t.:E.
    1690: 74 09 83 C7 1C E2 DE 33 D2 EB 02 8B D7 0B D2 59  // t......3.......Y
    16A0: 5B 5F C3 51 66 52 E8 32 12 3A 65 1A 75 09 0A C0  // [_.QfR.2.:e.u...
    16B0: 74 0E 3A 45 1B 74 09 83 C7 1C E2 ED 33 FF EB 00  // t.:E.t......3...
    16C0: 0B FF 66 5A 59 C3 C3 66 51 66 52 53 53 66 C1 CE  // ..fZY..fQfRSSf..
    16D0: 10 8B DE 66 C1 CE 10 E8 61 16 5B 66 8B D0 E8 AE  // ...f....a.[f....
    16E0: F4 3B CA 72 0A 66 3B CA 72 05 E8 DC F8 75 02 32  // .;.r.f;.r....u.2
    16F0: C0 5B 66 5A 66 59 C3 56 57 E8 A7 FF 8B F7 E8 83  // .[fZfY.VW.......
    1700: F4 5F 5E C3 66 50 53 66 51 52 57 56 51 8B DE B9  // ._^.fPSfQRWVQ...
    1710: 08 00 E8 8E 12 59 8D 5C 08 8B C1 66 C1 E0 10 8A  // .....Y.\...f....
    1720: C2 E8 77 15 F6 C2 03 75 24 8B C1 24 7F BF E7 17  // ..w....u$..$....
    1730: 80 3D FF 0F 84 0F 01 3A 05 75 0D 66 8B 45 01 66  // .=.....:.u.f.E.f
    1740: B9 00 05 02 00 E9 96 00 83 C7 05 EB E3 F6 C2 01  // ................
    1750: 74 25 8B C1 E8 70 01 0F 84 EB 00 33 C9 8A CC 8A  // t%...p.....3....
    1760: D0 0A C0 75 12 8D 5C 08 66 25 FF FF 00 00 66 C1  // ...u..\.f%....f.
    1770: E0 08 E8 26 15 EB B2 8A E1 8A CA 80 E1 0C C0 E9  // ...&............
    1780: 02 80 E2 F0 C0 EA 04 8A EA 80 FC 70 72 2A 80 FC  // ...........pr*..
    1790: 75 73 25 80 EC 70 8A C4 32 E4 50 E8 30 02 8B D8  // us%..p..2.P.0...
    17A0: 58 38 D8 72 05 33 C0 E9 9C 00 E8 28 02 E8 8B 15  // X8.r.3.....(....
    17B0: 0B C0 0F 84 90 00 EB 1B 32 C0 E8 E6 FE 0F 84 85  // ........2.......
    17C0: 00 8D 5C 16 8B 05 E8 EA 14 8B 45 06 66 C1 E0 10  // ..\.......E.f...
    17D0: 8B 45 02 50 E8 B2 0A 66 C1 E1 10 8B C8 58 8D 1C  // .E.P...f.....X..
    17E0: E8 B8 14 66 50 8D 5C 04 66 8B C1 E8 AD 14 66 58  // ...fP.\.f.....fX
    17F0: 66 C1 E8 10 66 81 E1 FF FF 00 00 66 F7 E1 66 50  // f...f......f..fP
    1800: 8D 5C 06 E8 35 15 8B C8 66 58 66 D3 E0 66 C1 E8  // .\..5...fXf..f..
    1810: 10 40 8D 5C 14 E8 9B 14 BF 47 18 83 F9 01 74 11  // .@.\.....G....t.
    1820: BF 4F 18 81 F9 01 01 74 08 BF 57 18 83 F9 02 75  // .O.....t..W....u
    1830: 15 8D 5C 0C 66 8B 05 E8 61 14 8D 5C 10 66 8B 45  // ..\.f...a..\.f.E
    1840: 04 E8 57 14 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00  // ..W...^_ZfY[fX..
    1850: 40 01 90 01 01 40 01 90 01 02 80 02 90 01 03 80  // @....@..........
    1860: 02 90 01 04 40 01 90 01 05 40 01 90 01 06 80 02  // ....@....@......
    1870: 90 01 07 D0 02 5E 01 0D 40 01 90 01 0E 80 02 90  // .....^..@.......
    1880: 01 0F 80 02 5E 01 10 80 02 5E 01 11 80 02 E0 01  // ....^....^......
    1890: 12 80 02 E0 01 13 80 02 90 01 23 20 04 90 01 32  // ..........# ...2
    18A0: 20 04 B0 02 33 20 04 C0 02 62 80 02 E0 01 FF 05  //  ...3 ...b......
    18B0: 0A 05 05 05 00 00 00 05 0B 06 05 05 00 00 00 08  // ................
    18C0: 10 08 08 08 00 00 00 56 E8 E4 11 80 E4 01 3B 04  // .......V......;.
    18D0: 74 09 83 C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B C0  // t......3....D...
    18E0: 5E C3 57 53 50 E8 C7 11 83 E9 0A E8 E0 00 83 F8  // ^.WSP...........
    18F0: 05 76 03 B8 05 00 D1 E0 03 C8 FB A5 83 C6 02 E2  // .v..............
    1900: FA B8 FF FF AB 58 5B 5F C3 66 53 51 66 52 E8 41  // .....X[_.fSQfR.A
    1910: 00 E8 77 00 66 C1 E8 10 66 0F B7 D8 66 B8 00 00  // ..w.f...f...f...
    1920: 00 01 66 D3 E8 66 33 D2 66 F7 F3 E8 5B 09 66 5A  // ..f..f3.f...[.fZ
    1930: 59 66 5B C3 53 66 50 BB 07 00 E8 CB 0D 0A C0 66  // Yf[.SfP........f
    1940: 58 5B C3 53 66 50 BB 07 00 E8 BC 0D A8 01 66 58  // X[.SfP........fX
    1950: 5B C3 53 66 50 8D 5C 06 E8 E0 13 8A C8 66 58 5B  // [.SfP.\......fX[
    1960: C3 51 B9 08 00 E8 50 10 59 C3 53 8D 5C 08 E8 CA  // .Q....P.Y.S.\...
    1970: 13 24 03 5B C3 8D 5C 09 E8 C0 13 C3 51 53 B1 01  // .$.[..\.....QS..
    1980: 8A E8 8D 5C 08 E8 57 13 5B 59 C3 53 8D 1C E8 AA  // ...\..W.[Y.S....
    1990: 13 5B C3 53 8D 5C 04 E8 A1 13 5B C3 53 8D 5C 16  // .[.S.\....[.S.\.
    19A0: E8 98 13 5B C3 53 66 52 33 C0 E8 C2 FC 66 5A 75  // ...[.SfR3....fZu
    19B0: 1B E8 34 00 74 16 E8 15 00 40 83 F8 05 73 0D E8  // ..4.t....@...s..
    19C0: D9 12 48 E8 0F 00 66 8B C2 E8 CF 12 5B C3 BB 00  // ..H...f.....[...
    19D0: 1E E8 67 13 C3 BB 08 1E C1 E0 03 03 D8 C3 BB 00  // ..g.............
    19E0: 1E B9 32 00 E8 BC 0F C3 51 E8 E2 FF 0B C0 74 12  // ..2.....Q.....t.
    19F0: 8B C8 BB 08 1E E8 43 13 66 3B C2 74 07 83 C3 08  // ......C.f;.t....
    1A00: E2 F3 0B DB 59 C3 C3 00 C3 00 BB 20 DF E8 CD 32  // ....Y...... ...2
    1A10: E8 AD F6 B5 01 E8 DA 06 C3 BB 00 DF E8 BE 32 E8  // ..............2.
    1A20: 9E F6 B5 00 E8 CB 06 C3 80 F9 00 75 0A E8 70 0F  // ...........u..p.
    1A30: 8A C8 B5 02 E8 87 08 0B F6 74 29 E8 82 F6 B5 01  // .........t).....
    1A40: E8 B6 06 56 33 F6 B5 00 E8 3F 06 5E B5 01 E8 F3  // ...V3....?.^....
    1A50: F6 E8 6A 08 E8 27 09 E8 66 F6 8D 9C 00 03 E8 9F  // ..j..'..f.......
    1A60: 06 E8 E8 06 66 C1 CE 10 B5 01 E8 1D 06 E8 05 FF  // ....f...........
    1A70: A8 40 75 07 32 C0 B5 01 E8 ED 07 66 C1 CE 10 C3  // .@u.2......f....
    1A80: E8 3D F6 B5 01 E8 45 06 B5 00 E8 6C 06 E8 CF 06  // .=....E....l....
    1A90: B1 0F E8 D6 09 B1 10 E8 D1 09 E8 26 00 C3 E8 61  // ...........&...a
    1AA0: 00 E8 2C F6 B5 00 E8 24 06 B5 00 E8 4B 06 E8 A1  // ..,....$....K...
    1AB0: F6 E8 EC 0E 38 C1 74 0A 80 F9 0B 74 05 B5 03 E8  // ....8.t....t....
    1AC0: FC 07 C3 E8 25 F6 0B D2 74 0C E8 B3 F6 3C 01 74  // ....%...t....<.t
    1AD0: 05 B1 0F E8 D3 09 B1 0C E8 75 00 B1 01 E8 01 0A  // .........u......
    1AE0: E8 BB F5 80 FD 00 75 0D E8 E1 01 B1 0D E8 7B 09  // ......u.......{.
    1AF0: B1 03 E8 5B 00 E8 F3 F5 0B D2 74 05 B1 01 E8 A8  // ...[......t.....
    1B00: 09 C3 E8 E6 F5 0B D2 74 05 B1 00 E8 9B 09 B1 02  // .......t........
    1B10: E8 3D 00 E8 6A F6 A8 01 74 0D E8 81 F5 80 FD 00  // .=..j...t.......
    1B20: 75 05 B0 02 E8 0D 04 B1 00 E8 B5 09 B1 0D E8 1F  // u...............
    1B30: 00 C3 B1 07 E8 AA 09 E8 B1 F5 0B D2 75 0C E8 1F  // ............u...
    1B40: F6 E8 42 0B 75 09 E8 49 0A C3 B1 07 E8 5A 09 C3  // ..B.u..I.....Z..
    1B50: E8 0D F6 E8 30 0B 75 24 51 E8 85 09 59 80 F9 0C  // ....0.u$Q...Y...
    1B60: 75 1A 33 D2 56 83 C6 08 E8 59 0B 5E 0A C0 75 0C  // u.3.V....Y.^..u.
    1B70: B9 0A 00 E8 7E 0E 42 83 FA 1E 75 E8 C3 56 83 C6  // ....~.B...u..V..
    1B80: 08 E8 E1 0A 5E E8 63 F5 0B D2 74 03 E8 54 08 80  // ....^.c...t..T..
    1B90: FD 01 0F 84 CC 00 80 FD 02 0F 85 ED 00 B1 0C E8  // ................
    1BA0: AE FF 56 83 C6 08 E8 1B 0B 5E 0A C0 0F 84 DA 00  // ..V......^......
    1BB0: E8 DA 00 0A DB 0F 85 D1 00 8D 9C 35 01 E8 7B 11  // ...........5..{.
    1BC0: A8 01 74 03 E8 7A 03 E8 21 F5 0B D2 74 00 66 33  // ..t..z..!...t.f3
    1BD0: C9 E8 48 F5 66 BA 50 01 40 50 66 C1 C9 10 8A C1  // ..H.f.P.@Pf.....
    1BE0: 66 C1 C9 10 E8 D7 09 0F 85 9F 00 66 BA 50 01 50  // f..........f.P.P
    1BF0: 4F 52 E8 F6 F4 80 FA 22 5A 74 0D 8D 9C 2D 01 E8  // OR....."Zt...-..
    1C00: 39 11 24 06 3C 02 75 02 B6 02 8D 5C 28 66 C1 C9  // 9.$.<.u....\(f..
    1C10: 10 03 D9 66 C1 C9 10 E8 A4 09 75 6E 8A DF 32 FF  // ...f......un..2.
    1C20: 66 C1 C9 10 03 CB 66 C1 C9 10 66 BA 50 01 10 30  // f.....f...f.P..0
    1C30: 33 DB E8 89 09 75 53 66 C1 C9 10 8B C1 66 C1 C9  // 3....uSf.....f..
    1C40: 10 0B C0 74 45 83 F8 10 75 0F 8D 5C 28 E8 EB 10  // ...tE...u..\(...
    1C50: 66 0B C0 0F 85 7D FF EB 31 3D 80 00 0F 82 74 FF  // f....}..1=....t.
    1C60: EB 25 E8 B7 F4 8A E9 B1 A0 BA 00 80 BF 32 00 8D  // .%...........2..
    1C70: 5C 28 E8 1E 09 80 FF 01 74 0D B1 A2 8D 5C 28 E8  // \(......t....\(.
    1C80: 11 09 80 FF 01 75 03 B0 00 C3 B0 01 C3 E8 2B 00  // .....u........+.
    1C90: 74 0C B0 01 E8 9D 02 75 21 E8 1F 00 75 1C 66 BA  // t......u!...u.f.
    1CA0: 0C 00 90 43 8D 9C 30 01 E8 13 09 66 BA 20 00 90  // ...C..0....f. ..
    1CB0: 41 8D 9C 34 01 E8 06 09 33 DB C3 E8 5E F4 66 BA  // A..4....3...^.f.
    1CC0: 00 00 90 47 8D 9C 28 01 E8 F3 08 C3 E8 B1 F4 3C  // ...G..(........<
    1CD0: 01 75 0E E8 ED 02 80 FD 01 75 06 B5 02 E8 12 03  // .u.......u......
    1CE0: C3 8D 9C AC 03 B9 10 00 E8 B8 0C B0 01 E8 44 02  // ..............D.
    1CF0: 74 08 B5 04 E8 11 03 E9 19 01 B1 08 E8 6C 07 E8  // t............l..
    1D00: 66 02 B1 09 E8 64 07 E8 AC 01 8D 9C B8 03 66 33  // f....d........f3
    1D10: C0 E8 87 0F E8 47 01 B9 90 01 E8 CC 0C B0 01 E8  // .....G..........
    1D20: F7 01 B5 02 E8 D5 02 E8 5B 01 E8 E7 02 E8 C7 01  // ........[.......
    1D30: B5 03 E8 C7 02 33 C9 E8 E7 00 F6 C5 01 75 2E B5  // .....3.......u..
    1D40: 02 E8 B8 02 E8 07 01 F6 C5 04 74 08 B5 01 E8 B7  // ..........t.....
    1D50: 02 E9 BF 00 8A FD 80 E7 03 E8 CF 00 80 E3 03 38  // ...............8
    1D60: FB 75 07 E8 33 01 0F 84 A9 00 E8 54 01 FE C1 E8  // .u..3......T....
    1D70: B9 F3 38 D9 75 C1 8D 9C AC 03 E8 BE 0F 3C 03 74  // ..8.u........<.t
    1D80: 05 E8 DA 00 EB A1 8D 9C B0 03 66 33 C0 E8 0B 0F  // ..........f3....
    1D90: 8D 9C 2A 01 E8 A4 0F A8 40 74 0C B1 13 E8 CB 06  // ..*.....@t......
    1DA0: B0 03 E8 74 01 EB 0A B1 0A E8 BF 06 B0 02 E8 68  // ...t...........h
    1DB0: 01 B5 04 E8 46 02 E8 CC 00 E8 58 02 E8 38 01 B5  // ....F.....X..8..
    1DC0: 05 E8 38 02 33 C9 E8 58 00 80 FD 07 75 05 E8 73  // ..8.3..X....u..s
    1DD0: 00 75 27 51 B5 04 E8 23 02 59 F6 C5 01 75 07 B5  // .u'Q...#.Y...u..
    1DE0: 03 E8 24 02 EB 2D E8 65 00 8A D5 E8 D3 00 E8 5D  // ..$..-.e.......]
    1DF0: 00 38 EA 75 05 E8 A1 00 74 19 FE C1 E8 2C F3 38  // .8.u....t....,.8
    1E00: D9 75 C3 8D 9C AC 03 E8 31 0F 3C 04 75 05 E8 4D  // .u......1.<.u..M
    1E10: 00 EB A3 B0 00 E8 01 01 B1 0B E8 4E 06 E8 A3 01  // ...........N....
    1E20: C3 8D 9C C0 03 E8 0F 00 8A E8 C3 53 8D 9C C4 03  // ...........S....
    1E30: E8 04 00 5B 8A D8 C3 51 E8 00 0F C0 E1 02 D3 E8  // ...[...Q........
    1E40: 24 0F 59 C3 8D 9C C2 03 E8 F0 0E A8 01 C3 8D 9C  // $.Y.............
    1E50: B8 03 E8 A2 0E C3 8D 9C B8 03 E8 82 0E C3 33 C9  // ..............3.
    1E60: 33 D2 E8 E9 FF 38 D5 76 02 8A D5 FE C1 E8 BB F2  // 3....8.v........
    1E70: 38 D9 72 EE 33 C9 8A EA 8D 9C 5C 03 E8 60 0E B1  // 8.r.3.....\..`..
    1E80: 0B E8 5D 06 C3 E8 94 F2 8D 9C B8 03 E8 AC 0E 66  // ..]............f
    1E90: BA 03 01 80 83 E8 26 07 C3 51 53 8D 9C B0 03 E8  // ......&..QS.....
    1EA0: 55 0E FE C5 E8 38 0E 80 FD 06 72 07 B5 02 E8 57  // U....8....r....W
    1EB0: 01 33 C9 5B 59 C3 66 33 C0 8D 9C B0 03 E8 DB 0D  // .3.[Y.f3........
    1EC0: C3 32 ED E8 65 FF 80 E3 0C C0 EB 02 B7 03 2A FB  // .2..e.........*.
    1ED0: C0 E3 03 8A EB 80 FB 18 72 03 80 CD 20 E8 4B FF  // ........r... .K.
    1EE0: 80 E3 03 38 FB 72 02 8A DF 80 FB 03 75 03 80 CD  // ...8.r......u...
    1EF0: 04 0A EB E8 60 FF C3 E8 22 F2 8D 9C C0 03 66 BA  // ....`...".....f.
    1F00: 02 02 90 45 E8 B7 06 C3 E8 11 F2 66 BA 00 01 90  // ...E.......f....
    1F10: 42 8D 9C B4 03 E8 A6 06 C3 E8 00 F2 66 BA 02 01  // B...........f...
    1F20: 80 50 E8 99 06 C3 E8 E2 F1 8B C2 66 33 D2 B9 8C  // .P.........f3...
    1F30: 0A F7 F1 C3 E8 E5 F1 66 BA 00 06 80 50 E8 7E 06  // .......f....P.~.
    1F40: C3 E8 D8 F1 66 BA 11 01 80 50 B0 04 E8 6F 06 C3  // ....f....P...o..
    1F50: E8 C9 F1 66 BA 00 06 90 40 8D 9C C8 03 E8 5E 06  // ...f....@.....^.
    1F60: 8D 9C C8 03 E8 D4 0D C3 E8 BB FF E8 BD F1 8A E3  // ................
    1F70: 80 CC 80 50 E8 A5 F1 58 66 BA 00 01 80 61 E8 3D  // ...P...Xf....a.=
    1F80: 06 33 C9 E8 30 F1 0B C0 74 02 B5 10 8D 9C BC 03  // .3..0...t.......
    1F90: E8 4C 0D 8A C5 E8 84 F1 66 BA 07 01 80 50 E8 1D  // .L......f....P..
    1FA0: 06 E8 BC F1 E8 E3 06 75 19 8D 9C 48 03 E8 8B 0D  // .......u...H....
    1FB0: 0A C0 74 0E E8 65 F1 66 BA 0A 01 80 50 B0 01 E8  // ..t..e.f....P...
    1FC0: FC 05 C3 E8 42 FF E8 2E FF E8 84 FF 3C 01 75 1C  // ....B.......<.u.
    1FD0: E8 71 FE 74 17 33 C9 E8 47 FE 80 FD 07 75 0D FE  // .q.t.3..G....u..
    1FE0: C1 E8 47 F1 38 D9 75 EF B5 01 EB 02 B5 00 E8 01  // ..G.8.u.........
    1FF0: 00 C3 8D 9C AC 03 B1 02 E8 E4 0C C3 51 8D 9C AC  // ............Q...
    2000: 03 32 C9 E8 D9 0C 59 C3 51 8D 9C AC 03 B1 01 E8  // .2....Y.Q.......
    2010: CD 0C 59 C3 8D 9C 32 01 E8 20 0D 0A C0 75 15 B9  // ..Y...2.. ...u..
    2020: 64 00 8D 9C AC 03 E8 12 0D 3C 02 74 03 B9 90 01  // d........<.t....
    2030: E8 B6 09 C3 32 E4 B1 04 33 D2 F6 E1 8B C8 E8 B3  // ....2...3.......
    2040: 09 C3 51 8D 5C 14 E8 F2 0C 66 C1 E0 10 E8 58 01  // ..Q.\....f....X.
    2050: 59 C3 33 C9 E8 43 09 38 C1 73 05 B5 00 E8 74 00  // Y.3..C.8.s....t.
    2060: B5 00 E8 68 00 FE C1 E8 33 09 38 C1 72 E6 B1 14  // ...h....3.8.r...
    2070: 8A E9 E8 2B 09 38 C1 74 05 B5 03 E8 40 02 FE C1  // ...+.8.t....@...
    2080: E8 14 09 04 14 38 C1 76 E7 C3 83 EC 0C 8B EC 0B  // .....8.v........
    2090: F6 74 1E E8 F5 F8 66 C1 C8 10 66 89 46 00 8D 5C  // .t....f...f.F..\
    20A0: 04 E8 97 0C 66 89 46 04 8D 5C 08 E8 8D 0C 88 46  // ....f.F..\.....F
    20B0: 0A 89 4E 08 8C D0 66 C1 E0 10 8B C4 BB 2B 00 E8  // ..N...f......+..
    20C0: 2C 08 83 C4 0C C3 BB 25 00 E8 0F 00 C3 BB 23 00  // ,......%......#.
    20D0: E8 08 00 C3 BB 17 00 E8 01 00 C3 83 EC 04 8B EC  // ................
    20E0: 89 4E 00 8C D0 66 C1 E0 10 8B C4 E8 00 08 83 C4  // .N...f..........
    20F0: 04 C3 BB 22 00 E8 E3 FF C3 BB 2C 00 E8 DC FF C3  // ..."......,.....
    2100: E8 38 0C 66 A9 00 00 FF FF 74 40 83 EC 18 8B EC  // .8.f.....t@.....
    2110: 55 51 B9 04 00 83 C3 02 E8 20 0C 66 89 46 00 83  // UQ....... .f.F..
    2120: C5 04 83 C3 04 E2 F1 83 C3 04 E8 0E 0C 66 C1 C8  // .............f..
    2130: 10 66 89 46 00 59 5D 88 4E 14 8C D0 66 C1 E0 10  // .f.F.Y].N...f...
    2140: 8B C4 BB 31 00 E8 A6 07 83 C4 18 C3 E8 71 EF 8D  // ...1.........q..
    2150: 9C D0 02 E8 E5 0B 8A E8 BB 21 00 E8 7D FF C3 8D  // .........!..}...
    2160: 9C 3C 03 E8 D5 0B 8A F8 E8 33 EF 8A DD 53 8D 9C  // .<.......3...S..
    2170: 42 03 E8 C6 0B 8A E8 5B E8 45 EF E8 E2 EF E8 09  // B......[.E......
    2180: 05 75 02 B3 01 83 EC 04 8B EC 88 4E 00 88 7E 01  // .u.........N..~.
    2190: 88 5E 02 88 6E 03 8C D0 66 C1 E0 10 8B C4 BB 2A  // .^..n...f......*
    21A0: 00 E8 4A 07 83 C4 04 C3 83 EC 10 8B EC 66 8B C8  // ..J..........f..
    21B0: 66 33 C0 66 89 46 04 BB 00 17 E8 DE 0A 66 B8 00  // f3.f.F.......f..
    21C0: 80 00 D0 66 89 46 0C 66 33 C0 66 89 46 08 56 E8  // ...f.F.f3.f.F.V.
    21D0: F7 06 66 8B 44 04 66 50 66 C1 E8 16 88 46 08 66  // ..f.D.fPf....F.f
    21E0: 58 66 C1 E0 0A 66 05 00 17 00 00 66 89 46 00 5E  // Xf...f.....f.F.^
    21F0: 8C D0 66 C1 E0 10 8B C4 BB 35 00 E8 F0 06 8B EC  // ..f......5......
    2200: 66 B8 00 80 00 00 66 2B C8 66 89 46 04 66 05 00  // f.....f+.f.F.f..
    2210: 00 00 40 66 89 46 0C 66 33 C0 66 89 46 08 66 89  // ..@f.F.f3.f.F.f.
    2220: 46 00 8C D0 66 C1 E0 10 8B C4 BB 35 00 E8 BE 06  // F...f......5....
    2230: 8B EC 66 8B 46 0C 66 25 FF FF 1F 00 66 01 46 04  // ..f.F.f%....f.F.
    2240: 66 3B C8 76 1F 66 2B C8 66 8B 46 04 66 3D 00 FF  // f;.v.f+.f.F.f=..
    2250: 01 00 76 06 66 B8 00 FF 01 00 66 3B C8 73 AE 66  // ..v.f.....f;.s.f
    2260: 8B C1 EB A9 83 C4 10 C3 83 EC 08 8B EC 89 4E 00  // ..............N.
    2270: 66 89 56 02 89 5E 06 8C D0 66 C1 E0 10 8B C4 BB  // f.V..^...f......
    2280: 2D 00 E8 69 06 83 C4 08 C3 3D C0 7F 76 04 B8 C0  // -..i.....=..v...
    2290: 7F C3 83 C0 3F 24 C0 C3 51 E8 9F 0A 66 33 D2 B9  // ....?$..Q...f3..
    22A0: 0A 00 F7 F1 8B C8 E8 92 0A 03 C1 66 25 FF FF 00  // ...........f%...
    22B0: 00 59 3D 10 27 73 03 B8 10 27 C3 32 D2 C3 80 FD  // .Y=.'s...'.2....
    22C0: 02 75 19 E8 EA EE 66 BB 00 08 00 00 E8 8E 00 66  // .u....f........f
    22D0: 33 D2 66 BB 01 08 00 00 E8 82 00 C3 80 FD 03 75  // 3.f............u
    22E0: 10 66 33 C0 8A C1 66 33 D2 66 BB FF 00 00 00 EB  // .f3...f3.f......
    22F0: 36 51 33 D2 E8 A7 ED 8A D5 66 C1 E2 10 E8 E0 ED  // 6Q3......f......
    2300: 8A F2 8A D1 66 8B C2 66 0D 00 00 00 80 E8 1B EE  // ....f..f........
    2310: 80 FB 04 76 06 66 0D 00 00 00 08 E8 4F EE E8 9F  // ...v.f......O...
    2320: ED 66 33 DB 8A D9 59 83 EC 10 8B EC 66 89 46 04  // .f3...Y.....f.F.
    2330: 66 89 5E 08 66 8B C2 66 33 D2 66 BB 64 00 00 00  // f.^.f..f3.f.d...
    2340: 66 F7 E3 66 89 46 00 BB 0C 00 8C D0 66 C1 E0 10  // f..f.F......f...
    2350: 8B C4 E8 99 05 8B EC B3 01 83 C4 10 C3 83 EC 10  // ................
    2360: 8B EC 66 89 56 00 66 89 5E 04 BB 2E 00 8C D0 66  // ..f.V.f.^......f
    2370: C1 E0 10 8B C4 E8 76 05 B3 01 83 C4 10 C3 C3 53  // ......v........S
    2380: 51 66 50 B9 A0 8C 80 FB 00 75 1C B9 78 69 E8 81  // QfP......u..xi..
    2390: 04 83 E3 03 80 FB 03 75 0E E8 D1 05 66 3D 50 C3  // .......u....f=P.
    23A0: 00 00 72 03 B9 F0 D2 66 33 D2 8B D1 66 58 59 5B  // ..r....f3...fXY[
    23B0: C3 66 52 B3 00 66 F7 C2 00 00 FF FF 75 13 80 FD  // .fR..f......u...
    23C0: 13 74 0E 80 FD 14 74 09 B3 01 80 FD 0E 74 02 B3  // .t....t......t..
    23D0: 02 66 5A C3 B5 11 80 FA 23 74 07 80 FA 22 74 02  // .fZ.....#t..."t.
    23E0: B5 00 C3 B5 02 80 FA 23 74 07 80 FA 22 74 02 B3  // .......#t..."t..
    23F0: 01 C3 32 C9 80 FD 00 75 08 C7 46 00 0B 01 B1 01  // ..2....u..F.....
    2400: C3 50 33 C0 E8 6C 01 04 14 89 46 00 58 B1 01 C3  // .P3..l....F.X...
    2410: C3 8B DA B7 22 80 FE 21 74 02 B7 21 C3 0C 01 C3  // ...."..!t..!....
    2420: E8 18 09 66 C1 E8 10 0B C0 74 1C 53 83 C3 06 E8  // ...f.....t.S....
    2430: 09 09 5B 3D E0 01 72 0F 53 83 C3 18 E8 FC 08 5B  // ..[=..r.S......[
    2440: A8 80 75 03 0C 01 C3 32 C0 C3 B5 0C C3 B5 02 C3  // ..u....2........
    2450: 50 E8 1F 01 B1 03 0A C0 74 04 B1 08 02 C8 58 C3  // P.......t.....X.
    2460: 80 FA 22 75 05 C7 46 00 78 69 C3 E8 E8 00 80 FD  // .."u..F.xi......
    2470: FF 74 35 83 EC 0C 8B EC 88 4E 01 88 6E 00 80 F9  // .t5......N..n...
    2480: 0F 75 05 E8 24 00 EB 0F 80 F9 10 75 0A 8D 9C 48  // .u..$......u...H
    2490: 03 E8 A7 08 88 46 02 8C D0 66 C1 E0 10 8B C4 BB  // .....F...f......
    24A0: 04 00 E8 49 04 83 C4 0C C3 C3 66 53 E8 5C EC 66  // ...I......fS.\.f
    24B0: 8B C2 66 33 D2 66 BB 8C 0A 00 00 66 F7 F3 66 5B  // ..f3.f.....f..f[
    24C0: 8A E8 88 6E 09 8D 9C 40 03 E8 6F 08 88 46 02 88  // ...n...@..o..F..
    24D0: 66 03 66 C1 E8 10 88 46 08 E8 1E EC 66 89 56 04  // f.f....F....f.V.
    24E0: C3 83 EC 20 8B EC 80 F9 04 75 0A 88 4E 01 32 C0  // ... .....u..N.2.
    24F0: 88 46 00 EB 4F E8 E8 EB E8 78 00 88 46 00 88 4E  // .F..O....x..F..N
    2500: 01 E8 5C EC 88 56 0A 80 F9 01 74 11 80 F9 0B 75  // ..\..V....t....u
    2510: 33 8D 9C 5C 03 E8 23 08 88 46 02 EB 27 E8 FC EB  // 3..\..#..F..'...
    2520: 88 6E 08 E8 D4 EB 66 89 56 04 E8 FE EB 88 5E 03  // .n....f.V.....^.
    2530: E8 6B EB 88 6E 02 51 E8 1C 00 8A CD B0 01 D2 E0  // .k..n.Q.........
    2540: 59 88 46 09 8C D0 66 C1 E0 10 8B C4 BB 4C 00 E8  // Y.F...f......L..
    2550: 9C 03 83 C4 20 C3 8D 9C 3C 03 E8 DE 07 32 ED 3C  // .... ...<....2.<
    2560: 03 74 0C 3C 09 72 09 3C 0E 77 05 2C 08 8A E8 C3  // .t.<.r.<.w.,....
    2570: B5 FF C3 52 32 C0 80 EE 21 80 FA 1E 74 10 B0 02  // ...R2...!...t...
    2580: 80 FA 20 74 09 B0 04 80 FA 21 74 02 B0 06 02 C6  // .. t.....!t.....
    2590: 5A C3 C3 83 EC 08 8B EC 89 7E 00 89 5E 02 89 56  // Z........~..^..V
    25A0: 04 89 4E 06 8C D0 66 C1 E0 10 8B C4 BB 36 00 E8  // ..N...f......6..
    25B0: 3C 03 8B EC 8B 5E 02 8A 7E 01 83 C4 08 C3 56 33  // <....^..~.....V3
    25C0: F6 66 F7 C2 00 00 80 00 75 0A 50 33 C0 8A C6 8B  // .f......u.P3....
    25D0: F0 32 F6 58 53 BB 04 1F E8 C0 06 66 8B C2 BB 00  // .2.XS......f....
    25E0: 1F E8 B7 06 5B 66 F7 C2 00 00 10 00 75 02 33 DB  // ....[f......u.3.
    25F0: 8B D3 66 C1 E2 10 BA 00 1F 83 EC 08 8B EC 66 89  // ..f...........f.
    2600: 56 00 88 4E 04 8A C5 FE C8 88 46 07 C6 46 05 00  // V..N......F..F..
    2610: C6 46 06 00 8C D0 66 C1 E0 10 8B C4 BB 4E 00 E8  // .F....f......N..
    2620: CC 02 8B EC 8A 5E 05 8A 7E 06 83 C4 08 0A DB 74  // .....^..~......t
    2630: 32 51 B9 90 01 80 FB 20 74 05 80 FB 80 75 13 B9  // 2Q..... t....u..
    2640: 0A 00 8B C6 0A C0 74 0A B9 90 01 3C 01 74 03 B9  // ......t....<.t..
    2650: E8 03 E8 94 03 59 8B C6 FE C4 8B F0 80 FC 06 76  // .....Y.........v
    2660: 98 0A DB 5E C3 8D 5C 04 E8 D0 06 8B D0 B5 02 E8  // ...^..\.........
    2670: 14 00 74 11 B5 01 80 FA 13 75 0A E8 61 00 80 FA  // ..t......u..a...
    2680: 13 75 02 B5 02 C3 80 FA 14 C3 E8 F9 FF 74 03 80  // .u...........t..
    2690: FA 0E C3 80 FA 05 C3 80 FA 02 74 03 80 FA 04 C3  // ..........t.....
    26A0: 80 FA 01 74 03 80 FA 02 C3 80 FA 02 75 03 B2 01  // ...t........u...
    26B0: C3 80 FA 04 75 03 B2 03 C3 C3 B5 08 E8 D8 FF 74  // ....u..........t
    26C0: 02 B5 04 C3 8D 5C 09 E8 71 06 8A C8 0A C9 75 03  // .....\..q.....u.
    26D0: 32 C0 C3 B5 02 E8 9F 02 8A C5 24 02 D0 E8 C3 8D  // 2.........$.....
    26E0: 5C 08 E8 56 06 8A D0 B6 01 83 EC 10 8B EC 89 56  // \..V...........V
    26F0: 02 8C D0 66 C1 E0 10 8B C4 BB 4F 00 E8 EF 01 8B  // ...f......O.....
    2700: EC 8A 56 04 83 C4 10 C3 53 83 C3 4C E8 FA 05 5B  // ..V.....S..L...[
    2710: C3 53 83 C3 4C E8 4C 05 5B C3 56 E8 96 01 8B 44  // .S..L.L.[.V....D
    2720: 38 83 7D 20 00 5E C3 52 50 0F BC D8 32 FF 80 FB  // 8.} .^.RP...2...
    2730: 01 75 05 BB 00 24 EB 0C FE CB B8 00 04 F7 E3 05  // .u...$..........
    2740: 00 20 8B D8 58 5A C3 57 E8 56 00 74 0A 8B 5D 02  // . ..XZ.W.V.t..].
    2750: E8 08 00 0B DB 5F C3 33 DB 5F C3 52 51 0B DB 74  // ....._.3._.RQ..t
    2760: 1B 56 E8 36 01 03 DE 5E 33 C9 8A 4F 01 80 3F FF  // .V.6...^3..O..?.
    2770: 74 08 3A 07 74 06 03 D9 EB F0 33 DB 0B DB 59 5A  // t.:.t.....3...YZ
    2780: C3 56 51 E8 15 01 32 C9 8D 7C 08 3B 5D 04 74 0C  // .VQ...2..|.;].t.
    2790: 83 C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E  // .....:L.r.3...Y^
    27A0: C3 56 51 E8 F5 00 32 C9 8D 7C 08 3B 1D 74 0C 83  // .VQ...2..|.;.t..
    27B0: C7 10 FE C1 3A 4C 06 72 F2 33 FF 0B FF 59 5E C3  // ....:L.r.3...Y^.
    27C0: 56 51 E8 D6 00 32 C9 8D 7C 08 3B 45 0C 74 0C 83  // VQ...2..|.;E.t..
    27D0: C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3  // ....:L.r.3...Y^.
    27E0: 57 50 E8 DB FF 8A C3 8B 5D 02 E8 6E FF 58 5F C3  // WP......]..n.X_.
    27F0: 53 32 C9 B3 01 E8 E8 FF 74 03 8A 4F 02 0A C9 5B  // S2......t..O...[
    2800: C3 53 32 ED B3 02 E8 D7 FF 74 03 8A 6F 02 0A ED  // .S2......t..o...
    2810: 5B C3 50 57 8B DA E8 68 FF 75 04 33 DB EB 0D B0  // [.PW...h.u.3....
    2820: 14 8B 5D 08 E8 34 FF 74 F2 8B 5F 02 5F 58 C3 66  // ..]..4.t.._._X.f
    2830: 50 53 51 57 8D 1C 66 25 FF FF 00 00 E8 5C 04 8B  // PSQW..f%.....\..
    2840: D8 E8 3B 00 23 C3 74 31 E8 75 FF 0B FF 74 2A 66  // ..;.#.t1.u...t*f
    2850: 50 66 8B 45 04 8D 5C 0C E8 40 04 66 33 C0 8B 05  // Pf.E..\..@.f3...
    2860: 8D 5C 04 E8 35 04 66 58 E8 85 FF E8 93 FF 8D 5C  // .\..5.fX.......\
    2870: 08 66 33 C0 8B C1 E8 22 04 5F 59 5B 66 58 C3 56  // .f3...."._Y[fX.V
    2880: E8 18 00 8B 44 04 5E C3 56 E8 0F 00 89 44 04 5E  // ....D.^.V....D.^
    2890: C3 C3 BF 92 02 8B 3D 8B 7D 0C C3 BE 92 02 8B 34  // ......=.}......4
    28A0: 8B 74 30 C3 1E 0E 1F BF 92 02 8B 3D 8B 7D 0E 83  // .t0........=.}..
    28B0: C7 04 1F C3 BE 92 02 8B 34 8B 74 10 C3 BF 92 02  // ........4.t.....
    28C0: 8B 3D 8B 7D 26 83 C7 04 C3 BE 92 02 8B 34 8B 74  // .=.}&........4.t
    28D0: 1A C3 BE 92 02 8B 34 8B 74 3A C3 BF 92 02 8B 3D  // ......4.t:.....=
    28E0: 8B 7D 0A 83 C7 04 B9 07 00 C3 E8 01 00 CB 83 EC  // .}..............
    28F0: 06 8B EC 89 46 00 66 33 C0 C6 46 04 00 89 46 02  // ....F.f3..F...F.
    2900: 06 52 8A D3 8B C5 E8 56 16 5A 07 83 C4 06 C3 E8  // .R.....V.Z......
    2910: 80 FF 66 F7 45 10 01 00 00 00 C3 50 E8 73 FF B8  // ..f.E......P.s..
    2920: 01 00 09 45 10 58 C3 E8 68 FF 88 45 10 C3 66 53  // ...E.X..h..E..fS
    2930: 83 EC 48 8B EC 66 89 5E 00 66 89 4E 04 8C D0 66  // ..H..f.^.f.N...f
    2940: C1 E0 10 8B C4 BB 00 00 E8 A3 FF 83 C4 48 66 5B  // .............Hf[
    2950: E8 2F 01 BB 04 00 E8 AF FD 66 C1 E8 10 E8 C7 FF  // ./.......f......
    2960: C3 E8 2E FF 66 8B 5D 08 66 8B 4D 0C C3 56 E8 61  // ....f.].f.M..V.a
    2970: FF 66 8B 44 08 5E C3 83 EC 04 8B EC 89 4E 00 8C  // .f.D.^.......N..
    2980: D0 66 C1 E0 10 8B C4 BB 38 00 E8 61 FF 8B EC 8A  // .f......8..a....
    2990: 6E 02 83 C4 04 C3 C3 B0 06 C3 B0 01 C3 B0 06 C3  // n...............
    29A0: B0 08 C3 53 66 50 66 33 C0 E8 EF 02 83 C3 04 E2  // ...SfPf3........
    29B0: F8 66 58 5B C3 32 C0 C3 FC E8 7F 03 66 C1 CB 10  // .fX[.2......f...
    29C0: E8 D8 02 66 C1 CB 10 66 81 C3 04 00 04 00 E2 E9  // ...f...f........
    29D0: C3 FC 66 AD E8 C4 02 83 C3 04 E2 F6 C3 FC E8 5A  // ..f............Z
    29E0: 03 66 AB 83 C3 04 E2 F6 C3 66 50 B8 1B 00 E8 10  // .f.......fP.....
    29F0: 00 66 58 C3 66 50 B8 BC 34 D1 E1 E8 03 00 66 58  // .fX.fP..4.....fX
    2A00: C3 52 F7 E1 8B CA E8 4B 01 66 53 8B D9 66 C1 E3  // .R.....K.fS..f..
    2A10: 10 8B D8 66 B8 04 B1 03 00 B2 00 66 EF B2 04 66  // ...f.......f...f
    2A20: 33 C0 66 EF 66 B8 08 B1 03 00 B2 00 66 EF B2 04  // 3.f.f.......f...
    2A30: 66 ED 33 C9 66 03 D8 73 0A 66 ED 66 A9 00 00 00  // f.3.f..s.f.f....
    2A40: 80 75 F6 66 ED 66 3B C3 73 0C 66 C1 E8 10 3B C1  // .u.f.f;.s.f...;.
    2A50: 72 04 8B C8 EB ED 66 5B 5A C3 BB 42 EC E8 A9 02  // r.....f[Z..B....
    2A60: 66 33 D2 66 BB 1B 00 00 00 66 F7 F3 C3 66 50 53  // f3.f.....f...fPS
    2A70: BB 07 00 E8 92 FC 25 00 02 35 00 02 0B C0 5B 66  // ......%..5....[f
    2A80: 58 C3 B3 01 E8 A7 00 66 C1 E0 0A 66 83 E8 20 E8  // X......f...f.. .
    2A90: 37 FE 66 89 44 04 C7 44 08 20 00 C3 56 1E 0E 1F  // 7.f.D..D. ..V...
    2AA0: E8 26 FE 66 8B 44 04 66 C1 E0 0A 1F 5E C3 C3 BE  // .&.f.D.f....^...
    2AB0: 92 02 8B 34 8B 74 1E 83 C6 04 B9 1C 00 C3 33 FF  // ...4.t........3.
    2AC0: C3 56 E8 EF FD 8A 6C 33 5E C3 56 E8 E6 FD 53 81  // .V....l3^.V...S.
    2AD0: C3 09 01 E8 65 02 8A E8 5B 53 81 C3 00 01 E8 5A  // ....e...[S.....Z
    2AE0: 02 5B 8A C5 66 89 44 34 5E C3 56 E8 C6 FD 66 8B  // .[..f.D4^.V...f.
    2AF0: 44 34 53 81 C3 00 01 E8 A1 01 5B 53 81 C3 08 01  // D4S.......[S....
    2B00: B1 01 8A E8 E8 D8 01 5B 5E C3 56 E8 A6 FD 8B FE  // .......[^.V.....
    2B10: 83 C7 04 5E C3 56 E8 9B FD 8A 44 24 80 FD 00 74  // ...^.V....D$...t
    2B20: 05 88 6C 33 0C 02 88 44 24 5E C3 32 C0 C3 66 53  // ..l3...D$^.2..fS
    2B30: 83 EC 04 8B EC 8C D0 66 C1 E0 10 8B C4 66 89 5E  // .......f.....f.^
    2B40: 00 BB 06 00 E8 A7 FD 8B EC 66 8B 46 00 83 C4 04  // .........f.F....
    2B50: 66 5B C3 00 66 50 8C C8 3D 00 C0 75 0C BA C3 03  // f[..fP..=..u....
    2B60: EC 8A F0 0A F6 74 02 EB 0E 53 2E 8B 1E 14 00 B2  // .....t...S......
    2B70: 20 E8 D6 00 8A F4 5B 32 D2 66 ED 66 58 C3 2E 8B  //  .....[2.f.fX...
    2B80: 1E 14 00 C3 0B C9 75 1A 4B 74 16 43 3B DA 77 09  // ......u.Kt.C;.w.
    2B90: 8B C8 8B C2 2B D2 F7 F3 91 F7 F3 8B DA 8B D1 2B  // ....+..........+
    2BA0: C9 C3 3B CA 72 1A 75 10 3B D8 77 0C 2B C3 8B D8  // ..;.r.u.;.w.+...
    2BB0: 2B C9 2B D2 B8 01 00 C3 2B C9 2B DB 93 87 CA C3  // +.+.....+.+.....
    2BC0: 55 56 2B F6 8B EE 03 DB 13 C9 72 11 45 3B CA 72  // UV+.......r.E;.r
    2BD0: F5 77 04 3B D8 76 EF F8 13 F6 4D 78 20 D1 D9 D1  // .w.;.v....Mx ...
    2BE0: DB 2B C3 1B D1 F5 72 F0 03 F6 4D 78 0C D1 E9 D1  // .+....r...Mx....
    2BF0: DB 03 C3 13 D1 73 F1 EB DF 03 C3 13 D1 8B D8 8B  // .....s..........
    2C00: CA 8B C6 33 D2 5E 5D C3 93 50 92 0B C0 74 02 F7  // ...3.^]..P...t..
    2C10: E2 91 0B C0 74 04 F7 E3 03 C8 58 F7 E3 03 D1 C3  // ....t.....X.....
    2C20: 52 66 50 B4 80 8A C7 66 C1 E0 10 8A E3 8A C2 24  // RfP....f.......$
    2C30: FC BA F8 0C 66 EF 66 58 5A C3 52 BA FC 0C 66 ED  // ....f.fXZ.R...f.
    2C40: 5A C3 52 BA FC 0C 66 EF 5A C3 E8 31 FF 9C FA E8  // Z.R...f.Z..1....
    2C50: CE FF E8 E5 FF 9D C3 E8 24 FF 9C FA E8 C1 FF E8  // ........$.......
    2C60: E0 FF 9D C3 52 66 53 66 50 E8 06 00 66 58 66 5B  // ....RfSfP...fXf[
    2C70: 5A C3 66 C1 E3 10 66 C1 EB 0E E8 D7 FE E8 75 01  // Z.f...f.......u.
    2C80: C3 66 50 66 C1 E3 10 66 C1 EB 10 E8 0E FE 66 03  // .fPf...f......f.
    2C90: D8 66 81 CB 00 00 00 80 66 58 C3 52 66 53 E8 04  // .f......fX.RfS..
    2CA0: 00 66 5B 5A C3 66 50 E8 AA FE E8 D4 FF E8 45 01  // .f[Z.fP.......E.
    2CB0: 66 58 C3 52 51 66 53 66 50 8A CB 80 E3 FC 80 E1  // fX.RQfSfP.......
    2CC0: 03 C0 E1 03 E8 8D FE E8 B7 FF E8 0F 01 66 D3 C8  // .............f..
    2CD0: 58 50 66 D3 C0 E8 1D 01 66 58 66 5B 59 5A C3 66  // XPf.....fXf[YZ.f
    2CE0: 50 51 C0 E1 03 E8 53 00 66 D3 C8 8A C5 66 D3 C0  // PQ....S.f....f..
    2CF0: E8 A8 FF 59 66 58 C3 66 50 51 C0 E1 03 E8 3B 00  // ...YfX.fPQ....;.
    2D00: 66 D3 C8 59 8A E8 66 58 C3 E8 5F 00 C3 E8 44 FE  // f..Y..fX.._...D.
    2D10: 66 C1 E3 10 66 C1 EB 0E E8 C1 00 C3 E8 35 FE 66  // f...f........5.f
    2D20: C1 E3 02 E8 B6 00 C3 52 66 53 E8 04 00 66 5B 5A  // .......RfS...f[Z
    2D30: C3 E8 20 FE E8 4A FF E8 A2 00 C3 51 66 52 8A EB  // .. ..J.....QfR..
    2D40: 8A CB 80 E1 03 C0 E1 03 80 E3 FC E8 D9 FF 80 F9  // ................
    2D50: 00 74 14 66 8B D0 83 C3 04 E8 CB FF 83 EB 04 66  // .t.f...........f
    2D60: 92 66 0F AD D0 8A DD 66 5A 59 C3 52 66 53 E8 9C  // .f.....fZY.RfS..
    2D70: FF 66 5B 5A C3 52 66 53 E8 A1 FF 66 5B 5A C3 66  // .f[Z.RfS...f[Z.f
    2D80: 50 55 52 66 50 8B EC 8B 56 0C 89 56 08 E8 C4 FD  // PURfP...V..V....
    2D90: 2E A1 E1 02 B2 18 EF B2 00 66 ED 66 89 46 0A 66  // .........f.f.F.f
    2DA0: 58 5A 5D C3 66 50 55 52 8B EC E8 A7 FD B2 00 66  // XZ].fPUR.......f
    2DB0: 8B 46 0A 66 EF 8B 56 08 89 56 0C 66 8B 46 04 66  // .F.f..V..V.f.F.f
    2DC0: 89 46 08 5A 5D 66 58 66 58 C3 66 50 52 E8 84 FD  // .F.Z]fXfX.fPR...
    2DD0: B2 18 66 ED 2E A3 E1 02 5A 66 58 C3 66 81 FB FF  // ..f.....ZfX.f...
    2DE0: 00 00 00 77 04 8A D3 EB 09 66 8B C3 B2 00 66 EF  // ...w.....f....f.
    2DF0: B2 04 66 ED C3 66 81 FB FF 00 00 00 77 04 8A D3  // ..f..f......w...
    2E00: EB 0A 66 93 B2 00 66 EF 66 93 B2 04 66 EF C3 C3  // ..f...f.f...f...
    2E10: C3 55 8B EC 53 51 8B F0 26 8B 5C 14 26 8B 4C 16  // .U..SQ..&.\.&.L.
    2E20: E8 28 00 8D 66 FC 59 5B 5D C3 53 51 8B F0 26 8B  // .(..f.Y[].SQ..&.
    2E30: 5C 24 33 C9 E8 14 00 59 5B C3 55 8B EC 53 51 8B  // \$3....Y[.U..SQ.
    2E40: F0 26 8B 5C 08 26 8B 4C 0A EB D5 52 56 57 C8 06  // .&.\.&.L...RVW..
    2E50: 00 00 8B F0 89 4E FE 8C D0 8E C0 26 8B 7C 26 8A  // .....N.....&.|&.
    2E60: 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3 06  // E.2.. .+........
    2E70: D1 EA D1 D8 E2 FA 8A 4D 03 32 ED 8B FA E3 06 D1  // .......M.2......
    2E80: E0 D1 D7 E2 FA F7 D0 F7 D7 26 21 44 1C 26 21 7C  // .........&!D.&!|
    2E90: 1E 8C D0 8E C0 26 8B 7C 26 8A 4D 01 32 ED B8 20  // .....&.|&.M.2.. 
    2EA0: 00 2B C1 8B C8 66 C7 46 FA FF FF FF FF E3 08 D1  // .+...f.F........
    2EB0: 6E FC D1 5E FA E2 F8 8A 4D 02 32 ED 8B C3 8B 56  // n..^....M.2....V
    2EC0: FE E3 06 D1 EA D1 D8 E2 FA 23 46 FA 23 56 FC 8A  // .........#F.#V..
    2ED0: 4D 03 32 ED E3 06 D1 E0 D1 D2 E2 FA 26 09 44 1C  // M.2.........&.D.
    2EE0: 26 09 54 1E C9 5F 5E 5A C3 55 8B EC 53 51 52 57  // &.T.._^Z.U..SQRW
    2EF0: 50 8B D8 26 8B 7F 26 8A 45 01 32 E4 B9 20 00 2B  // P..&..&.E.2.. .+
    2F00: C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D  // ...............M
    2F10: 02 88 4E F6 C6 46 F7 00 8B FA 8B 4E F6 E3 06 D1  // ..N..F.....N....
    2F20: E0 D1 D7 E2 FA 26 09 47 1C 26 09 7F 1E 8D 66 F8  // .....&.G.&....f.
    2F30: 5F 5A E9 F1 FE 53 51 52 57 8B D8 8C D0 8E C0 26  // _Z...SQRW......&
    2F40: 8B 77 26 8A 4C 01 32 ED B8 20 00 2B C1 8B C8 BE  // .w&.L.2.. .+....
    2F50: FF FF 8B D6 E3 06 D1 EA D1 DE E2 FA 26 8B 7F 26  // ............&..&
    2F60: 8A 4D 02 32 ED 8B C6 E3 06 D1 E0 D1 D2 E2 FA F7  // .M.2............
    2F70: D0 F7 D2 26 21 47 1C 26 21 57 1E 5F E9 CC 05 53  // ...&!G.&!W._...S
    2F80: 56 8B D8 8C D2 8E C2 26 8B 77 26 80 3C 00 74 73  // V......&.w&.<.ts
    2F90: 80 3C 01 75 58 8A 44 01 32 E4 26 83 7F 1E 00 75  // .<.uX.D.2.&....u
    2FA0: 4C 26 3B 47 1C 75 46 8A 04 6B F0 03 8A 84 DE 8B  // L&;G.uF..k......
    2FB0: 26 01 47 26 8C D0 8E C0 26 8B 77 26 80 3C 09 74  // &.G&....&.w&.<.t
    2FC0: 17 8A 04 32 E4 6B F0 03 8B C3 FF 94 DC 8B 26 8B  // ...2.k........&.
    2FD0: 77 26 8A 04 32 E4 EB D1 8B 44 01 26 29 47 26 26  // w&..2....D.&)G&&
    2FE0: FF 47 26 26 8B 47 1C 26 8B 77 1E EB 1A 26 8B 77  // .G&&.G.&.w...&.w
    2FF0: 26 8A 04 32 E4 6B F0 03 8A 84 DE 8B 26 01 47 26  // &..2.k......&.G&
    3000: E9 80 FF 33 C0 33 F6 8B D6 5E 5B C3 53 51 52 56  // ...3.3...^[.SQRV
    3010: 8B D8 8D 77 35 26 8B 54 02 26 89 57 14 26 C7 47  // ...w5&.T.&.W.&.G
    3020: 16 00 00 8B F0 26 8B 47 20 33 D2 26 01 47 14 26  // .....&.G 3.&.G.&
    3030: 11 54 16 8C D1 8E C1 26 F6 47 2F 06 0F 85 0A 05  // .T.....&.G/.....
    3040: 26 80 7F 34 00 75 22 26 8B 77 16 26 0B 77 14 75  // &..4.u"&.w.&.w.u
    3050: 10 26 D1 67 08 26 D1 57 0A 26 D1 67 08 26 D1 57  // .&.g.&.W.&.g.&.W
    3060: 0A 8B C3 E8 79 11 E9 E1 04 26 8A 47 34 32 E4 05  // ....y....&.G42..
    3070: 80 00 99 26 89 47 1C 26 89 57 1E 8B C3 E8 FF FE  // ...&.G.&.W......
    3080: E9 C7 04 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4  // ...SV...w5&.D.2.
    3090: C1 E0 02 26 8B 37 26 8B 34 03 F0 26 8B 47 08 26  // ...&.7&.4..&.G.&
    30A0: 8B 5F 0A 26 89 04 26 89 5C 02 5E 5B C3 53 52 56  // ._.&..&.\.^[.SRV
    30B0: 8B D8 8C D0 8D 77 35 8E C0 26 8A 54 02 80 FA 40  // .....w5..&.T...@
    30C0: 73 21 26 8B 77 02 32 F6 C1 E2 02 26 8B 74 04 03  // s!&.w.2....&.t..
    30D0: F2 26 8B 57 08 26 8B 47 0A 26 89 14 26 89 44 02  // .&.W.&.G.&..&.D.
    30E0: E9 7F 00 80 FA 41 75 12 26 8B 47 08 26 8B 57 0A  // .....Au.&.G.&.W.
    30F0: 26 89 47 10 26 89 57 12 EB 68 80 FA 40 75 12 26  // &.G.&.W..h..@u.&
    3100: 8B 47 08 26 8B 57 0A 26 89 47 0C 26 89 57 0E EB  // .G.&.W.&.G.&.W..
    3110: 51 80 FA 42 75 0A 26 8B 47 08 26 89 47 22 EB 42  // Q..Bu.&.G.&.G".B
    3120: 80 FA 43 75 0A 26 8A 47 08 26 88 47 33 EB 33 80  // ..Cu.&.G.&.G3.3.
    3130: FA 46 75 12 26 8B 57 08 26 8B 47 0A 26 89 57 18  // .Fu.&.W.&.G.&.W.
    3140: 26 89 47 1A EB 1C 80 FA 47 75 0A 26 8B 47 08 26  // &.G.....Gu.&.G.&
    3150: 89 47 24 EB 0D 80 FA 48 75 08 26 8B 47 08 26 89  // .G$....Hu.&.G.&.
    3160: 47 20 5E 5A 5B C3 53 56 8B D8 8D 77 35 26 8A 44  // G ^Z[.SV...w5&.D
    3170: 02 32 E4 26 89 47 14 26 C7 47 16 00 00 5E 5B C3  // .2.&.G.&.G...^[.
    3180: 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 04 32 E4  // SV..&.w.&.t...2.
    3190: 26 89 47 14 26 C7 47 16 00 00 26 8B 5F 02 26 FF  // &.G.&.G...&._.&.
    31A0: 47 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74  // G.^[.SV..&.w.&.t
    31B0: 02 8B 34 26 89 77 14 26 C7 47 16 00 00 26 8B 5F  // ..4&.w.&.G...&._
    31C0: 02 26 83 47 02 02 5E 5B C3 53 56 8B D8 26 8B 77  // .&.G..^[.SV..&.w
    31D0: 02 26 8B 74 02 8B 04 8B 74 02 26 89 47 14 26 89  // .&.t....t.&.G.&.
    31E0: 77 16 26 8B 5F 02 26 83 47 02 04 5E 5B C3 53 52  // w.&._.&.G..^[.SR
    31F0: 56 8B D8 E8 70 FF 8B F3 26 8B 47 18 26 8B 57 1A  // V...p...&.G.&.W.
    3200: D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16  // ........&.G.&.T.
    3210: 8B C3 E8 2B 10 E9 4A FF 53 8B D8 26 8B 5F 02 26  // ...+..J.S..&._.&
    3220: FF 47 02 5B C3 53 8B D8 26 8B 5F 02 26 83 47 02  // .G.[.S..&._.&.G.
    3230: 02 5B C3 53 56 8B D8 E8 6B FF 8B F3 26 8B 57 20  // .[.SV...k...&.W 
    3240: 33 C0 26 01 57 14 26 11 44 16 8C D2 8E C2 26 8B  // 3.&.W.&.D.....&.
    3250: 47 2E 32 C0 80 E4 06 3D 00 02 75 07 32 E4 33 D2  // G.2....=..u.2.3.
    3260: 5E 5B C3 26 8B 47 2E 32 C0 80 E4 06 3D 00 04 74  // ^[.&.G.2....=..t
    3270: EB 26 80 7F 34 00 75 08 8B C3 E8 2F 0F 5E 5B C3  // .&..4.u..../.^[.
    3280: 26 8A 47 34 32 E4 26 89 47 1C 26 C7 47 1E 00 00  // &.G42.&.G.&.G...
    3290: 8B C3 E8 EA FC 5E 5B C3 53 8B D8 E8 E2 FE 26 8B  // .....^[.S.....&.
    32A0: 47 14 C1 E0 02 26 8B 1F 26 8B 1F 03 D8 26 8B 07  // G....&..&....&..
    32B0: 26 8B 57 02 5B C3 BC 32 B1 32 C7 32 16 33 CD 32  // &.W.[..2.2.2.3.2
    32C0: E5 32 FF 32 0A 33 10 33 53 51 56 8B D8 E8 B0 FE  // .2.2.3.3SQV.....
    32D0: 8C D2 8E C2 26 83 7F 16 00 75 22 26 83 7F 14 40  // ....&....u"&...@
    32E0: 73 1B 26 8B 77 02 26 8B 5F 14 C1 E3 02 26 8B 44  // s.&.w.&._....&.D
    32F0: 04 03 D8 26 8B 07 26 8B 57 02 E9 7B 05 26 8B 77  // ...&..&.W..{.&.w
    3300: 14 26 8B 47 16 83 C6 C0 83 D0 FF 75 71 83 FE 08  // .&.G.......uq...
    3310: 77 6C 03 F6 2E FF A4 4E 32 26 8B 47 10 26 8B 57  // wl.....N2&.G.&.W
    3320: 12 E9 54 05 26 8B 47 0C 26 8B 57 0E E9 49 05 26  // ..T.&.G.&.W..I.&
    3330: 8B 47 22 EB 4B 26 8A 4F 33 32 ED BB 01 00 33 D2  // .G".K&.O32....3.
    3340: E3 06 D1 E3 D1 D2 E2 FA 8B C3 E9 2B 05 26 8A 4F  // ...........+.&.O
    3350: 33 32 ED B8 01 00 33 D2 E3 06 D1 E0 D1 D2 E2 FA  // 32....3.........
    3360: F7 D0 F7 D2 E9 11 05 26 8B 47 18 26 8B 57 1A E9  // .......&.G.&.W..
    3370: 06 05 26 8B 47 24 EB 08 26 8B 47 20 EB 02 33 C0  // ..&.G$..&.G ..3.
    3380: 33 D2 E9 F3 04 53 56 8B D8 E8 F4 FD 8B F3 26 8B  // 3....SV.......&.
    3390: 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01  // G.&.W.........&.
    33A0: 47 14 26 11 54 16 8B C3 E8 16 0E 5E 5B C3 33 C0  // G.&.T......^[.3.
    33B0: 33 D2 C3 53 56 8B D8 E8 EB FD 26 8B 77 14 26 03  // 3..SV.....&.w.&.
    33C0: 77 22 8B 04 8B 54 02 5E 5B C3 53 8B D8 26 C6 47  // w"...T.^[.S..&.G
    33D0: 2B 04 E8 AB FD 26 8B 47 14 26 8B 57 16 5B C3 53  // +....&.G.&.W.[.S
    33E0: 8B D8 26 C6 47 2B 01 E8 BB FD EB E9 53 8B D8 26  // ..&.G+......S..&
    33F0: C6 47 2B 00 E8 D2 FD EB DC 53 8B D8 83 C3 35 26  // .G+......S....5&
    3400: 8A 5F 01 C0 EB 03 80 E3 07 32 FF 03 DB FF 97 6C  // ._.......2.....l
    3410: 8B 5B C3 53 52 56 8B D8 26 8A 47 2C 32 E4 8B F0  // .[.SRV..&.G,2...
    3420: 03 F0 8B C3 FF 94 88 8B 26 89 47 08 26 89 57 0A  // ........&.G.&.W.
    3430: 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 A0 8B  // &.G-2...........
    3440: 26 89 47 04 26 89 57 06 E9 17 FD 53 51 56 8B D8  // &.G.&.W....SQV..
    3450: 26 8A 4F 2B 32 ED 8B F1 8A 8C D0 8B E3 0A 26 D1  // &.O+2.........&.
    3460: 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1  // o.&._...&.O+2...
    3470: C1 E6 02 8B 8C B0 8B 8B B4 B2 8B 26 21 4F 04 26  // ...........&!O.&
    3480: 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C D8 8B E3  // !w.&.O*2........
    3490: 0A 26 D1 67 04 26 D1 57 06 E2 F6 26 8B 4F 08 26  // .&.g.&.W...&.O.&
    34A0: 8B 77 0A 26 89 4F 14 26 89 77 16 E9 CA 03 53 51  // .w.&.O.&.w....SQ
    34B0: 52 56 57 8B D8 8C D0 8E C0 26 8A 47 2B 32 E4 8B  // RVW......&.G+2..
    34C0: F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D D8 8B 32 ED  // ....&.G*......2.
    34D0: 8B 84 B0 8B 8B 94 B2 8B E3 06 D1 E0 D1 D2 E2 FA  // ................
    34E0: F7 D0 F7 D2 26 21 47 14 26 21 57 16 26 8A 47 2A  // ....&!G.&!W.&.G*
    34F0: 32 E4 8B F0 8A 8C D8 8B 32 ED E3 0A 26 D1 6F 0A  // 2.......2...&.o.
    3500: 26 D1 5F 08 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B  // &._...&.G+......
    3510: 84 B0 8B 8B 94 B2 8B 26 21 47 08 26 21 57 0A 26  // .......&!G.&!W.&
    3520: 8A 47 2A 32 E4 8B F0 8A 8C D8 8B 32 ED E3 0A 26  // .G*2.......2...&
    3530: D1 67 08 26 D1 57 0A E2 F6 26 8B 47 14 26 8B 57  // .g.&.W...&.G.&.W
    3540: 16 26 09 47 08 26 09 57 0A 5F 5E 5A 59 5B C3 53  // .&.G.&.W._^ZY[.S
    3550: 51 56 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C D0 8B  // QV..&.O+2.......
    3560: E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B  // ..&.o.&._...&.O+
    3570: 32 ED 8B F1 C1 E6 02 8B 8C B0 8B 8B B4 B2 8B 26  // 2..............&
    3580: 21 4F 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A  // !O.&!w.&.O*2....
    3590: 8C D8 8B E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26  // .....&.o.&._...&
    35A0: 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C B0 8B 8B B4  // .O+2............
    35B0: B2 8B 26 21 4F 08 26 21 77 0A E9 BB 02 51 52 57  // ..&!O.&!w....QRW
    35C0: 8B D8 8C D0 8E C0 26 80 7F 2B 00 74 1A 26 8A 47  // ......&..+.t.&.G
    35D0: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 88 8B 26 89 47  // ,2...........&.G
    35E0: 08 26 89 57 0A EB 10 26 8A 47 2C 32 E4 8B F0 03  // .&.W...&.G,2....
    35F0: F0 8B C3 FF 94 94 8B 26 8A 47 2D 32 E4 8B F0 03  // .......&.G-2....
    3600: F0 8B C3 FF 94 A0 8B 26 89 47 04 26 89 57 06 8C  // .......&.G.&.W..
    3610: D2 8E C2 26 80 7F 2B 00 74 4A 26 8A 47 2B 32 E4  // ...&..+.tJ&.G+2.
    3620: 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D D8 8B 32  // .....&.G*......2
    3630: ED 8B 84 B0 8B 8B 94 B2 8B E3 06 D1 E0 D1 D2 E2  // ................
    3640: FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A 8B C3 E8  // .....&!G.&!W....
    3650: F9 FD 26 8B 47 04 26 8B 57 06 26 09 47 08 26 09  // ..&.G.&.W.&.G.&.
    3660: 57 0A EB 10 26 8B 57 04 26 8B 47 06 26 89 57 08  // W...&.W.&.G.&.W.
    3670: 26 89 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // &.G.&.G,2.......
    3680: FF 94 7C 8B 5F 5A 59 C3 53 51 52 56 57 8B D8 26  // ..|._ZY.SQRVW..&
    3690: 8A 47 2A 32 E4 8B F0 8A 8C D8 8B 32 ED E3 0A 26  // .G*2.......2...&
    36A0: D1 67 04 26 D1 57 06 E2 F6 8C D0 8E C0 26 8A 47  // .g.&.W.......&.G
    36B0: 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D  // +2......&.G*....
    36C0: D8 8B 32 ED 8B 84 B0 8B 8B 94 B2 8B E3 06 D1 E0  // ..2.............
    36D0: D1 D2 E2 FA F7 D0 F7 D2 26 09 47 04 26 09 57 06  // ........&.G.&.W.
    36E0: 26 8B 47 04 26 8B 57 06 26 21 47 08 26 21 57 0A  // &.G.&.W.&!G.&!W.
    36F0: E9 56 FE 55 8B EC 51 52 50 8B D8 26 8A 47 2C 32  // .V.U..QRP..&.G,2
    3700: E4 8B F0 03 F0 8B C3 FF 94 88 8B 26 89 47 08 26  // ...........&.G.&
    3710: 89 57 0A 26 8A 47 2B 88 46 FA 8B C3 E8 DA FC 26  // .W.&.G+.F......&
    3720: 89 47 04 26 89 57 06 26 8A 4F 2D 32 ED 8B F1 03  // .G.&.W.&.O-2....
    3730: F1 8B C3 FF 94 A0 8B 26 89 47 14 26 89 57 16 8B  // .......&.G.&.W..
    3740: C3 E8 44 FF 8A 46 FA 32 E4 8B F0 8A 8C D0 8B E3  // ..D..F.2........
    3750: 0A 26 D1 6F 16 26 D1 5F 14 E2 F6 26 8A 57 2B 32  // .&.o.&._...&.W+2
    3760: F6 8B F2 C1 E6 02 8B 84 B0 8B 8B 94 B2 8B 26 21  // ..............&!
    3770: 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C  // G.&!W.&.G*2.....
    3780: D8 8B 32 ED E3 0A 26 D1 67 14 26 D1 57 16 E2 F6  // ..2...&.g.&.W...
    3790: 26 8B 47 14 26 8B 57 16 26 09 47 08 26 09 57 0A  // &.G.&.W.&.G.&.W.
    37A0: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 7C 8B  // &.G,2.........|.
    37B0: 8D 66 FC 5A 59 5D C3 51 8B D8 E8 56 FC 26 8A 4F  // .f.ZY].Q...V.&.O
    37C0: 2B 32 ED 8B F1 8A 8C D0 8B E3 0A 26 D1 6F 06 26  // +2.........&.o.&
    37D0: D1 5F 04 E2 F6 8B C3 E8 AE FE 26 8A 4F 2C 32 ED  // ._........&.O,2.
    37E0: 8B F1 03 F1 8B C3 FF 94 7C 8B 59 C3 8B D8 E8 22  // ........|.Y...."
    37F0: FC 8B C3 E8 55 FC 26 8B 47 04 26 8B 77 06 26 09  // ....U.&.G.&.w.&.
    3800: 47 08 26 09 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0  // G.&.w.&.G,2.....
    3810: 8B C3 FF 94 7C 8B C3 53 56 8B D8 E8 F5 FB 8B C3  // ....|..SV.......
    3820: E8 28 FC 26 8B 47 04 26 8B 77 06 26 31 47 08 26  // .(.&.G.&.w.&1G.&
    3830: 31 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // 1w.&.G,2........
    3840: 94 7C 8B 5E 5B C3 53 51 56 8B D8 E8 C5 FB 8B C3  // .|.^[.SQV.......
    3850: E8 F8 FB 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57  // ...&.O...&.g.&.W
    3860: 0A E2 F6 8B C3 E8 46 FC 26 8A 4F 2C 32 ED 8B F1  // ......F.&.O,2...
    3870: 03 F1 8B C3 FF 94 7C 8B 5E 59 5B C3 53 51 56 8B  // ......|.^Y[.SQV.
    3880: D8 E8 8F FB 8B C3 E8 C2 FB 26 8B 4F 04 E3 0A 26  // .........&.O...&
    3890: D1 6F 0A 26 D1 5F 08 E2 F6 EB C8 52 8B D8 E8 72  // .o.&._.....R...r
    38A0: FB 8B C3 E8 A5 FB 8B F3 26 8B 47 04 26 8B 57 06  // ........&.G.&.W.
    38B0: 26 01 47 08 26 11 54 0A 8B C3 E8 F1 FB 26 8A 47  // &.G.&.T......&.G
    38C0: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 7C 8B 5A C3 52  // ,2.........|.Z.R
    38D0: 8B D8 E8 3E FB 8B C3 E8 71 FB 8B F3 26 8B 47 04  // ...>....q...&.G.
    38E0: 26 8B 57 06 26 29 47 08 26 19 54 0A EB CA 51 52  // &.W.&)G.&.T...QR
    38F0: 8B F0 E8 1E FB 8B C6 E8 55 FC 26 8B 44 08 26 8B  // ........U.&.D.&.
    3900: 54 0A 26 8B 5C 04 26 8B 4C 06 E8 FB F2 26 89 44  // T.&.\.&.L....&.D
    3910: 0C 26 89 54 0E 5A 59 C3 52 8B D0 E8 F5 FA 8B C2  // .&.T.ZY.R.......
    3920: E8 2C FC 8B C2 E8 5C 08 5A C3 51 52 57 8B F0 E8  // .,....\.Z.QRW...
    3930: E1 FA 8B C6 E8 18 FC 26 8B 44 08 26 8B 54 0A 26  // .......&.D.&.T.&
    3940: 8B 5C 04 26 8B 4C 06 E8 3A F2 26 89 44 0C 26 89  // .\.&.L..:.&.D.&.
    3950: 54 0E 8C D7 8E C7 26 8B 44 08 26 8B 54 0A 26 8B  // T.....&.D.&.T.&.
    3960: 5C 04 26 8B 4C 06 E8 1B F2 26 89 5C 10 26 89 4C  // \.&.L....&.\.&.L
    3970: 12 E9 10 FD 52 8B D0 E8 99 FA 8B C2 E8 D0 FB 8B  // ....R...........
    3980: C2 E8 D3 07 5A C3 51 52 8B D8 E8 86 FA 8B C3 E8  // ....Z.QR........
    3990: BD FB 8C D1 8E C1 26 8B 47 08 26 8B 57 0A 26 3B  // ......&.G.&.W.&;
    39A0: 57 06 75 0E 26 3B 47 04 75 08 26 C6 47 30 01 5A  // W.u.&;G.u.&.G0.Z
    39B0: 59 C3 8B D0 26 8B 47 0A 26 3B 47 06 72 08 75 0A  // Y...&.G.&;G.r.u.
    39C0: 26 3B 57 04 73 04 33 C0 EB 03 B8 02 00 26 88 47  // &;W.s.3......&.G
    39D0: 30 5A 59 C3 51 52 57 8B D8 26 8A 47 2C 32 E4 8B  // 0ZY.QRW..&.G,2..
    39E0: F0 03 F0 8B C3 FF 94 88 8B 26 89 47 08 26 89 57  // .........&.G.&.W
    39F0: 0A 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02  // .....&.G+2......
    3A00: 8B F8 8A 8D D0 8B 32 ED 8B 84 B0 8B 8B 94 B2 8B  // ......2.........
    3A10: E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08  // ............&!G.
    3A20: 26 21 57 0A E9 4D FC 55 8B EC 51 52 57 83 EC 06  // &!W..M.U..QRW...
    3A30: 8B D8 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A  // ..&.G+2.........
    3A40: 8D D0 8B 32 ED 8B 84 B0 8B 89 46 F4 8B 84 B2 8B  // ...2......F.....
    3A50: 89 46 F6 E3 08 D1 66 F4 D1 56 F6 E2 F8 8B 7E F4  // .F....f..V....~.
    3A60: 8B 46 F6 89 46 F8 26 8A 47 2C 32 E4 8B F0 03 F0  // .F..F.&.G,2.....
    3A70: 8B C3 FF 94 88 8B 26 89 47 08 26 89 57 0A 8B C3  // ......&.G.&.W...
    3A80: E8 47 F9 26 89 47 04 26 89 57 06 8B C7 F7 D0 8B  // .G.&.G.&.W......
    3A90: 56 F6 F7 D2 26 23 47 08 26 23 57 0A 26 89 47 14  // V...&#G.&#W.&.G.
    3AA0: 26 89 57 16 26 21 7F 08 8B 46 F6 26 21 47 0A 8C  // &.W.&!...F.&!G..
    3AB0: D1 8D 77 35 8E C1 26 80 3C 19 73 12 26 8B 4F 04  // ..w5..&.<.s.&.O.
    3AC0: E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 EB 10 26 8B  // ..&.g.&.W.....&.
    3AD0: 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 21  // O...&.o.&._...&!
    3AE0: 7F 08 8B 46 F8 26 21 47 0A 26 8B 57 14 26 8B 47  // ...F.&!G.&.W.&.G
    3AF0: 16 26 09 57 08 26 09 47 0A 26 8A 47 2C 32 E4 8B  // .&.W.&.G.&.G,2..
    3B00: F0 03 F0 8B C3 FF 94 7C 8B 8D 66 FA 5F E9 A3 FC  // .......|..f._...
    3B10: 52 8B D8 E8 FD F8 8B C3 E8 34 FA 26 8B 47 08 26  // R........4.&.G.&
    3B20: 8B 57 0A 26 85 57 06 75 06 26 85 47 04 74 05 B8  // .W.&.W.u.&.G.t..
    3B30: 03 00 EB 03 B8 01 00 26 88 47 30 5A C3 53 51 52  // .......&.G0Z.SQR
    3B40: 56 8B D8 26 8A 4F 2D 32 ED 8B F1 03 F1 FF 94 A0  // V..&.O-2........
    3B50: 8B 26 89 47 04 26 89 57 06 26 8A 47 2B 32 E4 8B  // .&.G.&.W.&.G+2..
    3B60: F0 8A 8C D0 8B E3 0A 26 D1 6F 06 26 D1 5F 04 E2  // .......&.o.&._..
    3B70: F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 B0 8B 8B 94  // .&.G+...........
    3B80: B2 8B 26 21 47 04 26 21 57 06 E9 BD F9 52 8B D8  // ..&!G.&!W....R..
    3B90: E8 AA FF 26 8B 47 04 26 8B 57 06 26 89 47 18 26  // ...&.G.&.W.&.G.&
    3BA0: 89 57 1A 5A C3 51 52 8B D8 E8 91 FF 8C D0 8E C0  // .W.Z.QR.........
    3BB0: 26 8B 77 02 26 8B 74 02 81 3C 5A 5A 74 5B 26 8B  // &.w.&.t..<ZZt[&.
    3BC0: 77 02 26 8B 74 02 80 3C 63 75 E1 26 8B 77 02 26  // w.&.t..<cu.&.w.&
    3BD0: FF 44 02 8B C3 E8 21 F8 26 89 47 08 26 89 57 0A  // .D....!.&.G.&.W.
    3BE0: 8B C3 E8 FA F7 26 89 47 14 26 89 57 16 8C D1 8E  // .....&.G.&.W....
    3BF0: C1 26 8B 57 04 26 8B 47 06 26 3B 47 0A 75 AD 26  // .&.W.&.G.&;G.u.&
    3C00: 3B 57 08 75 A7 26 8B 77 02 26 8B 04 26 03 47 14  // ;W.u.&.w.&..&.G.
    3C10: 8B DE 26 89 47 02 5A 59 C3 26 8B 5F 02 26 83 47  // ..&.G.ZY.&._.&.G
    3C20: 02 02 5A 59 C3 52 57 8B D8 8C D0 8E C0 26 8B 77  // ..ZY.RW......&.w
    3C30: 02 26 8B 74 02 8A 54 01 84 D2 75 08 26 C7 47 22  // .&.t..T...u.&.G"
    3C40: 00 00 EB 2F 80 FA FF 75 14 26 8B 77 02 26 8B 3F  // .../...u.&.w.&.?
    3C50: 26 8B 34 26 2B 75 02 26 89 77 22 EB 16 26 8B 07  // &.4&+u.&.w"..&..
    3C60: E8 E3 02 8B F0 8A C2 32 E4 03 C0 03 F0 8B 04 26  // .......2.......&
    3C70: 89 47 22 26 8B 5F 02 26 83 47 02 02 5F 5A C3 8B  // .G"&._.&.G.._Z..
    3C80: D8 26 80 67 2F F9 26 8B 77 02 26 8B 74 02 8A 44  // .&.g/.&.w.&.t..D
    3C90: 01 26 88 47 34 26 8B 5F 02 26 83 47 02 03 C3 8B  // .&.G4&._.&.G....
    3CA0: D8 26 8B 77 02 26 8B 74 02 8B 74 01 26 89 77 20  // .&.w.&.t..t.&.w 
    3CB0: EB E3 53 8B D8 26 8A 47 2C 32 E4 24 03 26 80 67  // ..S..&.G,2.$.&.g
    3CC0: 2F F9 C1 E0 09 26 09 47 2E E9 4F F5 8B D8 26 8B  // /....&.G..O...&.
    3CD0: 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26  // w.&.t..D.2.&.G.&
    3CE0: C7 47 06 00 00 8B C3 E8 40 04 26 8B 5F 02 26 83  // .G......@.&._.&.
    3CF0: 47 02 02 C3 8B D8 26 8B 77 02 26 8B 74 02 8A 44  // G.....&.w.&.t..D
    3D00: 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8  // .2.&.G.&.G......
    3D10: 08 04 EB D6 53 56 8B D8 26 8B 77 02 26 8B 74 02  // ....SV..&.w.&.t.
    3D20: 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B  // .D.2.&.G.&.G....
    3D30: C3 E8 06 04 E9 86 F4 53 56 8B D8 26 8B 77 02 26  // .......SV..&.w.&
    3D40: 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06  // .t..D.2.&.G.&.G.
    3D50: 00 00 8B C3 E8 F0 03 E9 63 F4 53 56 8B D8 26 8B  // ........c.SV..&.
    3D60: 77 02 8B DE 26 8B 5F 02 8B 5F 01 83 C3 03 26 01  // w...&._.._....&.
    3D70: 5C 02 5E 5B C3 51 52 8B D8 26 8B 77 02 26 83 44  // \.^[.QR..&.w.&.D
    3D80: 02 02 26 8B 07 E8 A0 01 8B C8 26 8B 77 28 8A 44  // ..&.......&.w(.D
    3D90: 01 32 E4 03 C0 8B F1 03 F0 83 3C 00 74 4F 26 8B  // .2........<.tO&.
    3DA0: 77 28 8A 54 01 32 F6 8B C3 E8 B0 01 26 88 47 31  // w(.T.2......&.G1
    3DB0: 26 8B 77 02 26 8B 34 8B 44 04 C1 E8 08 32 E4 24  // &.w.&.4.D....2.$
    3DC0: 7F C1 E8 02 32 E4 24 1F 26 80 67 2F 07 C1 E0 0B  // ....2.$.&.g/....
    3DD0: 26 09 47 2E 26 8B 37 26 8B 47 2E C1 E8 0B C1 E0  // &.G.&.7&.G......
    3DE0: 02 26 01 04 26 C6 47 32 01 26 89 4F 28 5A 59 C3  // .&..&.G2.&.O(ZY.
    3DF0: 53 8B D8 26 C6 47 32 82 5B C3 57 8B D8 8C D6 8E  // S..&.G2.[.W.....
    3E00: C6 26 80 7F 2C 05 74 0A 26 8A 47 2C 26 3A 47 30  // .&..,.t.&.G,&:G0
    3E10: 75 1E 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B  // u.&.w.&.t.&...&.
    3E20: 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F C3  // =.t...&._.&.w._.
    3E30: 26 8B 5F 02 26 83 47 02 03 5F C3 53 56 57 8B D8  // &._.&.G.._.SVW..
    3E40: 8C D6 8E C6 26 80 7F 30 01 74 0A 26 8A 47 30 26  // ....&..0.t.&.G0&
    3E50: 3A 47 2C 75 20 26 8B 77 02 26 8B 74 02 26 8B 7F  // :G,u &.w.&.t.&..
    3E60: 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77  // .&.=.t...&._.&.w
    3E70: 02 5F 5E 5B C3 26 8B 5F 02 26 83 47 02 03 EB F1  // ._^[.&._.&.G....
    3E80: 53 56 57 8B D8 8C D0 8E C0 26 80 7F 30 01 74 E5  // SVW......&..0.t.
    3E90: EB C3 55 8B EC 53 51 52 57 8B D8 26 8B 77 02 26  // ..U..SQRW..&.w.&
    3EA0: 8B 74 02 8A 04 26 C6 47 3D 00 8C D1 8E C1 26 80  // .t...&.G=.....&.
    3EB0: 7F 3D 08 73 20 26 8B 77 02 26 8A 57 3D 32 F6 26  // .=.s &.w.&.W=2.&
    3EC0: 8B 7C 02 03 FA 8B F3 03 F2 8A 15 26 88 54 35 26  // .|.........&.T5&
    3ED0: FE 47 3D EB D5 26 8B 7F 02 8A D0 32 F6 8B F2 C1  // .G=..&.....2....
    3EE0: E6 02 8A 94 FD 8B 26 01 55 02 26 8B 7F 28 8A 55  // ......&.U.&..(.U
    3EF0: 01 80 E2 07 26 88 57 2D 26 8B 7F 28 8A 55 01 C0  // ....&.W-&..(.U..
    3F00: EA 03 80 E2 07 26 88 57 2B 26 8B 7F 28 8A 55 01  // .....&.W+&..(.U.
    3F10: C0 EA 06 26 88 57 2A 8A 94 FC 8B 26 88 57 2C 8D  // ...&.W*....&.W,.
    3F20: 66 F8 5F 5A 59 5B 5D C3 53 56 8B D8 26 8B 77 02  // f._ZY[].SV..&.w.
    3F30: 8B C6 8B 74 48 03 F0 8B D8 8B 74 1E 8B C6 03 C3  // ...tH.....t.....
    3F40: 83 C0 04 5E 5B C3 53 56 8B D8 26 8B 77 02 8B C6  // ...^[.SV..&.w...
    3F50: 8B 74 48 03 F0 8B D8 8B 74 20 EB E0 8A C2 C3 16  // .tH.....t ......
    3F60: 07 55 8B EC 53 51 56 57 83 EC 40 8B F8 89 46 B8  // .U..SQVW..@...F.
    3F70: E8 D3 FF 8B D8 89 46 E0 26 8B 45 02 8B 5F 2E 03  // ......F.&.E.._..
    3F80: D8 89 5E DE 83 46 DE 04 8B C7 E8 9B FF 89 46 E0  // ..^..F........F.
    3F90: 32 F6 8D 46 B8 E8 C4 FF 8A D0 32 F6 03 D2 8B 5E  // 2..F......2....^
    3FA0: E0 03 DA 83 3F 00 0F 84 65 01 88 46 E9 80 66 E7  // ....?...e..F..f.
    3FB0: F9 C6 46 EC 00 C7 46 D8 00 00 66 C7 46 D0 00 00  // ..F...F...f.F...
    3FC0: 00 00 C7 46 F6 00 00 C6 46 EA 01 EB 06 3C 01 0F  // ...F....F....<..
    3FD0: 85 8C 00 8A 56 E9 8A C2 32 E4 03 C0 8B 5E E0 03  // ....V...2....^..
    3FE0: D8 83 3F 00 74 75 26 8B 45 02 8B 1F 03 D8 8B 47  // ..?.tu&.E......G
    3FF0: 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE 83 F9 00  // .2......2.......
    4000: 74 07 D1 E9 33 C0 50 E2 FD 8B C4 8B D8 89 46 BA  // t...3.P.......F.
    4010: 85 C0 74 41 83 C0 08 26 89 47 04 8A C2 32 E4 03  // ..tA...&.G...2..
    4020: C0 8B 5E E0 03 D8 26 8B 45 02 03 07 8B 5E BA 26  // ..^...&.E....^.&
    4030: 89 07 8B 5E BA 26 8B 07 83 C0 06 26 89 47 02 8B  // ...^.&.....&.G..
    4040: 5E BA 8B 76 F6 26 89 77 06 8B 5E BA 89 5E F6 C6  // ^..v.&.w..^..^..
    4050: 46 EA 00 EB 0A C6 46 EA 87 EB 04 C6 46 EA 83 8A  // F.....F.....F...
    4060: 46 EA 32 E4 83 F8 10 0F 8F 99 00 88 66 EA 8A 46  // F.2.........f..F
    4070: EA 32 E4 85 C0 0F 8F 83 00 8C D0 8B 5E BA 8E C0  // .2..........^...
    4080: 26 8B 5F 02 89 5E E0 8B 5E BA 26 8B 5F 02 80 3F  // &._..^..^.&._..?
    4090: 5B 75 4A C6 46 EA 10 8B 5E BA 26 8B 5F 06 89 5E  // [uJ.F...^.&._..^
    40A0: F6 8B 5E BA 26 8B 1F 8B 47 04 32 E4 8B C8 83 C1  // ..^.&...G.2.....
    40B0: 09 32 ED 80 E1 FE 03 E1 8B 5E F6 89 5E BA 85 DB  // .2.......^..^...
    40C0: 74 AC 26 8B 1F 8B 47 04 C1 E8 08 32 E4 24 7F C1  // t.&...G....2.$..
    40D0: E8 02 C1 E0 02 8B 5E B8 26 29 07 EB 91 8D 46 B8  // ......^.&)....F.
    40E0: E8 AF FD 8A D0 8D 46 B8 E8 2E 00 8A DA 32 FF C1  // ......F......2..
    40F0: E3 02 8D 46 B8 FF 97 FA 8B E9 72 FF 83 7E F6 00  // ...F......r..~..
    4100: 0F 85 C9 FE 80 7E EA 10 74 05 8A 46 EA EB 02 32  // .....~..t..F...2
    4110: C0 8D 66 F8 5F 5E E9 0B FE C3 53 51 8B D8 26 8A  // ..f._^....SQ..&.
    4120: 4F 04 32 ED E8 C2 E8 59 5B C3 53 51 8B D8 26 8A  // O.2....Y[.SQ..&.
    4130: 4F 04 32 ED E8 BD E8 59 5B C3 53 8B D8 26 8A 47  // O.2....Y[.S..&.G
    4140: 04 32 E4 E6 80 5B C3 53 51 8B D8 26 8A 4F 04 32  // .2...[.SQ..&.O.2
    4150: ED E8 B4 D8 59 5B C3 53 8B D8 66 50 66 52 66 51  // ....Y[.S..fPfRfQ
    4160: 66 26 8B 47 08 66 26 8B 57 10 66 26 8B 4F 04 66  // f&.G.f&.W.f&.O.f
    4170: F7 F1 66 26 89 47 0C 66 26 89 57 10 66 59 66 5A  // ..f&.G.f&.W.fYfZ
    4180: 66 58 5B C3 53 8B D8 66 50 66 52 66 51 66 26 8B  // fX[.S..fPfRfQf&.
    4190: 47 08 66 26 8B 4F 04 66 F7 E1 66 26 89 47 0C 66  // G.f&.O.f..f&.G.f
    41A0: 26 89 57 10 66 59 66 5A 66 58 5B C3 53 57 8B D8  // &.W.fYfZfX[.SW..
    41B0: 26 8B 5F 14 E8 56 EB 8B D0 66 C1 E8 10 92 5F 5B  // &._..V...f...._[
    41C0: C3 53 57 8B D8 26 8B 47 14 26 8B 57 16 8B D8 87  // .SW..&.G.&.W....
    41D0: D3 66 C1 E3 10 8B DA C1 E3 02 E8 54 EB EB D8 53  // .f.........T...S
    41E0: 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0  // RW..&.G.&.W..f..
    41F0: 10 8B C2 26 8B 5F 14 E8 78 EA 5F 5A 5B C3 53 52  // ...&._..x._Z[.SR
    4200: 8B D8 26 8B 47 1C 26 8B 57 1E 92 66 C1 E0 10 8B  // ..&.G.&.W..f....
    4210: C2 26 8B 5F 26 8B 5F 01 E8 57 EA 5A 5B C3 53 52  // .&._&._..W.Z[.SR
    4220: 56 8B F0 26 8B 5C 26 8B 5F 01 E8 E0 EA 8B D0 66  // V..&.\&._......f
    4230: C1 E8 10 92 26 89 44 1C 26 89 54 1E 5E 5A 5B C3  // ....&.D.&.T.^Z[.
    4240: 53 51 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66  // SQRW..&.G.&.W..f
    4250: C1 E0 10 8B C2 8B C8 26 8B 47 14 26 8B 57 16 8B  // .......&.G.&.W..
    4260: D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 8B C1 E8 34  // ...f...........4
    4270: EA 5F 5A 59 5B C3 8B D0 66 C1 E8 10 92 C3 1E 06  // ._ZY[...f.......
    4280: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    4290: 0A C0 75 06 E8 07 01 E9 A8 00 3C 01 75 06 E8 37  // ..u.......<.u..7
    42A0: 01 E9 9E 00 3C 02 75 06 E8 5F 02 E9 94 00 3C 03  // ....<.u.._....<.
    42B0: 75 0B E8 91 03 8B EC 89 5E 0C E9 85 00 3C 04 75  // u.......^....<.u
    42C0: 02 EB 7D 3C 05 75 0A E8 0E 04 8B EC 89 56 10 EB  // ..}<.u.......V..
    42D0: 71 3C 06 75 10 E8 8C 03 8B EC 89 5E 0C 89 4E 14  // q<.u.......^..N.
    42E0: 89 56 10 EB 5D 3C 07 75 02 EB 55 3C 08 75 0A E8  // .V..]<.u..U<.u..
    42F0: D0 03 8B EC 88 7E 0D EB 49 3C 09 75 02 EB 41 3C  // .....~..I<.u..A<
    4300: 0A 75 10 E8 65 04 8B EC 89 4E 14 89 7E 00 8C 46  // .u..e....N..~..F
    4310: 1C EB 2F 3C 0B 75 02 EB 27 3C 10 75 0A E8 5A 04  // ../<.u..'<.u..Z.
    4320: 8B EC 89 5E 0C EB 1B 3C 11 75 02 EB 13 3C 15 75  // ...^...<.u...<.u
    4330: 0F E8 80 04 8B EC 89 5E 0C EB 07 B8 4F 01 EB 02  // .......^....O...
    4340: 32 C0 8B EC 89 46 18 66 5F 66 5E 66 5D 66 5B 66  // 2....F.f_f^f]f[f
    4350: 5A 66 59 66 58 07 1F C3 50 1E 2E 8E 1E FB 03 8C  // ZfYfX...P.......
    4360: D8 A3 C0 52 A3 D0 52 A3 E2 52 2E 8E 1E F3 03 A3  // ...R..R..R......
    4370: AA 04 1F 58 CB 00 30 31 2E 30 30 00 56 45 53 41  // ...X..01.00.VESA
    4380: 00 03 B4 02 00 00 01 00 00 00 00 00 00 00 00 01  // ................
    4390: 01 10 C8 01 00 00 59 01 00 00 0E 43 00 00 B9 3F  // ......Y....C...?
    43A0: 00 8B DF 83 C7 04 FC 66 33 C0 F3 66 AB 8B FB BE  // .......f3..f....
    43B0: 14 43 B9 22 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C  // .C."......O..G..
    43C0: 4F 18 8C 4F 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F  // O..O..O ..".....
    43D0: E8 0F D5 B0 4F 32 E4 C3 56 51 57 B9 10 00 66 33  // ....O2..VQW...f3
    43E0: C0 F3 66 AB 5F 59 8C DB 06 1F C7 05 BB 00 C6 45  // ..f._Y.........E
    43F0: 02 07 C7 45 04 40 00 C7 45 06 40 00 C6 45 1B 06  // ...E.@..E.@..E..
    4400: C6 45 18 01 C6 45 1A 01 C6 45 1E 01 66 C7 45 3E  // .E...E...E..f.E>
    4410: 00 84 D7 17 8E DB E8 EC CD 66 0B C0 0F 84 E1 00  // .........f......
    4420: 06 1F 66 89 45 28 8C C8 66 C1 E0 10 B8 CD 46 66  // ..f.E(..f.....Ff
    4430: 89 45 0C 81 F9 FF 81 0F 84 C2 00 80 E5 03 B2 01  // .E..............
    4440: 53 8E DB BE 80 1C E8 BB D2 5B 06 1F 0F 84 B1 00  // S........[......
    4450: 53 E8 37 D5 66 89 45 12 C7 45 16 08 10 8D 5C 0C  // S.7.f.E..E....\.
    4460: E8 D8 E8 66 89 45 1F 66 89 45 36 8D 5C 10 E8 CA  // ...f.E.f.E6.\...
    4470: E8 66 89 45 23 66 89 45 3A 8D 5C 08 E8 BC E8 0A  // .f.E#f.E:.\.....
    4480: C0 75 03 5B EB 7B E8 02 D5 66 C1 E8 10 3D 58 02  // .u.[.{...f...=X.
    4490: 74 0D 3D 5E 01 74 08 77 0A C6 45 17 08 EB 04 C6  // t.=^.t.w..E.....
    44A0: 45 17 0E 2E A1 F5 03 89 45 08 8D 5C 04 E8 8B E8  // E.......E..\....
    44B0: 66 8B C8 66 C1 E9 10 D3 E0 89 45 10 89 45 32 B0  // f..f......E..E2.
    44C0: 08 D2 E0 88 45 19 8D 5C 14 E8 6F E8 5B 3D 00 01  // ....E..\..o.[=..
    44D0: 77 2F 53 8B D8 B8 00 01 33 D2 F7 F3 5B FE C8 88  // w/S.....3...[...
    44E0: 45 1D 88 45 35 88 45 34 8E DB 57 53 BE 80 1C E8  // E..E5.E4..WS....
    44F0: 7C CD 5B 5F 0B C9 75 05 06 1F 83 25 FE 32 E4 EB  // |.[_..u....%.2..
    4500: 02 B4 03 B0 4F 8E DB 5E C3 00 81 FB FF 81 74 68  // ....O..^......th
    4510: 0A FF 75 04 8B C3 EB 21 F6 C7 08 75 61 8B CB B2  // ..u....!...ua...
    4520: 01 BE 20 1C E8 DD D1 74 55 E8 3E D4 0A C0 75 0E  // .. ....tU.>...u.
    4530: 66 C1 E8 10 80 E7 80 0A C7 E8 D5 02 EB 3A E8 BD  // f............:..
    4540: CF 74 06 E8 2E CE E8 76 C6 BE 20 1C E8 F3 CC 74  // .t.....v.. ....t
    4550: 2D E8 A5 00 E8 2C 00 66 BB 20 1C 00 1C E8 01 D4  // -....,.f. ......
    4560: BE 00 1C E8 04 D4 66 C1 E8 10 8B D8 32 C0 F6 C7  // ......f.....2...
    4570: 80 74 02 B0 40 E8 1F CD B0 4F 32 E4 EB 04 B0 4F  // .t..@....O2....O
    4580: B4 03 C3 56 06 33 C0 8E C0 BE 20 1C E8 FC D3 8B  // ...V.3.... .....
    4590: C8 66 C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1  // .f........&..J..
    45A0: EA 04 FE CA 26 88 16 84 04 26 C6 06 51 04 00 26  // ....&....&..Q..&
    45B0: C6 06 50 04 00 26 C6 06 49 04 62 26 C7 06 4C 04  // ..P..&..I.b&..L.
    45C0: 00 A0 26 C6 06 85 04 10 26 C7 06 0C 01 9F 5C 8C  // ..&.....&.....\.
    45D0: C8 26 A3 0E 01 07 5E C3 01 0F 00 0A 00 00 00 00  // .&....^.........
    45E0: 00 40 05 0F FF 00 01 02 03 04 05 06 07 08 09 0A  // .@..............
    45F0: 0B 0C 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8 00 01  // ................
    4600: EF B9 04 00 B4 01 BE 70 45 AC 86 E0 EF 8A E0 FE  // .......pE.......
    4610: C4 E2 F6 B8 00 03 EF B9 09 00 BA CE 03 32 E4 BE  // .............2..
    4620: 74 45 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA DA 03  // tE....B.J.......
    4630: EC B9 14 00 BA C0 03 32 E4 BE 7D 45 8A C4 EE AC  // .......2..}E....
    4640: EE FE C4 E2 F7 C3 BE 00 1C E8 1E D3 66 C1 E8 10  // ............f...
    4650: 8B D8 E8 EE D2 75 05 E8 DA D2 75 04 B8 4F 00 C3  // .....u....u..O..
    4660: B8 4F 03 C3 E8 DC D2 74 53 BE 00 1C 80 FB 00 74  // .O.....tS......t
    4670: 18 80 FB 01 75 05 E8 1A D3 EB 1D 80 FB 02 75 10  // ....u.........u.
    4680: 8B C1 E8 CD D2 D3 E8 8B C8 E8 CD CD 74 2E EB 08  // ............t...
    4690: 80 FB 03 75 24 E8 71 D2 E8 B7 D2 8B D8 D3 E3 50  // ...u$.q........P
    46A0: 33 C0 BA 00 01 3B DA 77 05 BA FF FF EB 04 F7 F3  // 3....;.w........
    46B0: 8B D0 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03  // ..X...O..2...O..
    46C0: C3 00 0A DB 75 07 8A EF E8 9B CE EB 05 E8 80 CE  // ....u...........
    46D0: 8A F8 B0 4F 32 E4 C3 00 E8 68 D2 74 2C BE 00 1C  // ...O2....h.t,...
    46E0: E8 87 D2 66 C1 E8 10 F6 C4 40 75 1D 0A FF 75 05  // ...f.....@u...u.
    46F0: E8 1E 00 EB 0F 80 FF 01 75 14 BB 13 00 E8 09 E6  // ........u.......
    4700: D1 E8 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0  // .....O2...O...2.
    4710: C3 52 53 66 50 81 E2 FF 00 D1 E2 8B C2 40 66 C1  // .RSfP........@f.
    4720: E0 10 8B C2 BB 13 00 E8 3A E5 BB 12 00 E8 34 E5  // ........:.....4.
    4730: 66 58 5B 5A C3 9C 1E 06 66 50 66 51 66 52 66 53  // fX[Z....fPfQfRfS
    4740: 66 55 66 56 66 57 0E 1F E8 34 E6 E8 8A FF E8 53  // fUfVfW...4.....S
    4750: E6 8B EC 89 56 10 89 46 18 66 5F 66 5E 66 5D 66  // ....V..F.f_f^f]f
    4760: 5B 66 5A 66 59 66 58 07 1F 9D CB 0E 07 BF A2 8A  // [fZfYfX.........
    4770: 2E 8B 0E A0 8A B8 4F 00 C3 00 0A DB 75 06 B7 04  // ......O.....u...
    4780: B3 10 EB 26 80 FB 01 75 14 E8 72 CD 75 21 53 B1  // ...&...u..r.u!S.
    4790: 01 0A FF 74 02 B1 00 E8 87 CC 5B EB 0D 80 FB 02  // ...t......[.....
    47A0: 75 0D E8 9F CD 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8  // u..........O2...
    47B0: 4F 03 C3 00 80 E3 01 0A DB 75 05 BB 02 01 EB 0E  // O........u......
    47C0: E8 3B CD 75 0E 33 C0 53 E8 ED BE 5B 74 05 B0 4F  // .;.u.3.S...[t..O
    47D0: 32 E4 C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD 42 C3  // 2...O......r..B.
    47E0: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    47F0: 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 BA 47  // ..P.......X....G
    4800: 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F  // f_f^f]f[fZfYfX..
    4810: C3 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 BA  // ...P.......X....
    4820: 47 C3 F4 47 0A 81 23 81 40 81 E7 48 43 78 75 78  // G..G..#.@..HCxux
    4830: E8 78 6B 79 F9 7A FD 7A 06 7E D7 7E 5A 7F C1 7F  // .xky.z.z.~.~Z...
    4840: 5C 81 BE 81 67 84 00 4B AE 88 A8 47 A8 47 A8 47  // \...g..K...G.G.G
    4850: A8 47 A8 47 A8 47 7E 89 81 6D D5 6E 2E 8E 1E F3  // .G.G.G~..m.n....
    4860: 03 80 26 87 04 F3 50 8A E0 80 E4 7F E8 C4 01 3B  // ..&...P........;
    4870: D3 75 02 58 C3 BA CC 03 EC B2 B4 B1 30 26 F6 47  // .u.X........0&.G
    4880: 09 01 74 0C B2 D4 B1 20 A8 01 75 49 B5 09 EB 06  // ..t.... ..uI....
    4890: A8 01 74 41 B5 0B 53 E8 70 41 0A FF 5B 75 0B 80  // ..tA..S.pA..[u..
    48A0: 26 88 04 F0 08 2E 88 04 EB 2B 58 80 0E 87 04 08  // &........+X.....
    48B0: 80 26 10 04 CF 08 0E 10 04 89 16 63 04 C7 06 85  // .&.........c....
    48C0: 04 08 00 C6 06 84 04 18 C7 06 0C 01 8C 54 8C 0E  // .............T..
    48D0: 0E 01 CD 42 C3 80 26 10 04 CF 08 0E 10 04 58 53  // ...B..&.......XS
    48E0: 50 0E 1F 33 C9 8A C8 E8 14 CC 74 06 E8 85 CA E8  // P..3......t.....
    48F0: CD C2 B2 08 BE 40 1C E8 0A CE BE 40 1C E8 42 C9  // .....@.....@..B.
    4900: 58 5B 0F 84 6E FF 2E 8E 1E F3 03 0E 07 E8 19 29  // X[..n..........)
    4910: 0E 1F 53 66 BB 40 1C 00 1C E8 45 D0 BE 00 1C B0  // ..Sf.@....E.....
    4920: 20 E8 73 C9 5B 2E 8E 1E F3 03 0E 07 E8 22 2E E8  //  .s.[........"..
    4930: 24 00 E8 2E 3D E8 D1 01 E8 8E 01 E8 B4 3E 0E 1F  // $...=........>..
    4940: BE 00 1C B0 10 E8 4F C9 E8 FD 2D E8 F5 2D C3 8B  // ......O...-..-..
    4950: EC C6 46 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8  // ..F..../........
    4960: 52 00 E8 62 0A C3 53 83 C3 0A 8B 16 63 04 B9 19  // R..b..S.....c...
    4970: 00 B8 11 30 EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7  // ...0.2.&.'.C....
    4980: 5B 80 C2 06 32 C0 EE C3 53 BA C4 03 83 C3 05 B9  // [...2...S.......
    4990: 04 00 B0 01 26 8A 27 3C 01 75 03 80 CC 20 EF 43  // ....&.'<.u... .C
    49A0: FE C0 E2 F0 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8  // ....[&.G........
    49B0: 00 03 EF C3 8B F3 83 C6 23 BA DA 03 26 F6 47 09  // ........#...&.G.
    49C0: 01 75 02 B2 BA F6 06 89 04 08 74 1D 83 C6 10 EC  // .u........t.....
    49D0: B9 04 00 B4 10 B2 C0 80 FC 11 74 07 8A C4 EE 26  // ..........t....&
    49E0: 8A 04 EE 46 FE C4 E2 EF C3 53 EC 8B DE B9 14 00  // ...F.....S......
    49F0: 32 E4 B2 C0 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4  // 2........&...C..
    4A00: 8A C4 EE 32 C0 EE 1E 06 E8 4F 2D 0B ED 74 09 1F  // ...2.....O-..t..
    4A10: 1E B9 10 00 F3 A4 46 A4 07 1F 5B C3 53 83 C3 37  // ......F...[.S..7
    4A20: B9 09 00 32 C0 BA CE 03 26 8A 27 EF 43 FE C0 E2  // ...2....&.'.C...
    4A30: F7 5B C3 BB BE 4C 0E 07 8B D3 0A E4 7D 01 C3 E8  // .[...L......}...
    4A40: 01 00 C3 33 F6 80 FC 03 7F 3C 4A F6 06 89 04 10  // ...3.....<J.....
    4A50: 75 20 A0 88 04 24 0F 3C 02 7E 24 3C 08 74 20 3C  // u ...$.<.~$<.t <
    4A60: 06 74 1C 3C 07 74 18 B0 40 F6 E4 03 D8 81 C3 00  // .t.<.t..@.......
    4A70: 04 C3 B0 40 D0 EC F6 E4 03 D8 81 C3 80 04 C3 B0  // ...@............
    4A80: 40 F6 E4 03 D8 C3 80 FC 07 75 11 F6 06 89 04 10  // @........u......
    4A90: 75 05 81 C3 00 01 C3 81 C3 00 05 C3 BF 40 4A BE  // u............@J.
    4AA0: 61 4A 33 C9 E8 4E 00 C3 04 80 00 05 80 00 06 C0  // aJ3..N..........
    4AB0: 00 0D 80 02 0E C0 02 0F 80 03 10 C0 03 11 40 05  // ..............@.
    4AC0: 12 80 05 13 C0 05 62 40 01 53 8A 1E 49 04 80 FB  // ......b@.S..I...
    4AD0: 07 7F 10 32 FF D1 E3 2E 8B 87 7D 4A A2 65 04 88  // ...2......}J.e..
    4AE0: 26 66 04 5B C3 2C 30 28 30 2D 30 29 30 2A 30 2E  // &f.[.,0(0-0)0*0.
    4AF0: 30 1E 3F 29 30 2E 38 25 75 07 2E 03 5D 01 33 F6  // 0.?)0.8%u...].3.
    4B00: C3 83 C7 03 3B FE 75 ED C3 1E 06 2E 8E 1E F3 03  // ....;.u.........
    4B10: F6 06 87 04 80 75 49 83 3E 4C 04 00 74 42 A0 49  // .....uI.>L..tB.I
    4B20: 04 B9 00 20 2E 8B 3E F9 03 26 F6 47 33 01 75 0E  // ... ..>..&.G3.u.
    4B30: 26 F6 47 09 01 75 1B 2E 8B 3E F7 03 EB 14 3C 06  // &.G..u...>....<.
    4B40: 7E 0B 2E 8B 3E F5 03 26 8A 67 37 B5 40 66 33 C0  // ~...>..&.g7.@f3.
    4B50: EB 06 66 B8 20 07 20 07 8E C7 66 33 FF F3 66 AB  // ..f. . ...f3..f.
    4B60: 80 26 87 04 7F 07 1F C3 2E 8E 1E F3 03 80 FB 10  // .&..............
    4B70: 75 03 E9 7A 01 80 FB 20 75 03 E9 9B 01 80 FB 32  // u..z... u......2
    4B80: 75 1F BA CC 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9  // u......u........
    4B90: F3 00 FE C8 0F 85 F3 00 EC 24 FD B2 C2 EE E9 E4  // .........$......
    4BA0: 00 80 FB 35 75 28 3C 80 75 08 80 0E 89 04 40 E9  // ...5u(<.u.....@.
    4BB0: D3 00 F6 06 89 04 40 0F 84 D0 00 0A C0 0F 84 CA  // ......@.........
    4BC0: 00 FE C8 75 06 E8 98 07 E9 BA 00 E9 BD 00 80 FB  // ...u............
    4BD0: 30 74 03 E9 96 00 50 E8 30 3E 8A EF BA CC 03 EC  // 0t....P.0>......
    4BE0: 8A C8 58 0A C0 75 30 B7 08 F6 C1 01 75 12 0A ED  // ..X..u0.....u...
    4BF0: 75 0B A0 10 04 24 30 3C 30 75 10 B7 02 E9 8B 00  // u....$0<0u......
    4C00: A0 10 04 24 30 3C 30 75 02 B7 02 80 26 89 04 6F  // ...$0<0u....&..o
    4C10: 80 0E 89 04 80 EB 36 3C 01 75 41 80 26 89 04 6F  // ......6<.uA.&..o
    4C20: B7 09 F6 C1 01 75 15 B7 0B A0 10 04 24 30 3C 30  // .....u......$0<0
    4C30: 74 1B B7 09 0A ED 74 15 B7 05 EB 11 A0 10 04 24  // t.....t........$
    4C40: 30 3C 30 75 08 B7 0B 0A ED 74 02 B7 03 8A 1E 88  // 0<0u.....t......
    4C50: 04 80 E3 F0 0A DF 88 1E 88 04 EB 29 3C 02 75 2B  // ...........)<.u+
    4C60: 80 26 89 04 6F 80 0E 89 04 10 EB B4 80 FB 31 75  // .&..o.........1u
    4C70: 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89 04 08 EB 05  // ...t.<.u........
    4C80: 80 26 89 04 F7 8B EC C6 46 1A 12 C3 80 FB 33 75  // .&......F.....3u
    4C90: 16 3C 00 74 0B 3C 01 75 EC 80 26 89 04 FD EB E5  // .<.t.<.u..&.....
    4CA0: 80 0E 89 04 02 EB DE 80 FB 34 75 17 3C 00 75 07  // .........4u.<.u.
    4CB0: 80 26 87 04 FE EB CE 3C 01 75 07 80 0E 87 04 01  // .&.....<.u......
    4CC0: EB C3 C3 80 FB 36 75 26 BB 20 FF 3C 01 74 09 BB  // .....6u&. .<.t..
    4CD0: 00 DF 3C 00 74 02 EB AD E8 02 00 EB A8 9C FA BA  // ..<.t...........
    4CE0: C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3 C3 B3  // .....B."........
    4CF0: 03 B7 00 BA CC 03 EC A8 01 75 02 B7 01 A0 88 04  // .........u......
    4D00: 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89 5E 0E  // ......%.......^.
    4D10: 89 4E 16 C6 46 1A 12 C3 9C FA C7 06 14 00 6E 72  // .N..F.........nr
    4D20: 8C 0E 16 00 9D C3 28 18 08 00 08 09 03 00 02 63  // ......(........c
    4D30: 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00 00 00  // -'(.+...........
    4D40: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ................
    4D50: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    4D60: 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00 02 63  // ......P........c
    4D70: 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00 00 00  // _OP.U...........
    4D80: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ...(............
    4D90: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    4DA0: 00 00 10 0E 00 FF 28 18 08 00 40 09 03 00 02 63  // ......(...@....c
    4DB0: 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00 00 00  // -'(.+...........
    4DC0: 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02 04 06  // ................
    4DD0: 07 10 11 12 13 14 15 16 17 01 00 03 00 00 00 00  // ................
    4DE0: 00 00 30 0F 00 FF 50 18 08 00 40 01 01 00 06 63  // ..0...P...@....c
    4DF0: 5F 4F 50 82 54 80 BF 1F 00 C1 00 00 00 00 00 00  // _OP.T...........
    4E00: 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17 17 17 17 17  // ...(............
    4E10: 17 17 17 17 17 17 17 17 17 01 00 01 00 00 00 00  // ................
    4E20: 00 00 00 0D 00 FF 50 18 0E 00 10 00 03 00 03 A6  // ......P.........
    4E30: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  // _OP.U....M......
    4E40: 83 85 5D 28 0D 63 BA A3 FF 00 08 08 08 08 08 08  // ..](.c..........
    4E50: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  // ................
    4E60: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 0A E3  // ......P.........
    4E70: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    4E80: EA 8C DF 50 00 E7 04 E3 FF 00 01 02 03 04 05 06  // ...P............
    4E90: 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10 00 00  // ................
    4EA0: 00 00 40 05 0F FF 00 05 11 1C 08 0B 14 28 0E 18  // ..@..........(..
    4EB0: 2D 32 20 24 38 3F 00 05 08 0B 0E 11 14 18 1C 20  // -2 $8?......... 
    4EC0: 24 28 2D 32 38 3F 07 0C 10 15 1A 18 16 15 13 1C  // $(-28?..........
    4ED0: 25 2F 38 33 2E 2A 25 27 29 2A 2C 23 19 10 23 25  // %/83.*%')*,#..#%
    4EE0: 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39 37 34 32 33  // '*,+*))-27;97423
    4EF0: 34 35 35 31 2C 27 2F 30 32 33 34 34 33 33 32 35  // 4551,'/023443325
    4F00: 38 3A 3D 3C 3A 39 38 38 39 39 3A 37 34 31 03 05  // 8:=<:98899:741..
    4F10: 07 09 0B 0B 0A 09 08 0D 11 15 19 17 15 13 11 11  // ................
    4F20: 12 13 14 0F 0B 07 10 10 12 13 14 13 13 13 12 14  // ................
    4F30: 16 18 1A 19 18 17 16 17 17 17 18 15 14 11 15 15  // ................
    4F40: 16 17 17 17 17 17 16 18 19 1A 1B 1B 1A 19 19 19  // ................
    4F50: 19 19 1A 18 17 16 02 03 04 05 07 06 06 05 05 07  // ................
    4F60: 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04 09 09  // ................
    4F70: 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D  // ................
    4F80: 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D  // ................
    4F90: 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C 00 00  // ................
    4FA0: 00 00 00 00 00 00 28 18 08 00 20 09 0F 00 06 63  // ......(... ....c
    4FB0: 2D 27 28 90 2B 80 BF 1F 00 C0 00 00 00 00 00 00  // -'(.+...........
    4FC0: 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02 03 04 05 06  // ................
    4FD0: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  // ................
    4FE0: 00 00 00 05 0F FF 50 18 08 00 40 01 0F 00 06 63  // ......P...@....c
    4FF0: 5F 4F 50 82 54 80 BF 1F 00 C0 00 00 00 00 00 00  // _OP.T...........
    5000: 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02 03 04 05 06  // ...(............
    5010: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  // ................
    5020: 00 00 00 05 0F FF 00 05 11 1C 08 0B 25 28 02 07  // ............%(..
    5030: 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E 32 36 0F 13  // . ..(,..%*..26..
    5040: 27 2C 1B 20 34 39 06 0B 1F 24 13 18 2C 30 09 0D  // ',. 49...$..,0..
    5050: 21 26 15 1A 2E 33 13 17 2B 30 1F 24 38 3D 0E 18  // !&...3..+0.$8=..
    5060: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  // -2 $8?..........
    5070: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  // ........-2 $8?..
    5080: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  // -2 $8?..........
    5090: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  // ........-2 $8?..
    50A0: 2D 32 20 24 38 3F 50 18 0E 00 80 01 0F 00 06 A2  // -2 $8?P.........
    50B0: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  // _OP.T....@......
    50C0: 83 85 5D 28 0F 63 BA E3 FF 00 08 00 00 18 18 00  // ..](.c..........
    50D0: 00 00 08 00 00 00 18 00 00 0B 00 05 00 00 00 00  // ................
    50E0: 00 00 00 05 05 FF 50 18 0E 00 80 01 0F 00 06 A3  // ......P.........
    50F0: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  // _OP.T....@......
    5100: 83 85 5D 28 0F 63 BA E3 FF 00 01 02 03 04 05 14  // ..](.c..........
    5110: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  // .89:;<=>?.......
    5120: 00 00 00 05 0F FF 28 18 0E 00 08 09 03 00 02 A3  // ......(.........
    5130: 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00  // -'(.+....M......
    5140: 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..]..c..........
    5150: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    5160: 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00 02 A3  // ......P.........
    5170: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  // _OP.U....M......
    5180: 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..](.c..........
    5190: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    51A0: 00 00 10 0E 00 FF 28 18 10 00 08 08 03 00 02 67  // ......(........g
    51B0: 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00 00 00  // -'(.+....O......
    51C0: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 14  // ................
    51D0: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  // .89:;<=>?.......
    51E0: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 67  // ......P........g
    51F0: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  // _OP.U....O......
    5200: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 14  // ...(............
    5210: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  // .89:;<=>?.......
    5220: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 66  // ......P........f
    5230: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  // _OP.U....O......
    5240: 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08 08 08 08 08  // ...(............
    5250: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  // ................
    5260: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 06 E3  // ......P.........
    5270: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    5280: EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F 3F 3F  // ...(......??????
    5290: 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00 00 00  // ?????????.......
    52A0: 00 00 00 05 01 FF 50 1D 10 00 A0 01 0F 00 06 E3  // ......P.........
    52B0: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    52C0: EA 8C DF 28 00 E7 04 E3 FF 00 01 02 03 04 05 14  // ...(............
    52D0: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  // .89:;<=>?.......
    52E0: 00 00 00 05 0F FF 28 18 08 00 20 01 0F 00 0E 63  // ......(... ....c
    52F0: 5F 4F 50 82 54 80 BF 1F 00 41 00 00 00 00 00 00  // _OP.T....A......
    5300: 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02 03 04 05 06  // ...(@...........
    5310: 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00 00 00  // .........A......
    5320: 00 00 40 05 0F FF BE 4C 00 C0 00 00 00 00 00 00  // ..@....L........
    5330: 00 00 00 00 00 00 DE 52 00 C0 00 00 00 00 00 00  // .......R........
    5340: 00 00 00 00 00 00 1A 00 7C 8A 00 C0 00 00 00 00  // ........|.......
    5350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5360: 1E E8 10 00 2E 8E 1E F3 03 E8 FE 36 E8 D5 36 E8  // ...........6..6.
    5370: 76 1A 1F C3 2E 8E 1E F3 03 C7 06 87 04 60 F9 C6  // v............`..
    5380: 06 8A 04 0B A0 89 04 0C 11 24 17 A2 89 04 B4 01  // .........$......
    5390: E8 73 1E A0 89 04 80 26 10 04 CF 80 0E 10 04 20  // .s.....&....... 
    53A0: C7 06 63 04 D4 03 0E 1F E8 83 B8 F7 C1 02 00 75  // ..c............u
    53B0: 03 E8 0B B8 B8 03 00 E8 57 F4 C3 1E 2E 8E 1E F3  // ........W.......
    53C0: 03 0E 07 EB 00 1F C3 F6 06 89 04 08 74 01 C3 53  // ............t..S
    53D0: BA C8 03 EC B0 FF B2 C6 EE B2 C8 80 3E 63 04 B4  // ............>c..
    53E0: 75 2F BE 40 54 B9 40 00 33 DB 9C FA 8A C3 EE 8B  // u/.@T.@.3.......
    53F0: FB C1 EF 03 83 E7 03 03 FE 2E 8A 05 42 EE 2E 8A  // ............B...
    5400: 45 04 EE 2E 8A 45 08 EE FE C3 4A E2 DF 9D E9 85  // E....E....J.....
    5410: 00 26 8A 47 2B F6 06 89 04 06 74 31 B9 F8 00 BF  // .&.G+.....t1....
    5420: 3E 4E 3C 08 74 11 B9 40 00 BF BE 4F 3C 38 74 07  // >N<.t..@...O<8t.
    5430: 3C 3F 74 03 BF FE 4F 33 DB 9C FA 8A C3 EE 2E 8A  // <?t...O3........
    5440: 01 42 EE EE EE FE C3 4A E2 F1 9D EB 49 3C 08 74  // .B.....J....I<.t
    5450: 25 3C 38 74 2E 3C 3F 74 2A B9 08 00 33 DB 51 E8  // %<8t.<?t*...3.Q.
    5460: 42 D4 B9 08 00 F7 C3 10 00 74 03 83 C7 18 E8 67  // B........t.....g
    5470: 00 59 E2 EA EB 20 E8 2B D4 B9 10 00 33 DB E8 57  // .Y... .+....3..W
    5480: 00 EB 13 B9 40 00 33 DB 51 E8 28 00 8A C3 E8 B7  // ....@.3.Q.(.....
    5490: 2F FE C3 59 E2 F2 5B C3 00 2A 00 2A 00 2A 00 2A  // /..Y..[..*.*.*.*
    54A0: 15 3F 15 3F 15 3F 15 3F 00 2A 00 3F 00 2A 00 3F  // .?.?.?.?.*.?.*.?
    54B0: 00 2A 00 3F 8B FB C1 EF 02 83 E7 0F 2E 8A B5 30  // .*.?...........0
    54C0: 54 8B FB D1 EF 83 E7 0F 2E 8A AD 30 54 8B FB 83  // T..........0T...
    54D0: E7 0F 2E 8A 8D 30 54 C3 9C 8A C3 FA EE 2E 8A 05  // .....0T.........
    54E0: 42 EE 47 2E 8A 05 EE 47 2E 8A 05 EE 47 FE C3 4A  // B.G....G....G..J
    54F0: E2 E7 9D C3 00 00 00 00 00 00 00 00 7E 81 A5 81  // ............~...
    5500: BD 99 81 7E 7C FE D6 BA C6 FE 7C 00 C6 EE FE FE  // ...~|.....|.....
    5510: 7C 38 10 00 10 38 7C FE 7C 38 10 00 10 38 10 EE  // |8...8|.|8...8..
    5520: EE 10 38 00 38 7C FE FE 6C 10 38 00 00 18 3C 7E  // ..8.8|..l.8...<~
    5530: 3C 18 00 00 FF E7 C3 81 C3 E7 FF FF 00 18 3C 66  // <.............<f
    5540: 66 3C 18 00 FF E7 C3 99 99 C3 E7 FF 1E 0E 1E 36  // f<.............6
    5550: 78 CC CC 78 7E C3 C3 7E 18 7E 18 18 1E 1A 1E 18  // x..x~..~.~......
    5560: 18 70 F0 60 3E 3E 36 36 F6 66 1E 0C DB 3C 66 E7  // .p.`>>66.f...<f.
    5570: 66 3C DB 00 80 C0 F0 F8 F0 C0 80 00 02 06 1E 3E  // f<.............>
    5580: 1E 06 02 00 18 3C 7E 18 7E 3C 18 00 66 66 66 66  // .....<~.~<..ffff
    5590: 66 00 66 00 7F DB 7B 3B 1B 1B 1B 00 3C 66 38 6C  // f.f...{;....<f8l
    55A0: 6C 38 CC 78 00 00 00 00 FE FE FE 00 18 3C 7E 18  // l8.x.........<~.
    55B0: 7E 3C 18 7E 18 3C 7E 18 18 18 18 00 18 18 18 18  // ~<.~.<~.........
    55C0: 7E 3C 18 00 00 18 1C FE 1C 18 00 00 00 30 70 FE  // ~<...........0p.
    55D0: 70 30 00 00 00 00 C0 C0 C0 FE 00 00 00 24 66 FF  // p0...........$f.
    55E0: 66 24 00 00 00 10 38 7C 7C FE 00 00 00 FE 7C 7C  // f$....8||.....||
    55F0: 38 10 00 00 00 00 00 00 00 00 00 00 18 3C 3C 18  // 8............<<.
    5600: 18 00 18 00 6C 6C 6C 00 00 00 00 00 6C 6C FE 6C  // ....lll.....ll.l
    5610: FE 6C 6C 00 18 7E C0 7C 06 FC 18 00 00 C6 0C 18  // .ll..~.|........
    5620: 30 60 C6 00 38 6C 38 76 CC CC 76 00 18 18 30 00  // 0`..8l8v..v...0.
    5630: 00 00 00 00 18 30 60 60 60 30 18 00 60 30 18 18  // .....0```0..`0..
    5640: 18 30 60 00 00 EE 7C FE 7C EE 00 00 00 18 18 7E  // .0`...|.|......~
    5650: 18 18 00 00 00 00 00 00 18 18 30 00 00 00 00 FE  // ..........0.....
    5660: 00 00 00 00 00 00 00 00 00 38 38 00 06 0C 18 30  // .........88....0
    5670: 60 C0 80 00 7C C6 CE DE F6 E6 7C 00 18 78 18 18  // `...|.....|..x..
    5680: 18 18 7E 00 7C C6 0C 18 30 66 FE 00 7C C6 06 3C  // ..~.|...0f..|..<
    5690: 06 C6 7C 00 0C 1C 3C 6C FE 0C 0C 00 FE C0 FC 06  // ..|...<l........
    56A0: 06 C6 7C 00 7C C6 C0 FC C6 C6 7C 00 FE C6 06 0C  // ..|.|.....|.....
    56B0: 18 18 18 00 7C C6 C6 7C C6 C6 7C 00 7C C6 C6 7E  // ....|..|..|.|..~
    56C0: 06 C6 7C 00 00 1C 1C 00 00 1C 1C 00 00 18 18 00  // ..|.............
    56D0: 00 18 18 30 0C 18 30 60 30 18 0C 00 00 00 FE 00  // ...0..0`0.......
    56E0: 00 FE 00 00 60 30 18 0C 18 30 60 00 7C C6 06 0C  // ....`0...0`.|...
    56F0: 18 00 18 00 7C C6 C6 DE DC C0 7E 00 38 6C C6 C6  // ....|.....~.8l..
    5700: FE C6 C6 00 FC 66 66 7C 66 66 FC 00 3C 66 C0 C0  // .....ff|ff..<f..
    5710: C0 66 3C 00 F8 6C 66 66 66 6C F8 00 FE C2 C0 F8  // .f<..lfffl......
    5720: C0 C2 FE 00 FE 62 60 7C 60 60 F0 00 7C C6 C0 C0  // .....b`|``..|...
    5730: DE C6 7C 00 C6 C6 C6 FE C6 C6 C6 00 3C 18 18 18  // ..|.........<...
    5740: 18 18 3C 00 3C 18 18 18 D8 D8 70 00 C6 CC D8 F0  // ..<.<.....p.....
    5750: D8 CC C6 00 F0 60 60 60 60 62 FE 00 C6 EE FE D6  // .....````b......
    5760: D6 C6 C6 00 C6 E6 E6 F6 DE CE C6 00 7C C6 C6 C6  // ............|...
    5770: C6 C6 7C 00 FC 66 66 7C 60 60 F0 00 7C C6 C6 C6  // ..|..ff|``..|...
    5780: C6 D6 7C 06 FC C6 C6 FC D8 CC C6 00 7C C6 C0 7C  // ..|.........|..|
    5790: 06 C6 7C 00 7E 5A 18 18 18 18 3C 00 C6 C6 C6 C6  // ..|.~Z....<.....
    57A0: C6 C6 7C 00 C6 C6 C6 C6 6C 38 10 00 C6 C6 D6 D6  // ..|.....l8......
    57B0: FE EE C6 00 C6 6C 38 38 38 6C C6 00 66 66 66 3C  // .....l888l..fff<
    57C0: 18 18 3C 00 FE 86 0C 18 30 62 FE 00 7C 60 60 60  // ..<.....0b..|```
    57D0: 60 60 7C 00 C0 60 30 18 0C 06 02 00 7C 0C 0C 0C  // ``|..`0.....|...
    57E0: 0C 0C 7C 00 10 38 6C C6 00 00 00 00 00 00 00 00  // ..|..8l.........
    57F0: 00 00 00 FF 30 30 18 00 00 00 00 00 00 00 78 0C  // ....00........x.
    5800: 7C CC 7E 00 E0 60 7C 66 66 66 FC 00 00 00 7C C6  // |.~..`|fff....|.
    5810: C0 C6 7C 00 1C 0C 7C CC CC CC 7E 00 00 00 7C C6  // ..|...|...~...|.
    5820: FE C0 7C 00 1C 36 30 FC 30 30 78 00 00 00 76 CE  // ..|..60.00x...v.
    5830: C6 7E 06 7C E0 60 7C 66 66 66 E6 00 18 00 38 18  // .~.|.`|fff....8.
    5840: 18 18 3C 00 0C 00 1C 0C 0C 0C CC 78 E0 60 66 6C  // ..<........x.`fl
    5850: 78 6C E6 00 18 18 18 18 18 18 1C 00 00 00 6C FE  // xl............l.
    5860: D6 D6 C6 00 00 00 DC 66 66 66 66 00 00 00 7C C6  // .......ffff...|.
    5870: C6 C6 7C 00 00 00 DC 66 66 7C 60 F0 00 00 76 CC  // ..|....ff|`...v.
    5880: CC 7C 0C 1E 00 00 DC 66 60 60 F0 00 00 00 7C C0  // .|.....f``....|.
    5890: 7C 06 7C 00 30 30 FC 30 30 36 1C 00 00 00 CC CC  // |.|.00.006......
    58A0: CC CC 76 00 00 00 C6 C6 6C 38 10 00 00 00 C6 C6  // ..v.....l8......
    58B0: D6 FE 6C 00 00 00 C6 6C 38 6C C6 00 00 00 C6 C6  // ..l....l8l......
    58C0: CE 76 06 7C 00 00 FC 98 30 64 FC 00 0E 18 18 70  // .v.|....0d.....p
    58D0: 18 18 0E 00 18 18 18 00 18 18 18 00 70 18 18 0E  // ............p...
    58E0: 18 18 70 00 76 DC 00 00 00 00 00 00 00 10 38 38  // ..p.v.........88
    58F0: 6C 6C FE 00 3C 66 C0 66 3C 18 CC 78 00 C6 00 C6  // ll..<f.f<..x....
    5900: C6 CE 76 00 0E 00 7C C6 FE C0 7C 00 7C C6 78 0C  // ..v...|...|.|.x.
    5910: 7C CC 7E 00 C6 00 78 0C 7C CC 7E 00 E0 00 78 0C  // |.~...x.|.~...x.
    5920: 7C CC 7E 00 38 38 78 0C 7C CC 7E 00 00 00 7C C0  // |.~.88x.|.~...|.
    5930: 7C 18 6C 38 7C C6 7C C6 FE C0 7C 00 C6 00 7C C6  // |.l8|.|...|...|.
    5940: FE C0 7C 00 E0 00 7C C6 FE C0 7C 00 66 00 38 18  // ..|...|...|.f.8.
    5950: 18 18 3C 00 7C C6 38 18 18 18 3C 00 00 00 38 18  // ..<.|.8...<...8.
    5960: 18 18 3C 00 C6 38 6C C6 FE C6 C6 00 38 38 00 7C  // ..<..8l.....88.|
    5970: C6 FE C6 00 0E 00 FE C0 F8 C0 FE 00 00 00 6C 9A  // ..............l.
    5980: 7E D8 6E 00 7E D8 D8 FE D8 D8 DE 00 7C C6 00 7C  // ~.n.~.......|..|
    5990: C6 C6 7C 00 00 C6 00 7C C6 C6 7C 00 00 E0 00 7C  // ..|....|..|....|
    59A0: C6 C6 7C 00 7C C6 00 C6 C6 CE 76 00 00 E0 00 C6  // ..|.|.....v.....
    59B0: C6 CE 76 00 18 00 3C 18 18 18 3C 00 C6 38 6C C6  // ..v...<...<..8l.
    59C0: C6 6C 38 00 C6 00 C6 C6 C6 C6 7C 00 00 18 7E D8  // .l8.......|...~.
    59D0: D8 7E 18 00 38 6C 60 F0 66 F6 6C 00 C3 66 3C 7E  // .~..8l`.f.l..f<~
    59E0: 18 3C 18 00 3E 63 38 0E 63 3E 00 1C 00 3E 61 3C  // .<..>c8.c>...>a<
    59F0: 86 7C 00 1C 0E 00 78 0C 7C CC 7E 00 1C 00 38 18  // .|....x.|.~...8.
    5A00: 18 18 3C 00 00 0E 00 7C C6 C6 7C 00 00 0E 00 CC  // ..<....|..|.....
    5A10: CC DC 76 00 00 FC 00 BC 66 66 E6 00 FE 00 C6 E6  // ..v.....ff......
    5A20: F6 CE C6 00 3E 00 3E 60 67 63 3D 00 3E 00 76 CE  // ....>.>`gc=.>.v.
    5A30: C6 7E 06 7C 18 00 18 30 60 66 3C 00 00 00 00 7C  // .~.|...0`f<....|
    5A40: 60 60 00 00 00 00 00 7C 0C 0C 00 00 C0 CC D8 30  // ``.....|.......0
    5A50: 7C 36 0C 3E C0 CC D8 30 6C 3C 7E 0C 18 00 18 18  // |6.>...0l<~.....
    5A60: 3C 3C 18 00 00 36 6C D8 6C 36 00 00 00 D8 6C 36  // <<...6l.l6....l6
    5A70: 6C D8 00 00 22 88 22 88 22 88 22 88 55 AA 55 AA  // l...".".".".U.U.
    5A80: 55 AA 55 AA DD 77 DD 77 DD 77 DD 77 18 18 18 18  // U.U..w.w.w.w....
    5A90: 18 18 18 18 18 18 18 18 F8 18 18 18 18 18 F8 18  // ................
    5AA0: F8 18 18 18 36 36 36 36 F6 36 36 36 00 00 00 00  // ....6666.666....
    5AB0: FE 36 36 36 00 00 F8 18 F8 18 18 18 36 36 F6 06  // .666........66..
    5AC0: F6 36 36 36 36 36 36 36 36 36 36 36 00 00 FE 06  // .66666666666....
    5AD0: F6 36 36 36 36 36 F6 06 FE 00 00 00 36 36 36 36  // .66666......6666
    5AE0: FE 00 00 00 18 18 F8 18 F8 00 00 00 00 00 00 00  // ................
    5AF0: F8 18 18 18 18 18 18 18 1F 00 00 00 18 18 18 18  // ................
    5B00: FF 00 00 00 00 00 00 00 FF 18 18 18 18 18 18 18  // ................
    5B10: 1F 18 18 18 00 00 00 00 FF 00 00 00 18 18 18 18  // ................
    5B20: FF 18 18 18 18 18 1F 18 1F 18 18 18 36 36 36 36  // ............6666
    5B30: 37 36 36 36 36 36 37 30 3F 00 00 00 00 00 3F 30  // 76666670?.....?0
    5B40: 37 36 36 36 36 36 F7 00 FF 00 00 00 00 00 FF 00  // 766666..........
    5B50: F7 36 36 36 36 36 37 30 37 36 36 36 00 00 FF 00  // .66666707666....
    5B60: FF 00 00 00 36 36 F7 00 F7 36 36 36 18 18 FF 00  // ....66...666....
    5B70: FF 00 00 00 36 36 36 36 FF 00 00 00 00 00 FF 00  // ....6666........
    5B80: FF 18 18 18 00 00 00 00 FF 36 36 36 36 36 36 36  // .........6666666
    5B90: 3F 00 00 00 18 18 1F 18 1F 00 00 00 00 00 1F 18  // ?...............
    5BA0: 1F 18 18 18 00 00 00 00 3F 36 36 36 36 36 36 36  // ........?6666666
    5BB0: FF 36 36 36 18 18 FF 18 FF 18 18 18 18 18 18 18  // .666............
    5BC0: F8 00 00 00 00 00 00 00 1F 18 18 18 FF FF FF FF  // ................
    5BD0: FF FF FF FF 00 00 00 00 FF FF FF FF F0 F0 F0 F0  // ................
    5BE0: F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF  // ................
    5BF0: 00 00 00 00 00 00 66 DC D8 DC 66 00 00 78 CC F8  // ......f...f..x..
    5C00: CC C6 CC 00 00 FE 62 60 60 60 E0 00 00 FE 6C 6C  // ......b```....ll
    5C10: 6C 6C 6C 00 FE C6 60 30 60 C6 FE 00 00 7E D8 CC  // lll...`0`....~..
    5C20: CC D8 70 00 00 66 66 66 66 7C C0 00 00 76 DC 18  // ..p..ffff|...v..
    5C30: 18 18 38 00 FE 38 6C C6 6C 38 FE 00 38 6C C6 FE  // ..8..8l.l8..8l..
    5C40: C6 6C 38 00 38 6C C6 C6 6C 6C EE 00 3E 60 38 66  // .l8.8l..ll..>`8f
    5C50: C6 CC 78 00 00 00 7E DB DB 7E 00 00 06 7C DE F6  // ..x...~..~...|..
    5C60: E6 7C C0 00 38 60 C0 F8 C0 60 38 00 7C C6 C6 C6  // .|..8`...`8.|...
    5C70: C6 C6 C6 00 00 FE 00 FE 00 FE 00 00 18 18 7E 18  // ..............~.
    5C80: 18 00 7E 00 30 18 0C 18 30 00 7E 00 0C 18 30 18  // ..~.0...0.~...0.
    5C90: 0C 00 7E 00 0C 1E 18 18 18 18 18 18 18 18 18 18  // ..~.............
    5CA0: 18 78 30 00 00 00 18 00 7E 00 18 00 00 76 DC 00  // .x0.....~....v..
    5CB0: 76 DC 00 00 7C C6 C6 7C 00 00 00 00 00 00 00 18  // v...|..|........
    5CC0: 18 00 00 00 00 00 00 00 18 00 00 00 1F 18 18 18  // ................
    5CD0: F8 38 18 00 D8 6C 6C 6C 00 00 00 00 70 D8 30 F8  // .8...lll....p.0.
    5CE0: 00 00 00 00 00 00 7C 7C 7C 7C 00 00 00 00 00 00  // ......||||......
    5CF0: 00 00 00 00 1D 00 00 00 00 24 66 FF 66 24 00 00  // .........$f.f$..
    5D00: 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00  // ................
    5D10: 00 00 00 00 00 00 00 00 00 7E 81 A5 81 81 BD 99  // .........~......
    5D20: 81 81 7E 00 00 00 00 00 00 7C FE FE D6 FE FE BA  // ..~......|......
    5D30: C6 FE 7C 00 00 00 00 00 00 00 6C EE FE FE FE FE  // ..|.......l.....
    5D40: 7C 38 10 00 00 00 00 00 00 00 10 38 7C FE 7C 38  // |8.........8|.|8
    5D50: 10 00 00 00 00 00 00 00 00 00 10 38 38 10 6C EE  // ...........88.l.
    5D60: 6C 10 38 00 00 00 00 00 00 10 38 7C 7C FE FE FE  // l.8.......8||...
    5D70: 6C 10 38 00 00 00 00 00 00 00 00 00 18 3C 3C 3C  // l.8..........<<<
    5D80: 18 00 00 00 00 00 00 FF FF FF FF FF E7 C3 C3 C3  // ................
    5D90: E7 FF FF FF FF FF FF 00 00 00 00 18 3C 66 66 66  // ............<fff
    5DA0: 3C 18 00 00 00 00 00 FF FF FF FF E7 C3 99 99 99  // <...............
    5DB0: C3 E7 FF FF FF FF FF 00 00 1E 0E 1E 36 78 CC CC  // ............6x..
    5DC0: CC CC 78 00 00 00 00 00 00 3C 66 66 66 3C 18 7E  // ..x......<fff<.~
    5DD0: 18 18 18 00 00 00 00 00 00 1E 1A 1E 18 18 18 18  // ................
    5DE0: 78 F8 70 00 00 00 00 00 00 3E 36 3E 36 36 76 F6  // x.p......>6>66v.
    5DF0: 66 0E 1E 0C 00 00 00 00 00 18 DB 7E 3C 66 66 3C  // f..........~<ff<
    5E00: 7E DB 18 00 00 00 00 00 00 00 80 E0 F0 FC FE FC  // ~...............
    5E10: F0 E0 80 00 00 00 00 00 00 00 02 0E 3E 7E FE 7E  // ............>~.~
    5E20: 3E 0E 02 00 00 00 00 00 00 18 3C 7E 18 18 18 18  // >.........<~....
    5E30: 7E 3C 18 00 00 00 00 00 00 66 66 66 66 66 66 66  // ~<.......fffffff
    5E40: 00 66 66 00 00 00 00 00 00 7F DB DB DB DB 7B 1B  // .ff...........{.
    5E50: 1B 1B 1B 00 00 00 00 00 00 7C C6 C6 60 7C F6 DE  // .........|..`|..
    5E60: 7C 0C C6 C6 7C 00 00 00 00 00 00 00 00 00 00 FE  // |...|...........
    5E70: FE FE FE 00 00 00 00 00 00 18 3C 7E 18 18 18 7E  // ..........<~...~
    5E80: 3C 18 7E 00 00 00 00 00 00 18 3C 7E 18 18 18 18  // <.~.......<~....
    5E90: 18 18 18 00 00 00 00 00 00 18 18 18 18 18 18 18  // ................
    5EA0: 7E 3C 18 00 00 00 00 00 00 00 00 00 0C 0E FF 0E  // ~<..............
    5EB0: 0C 00 00 00 00 00 00 00 00 00 00 00 30 70 FE 70  // ............0p.p
    5EC0: 30 00 00 00 00 00 00 00 00 00 00 00 00 C0 C0 C0  // 0...............
    5ED0: FE 00 00 00 00 00 00 00 00 00 00 00 24 66 FF 66  // ............$f.f
    5EE0: 24 00 00 00 00 00 00 00 00 00 10 38 38 38 7C 7C  // $..........888||
    5EF0: FE FE 00 00 00 00 00 00 00 00 FE FE 7C 7C 7C 38  // ............|||8
    5F00: 38 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 8...............
    5F10: 00 00 00 00 00 00 00 00 00 18 3C 3C 3C 3C 18 18  // ..........<<<<..
    5F20: 00 18 18 00 00 00 00 00 36 36 36 36 14 00 00 00  // ........6666....
    5F30: 00 00 00 00 00 00 00 00 00 6C 6C 6C FE 6C 6C FE  // .........lll.ll.
    5F40: 6C 6C 6C 00 00 00 00 00 00 18 18 7C C6 C0 78 3C  // lll........|..x<
    5F50: 06 C6 7C 18 18 00 00 00 00 00 00 00 62 66 0C 18  // ..|.........bf..
    5F60: 30 66 C6 00 00 00 00 00 00 38 6C 38 30 76 7E CC  // 0f.......8l80v~.
    5F70: CC CC 76 00 00 00 00 00 0C 0C 0C 18 00 00 00 00  // ..v.............
    5F80: 00 00 00 00 00 00 00 00 00 0C 18 30 30 30 30 30  // ...........00000
    5F90: 30 18 0C 00 00 00 00 00 00 30 18 0C 0C 0C 0C 0C  // 0........0......
    5FA0: 0C 18 30 00 00 00 00 00 00 00 00 00 6C 38 FE 38  // ..0.........l8.8
    5FB0: 6C 00 00 00 00 00 00 00 00 00 00 00 18 18 7E 18  // l.............~.
    5FC0: 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5FD0: 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00 FE 00  // ................
    5FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5FF0: 00 18 18 00 00 00 00 00 00 00 00 02 06 0C 18 30  // ...............0
    6000: 60 C0 80 00 00 00 00 00 00 7C C6 C6 CE DE F6 E6  // `........|......
    6010: C6 C6 7C 00 00 00 00 00 00 18 78 18 18 18 18 18  // ..|.......x.....
    6020: 18 18 7E 00 00 00 00 00 00 7C C6 C6 06 0C 18 30  // ..~......|.....0
    6030: 60 C6 FE 00 00 00 00 00 00 7C C6 06 06 3C 06 06  // `........|...<..
    6040: 06 C6 7C 00 00 00 00 00 00 0C 1C 3C 6C CC CC FE  // ..|........<l...
    6050: 0C 0C 1E 00 00 00 00 00 00 FE C0 C0 C0 FC 06 06  // ................
    6060: 06 C6 7C 00 00 00 00 00 00 7C C6 C0 C0 FC C6 C6  // ..|......|......
    6070: C6 C6 7C 00 00 00 00 00 00 FE C6 06 0C 18 30 30  // ..|...........00
    6080: 30 30 30 00 00 00 00 00 00 7C C6 C6 C6 7C C6 C6  // 000......|...|..
    6090: C6 C6 7C 00 00 00 00 00 00 7C C6 C6 C6 C6 7E 06  // ..|......|....~.
    60A0: 06 C6 7C 00 00 00 00 00 00 00 00 00 0C 0C 00 00  // ..|.............
    60B0: 0C 0C 00 00 00 00 00 00 00 00 00 00 0C 0C 00 00  // ................
    60C0: 0C 0C 0C 18 00 00 00 00 00 00 0C 18 30 60 C0 60  // ............0`.`
    60D0: 30 18 0C 00 00 00 00 00 00 00 00 00 00 FE 00 FE  // 0...............
    60E0: 00 00 00 00 00 00 00 00 00 00 60 30 18 0C 06 0C  // ..........`0....
    60F0: 18 30 60 00 00 00 00 00 00 7C C6 C6 0C 18 18 18  // .0`......|......
    6100: 00 18 18 00 00 00 00 00 00 7C C6 C6 C6 DE DE DE  // .........|......
    6110: DC C0 7E 00 00 00 00 00 00 38 6C C6 C6 C6 FE C6  // ..~......8l.....
    6120: C6 C6 C6 00 00 00 00 00 00 FC 66 66 66 7C 66 66  // ..........fff|ff
    6130: 66 66 FC 00 00 00 00 00 00 3C 66 C2 C0 C0 C0 C0  // ff.......<f.....
    6140: C2 66 3C 00 00 00 00 00 00 F8 6C 66 66 66 66 66  // .f<.......lfffff
    6150: 66 6C F8 00 00 00 00 00 00 FE 66 60 64 7C 64 60  // fl........f`d|d`
    6160: 60 66 FE 00 00 00 00 00 00 FE 66 60 64 7C 64 60  // `f........f`d|d`
    6170: 60 60 F0 00 00 00 00 00 00 7C C6 C6 C0 C0 C0 CE  // ``.......|......
    6180: C6 C6 7C 00 00 00 00 00 00 C6 C6 C6 C6 FE C6 C6  // ..|.............
    6190: C6 C6 C6 00 00 00 00 00 00 3C 18 18 18 18 18 18  // .........<......
    61A0: 18 18 3C 00 00 00 00 00 00 3C 18 18 18 18 18 18  // ..<......<......
    61B0: D8 D8 70 00 00 00 00 00 00 C6 C6 CC D8 F0 F0 D8  // ..p.............
    61C0: CC C6 C6 00 00 00 00 00 00 F0 60 60 60 60 60 60  // ..........``````
    61D0: 62 66 FE 00 00 00 00 00 00 C6 C6 EE EE FE D6 D6  // bf..............
    61E0: D6 C6 C6 00 00 00 00 00 00 C6 C6 E6 E6 F6 DE CE  // ................
    61F0: CE C6 C6 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6  // .........|......
    6200: C6 C6 7C 00 00 00 00 00 00 FC 66 66 66 66 7C 60  // ..|.......ffff|`
    6210: 60 60 F0 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6  // ``.......|......
    6220: D6 D6 7C 06 00 00 00 00 00 FC 66 66 66 7C 78 6C  // ..|.......fff|xl
    6230: 66 66 E6 00 00 00 00 00 00 7C C6 C0 C0 70 1C 06  // ff.......|...p..
    6240: 06 C6 7C 00 00 00 00 00 00 7E 5A 18 18 18 18 18  // ..|......~Z.....
    6250: 18 18 3C 00 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6  // ..<.............
    6260: C6 C6 7C 00 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6  // ..|.............
    6270: 6C 38 10 00 00 00 00 00 00 C6 C6 C6 D6 D6 D6 FE  // l8..............
    6280: EE C6 C6 00 00 00 00 00 00 C6 C6 C6 6C 38 38 6C  // ............l88l
    6290: C6 C6 C6 00 00 00 00 00 00 66 66 66 66 66 3C 18  // .........fffff<.
    62A0: 18 18 3C 00 00 00 00 00 00 FE C6 86 0C 18 30 60  // ..<...........0`
    62B0: C2 C6 FE 00 00 00 00 00 00 7C 60 60 60 60 60 60  // .........|``````
    62C0: 60 60 7C 00 00 00 00 00 00 00 00 80 C0 60 30 18  // ``|..........`0.
    62D0: 0C 06 02 00 00 00 00 00 00 7C 0C 0C 0C 0C 0C 0C  // .........|......
    62E0: 0C 0C 7C 00 00 00 00 00 10 38 6C C6 00 00 00 00  // ..|......8l.....
    62F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6300: 00 00 00 00 FF 00 00 00 18 18 18 0C 00 00 00 00  // ................
    6310: 00 00 00 00 00 00 00 00 00 00 00 00 78 0C 7C CC  // ............x.|.
    6320: CC DC 76 00 00 00 00 00 00 E0 60 60 7C 66 66 66  // ..v.......``|fff
    6330: 66 66 FC 00 00 00 00 00 00 00 00 00 7C C6 C0 C0  // ff..........|...
    6340: C0 C6 7C 00 00 00 00 00 00 1C 0C 0C 7C CC CC CC  // ..|.........|...
    6350: CC CC 7E 00 00 00 00 00 00 00 00 00 7C C6 C6 FE  // ..~.........|...
    6360: C0 C6 7C 00 00 00 00 00 00 1C 36 30 30 FC 30 30  // ..|.......600.00
    6370: 30 30 78 00 00 00 00 00 00 00 00 00 76 CE C6 C6  // 00x.........v...
    6380: CE 76 06 C6 7C 00 00 00 00 E0 60 60 7C 66 66 66  // .v..|.....``|fff
    6390: 66 66 E6 00 00 00 00 00 00 18 18 00 38 18 18 18  // ff..........8...
    63A0: 18 18 3C 00 00 00 00 00 00 0C 0C 00 1C 0C 0C 0C  // ..<.............
    63B0: 0C 0C CC CC 78 00 00 00 00 E0 60 60 66 66 6C 78  // ....x.....``fflx
    63C0: 6C 66 E6 00 00 00 00 00 00 18 18 18 18 18 18 18  // lf..............
    63D0: 18 18 1C 00 00 00 00 00 00 00 00 00 6C FE D6 D6  // ............l...
    63E0: C6 C6 C6 00 00 00 00 00 00 00 00 00 DC 66 66 66  // .............fff
    63F0: 66 66 66 00 00 00 00 00 00 00 00 00 7C C6 C6 C6  // fff.........|...
    6400: C6 C6 7C 00 00 00 00 00 00 00 00 00 DC 66 66 66  // ..|..........fff
    6410: 66 7C 60 60 F0 00 00 00 00 00 00 00 76 CC CC CC  // f|``........v...
    6420: CC 7C 0C 0C 1E 00 00 00 00 00 00 00 DC 66 60 60  // .|...........f``
    6430: 60 60 F0 00 00 00 00 00 00 00 00 00 7C C6 C0 7C  // ``..........|..|
    6440: 06 C6 7C 00 00 00 00 00 00 30 30 30 FC 30 30 30  // ..|......000.000
    6450: 30 36 1C 00 00 00 00 00 00 00 00 00 CC CC CC CC  // 06..............
    6460: CC CC 76 00 00 00 00 00 00 00 00 00 C6 C6 C6 C6  // ..v.............
    6470: 6C 38 10 00 00 00 00 00 00 00 00 00 C6 C6 D6 D6  // l8..............
    6480: D6 FE 6C 00 00 00 00 00 00 00 00 00 C6 C6 6C 38  // ..l...........l8
    6490: 6C C6 C6 00 00 00 00 00 00 00 00 00 C6 C6 C6 C6  // l...............
    64A0: CE 76 06 C6 7C 00 00 00 00 00 00 00 FE 86 0C 18  // .v..|...........
    64B0: 30 62 FE 00 00 00 00 00 00 0E 18 18 18 70 18 18  // 0b...........p..
    64C0: 18 18 0E 00 00 00 00 00 00 18 18 18 18 00 18 18  // ................
    64D0: 18 18 18 00 00 00 00 00 00 70 18 18 18 0E 18 18  // .........p......
    64E0: 18 18 70 00 00 00 00 00 00 76 DC 00 00 00 00 00  // ..p......v......
    64F0: 00 00 00 00 00 00 00 00 00 00 00 00 10 38 38 6C  // .............88l
    6500: 6C FE 00 00 00 00 00 00 00 3C 66 C0 C0 C0 C6 66  // l........<f....f
    6510: 3C 18 0C CC 38 00 00 00 00 C6 00 00 C6 C6 C6 C6  // <...8...........
    6520: C6 CE 76 00 00 00 00 00 0C 18 30 00 7C C6 C6 FE  // ..v.......0.|...
    6530: C0 C6 7C 00 00 00 00 00 30 78 CC 00 78 0C 7C CC  // ..|.....0x..x.|.
    6540: CC DC 76 00 00 00 00 00 00 CC 00 00 78 0C 7C CC  // ..v.........x.|.
    6550: CC DC 76 00 00 00 00 00 60 30 18 00 78 0C 7C CC  // ..v.....`0..x.|.
    6560: CC DC 76 00 00 00 00 00 38 6C 38 00 78 0C 7C CC  // ..v.....8l8.x.|.
    6570: CC DC 76 00 00 00 00 00 00 00 00 7C C6 C0 C0 C6  // ..v........|....
    6580: 7C 18 0C 6C 38 00 00 00 30 78 CC 00 7C C6 C6 FE  // |..l8...0x..|...
    6590: C0 C6 7C 00 00 00 00 00 00 CC 00 00 7C C6 C6 FE  // ..|.........|...
    65A0: C0 C6 7C 00 00 00 00 00 30 18 0C 00 7C C6 C6 FE  // ..|.....0...|...
    65B0: C0 C6 7C 00 00 00 00 00 00 66 00 00 38 18 18 18  // ..|......f..8...
    65C0: 18 18 3C 00 00 00 00 00 18 3C 66 00 38 18 18 18  // ..<......<f.8...
    65D0: 18 18 3C 00 00 00 00 00 00 00 00 00 38 18 18 18  // ..<.........8...
    65E0: 18 18 3C 00 00 00 00 00 C6 00 38 6C C6 C6 C6 FE  // ..<.......8l....
    65F0: C6 C6 C6 00 00 00 00 38 6C 38 00 38 6C C6 C6 FE  // .......8l8.8l...
    6600: C6 C6 C6 00 00 00 00 0C 18 30 00 FE 60 60 7C 60  // .........0..``|`
    6610: 60 60 FE 00 00 00 00 00 00 00 00 66 DB 1B 7F D8  // ``.........f....
    6620: D8 DF 76 00 00 00 00 00 00 7E D8 D8 D8 D8 FE D8  // ..v......~......
    6630: D8 D8 DE 00 00 00 00 00 30 78 CC 00 7C C6 C6 C6  // ........0x..|...
    6640: C6 C6 7C 00 00 00 00 00 00 C6 00 00 7C C6 C6 C6  // ..|.........|...
    6650: C6 C6 7C 00 00 00 00 00 30 18 0C 00 7C C6 C6 C6  // ..|.....0...|...
    6660: C6 C6 7C 00 00 00 00 00 30 78 CC 00 C6 C6 C6 C6  // ..|.....0x......
    6670: C6 CE 76 00 00 00 00 00 60 30 18 00 C6 C6 C6 C6  // ..v.....`0......
    6680: C6 CE 76 00 00 00 00 00 18 00 3C 18 18 18 18 18  // ..v.......<.....
    6690: 18 18 3C 00 00 00 00 00 C6 00 7C C6 C6 C6 C6 C6  // ..<.......|.....
    66A0: C6 C6 7C 00 00 00 00 00 C6 00 C6 C6 C6 C6 C6 C6  // ..|.............
    66B0: C6 C6 7C 00 00 00 00 00 00 18 18 7C C6 C0 C0 C6  // ..|........|....
    66C0: 7C 18 18 00 00 00 00 00 38 6C 60 60 F0 60 60 60  // |.......8l``.```
    66D0: 66 F6 6C 00 00 00 00 00 66 66 66 66 3C 18 7E 18  // f.l.....ffff<.~.
    66E0: 3C 18 18 00 00 00 00 00 00 3E 63 63 30 1C 06 63  // <........>cc0..c
    66F0: 63 3E 00 1C 00 00 00 00 00 00 00 00 3E 63 38 0E  // c>..........>c8.
    6700: 63 3E 00 1C 00 00 00 00 0C 18 30 00 78 0C 7C CC  // c>........0.x.|.
    6710: CC DC 76 00 00 00 00 00 0C 18 30 00 38 18 18 18  // ..v.......0.8...
    6720: 18 18 3C 00 00 00 00 00 0C 18 30 00 7C C6 C6 C6  // ..<.......0.|...
    6730: C6 C6 7C 00 00 00 00 00 18 30 60 00 CC CC CC CC  // ..|......0`.....
    6740: CC DC 76 00 00 00 00 00 00 76 DC 00 BC 66 66 66  // ..v......v...fff
    6750: 66 66 E6 00 00 00 00 00 76 DC 00 C6 C6 E6 F6 DE  // ff......v.......
    6760: CE C6 C6 00 00 00 00 00 21 1E 00 1E 33 60 60 67  // ........!...3``g
    6770: 63 33 1D 00 00 00 00 00 42 3C 00 3B 66 66 66 3E  // c3......B<.;fff>
    6780: 06 66 3C 00 00 00 00 00 00 30 30 00 30 30 30 60  // .f<......00.000`
    6790: C6 C6 7C 00 00 00 00 00 00 00 00 00 00 00 7E 60  // ..|...........~`
    67A0: 60 60 00 00 00 00 00 00 00 00 00 00 00 00 7E 06  // ``............~.
    67B0: 06 06 00 00 00 00 00 00 60 60 62 66 6C 18 30 60  // ........``bfl.0`
    67C0: DC 36 0C 18 3E 00 00 00 60 60 62 66 6C 18 36 6E  // .6..>...``bfl.6n
    67D0: DE 36 7E 06 06 00 00 00 00 18 18 00 18 18 3C 3C  // .6~...........<<
    67E0: 3C 3C 18 00 00 00 00 00 00 00 00 00 36 6C D8 6C  // <<..........6l.l
    67F0: 36 00 00 00 00 00 00 00 00 00 00 00 D8 6C 36 6C  // 6............l6l
    6800: D8 00 00 00 00 00 00 11 44 11 44 11 44 11 44 11  // ........D.D.D.D.
    6810: 44 11 44 11 44 11 44 AA 55 AA 55 AA 55 AA 55 AA  // D.D.D.D.U.U.U.U.
    6820: 55 AA 55 AA 55 AA 55 DD 77 DD 77 DD 77 DD 77 DD  // U.U.U.U.w.w.w.w.
    6830: 77 DD 77 DD 77 DD 77 18 18 18 18 18 18 18 18 18  // w.w.w.w.........
    6840: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 F8 18  // ................
    6850: 18 18 18 18 18 18 18 18 18 18 18 18 F8 18 F8 18  // ................
    6860: 18 18 18 18 18 18 18 36 36 36 36 36 36 36 F6 36  // .......6666666.6
    6870: 36 36 36 36 36 36 36 00 00 00 00 00 00 00 FE 36  // 6666666........6
    6880: 36 36 36 36 36 36 36 00 00 00 00 00 F8 18 F8 18  // 6666666.........
    6890: 18 18 18 18 18 18 18 36 36 36 36 36 F6 06 F6 36  // .......66666...6
    68A0: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    68B0: 36 36 36 36 36 36 36 00 00 00 00 00 FE 06 F6 36  // 6666666........6
    68C0: 36 36 36 36 36 36 36 36 36 36 36 36 F6 06 FE 00  // 666666666666....
    68D0: 00 00 00 00 00 00 00 36 36 36 36 36 36 36 FE 00  // .......6666666..
    68E0: 00 00 00 00 00 00 00 18 18 18 18 18 F8 18 F8 00  // ................
    68F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F8 18  // ................
    6900: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 1F 00  // ................
    6910: 00 00 00 00 00 00 00 18 18 18 18 18 18 18 FF 00  // ................
    6920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 18  // ................
    6930: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 1F 18  // ................
    6940: 18 18 18 18 18 18 18 00 00 00 00 00 00 00 FF 00  // ................
    6950: 00 00 00 00 00 00 00 18 18 18 18 18 18 18 FF 18  // ................
    6960: 18 18 18 18 18 18 18 18 18 18 18 18 1F 18 1F 18  // ................
    6970: 18 18 18 18 18 18 18 36 36 36 36 36 36 36 37 36  // .......666666676
    6980: 36 36 36 36 36 36 36 36 36 36 36 36 37 30 3F 00  // 66666666666670?.
    6990: 00 00 00 00 00 00 00 00 00 00 00 00 3F 30 37 36  // ............?076
    69A0: 36 36 36 36 36 36 36 36 36 36 36 36 F7 00 FF 00  // 666666666666....
    69B0: 00 00 00 00 00 00 00 00 00 00 00 00 FF 00 F7 36  // ...............6
    69C0: 36 36 36 36 36 36 36 36 36 36 36 36 37 30 37 36  // 6666666666667076
    69D0: 36 36 36 36 36 36 36 00 00 00 00 00 FF 00 FF 00  // 6666666.........
    69E0: 00 00 00 00 00 00 00 36 36 36 36 36 F7 00 F7 36  // .......66666...6
    69F0: 36 36 36 36 36 36 36 18 18 18 18 18 FF 00 FF 00  // 6666666.........
    6A00: 00 00 00 00 00 00 00 36 36 36 36 36 36 36 FF 00  // .......6666666..
    6A10: 00 00 00 00 00 00 00 00 00 00 00 00 FF 00 FF 18  // ................
    6A20: 18 18 18 18 18 18 18 00 00 00 00 00 00 00 FF 36  // ...............6
    6A30: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 3F 00  // 66666666666666?.
    6A40: 00 00 00 00 00 00 00 18 18 18 18 18 1F 18 1F 00  // ................
    6A50: 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 1F 18  // ................
    6A60: 18 18 18 18 18 18 18 00 00 00 00 00 00 00 3F 36  // ..............?6
    6A70: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 FF 36  // 66666666666666.6
    6A80: 36 36 36 36 36 36 36 18 18 18 18 18 FF 18 FF 18  // 6666666.........
    6A90: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 F8 00  // ................
    6AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18  // ................
    6AB0: 18 18 18 18 18 18 18 FF FF FF FF FF FF FF FF FF  // ................
    6AC0: FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00 FF  // ................
    6AD0: FF FF FF FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    6AE0: F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    6AF0: 0F 0F 0F 0F 0F 0F 0F FF FF FF FF FF FF FF FF 00  // ................
    6B00: 00 00 00 00 00 00 00 00 00 00 00 76 DC D8 D8 D8  // ...........v....
    6B10: D8 DC 76 00 00 00 00 00 00 78 CC CC D8 FC C6 C6  // ..v......x......
    6B20: C6 C6 CC 00 00 00 00 00 00 FE 66 62 60 60 60 60  // ..........fb````
    6B30: 60 60 60 00 00 00 00 00 00 00 00 00 FE 6C 6C 6C  // ```..........lll
    6B40: 6C 6C 6C 00 00 00 00 00 00 FE C6 62 30 18 18 30  // lll........b0..0
    6B50: 62 C6 FE 00 00 00 00 00 00 00 00 00 7E D8 CC CC  // b...........~...
    6B60: CC D8 70 00 00 00 00 00 00 00 00 66 66 66 66 66  // ..p........fffff
    6B70: 7C 60 C0 80 00 00 00 00 00 00 00 00 76 DC 18 18  // |`..........v...
    6B80: 18 18 18 00 00 00 00 00 00 FE 38 38 6C C6 C6 6C  // ..........88l..l
    6B90: 38 38 FE 00 00 00 00 00 00 00 38 6C C6 C6 FE C6  // 88........8l....
    6BA0: C6 6C 38 00 00 00 00 00 00 38 6C C6 C6 C6 C6 6C  // .l8......8l....l
    6BB0: 6C 6C EE 00 00 00 00 00 00 3E 60 60 3C 66 C6 C6  // ll.......>``<f..
    6BC0: C6 CC 78 00 00 00 00 00 00 00 00 00 7E DB DB DB  // ..x.........~...
    6BD0: 7E 00 00 00 00 00 00 00 00 02 06 7C CE DE F6 F6  // ~..........|....
    6BE0: 7C 60 C0 00 00 00 00 00 00 00 1C 30 60 60 7C 60  // |`.........0``|`
    6BF0: 60 30 1C 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6  // `0.......|......
    6C00: C6 C6 C6 00 00 00 00 00 00 00 00 FE 00 00 FE 00  // ................
    6C10: 00 FE 00 00 00 00 00 00 00 00 00 18 18 7E 18 18  // .............~..
    6C20: 00 00 7E 00 00 00 00 00 00 30 18 0C 06 0C 18 30  // ..~......0.....0
    6C30: 00 00 7E 00 00 00 00 00 00 0C 18 30 60 30 18 0C  // ..~........0`0..
    6C40: 00 00 7E 00 00 00 00 00 00 00 00 0C 1E 1A 18 18  // ..~.............
    6C50: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6C60: 18 58 78 30 00 00 00 00 00 00 00 18 18 00 7E 00  // .Xx0..........~.
    6C70: 18 18 00 00 00 00 00 00 00 00 00 00 00 76 DC 00  // .............v..
    6C80: 76 DC 00 00 00 00 00 00 00 78 CC CC 78 00 00 00  // v........x..x...
    6C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18 18  // ................
    6CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18  // ................
    6CB0: 00 00 00 00 00 00 00 00 00 1F 18 18 18 18 18 D8  // ................
    6CC0: D8 78 38 18 00 00 00 00 00 D8 6C 6C 6C 6C 6C 00  // .x8.......lllll.
    6CD0: 00 00 00 00 00 00 00 00 00 70 D8 18 30 60 F8 00  // .........p..0`..
    6CE0: 00 00 00 00 00 00 00 00 00 00 00 00 7E 7E 7E 7E  // ............~~~~
    6CF0: 7E 7E 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ~~..............
    6D00: 00 00 00 00 00 00 00 1D 00 00 00 00 00 24 66 FF  // .............$f.
    6D10: 66 24 00 00 00 00 00 00 2F 00 00 00 01 03 06 0C  // f$....../.......
    6D20: 18 30 60 C0 80 00 00 00 00 30 00 00 7E C3 C3 C3  // .0`......0..~...
    6D30: DB DB C3 C3 C3 7E 00 00 00 00 4D 00 00 C3 C3 E7  // .....~....M.....
    6D40: FF FF DB DB C3 C3 C3 00 00 00 00 54 00 00 FF 99  // ...........T....
    6D50: 18 18 18 18 18 18 18 3C 00 00 00 00 56 00 00 C3  // .......<....V...
    6D60: C3 C3 C3 C3 C3 C3 66 3C 18 00 00 00 00 57 00 00  // ......f<.....W..
    6D70: C3 C3 C3 C3 DB DB DB DB FF 66 00 00 00 00 58 00  // .........f....X.
    6D80: 00 C3 C3 C3 66 3C 3C 66 C3 C3 C3 00 00 00 00 59  // ....f<<f.......Y
    6D90: 00 00 C3 C3 C3 C3 66 3C 18 18 18 3C 00 00 00 00  // ......f<...<....
    6DA0: 5C 00 00 00 80 C0 60 30 18 0C 06 03 01 00 00 00  // \.....`0........
    6DB0: 00 6D 00 00 00 00 00 66 FF DB DB DB C3 C3 00 00  // .m.....f........
    6DC0: 00 00 76 00 00 00 00 00 C3 C3 C3 C3 66 3C 18 00  // ..v.........f<..
    6DD0: 00 00 00 77 00 00 00 00 00 C3 C3 DB DB DB FF 66  // ...w...........f
    6DE0: 00 00 00 00 00 00 9F 5C C3 0B DB 74 03 E9 46 01  // .......\...t..F.
    6DF0: 57 32 C0 B9 40 00 F3 AA 5F BB 6C 8A 26 89 1D 26  // W2..@..._.l.&..&
    6E00: 8C 4D 02 2E 8E 1E F3 03 57 BE 49 04 B9 1E 00 83  // .M......W.I.....
    6E10: C7 04 FC 8A 04 26 88 05 46 47 E2 F7 5F A0 84 04  // .....&..FG.._...
    6E20: FE C0 26 88 45 22 A1 85 04 26 89 45 23 57 E8 D9  // ..&.E"...&.E#W..
    6E30: 1B 5F 26 88 5D 25 26 88 7D 26 8A 1E 49 04 E8 FC  // ._&.]%&.}&..I...
    6E40: 05 74 05 80 FB 13 7F 1D 32 FF D1 E3 2E 8A 87 44  // .t......2......D
    6E50: 8A 32 E4 0A C0 74 01 40 26 89 45 27 2E 8A 87 45  // .2...t.@&.E'...E
    6E60: 8A 26 88 45 29 A1 85 04 8A 16 84 04 FE C2 F6 E2  // .&.E)...........
    6E70: B2 00 3D C8 00 7E 15 B2 01 3D 5E 01 7E 0E B2 02  // ..=..~...=^.~...
    6E80: 3D 90 01 7E 07 B2 03 3D E0 01 7E 00 26 88 55 2A  // =..~...=..~.&.U*
    6E90: 8A 26 87 04 8A C4 24 01 C0 E0 04 80 E4 02 D0 E4  // .&....$.........
    6EA0: 0A E0 80 F4 10 A0 89 04 24 0A 0A E0 E8 94 08 B2  // ........$.......
    6EB0: C0 B0 30 EE 42 EC 24 08 C0 E0 02 0A C4 0C 01 26  // ..0.B.$........&
    6EC0: 88 45 2D B0 03 26 88 45 31 E8 77 08 1E 06 32 D2  // .E-..&.E1.w...2.
    6ED0: C4 1E A8 04 8C C1 8C CE 3B CE 74 34 26 C5 77 04  // ........;.t4&.w.
    6EE0: 8C D9 0B F1 74 03 80 CA 10 26 C5 77 0C 8C D9 0B  // ....t....&.w....
    6EF0: F1 74 03 80 CA 08 26 C5 77 08 8C D9 0B F1 74 03  // .t....&.w.....t.
    6F00: 80 CA 04 26 C5 77 10 8C D9 0B F1 74 03 80 CA 01  // ...&.w.....t....
    6F10: 07 1F 26 88 55 32 B0 03 BA C4 03 E8 E4 04 8A E0  // ..&.U2..........
    6F20: C0 EC 02 8A D4 8A F2 D0 EE 81 E2 04 04 25 03 03  // .............%..
    6F30: 0B C2 26 89 45 2B 8B EC C6 46 1A 1B C3 0A C0 74  // ..&.E+...F.....t
    6F40: 0F FE C8 74 36 FE C8 74 56 8B EC C6 46 1A 00 C3  // ...t6..tV...F...
    6F50: B8 20 00 F6 C1 01 74 03 83 C0 60 F6 C1 02 74 03  // . ....t...`...t.
    6F60: 83 C0 3A F6 C1 04 74 03 05 03 03 83 C0 3F C1 E8  // ..:...t......?..
    6F70: 06 8B EC 89 46 0E C6 46 1A 1C C3 8B FB 83 C7 20  // ....F..F....... 
    6F80: F6 C1 01 74 03 E8 85 00 F6 C1 02 74 03 E8 EF 00  // ...t.......t....
    6F90: F6 C1 04 74 03 E8 F8 01 8B EC C6 46 1A 1C C3 F6  // ...t.......F....
    6FA0: C1 01 74 06 E8 16 15 E8 25 01 F6 C1 02 74 03 E8  // ..t.....%....t..
    6FB0: 85 01 F6 C1 04 74 03 E8 12 02 EB DC 8A C4 EE 42  // .....t.........B
    6FC0: EC AA FE C4 4A E2 F5 C3 E8 6B 04 BD C0 03 B9 15  // ....J....k......
    6FD0: 00 32 E4 EC 87 EA 8A C4 EE 42 EC AA FE C4 4A 87  // .2.......B....J.
    6FE0: EA E2 F0 EC 87 EA B0 20 EE C3 26 8A 05 88 04 47  // ....... ..&....G
    6FF0: 46 E2 F7 C3 26 8A 25 EF 47 FE C0 E2 F7 C3 B2 C0  // F...&.%.G.......
    7000: 8A C4 EE 26 8A 05 47 FE C4 EE E2 F4 C3 9C FA 51  // ...&..G........Q
    7010: 57 8B C7 2B C3 26 89 07 8B F7 E8 0A 04 EC 26 88  // W..+.&........&.
    7020: 44 01 26 89 54 41 B2 CE EC 26 88 44 02 B2 CC EC  // D.&.TA...&.D....
    7030: 26 88 44 09 B2 CA EC 26 88 44 04 B2 C4 EC 26 88  // &.D....&.D....&.
    7040: 04 83 C7 05 B9 04 00 B4 01 E8 70 FF 26 8A 04 EE  // ..........p.&...
    7050: 8B FE 83 C7 0A 26 8B 54 41 32 E4 B9 19 00 E8 5B  // .....&.TA2.....[
    7060: FF 26 8A 44 01 EE E8 5F FF B2 CE 32 E4 B9 09 00  // .&.D..._...2....
    7070: E8 49 FF 26 8A 44 02 EE 5F 59 83 C7 60 9D C3 9C  // .I.&.D.._Y..`...
    7080: FA 8B C7 2B C3 26 89 47 02 51 57 2E 8E 1E F3 03  // ...+.&.G.QW.....
    7090: A0 10 04 24 30 AA BE 49 04 B9 1E 00 F3 A4 BE 84  // ...$0..I........
    70A0: 04 B1 07 F3 A4 BE A8 04 B1 04 F3 A4 BE 14 00 B1  // ................
    70B0: 04 F3 A4 BE 74 00 B1 04 F3 A4 BE 7C 00 B1 04 F3  // ....t......|....
    70C0: A4 BE 0C 01 B1 04 F3 A4 5F 59 83 C7 3A 9D C3 9C  // ........_Y..:...
    70D0: FA 26 8B 3F 03 FB 8B F7 51 8B FE 83 C7 05 BA C4  // .&.?....Q.......
    70E0: 03 B8 00 01 EF B0 01 B9 04 00 E8 07 FF 47 B2 C2  // .............G..
    70F0: 26 8A 44 09 EE B2 C4 B8 00 03 EF 26 8A 04 EE 26  // &.D........&...&
    7100: 8B 54 41 B8 11 00 EF B1 19 32 C0 E8 E6 FE 26 8A  // .TA......2....&.
    7110: 44 01 EE 80 C2 06 26 8A 44 04 EE EC B1 15 32 E4  // D.....&.D.....2.
    7120: E8 DB FE B0 20 EE B1 09 32 C0 B2 CE E8 C5 FE 26  // .... ...2......&
    7130: 8A 44 02 EE 59 9D C3 9C FA 26 8B 7F 02 03 FB 06  // .D..Y....&......
    7140: 51 2E 8E 1E F3 03 26 8A 05 80 26 10 04 CF 08 06  // Q.....&...&.....
    7150: 10 04 47 BE 49 04 B9 1E 00 E8 8E FE BE 84 04 B1  // ..G.I...........
    7160: 07 E8 86 FE BE A8 04 B1 04 E8 7E FE BE 14 00 B1  // ..........~.....
    7170: 04 E8 76 FE BE 74 00 B1 04 E8 6E FE BE 7C 00 B1  // ..v..t....n..|..
    7180: 04 E8 66 FE BE 0C 01 B1 04 E8 5E FE 59 07 9D C3  // ..f.......^.Y...
    7190: 9C FA 8B C7 2B C3 26 89 47 04 E8 A6 05 B2 C0 B0  // ....+.&.G.......
    71A0: 34 EE 42 EC 26 88 05 BA C8 03 EC 26 88 45 01 50  // 4.B.&......&.E.P
    71B0: 4A 4A EC 26 88 45 02 83 C7 03 B9 00 03 42 32 C0  // JJ.&.E.......B2.
    71C0: EE 42 42 EC AA E2 FC 58 4A EE 9D C3 9C FA 26 8B  // .BB....XJ.....&.
    71D0: 77 04 03 F3 E8 6C 05 B2 C0 B0 34 EE 26 8A 04 EE  // w....l....4.&...
    71E0: BA C6 03 26 8A 44 02 EE 56 42 42 83 C6 03 32 C0  // ...&.D..VBB...2.
    71F0: EE 42 B9 00 03 26 8A 04 EE 46 E2 F9 5E FE CA 26  // .B...&...F..^..&
    7200: 8A 44 01 EE 9D C3 BA CC 03 EC 24 FE 0A C4 B2 C2  // .D........$.....
    7210: EE C3 E8 A8 12 B2 C0 86 C4 EE EB 00 EB 00 86 C4  // ................
    7220: EE EB 00 EB 00 B0 20 EE C3 50 8A E0 80 E4 80 80  // ...... ..P......
    7230: 26 87 04 7F 08 26 87 04 24 7F 8A E0 3C 07 7E 1E  // &....&..$...<.~.
    7240: 26 F6 47 33 01 75 17 3C 23 74 13 3C 32 74 0F 3C  // &.G3.u.<#t.<2t.<
    7250: 33 74 0B B4 03 26 F6 47 09 01 75 02 B4 07 88 26  // 3t...&.G..u....&
    7260: 49 04 BA B4 03 80 0E 87 04 02 26 F6 47 09 01 74  // I.........&.G..t
    7270: 07 B2 D4 80 26 87 04 FD 89 16 63 04 C7 06 4E 04  // ....&.....c...N.
    7280: 00 00 C6 06 62 04 00 B9 08 00 BF 50 04 FC 06 1E  // ....b......P....
    7290: 07 33 C0 F3 AB 07 26 8A 07 32 E4 A3 4A 04 26 8A  // .3....&..2..J.&.
    72A0: 47 01 A2 84 04 26 8A 47 02 A3 85 04 26 8B 47 03  // G....&.G....&.G.
    72B0: A3 4C 04 26 8B 47 14 86 C4 A3 60 04 58 C3 52 32  // .L.&.G....`.X.R2
    72C0: E4 33 D2 B0 0D CD 17 F6 C4 29 75 08 32 E4 33 D2  // .3.......)u.2.3.
    72D0: B0 0A CD 17 5A C3 06 1E 60 2E 8E 1E F3 03 2E 83  // ....Z...`.......
    72E0: 0E FD 03 00 75 6E 80 3E 00 05 01 74 67 C6 06 00  // ....un.>...tg...
    72F0: 05 01 8A 1E 62 04 32 FF D1 E3 8B FB 8B 85 50 04  // ....b.2.......P.
    7300: 8A 3E 62 04 50 32 F6 8A 0E 84 04 32 ED 41 51 8B  // .>b.P2.....2.AQ.
    7310: 0E 4A 04 32 D2 E8 A6 FF F6 C4 29 75 3D 51 52 89  // .J.2......)u=QR.
    7320: 95 50 04 B4 08 E8 B0 D4 0A C0 75 02 B0 20 33 D2  // .P........u.. 3.
    7330: 32 E4 CD 17 F6 C4 29 75 1F 5A FE C2 59 E2 DE FE  // 2.....)u.Z..Y...
    7340: C6 59 E2 CA E8 77 FF 32 C0 A2 00 05 58 89 85 50  // .Y...w.2....X..P
    7350: 04 E8 AF 03 61 1F 07 CF 5A 59 59 B0 FF EB EA 52  // ....a...ZYY....R
    7360: 2A F5 38 C6 7D 02 32 C0 2E 8E 06 F5 03 5A C3 A0  // *.8.}.2......Z..
    7370: 85 04 F6 E3 8A F7 8B D8 8B CA BA C4 03 B8 02 0F  // ................
    7380: EF B4 02 E8 6D 00 8B D1 32 ED 8A E6 8A C6 F3 AA  // ....m...2.......
    7390: 03 FD 8A CA 4B 75 F7 32 E4 E8 57 00 C3 53 8A 1E  // ....Ku.2..W..S..
    73A0: 62 04 0B C0 75 04 0A DB 74 03 E8 35 03 5B 8B F8  // b...u...t..5.[..
    73B0: 2B D1 81 C2 01 01 8A C3 32 E4 C3 8A C6 32 F6 2B  // +.......2....2.+
    73C0: EA 0A DB 74 2A 2A C3 F6 26 85 04 8B C8 52 B4 01  // ...t**..&....R..
    73D0: E8 20 00 B2 C4 B8 02 0F EF 5A 1E 06 1F 8B C1 8B  // . .......Z......
    73E0: CA F3 A4 03 F5 03 FD 48 75 F5 1F E8 81 FF C3 8A  // .......Hu.......
    73F0: D8 EB F8 BA CE 03 B0 05 EE 42 EC 24 FC 0A C4 EE  // .........B.$....
    7400: 4A C3 9C FA EE 42 EB 00 EC 4A 9D C3 1E 2E 8E 1E  // J....B...J......
    7410: F3 03 8B 16 63 04 80 C2 06 1F C3 1E 2E 8E 1E F3  // ....c...........
    7420: 03 8B 16 63 04 1F C3 50 BA CC 03 EC B2 D4 A8 01  // ...c...P........
    7430: 75 02 B2 B4 58 C3 E8 EE FF 80 C2 06 C3 1E 2E 8E  // u...X...........
    7440: 1E F3 03 80 3E 49 04 03 74 13 80 3E 49 04 02 74  // ....>I..t..>I..t
    7450: 0C 80 3E 49 04 01 74 05 80 3E 49 04 00 1F C3 50  // ..>I..t..>I....P
    7460: 2E 8E 06 F7 03 A0 10 04 24 30 3C 30 74 05 2E 8E  // ........$0<0t...
    7470: 06 F9 03 58 0B C0 74 03 E8 E1 01 03 06 4E 04 81  // ...X..t......N..
    7480: C2 01 01 2B D1 32 ED 8B 2E 4A 04 8B F8 8B F0 8B  // ...+.2...J......
    7490: C5 F6 E3 D1 E0 D1 E5 0A DB 75 02 8A DE 38 F3 7E  // .........u...8.~
    74A0: 02 8A DE C3 FC 8A D8 8B C1 E8 B3 FF 03 F0 3A 16  // ..............:.
    74B0: 4A 04 74 06 06 1F E8 1B 00 C3 06 1F E8 40 00 C3  // J.t..........@..
    74C0: FC 8A D8 8A C1 8A E6 E8 95 FF F7 DD 2B F0 06 1F  // ............+...
    74D0: E8 01 00 C3 53 8A CE 2A CB 32 ED 32 F6 2B EA 2B  // ....S..*.2.2.+.+
    74E0: EA E3 0E 8A E1 8B CA F3 A5 03 F5 03 FD FE CC 75  // ...............u
    74F0: F4 58 B0 20 8A CA F3 AB 03 FD FE CB 75 F6 C3 53  // .X. ........u..S
    7500: 8A C6 2A C3 74 06 F6 E2 8B C8 F3 A5 58 8B C8 F6  // ..*.t.......X...
    7510: E2 91 B0 20 F3 AB C3 8B D8 E8 2E 00 2E 8E 1E F9  // ... ............
    7520: 03 8A C3 22 DF D3 E3 A8 80 74 03 30 1C C3 F6 D7  // ...".....t.0....
    7530: 8A 34 22 F7 0A DE 88 1C C3 8A FC E8 0C 00 2E 8E  // .4".............
    7540: 1E F9 03 8A 04 D2 E8 22 C7 C3 B0 28 F6 E2 F6 C2  // ......."...(....
    7550: 01 74 03 05 D8 1F 8B F1 C1 EE 02 80 FF 05 7F 0C  // .t..............
    7560: 03 F0 F6 D1 80 E1 03 D0 E1 B7 03 C3 D1 EE 03 F0  // ................
    7570: F6 D1 80 E1 07 B7 01 C3 FC 8A D8 2E 8E 06 F9 03  // ................
    7580: 8B C1 E8 86 00 75 02 8A DE 03 F0 E8 24 00 C3 FC  // .....u......$...
    7590: 8A D8 2E 8E 06 F9 03 8A C1 8A E6 E8 6D 00 75 02  // ............m.u.
    75A0: 8A DE F7 DD 81 C6 F0 00 81 C7 F0 00 2B F0 E8 01  // ............+...
    75B0: 00 C3 8A CE 2A CB E3 2C 51 8A CA 56 57 D1 E9 F3  // ....*..,Q..VW...
    75C0: A5 13 C9 F3 A4 8A CA 2B F1 2B F9 81 C6 00 20 81  // .......+.+.... .
    75D0: C7 00 20 D1 E9 F3 A5 13 C9 F3 A4 5F 5E 03 F5 03  // .. ........_^...
    75E0: FD 59 E2 D4 8A C7 8A E7 8A CA 57 D1 E9 F3 AB 13  // .Y........W.....
    75F0: C9 F3 AA 8A CA 2B F9 81 C7 00 20 D1 E9 F3 AB 13  // .....+.... .....
    7600: C9 F3 AA 5F 03 FD FE CB 75 DE C3 E8 B0 00 81 C2  // ..._....u.......
    7610: 01 01 2B D1 38 F3 76 02 32 DB 51 B1 02 D2 E6 D2  // ..+.8.v.2.Q.....
    7620: E3 59 32 ED BD 50 00 80 3E 49 04 06 74 04 D0 E2  // .Y2..P..>I..t...
    7630: D1 E0 06 1F 8B F8 8B F0 B0 50 F6 E3 0A DB C3 52  // .........P.....R
    7640: 53 8A DF 32 FF D1 E3 8B 87 50 04 E8 0E 00 50 D1  // S..2.....P....P.
    7650: EB A1 4C 04 F7 E3 5B 03 C3 5B 5A C3 52 8B D0 A0  // ..L...[..[Z.R...
    7660: 4A 04 F6 E4 32 F6 03 C2 D1 E0 5A C3 8B E8 83 E5  // J...2.....Z.....
    7670: 0F 2E 8A A6 1C 76 8B E8 C1 ED 04 83 E5 0F 2E 8A  // .....v..........
    7680: 86 1C 76 C3 00 03 0C 0F 30 33 3C 3F C0 C3 CC CF  // ..v.....03<?....
    7690: F0 F3 FC FF 26 8B 04 86 E0 BA 00 80 F6 C4 C0 74  // ....&..........t
    76A0: 02 0A D6 D0 EE C1 E0 02 75 F2 88 56 00 45 C3 8B  // ........u..V.E..
    76B0: 16 63 04 8A C5 86 E0 EF 8A E1 FE C0 EF C3 52 8B  // .c............R.
    76C0: D0 8A C4 F6 26 4A 04 C1 E0 02 32 F6 03 C2 5A C3  // ....&J....2...Z.
    76D0: 53 8A DF 32 FF D1 E3 8B 87 50 04 D1 EB E8 02 00  // S..2.....P......
    76E0: 5B C3 52 8B D0 32 F6 52 8A C4 F6 26 85 04 F7 26  // [.R..2.R...&...&
    76F0: 4A 04 5A 03 C2 0A DB 74 08 03 06 4C 04 FE CB 75  // J.Z....t...L...u
    7700: F8 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1  // .Z.R...J...2....
    7710: E0 03 06 4E 04 D1 F8 8B C8 B4 0E E8 91 FF 5A C3  // ...N..........Z.
    7720: 8B C2 F7 26 4A 04 8B F9 C1 EF 03 03 F8 0A FF 74  // ...&J..........t
    7730: 0A 8A C7 32 E4 F7 26 4C 04 03 F8 80 E1 07 B4 80  // ...2..&L........
    7740: D2 EC C3 E8 F0 FC EC C3 E8 F8 FF B2 C0 B0 20 EE  // .............. .
    7750: C3 E8 EF FF B2 C0 32 C0 EE C3 C4 3E A8 04 26 C4  // ......2....>..&.
    7760: 7D 04 8C C5 0B EF C3 53 B0 0E E8 95 FC 8A E0 B0  // }......S........
    7770: 0F E8 8E FC 8B D8 B8 0E AA EF B8 0F 55 EF B0 0E  // ............U...
    7780: E8 7F FC 3C AA 74 0D B0 0F E8 76 FC 3C 55 74 04  // ...<.t....v.<Ut.
    7790: 32 C0 5B C3 B0 0E 8A E7 EF FE C0 8A E3 EF B0 01  // 2.[.............
    77A0: 0A C0 5B C3 8A EE 8A 36 85 04 06 1F 0A DB 74 25  // ..[....6......t%
    77B0: 8A C5 2A C3 F6 E6 8B C8 52 32 F6 C1 E2 02 8B C2  // ..*.....R2......
    77C0: D1 E2 2B D5 51 8B C8 F3 A5 2B FA 2B F2 59 E2 F4  // ..+.Q....+.+.Y..
    77D0: 5A E8 05 00 C3 8A DD EB F8 8A C6 F6 E3 8B C8 8A  // Z...............
    77E0: C7 8A E0 32 F6 C1 E2 02 8B DA D1 E2 8B F1 2B D5  // ...2..........+.
    77F0: 8B CB F3 AB 2B FA 4E 75 F7 C3 2E 8E 1E F3 03 89  // ....+.Nu........
    7800: 0E 60 04 8A C5 24 60 A8 20 74 06 B9 00 1E E9 94  // .`...$`. t......
    7810: 00 F6 06 87 04 01 0F 85 8B 00 80 3E 49 04 07 74  // ...........>I..t
    7820: 06 E8 19 FC 74 01 C3 F6 06 87 04 08 74 03 CD 42  // ....t.......t..B
    7830: C3 8A 36 85 04 8A D6 FE CA 38 CD 7E 1F 0A C9 74  // ..6......8.~...t
    7840: 64 8A E9 8A CE FE C9 EB 5C 38 D1 74 58 8A CE 80  // d.......\8.tX...
    7850: FD 03 7C 04 8A E9 D0 ED FE C9 EB 49 80 F9 03 7E  // ..|........I...~
    7860: 44 8A E1 2A E5 0A E4 75 0A 38 CA 74 38 FE CA 38  // D..*...u.8.t8..8
    7870: CA 74 32 8A C5 0A C1 38 F0 7E 0A 80 FC 02 7E 12  // .t2....8.~....~.
    7880: 80 FD 02 7F C8 80 FC 03 7D BF 8A D6 FE CA 38 D1  // ........}.....8.
    7890: 74 13 8A CE FE C9 FE C9 8A E9 2A EC 80 FE 08 7F  // t.........*.....
    78A0: 04 FE C1 FE C5 B4 0A E8 05 FE C3 2E 8E 1E F3 03  // ................
    78B0: A2 62 04 32 E4 8B F0 F7 26 4C 04 A3 4E 04 8B C8  // .b.2....&L..N...
    78C0: E8 7A FB 74 07 80 3E 49 04 07 77 02 D1 F9 B4 0C  // .z.t..>I..w.....
    78D0: E8 DC FD D1 E6 8B 84 50 04 E8 27 FE C3 2E 8E 1E  // .......P..'.....
    78E0: F3 03 8A 26 49 04 E8 4B A0 74 07 C7 06 50 04 00  // ...&I..K.t...P..
    78F0: 00 C3 E8 48 FB 74 0B 80 FC 07 74 06 77 08 E8 77  // ...H.t....t.w..w
    7900: FC C3 E8 9F FB C3 80 FC 13 7C 03 74 1F C3 E8 4E  // .........|.t...N
    7910: FA 8A D8 8B C1 E8 85 FA 8B 2E 4A 04 52 F6 26 85  // ..........J.R.&.
    7920: 04 F7 E5 8B F7 03 F0 5A E8 90 FA C3 E8 30 FA 8A  // .......Z.....0..
    7930: D8 8B C1 E8 67 FA C1 E7 03 52 8B 2E 4A 04 C1 E5  // ....g....R..J...
    7940: 03 F7 26 85 04 F7 E5 8B F7 03 F0 5A E8 55 FE C3  // ..&........Z.U..
    7950: 2E 8E 1E F3 03 8A 26 49 04 E8 E1 FA 74 0C 80 FC  // ......&I....t...
    7960: 07 74 07 77 40 80 FC 03 7F 04 E8 53 FB C3 E8 1E  // .t.w@......S....
    7970: FC C3 E8 EA F9 8A D8 8A C1 8A E6 FE C4 E8 1D FA  // ................
    7980: 2B 3E 4A 04 C1 E7 03 52 F7 26 85 04 F7 26 4A 04  // +>J....R.&...&J.
    7990: C1 E0 03 8B F7 2B F0 5A 8B 2E 4A 04 C1 E5 03 F7  // .....+.Z..J.....
    79A0: DD E8 00 FE C3 80 FC 13 7C 03 74 C6 C3 E8 AF F9  // ........|.t.....
    79B0: 8A D8 8A C1 8A E6 FE C4 E8 E2 F9 52 8B 2E 4A 04  // ...........R..J.
    79C0: F7 26 85 04 F7 E5 2B FD 8B F7 2B F0 5A F7 DD E8  // .&....+...+.Z...
    79D0: E9 F9 C3 2E 8E 1E F3 03 2E 8E 06 F9 03 E8 5D FA  // ..............].
    79E0: 74 11 80 3E 49 04 07 7C 18 2E 8E 06 F7 03 74 03  // t..>I..|......t.
    79F0: E9 B1 00 E8 49 FC 8B D8 26 8B 07 8B EC 89 46 1A  // ....I...&.....F.
    7A00: C3 A1 50 04 E8 B7 FC 8B F0 BB 08 00 2B E3 8B EC  // ..P.........+...
    7A10: 80 3E 49 04 06 75 1F B9 04 00 26 8A 04 88 46 00  // .>I..u....&...F.
    7A20: 45 26 8A 84 00 20 88 46 00 45 83 C6 50 E2 EB B8  // E&... .F.E..P...
    7A30: 00 02 B2 80 EB 17 D1 E6 B9 04 00 E8 56 FC 81 C6  // ............V...
    7A40: 00 20 E8 4F FC 81 EE B0 1F E2 F0 EB E2 2B EB C4  // . .O.........+..
    7A50: 3E 0C 01 32 F6 80 FB 0E 75 09 26 83 7D FE 10 75  // >..2....u.&.}..u
    7A60: 02 B6 80 16 1F 8B F5 8B CB F6 C6 80 74 01 47 56  // ............t.GV
    7A70: 57 F3 A6 5F 5E 74 23 FE C0 03 FB F6 C6 80 74 01  // W.._^t#.......t.
    7A80: 47 FE CA 75 E2 FE CC 74 0F 2E 8E 1E F3 03 C4 3E  // G..u...t.......>
    7A90: 7C 00 B0 80 B2 80 EB CB 32 C0 8B E5 03 E3 8B EC  // |.......2.......
    7AA0: 89 46 1A C3 80 3E 49 04 13 7C 05 75 02 EB 5A C3  // .F...>I..|.u..Z.
    7AB0: 2E 8E 06 F5 03 E8 18 FC 8B F0 8B 1E 85 04 2B E3  // ..............+.
    7AC0: 8B EC B8 05 08 B9 05 00 BA CE 03 80 3E 49 04 0F  // ............>I..
    7AD0: 72 1A F6 06 87 04 60 75 13 B4 0A F7 C6 01 00 75  // r.....`u.......u
    7AE0: 02 B4 05 B0 07 EF B8 05 18 B9 05 01 EF 51 8B CB  // .............Q..
    7AF0: 26 8A 04 F6 D0 88 46 00 45 03 36 4A 04 E2 F1 58  // &.....F.E.6J...X
    7B00: EF B8 00 01 32 D2 E9 44 FF 2E 8E 06 F5 03 A1 50  // ....2..D.......P
    7B10: 04 8B D0 32 F6 52 8A C4 32 E4 F7 26 4A 04 F7 26  // ...2.R..2..&J..&
    7B20: 85 04 5A 03 C2 8B F0 8B 1E 85 04 2B E3 8B EC 53  // ..Z........+...S
    7B30: 8B 3E 4A 04 4F C1 E7 03 C1 E6 03 B9 08 00 32 E4  // .>J.O.........2.
    7B40: 26 8A 04 D0 E4 0A C0 74 03 80 CC 01 46 E2 F1 88  // &......t....F...
    7B50: 66 00 45 03 F7 4B 75 E3 5B B8 00 01 32 D2 E9 EC  // f.E..Ku.[...2...
    7B60: FE 33 ED EB 03 BD 01 00 2E 8E 1E F3 03 2E 8E 06  // .3..............
    7B70: F9 03 8A 26 49 04 E8 C4 F8 74 0F 2E 8E 06 F7 03  // ...&I....t......
    7B80: 80 FC 07 74 05 7C 3D E9 0B 02 8A E3 8B F0 8A DF  // ...t.|=.........
    7B90: 32 FF D1 E3 8B 87 50 04 8B D0 A0 4A 04 F6 E4 32  // 2.....P....J...2
    7BA0: F6 03 C2 8B F8 D1 E7 0A DB 74 0B D0 EB A1 4C 04  // .........t....L.
    7BB0: 03 F8 FE CB 75 FA 8B C6 0B ED 75 03 F3 AB C3 AA  // ....u.....u.....
    7BC0: 47 E2 FC C3 50 2E 8E 06 F9 03 A1 50 04 E8 EE FA  // G...P......P....
    7BD0: 8B F8 A0 50 04 8A 26 4A 04 8B E8 58 A8 80 74 08  // ...P..&J...X..t.
    7BE0: 24 7F C5 36 7C 00 EB 04 C5 36 0C 01 8A FC 32 E4  // $..6|....6....2.
    7BF0: C1 E0 03 03 F0 80 FF 06 74 69 D1 E7 8A F3 B0 55  // ........ti.....U
    7C00: 80 E3 03 F6 E3 8A D8 8A F8 8B C5 50 B2 04 F6 C6  // ...........P....
    7C10: 80 75 27 AC E8 55 FA 23 C3 AB AC E8 4E FA 23 C3  // .u'..U.#....N.#.
    7C20: 26 89 85 FE 1F 83 C7 4E FE CA 75 E7 83 EE 08 81  // &......N..u.....
    7C30: EF 3E 01 58 E8 72 00 E2 D2 C3 AC E8 2E FA 23 C3  // .>.X.r........#.
    7C40: 26 31 05 AC E8 25 FA 23 C3 26 31 85 00 20 83 C7  // &1...%.#.&1.. ..
    7C50: 50 FE CA 75 E5 83 EE 08 81 EF 3E 01 58 E8 49 00  // P..u......>.X.I.
    7C60: E2 A9 C3 8B C5 50 B2 04 F6 C3 80 74 1F AC 26 30  // .....P.....t..&0
    7C70: 05 AC 26 30 85 00 20 83 C7 50 FE CA 7F EF 83 EE  // ..&0.. ..P......
    7C80: 08 81 EF 3F 01 58 E8 20 00 E2 DA C3 AC AA AC 26  // ...?.X. .......&
    7C90: 88 85 FF 1F 83 C7 4F FE CA 7F F1 83 EE 08 81 EF  // ......O.........
    7CA0: 3F 01 58 E8 03 00 E2 BD C3 FE C0 38 E0 72 06 32  // ?.X........8.r.2
    7CB0: C0 81 C7 F0 00 C3 8A 16 85 04 F6 E2 8B F0 32 F6  // ..............2.
    7CC0: 8B EA 66 0F B6 06 51 04 F6 E2 66 0F B7 16 4A 04  // ..f...Q...f...J.
    7CD0: 83 FA 64 75 03 BA 68 00 83 FA 5A 75 03 BA 60 00  // ..du..h...Zu..`.
    7CE0: 81 FA AF 00 75 03 BA B0 00 52 F7 E2 66 0F B7 F8  // ....u....R..f...
    7CF0: 66 0F B6 06 50 04 66 03 F8 66 C1 CF 10 03 FA 66  // f...P.f..f.....f
    7D00: C1 C7 03 81 CF 00 FF 66 C1 C7 10 5A 8A E2 4A C1  // .......f...Z..J.
    7D10: E2 03 A0 50 04 50 C5 06 0C 01 03 F0 2E 8E 06 F5  // ...P.P..........
    7D20: 03 58 57 51 50 9C FC 8B CD E8 3B 00 B5 08 AC 8A  // .XWQP.....;.....
    7D30: E0 8A C7 D0 E4 73 02 8A C3 26 88 05 66 47 FE CD  // .....s...&..fG..
    7D40: 75 EF 66 03 FA E2 E2 9D 58 59 5F 83 C7 08 FE C0  // u.f.....XY_.....
    7D50: 38 E0 72 0E 51 32 C0 8B CD 49 03 FA 83 C7 08 E2  // 8.r.Q2...I......
    7D60: F9 59 2B F5 E2 BC C3 06 52 33 C0 8E C0 66 C1 C7  // .Y+.....R3...f..
    7D70: 10 8B C7 66 C1 C7 10 E8 BA 9B 74 16 38 E0 74 12  // ...f......t.8.t.
    7D80: 0F B6 D0 E8 8B C9 8A E0 66 C1 C7 10 8B F8 66 C1  // ........f.....f.
    7D90: C7 10 5A 07 C3 80 FC 13 7C 0B 0F 84 18 FF 80 FC  // ..Z.....|.......
    7DA0: 62 0F 84 11 FF E8 01 00 C3 80 FC 11 75 06 80 E3  // b...........u...
    7DB0: 80 80 CB 0F 50 53 8A DF 32 FF D1 E3 8B 97 50 04  // ....PS..2.....P.
    7DC0: 5B 2E 8E 06 F5 03 E8 07 F9 8B F8 8B 2E 85 04 58  // [..............X
    7DD0: 32 F6 52 8B 36 4A 04 56 8A 26 85 04 C5 36 0C 01  // 2.R.6J.V.&...6..
    7DE0: 80 FC 0E 75 09 83 7C FE 10 75 03 B4 10 46 F6 E4  // ...u..|..u...F..
    7DF0: 03 F0 B6 03 F6 C3 80 75 6D B2 C4 B8 02 0F EF 5A  // .......um......Z
    7E00: 58 50 52 4A 8A E0 57 51 51 57 8B CD 32 C0 AA 03  // XPRJ..WQQW..2...
    7E10: FA E2 FB 5F 47 FE C4 38 D4 76 0A 32 E4 8B CD 49  // ..._G..8.v.2...I
    7E20: 03 FA 47 E2 FB 59 E2 E0 59 5F BA C4 03 B0 02 8A  // ..G..Y..Y_......
    7E30: E3 EF 5B 4B 5A 51 57 8B CD AC 26 8A 25 AA 03 FB  // ..[KZQW...&.%...
    7E40: E2 F7 5F 47 2B F5 42 3B D3 76 0A 33 D2 8B CD 49  // .._G+.B;.v.3...I
    7E50: 03 FB 47 E2 FB 59 E2 DD BA CE 03 B8 03 00 EF B2  // ..G..Y..........
    7E60: C4 B8 02 0F EF C3 B2 CE B8 03 18 EF EB BC 2E 8E  // ................
    7E70: 1E F3 03 80 3E 63 04 B4 74 0B BA CC 03 EC A8 01  // ....>c..t.......
    7E80: 75 04 CD 42 C3 C3 E8 D1 F8 0A FF 75 1C 8A E3 80  // u..B.......u....
    7E90: E4 1F 80 26 66 04 E0 08 26 66 04 E8 2D 00 8A 1E  // ...&f...&f..-...
    7EA0: 66 04 80 E3 20 B1 05 D2 EB E8 91 F5 74 19 A0 66  // f... .......t..f
    7EB0: 04 24 DF 80 E3 01 74 02 0C 20 A2 66 04 24 10 0C  // .$....t.. .f.$..
    7EC0: 02 0A D8 E8 53 00 C3 E8 7E F8 C3 53 50 80 E3 0F  // ....S...~..SP...
    7ED0: 8A FB D0 E3 81 E3 10 07 0A DF E8 60 F5 74 0E B4  // ...........`.t..
    7EE0: 00 8A C3 E8 2C F3 0B ED 74 03 26 88 1D 8A C3 E8  // ....,...t.&.....
    7EF0: 0B 00 0B ED 74 04 26 88 5D 10 58 5B C3 8A E0 1E  // ....t.&.].X[....
    7F00: 2E 8E 1E F3 03 80 3E 49 04 33 1F 7F 08 8A C4 B4  // ......>I.3......
    7F10: 11 E8 FE F2 C3 E8 30 F8 C3 9C FA E8 9F 05 B2 C0  // ......0.........
    7F20: B9 03 00 B4 01 8A C4 EE 8A C3 EE 0B ED 74 04 47  // .............t.G
    7F30: 26 88 1D FE C4 80 C3 02 E2 EB B0 20 EE 9D C3 2E  // &.......... ....
    7F40: 8E 1E F3 03 8A 26 49 04 E8 F2 F4 74 0A 80 FC 07  // .....&I....t....
    7F50: 77 06 74 03 E8 C0 F5 C3 80 FC 13 7C 03 74 4C C3  // w.t........|.tL.
    7F60: 8A D8 E8 BB F7 BA CE 03 B0 08 EF 2E 8E 1E F5 03  // ................
    7F70: F6 C3 80 75 1C B2 C4 B8 02 FF EF 8A 25 C6 05 00  // ...u........%...
    7F80: 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8 08 FF EF  // ....%...%.......
    7F90: C3 B8 03 18 EF B2 C4 B0 02 8A E3 EF 8A 25 B4 FF  // .............%..
    7FA0: 88 25 EF B2 CE B8 03 00 EF EB E1 50 2E 8E 06 F5  // .%.........P....
    7FB0: 03 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B F8 58 26 88  // ..J..........X&.
    7FC0: 05 C3 2E 8E 1E F3 03 8A 26 49 04 E8 6F F4 74 0F  // ........&I..o.t.
    7FD0: 80 FC 07 77 0B 74 08 E8 5F F5 8B EC 89 46 1A C3  // ...w.t.._....F..
    7FE0: 80 FC 13 7C 03 74 29 C3 E8 35 F7 8A CC 2E 8E 1E  // ...|.t)..5......
    7FF0: F5 03 BA CE 03 32 FF B8 04 03 EF D0 E7 8A 1D 22  // .....2........."
    8000: D9 74 03 80 CF 01 FE CC 7D F0 8B EC 88 7E 1A C3  // .t......}....~..
    8010: A1 4A 04 C1 E0 03 F7 E2 03 C1 8B F8 2E 8E 1E F5  // .J..............
    8020: 03 8A 05 8B EC 88 46 1A C3 2E 8E 1E F3 03 8A 3E  // ......F........>
    8030: 62 04 8A CF D0 E1 32 ED BE 50 04 03 F1 8B 14 8A  // b.....2..P......
    8040: 0E 49 04 3C 0D 76 4A 2E 8E 06 F9 03 E8 EE F3 75  // .I.<.vJ........u
    8050: 33 8A 1E 4A 04 8A F8 8A C6 F6 E3 8A CA 03 C8 D1  // 3..J............
    8060: E1 03 0E 4E 04 8B F9 8A C7 AA D1 E9 41 FE C2 38  // ...N........A..8
    8070: DA 73 59 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1  // .sY....c........
    8080: FE C0 EF C3 2E 8E 06 F7 03 80 F9 07 74 C3 E9 83  // ............t...
    8090: 00 75 04 32 D2 EB 0F 3C 0A 75 1D 3A 36 84 04 75  // .u.2...<.u.:6..u
    80A0: 03 E9 93 00 FE C6 89 14 E8 92 F3 75 05 80 F9 07  // ...........u....
    80B0: 7F 05 8B C2 E8 4C F6 C3 3C 07 75 04 E8 A3 85 C3  // .....L..<.u.....
    80C0: 3C 08 75 83 0A D2 74 DE FE CA EB DA 32 FF 32 D2  // <.u...t.....2.2.
    80D0: 2B CB 3A 36 84 04 74 06 FE C6 03 CB EB 95 89 14  // +.:6..t.........
    80E0: 8B 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF 2B FB  // ..c...........+.
    80F0: 2B FB 26 8A 65 02 50 8B 3E 4E 04 8B F3 D1 E6 03  // +.&.e.P.>N......
    8100: F7 A0 84 04 F6 E3 8B C8 06 1F F3 A5 8B CB 58 B0  // ..............X.
    8110: 20 F3 AB C3 B9 01 00 B4 0A E8 BC C6 FE C2 3A 16  //  .............:.
    8120: 4A 04 74 03 89 14 C3 32 FF 32 D2 89 14 3A 36 84  // J.t....2.2...:6.
    8130: 04 74 2E FE C6 EB ED 89 14 2E 8E 06 F9 03 E8 FC  // .t..............
    8140: F2 74 0E 2E 8E 06 F7 03 80 F9 07 74 04 32 FF EB  // .t.........t.2..
    8150: 10 8B C2 E8 AD F5 8B F9 D1 E7 4F 8B 1E 4A 04 EB  // ..........O..J..
    8160: 91 33 C9 8A 36 84 04 8A 16 4A 04 FE CA B0 01 E9  // .3..6....J......
    8170: 70 F7 2E 8E 1E F3 03 F6 06 87 04 08 74 03 CD 42  // p...........t..B
    8180: C3 E8 76 F6 8B EC C6 46 1B 00 C3 2E 8E 1E F3 03  // ..v....F........
    8190: 8A DF 32 FF D1 E3 89 97 50 04 D0 EB 38 1E 62 04  // ..2.....P...8.b.
    81A0: 75 05 8B C2 E8 5C F5 C3 2E 8E 1E F3 03 8A DF 32  // u....\.........2
    81B0: FF D1 E3 8B 97 50 04 8B 0E 60 04 8B EC 89 4E 16  // .....P...`....N.
    81C0: 89 56 12 C3 2E 8E 1E F3 03 A0 87 04 24 80 0A 06  // .V..........$...
    81D0: 49 04 8A 26 4A 04 F6 06 87 04 08 75 2D E8 5D F2  // I..&J......u-.].
    81E0: 74 07 80 3E 49 04 07 7F 21 51 8A CC 8A 2E 84 04  // t..>I...!Q......
    81F0: BE B5 81 81 FE BE 81 74 10 2E 3B 0C 74 05 83 C6  // .......t..;.t...
    8200: 03 EB F0 24 80 2E 0A 44 02 59 8A 3E 62 04 8B EC  // ...$...D.Y.>b...
    8210: 89 46 1A 89 5E 0E 89 4E 16 89 56 12 C3 84 18 23  // .F..^..N..V....#
    8220: 84 2B 33 84 2A 32 2E 8E 1E F3 03 3C 04 7F 1B 50  // .+3.*2.....<...P
    8230: 52 BA CC 03 EC A8 01 5A 58 74 08 80 3E 63 04 D4  // R......ZXt..>c..
    8240: 74 08 C3 80 3E 63 04 B4 75 F8 3C 1C 73 F4 32 E4  // t...>c..u.<.s.2.
    8250: 8B E8 D1 E5 2E FF A6 F1 81 29 82 49 82 5B 82 90  // .........).I.[..
    8260: 82 DA 81 DA 81 DA 81 B5 82 CD 82 D1 82 DA 81 DA  // ................
    8270: 81 DA 81 DA 81 DA 81 DA 81 FF 82 DA 81 03 83 1E  // ................
    8280: 83 DA 81 5D 83 DA 81 6B 83 86 83 8D 83 99 83 BD  // ...]...k........
    8290: 83 80 3E 49 04 13 74 15 E8 BF F4 8B C3 86 E0 E8  // ..>I..t.........
    82A0: 70 EF 0B ED 74 07 8A C7 32 FF 26 88 01 E8 93 F4  // p...t...2.&.....
    82B0: C3 E8 A6 F4 8A C7 E8 44 FC 0B ED 74 F0 26 88 7D  // .......D...t.&.}
    82C0: 11 EB EA 80 3E 49 04 13 74 E3 06 E8 8C F4 1F 0B  // ....>I..t.......
    82D0: ED 74 07 8B F2 B9 11 00 F3 A4 8B F2 E8 DE 01 32  // .t.............2
    82E0: E4 B9 10 00 B2 C0 9C FA 8A C4 EE AC EE 9D FE C4  // ................
    82F0: E2 F4 AC E8 07 FC EB B5 80 FB 01 77 B0 E8 43 F4  // ...........w..C.
    8300: B2 C0 B0 30 E8 FB F0 24 F7 80 26 65 04 DF 80 FB  // ...0...$..&e....
    8310: 00 74 07 0C 08 80 0E 65 04 20 EE EB 90 E8 9D 01  // .t.....e. ......
    8320: 8A C3 B2 C0 E8 DB F0 8B C8 EE B0 20 EE 8B EC 88  // ........... ....
    8330: 4E 0F E9 78 FF B3 11 EB E4 8B FA E8 05 F4 B9 10  // N..x............
    8340: 00 32 E4 B2 C0 8A C4 9C FA EE 42 EC 26 88 05 FE  // .2........B.&...
    8350: C4 4A EE 9D 47 E2 EE 9C FA B0 11 EE 42 EC 9D 26  // .J..G.......B..&
    8360: 88 05 E8 E3 F3 EB 5A E8 CE 00 C3 8B FA 51 8B C3  // ......Z......Q..
    8370: 26 8A 35 26 8A 6D 01 26 8A 4D 02 E8 CA 00 83 C7  // &.5&.m.&.M......
    8380: 03 43 59 E2 E8 C3 0A DB 75 1A E8 B6 F3 B2 C0 B0  // .CY.....u.......
    8390: 30 E8 6E F0 24 7F F6 C7 01 74 02 0C 80 B4 30 E8  // 0.n.$....t....0.
    83A0: 70 EE EB 1D FE CB 75 1C E8 98 F3 B2 C0 B0 30 E8  // p.....u.......0.
    83B0: 50 F0 EE A8 80 75 03 C0 E7 02 B4 34 8A C7 E8 51  // P....u.....4...Q
    83C0: EE E8 7F F3 C3 8A C3 E8 D1 00 8B EC 89 4E 16 88  // .............N..
    83D0: 76 13 C3 8B FA 51 8B C3 E8 C3 00 26 88 35 26 88  // v....Q.....&.5&.
    83E0: 6D 01 26 88 4D 02 83 C7 03 43 59 E2 E8 C3 BA C6  // m.&.M....CY.....
    83F0: 03 8A C3 EE C3 BA C6 03 EC 32 E4 8B EC 89 46 0E  // .........2....F.
    8400: C3 E8 3F F3 B2 C0 B0 34 E8 F7 EF 8A F8 EE B0 30  // ..?....4.......0
    8410: E8 EF EF B3 01 A8 80 75 05 B3 00 C0 EF 02 8B EC  // .......u........
    8420: 89 5E 0E EB 9C 51 8B C3 E8 73 00 E8 2A 00 8A C3  // .^...Q...s..*...
    8430: E8 52 00 43 59 E2 EE C3 F6 06 89 04 02 74 03 E8  // .R.CY........t..
    8440: 16 00 8A C3 E8 39 00 C3 F6 06 89 04 02 74 03 E8  // .....9.......t..
    8450: 06 00 8A C3 E8 2E 00 C3 50 B0 1E F6 E6 50 B0 3B  // ........P....P.;
    8460: F6 E5 50 B0 0B F6 E1 59 03 C1 59 03 C1 B1 64 F6  // ..P....Y..Y...d.
    8470: F1 80 FC 32 7C 02 FE C0 8A F0 8A E8 8A C8 58 C3  // ...2|.........X.
    8480: 52 E8 39 00 5A 53 8B DA BA C8 03 9C FA EE 42 8A  // R.9.ZS........B.
    8490: C7 EE 8A C5 EE 8A C1 EE 9D 5B C3 E8 1F 00 53 9C  // .........[....S.
    84A0: FA BA C7 03 EE 42 42 EC 8A F8 EB 00 EB 00 EC 8A  // .....BB.........
    84B0: E8 EB 00 EB 00 EC 8A C8 8A F7 9D 5B C3 50 51 E8  // ...........[.PQ.
    84C0: 81 F2 B9 FF 7F EC A8 08 75 02 E2 F9 59 58 C3 2E  // ........u...YX..
    84D0: 8E 1E F3 03 8B F8 24 0F 81 E7 F0 00 C1 EF 03 83  // ......$.........
    84E0: FF 06 7F 18 2E FF A5 81 84 89 84 9E 84 3C 85 98  // .............<..
    84F0: 85 3C 03 74 08 3C 04 7F 03 E8 CF 01 C3 BA C4 03  // .<.t.<..........
    8500: B0 03 8A E3 EF C3 3C 04 77 F2 50 53 50 52 8B 16  // ......<.w.PSPR..
    8510: 63 04 B0 07 E8 EB EE 8A E0 D0 EC 80 E4 01 A8 40  // c..............@
    8520: 74 03 80 CC 02 B0 12 E8 D8 EE 40 A3 85 04 B0 09  // t.........@.....
    8530: E8 CF EE A8 80 74 04 D1 2E 85 04 A1 85 04 8B D0  // .....t..........
    8540: 3D F4 01 73 1B BA E0 01 3D C2 01 73 13 BA 90 01  // =..s....=..s....
    8550: 3D 7C 01 73 0B BA 5E 01 3D 4A 01 73 03 BA C8 00  // =|.s..^.=J.s....
    8560: 89 16 85 04 5A 58 C6 06 84 04 FF E8 5D 01 5B 58  // ....ZX......].[X
    8570: 8A DF 32 FF 0A C0 74 0E B3 0E 3C 01 74 08 B3 08  // ..2...t...<.t...
    8580: 3C 02 74 02 B3 10 8A CB 8A E9 81 E9 01 02 80 F9  // <.t.............
    8590: 08 7E 04 81 E9 01 01 87 1E 85 04 53 E8 5B F2 5B  // .~.........S.[.[
    85A0: E8 85 02 C3 0A C0 74 11 FE C8 74 1A FE C8 74 38  // ......t...t...t8
    85B0: FE C8 74 3C FE C8 74 40 C3 89 2E 7C 00 8C 06 7E  // ..t<..t@...|...~
    85C0: 00 C3 8C C8 8E C0 FE CA 0A DB 74 07 32 FF 2E 8A  // ..........t.2...
    85D0: 97 7C 85 89 0E 85 04 88 16 84 04 89 2E 0C 01 8C  // .|..............
    85E0: 06 0E 01 C3 00 0D 18 2A E8 09 03 B9 0E 00 EB D6  // .......*........
    85F0: BD 8C 54 B9 08 00 EB CA BD 9F 5C B9 10 00 EB C2  // ..T.......\.....
    8600: 0A C0 75 BD 8B 0E 85 04 8A 16 84 04 80 FF 07 77  // ..u............w
    8610: 35 80 FF 01 77 10 0A FF 75 06 C4 2E 7C 00 EB 26  // 5...w...u...|..&
    8620: C4 2E 0C 01 EB 20 80 FF 02 75 0B 8C CD 8E C5 2E  // ..... ...u......
    8630: 8B 2E 7E 6D EB 10 0E 07 8A DF 32 FF 80 EB 02 D1  // ..~m......2.....
    8640: E3 2E 8B AF EF 85 8B C5 8B EC 89 4E 16 89 56 12  // ...........N..V.
    8650: 89 46 0A 8C 46 1E C3 9F 5C 8C 54 8C 58 8C 5C 9F  // .F..F...\.T.X.\.
    8660: 5C 9F 6C 53 06 8A 26 49 04 E8 C7 C3 26 8A 47 02  // \.lS..&I....&.G.
    8670: 26 8A 67 33 F6 C4 01 74 22 BD 9F 5C 3C 10 7D 0E  // &.g3...t"..\<.}.
    8680: E8 71 02 8C 06 0E 01 3C 0E 7D 07 BD 8C 54 8C 0E  // .q.....<.}...T..
    8690: 0E 01 89 2E 0C 01 E8 10 01 EB 2D B4 84 3C 10 7D  // ..........-..<.}
    86A0: 13 B4 81 3C 0E 74 0D 7F 15 B4 02 3C 08 74 05 80  // ...<.t.....<.t..
    86B0: CC 80 EB 0A 26 F6 47 05 01 74 03 80 E4 7F 86 C4  // ....&.G..t......
    86C0: 32 DB E8 06 00 E8 C9 01 07 5B C3 8B F8 8B F2 BA  // 2........[......
    86D0: CE 03 EC B8 05 00 EF B8 06 04 EF B2 C4 EC B8 02  // ................
    86E0: 04 EF B8 04 07 EF 8B D6 8B C7 50 24 7F 0A C0 74  // ..........P$...t
    86F0: 22 0E 07 33 D2 B9 00 01 3C 04 75 07 B7 10 BD 9F  // "..3....<.u.....
    8700: 5C EB 10 FE C8 75 07 B7 0E E8 E8 01 EB 05 B7 08  // \....u..........
    8710: BD 8C 54 E8 2D 00 58 A8 80 74 00 BA C4 03 B8 02  // ..T.-.X..t......
    8720: 03 EF B8 04 02 EF B2 CC EC A8 01 B8 06 0E 75 02  // ..............u.
    8730: B4 0A B2 CE 50 EC 58 EF B0 04 EE 32 C0 EE B8 05  // ....P.X....2....
    8740: 10 EF C3 FC 0B C9 75 01 C3 80 FF 0E 75 0A 26 83  // ......u.....u.&.
    8750: 7E FE 10 75 03 80 CD 80 1E 06 1F 2E 8E 06 F5 03  // ~..u............
    8760: 8B FA C1 E7 05 B0 40 53 80 E3 03 F6 E3 5B F6 C3  // ......@S.....[..
    8770: 04 74 02 04 20 86 E0 8B D0 03 FA 8B F5 E3 28 32  // .t.. .........(2
    8780: C0 86 FB 32 FF 51 F6 C5 80 74 01 46 8B CB F3 A4  // ...2.Q...t.F....
    8790: 83 FB 20 74 07 B9 20 00 2B CB F3 AA 59 F6 C5 80  // .. t.. .+...Y...
    87A0: 74 01 46 FE C9 75 DE 1F C3 8A 26 49 04 50 06 57  // t.F..u....&I.P.W
    87B0: C4 3E A8 04 26 C4 7D 0C 8C C5 0B EF 74 30 8B EF  // .>..&.}.....t0..
    87C0: 83 C7 07 26 8A 05 3C FF 74 24 38 E0 74 03 47 EB  // ...&..<.t$8.t.G.
    87D0: F2 8B FD 26 8A 05 FE C8 A2 84 04 26 8B 45 01 A3  // ...&.......&.E..
    87E0: 85 04 26 C4 7D 03 89 3E 0C 01 8C 06 0E 01 5F 07  // ..&.}..>......_.
    87F0: 58 C3 26 F6 47 33 01 74 01 C3 C4 1E A8 04 26 C4  // X.&.G3.t......&.
    8800: 5F 08 8C C0 0B C3 74 1F BF 0B 00 26 8A 01 3C FF  // _.....t....&..<.
    8810: 74 15 47 38 06 49 04 75 F2 26 8A 07 32 E4 87 06  // t.G8.I.u.&..2...
    8820: 85 04 8B D8 E8 01 00 C3 8B 16 63 04 8A 26 85 04  // ..........c..&..
    8830: FE CC 80 E4 1F 9C FA 80 FA D4 74 0B B0 14 EE 42  // ..........t....B
    8840: EC 24 E0 0A C4 EE 4A B0 09 EE 42 EC 24 E0 0A C4  // .$....J...B.$...
    8850: EE 9D 8A C8 8B C3 8A 16 85 04 F6 F2 80 3E 84 04  // .............>..
    8860: FF 75 07 A2 84 04 FE 0E 84 04 F6 E2 F6 C1 80 74  // .u.............t
    8870: 02 D1 E0 48 8A E0 B0 12 8B 16 63 04 EF A0 4A 04  // ...H......c...J.
    8880: 8A 26 84 04 FE C4 F6 E4 D1 E0 05 00 01 A3 4C 04  // .&............L.
    8890: C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D 08  // ..&I.P.W.>..&.}.
    88A0: 8C C5 0B EF 74 4A 8B EF 83 C7 0B 26 8A 05 3C FF  // ....tJ.....&..<.
    88B0: 74 3E 38 E0 74 03 47 EB F2 8B FD 26 8A 3D 26 8A  // t>8.t.G....&.=&.
    88C0: 5D 01 26 8B 4D 02 26 8B 55 04 26 8A 45 0A 3C FF  // ].&.M.&.U.&.E.<.
    88D0: 74 02 FE C8 50 A0 84 04 FE C0 F6 26 85 04 A3 85  // t...P......&....
    88E0: 04 58 A2 84 04 26 C4 7D 06 8B EF 32 C0 E8 DB FD  // .X...&.}...2....
    88F0: 5F 07 58 C3 50 53 51 52 2E A1 FD 03 0B C0 74 09  // _.X.PSQR......t.
    8900: 2E 8B 2E 7E 6D 0E 07 EB 08 B8 30 11 B7 02 E8 C7  // ...~m.....0.....
    8910: BE 5A 59 5B 58 C3 3C 04 7C 01 C3 E3 FD 53 2E 8E  // .ZY[X.<.|....S..
    8920: 1E F3 03 86 FB 32 FF D1 E3 8B FB 81 C7 50 04 8B  // .....2.......P..
    8930: 35 5B 89 15 56 8B F0 51 53 26 8A 46 00 45 3C 0D  // 5[..V..QS&.F.E<.
    8940: 7F 1F 75 04 32 D2 EB 40 3C 0A 74 32 3C 07 75 05  // ..u.2..@<.t2<.u.
    8950: E8 0F 7D EB 62 3C 08 75 08 0A D2 74 5A FE CA EB  // ..}.b<.u...tZ...
    8960: 27 F7 C6 02 00 74 05 26 8A 5E 00 45 B9 01 00 B4  // '....t.&.^.E....
    8970: 09 E8 64 BE FE C2 3A 16 4A 04 72 0C 32 D2 89 15  // ..d...:.J.r.2...
    8980: 3A 36 84 04 73 06 FE C6 89 15 EB 2B 50 E8 AD EA  // :6..s......+P...
    8990: 75 08 B8 00 08 E8 40 BE EB 09 80 3E 49 04 07 74  // u.....@....>I..t
    89A0: F1 32 E4 86 3E 62 04 53 8A FC 55 E8 25 00 5D 5B  // .2..>b.S..U.%.][
    89B0: 86 3E 62 04 58 8B 15 5B 59 E2 15 5A F7 C6 01 00  // .>b.X..[Y..Z....
    89C0: 75 02 89 15 8B 05 3A 3E 62 04 75 03 E8 34 ED C3  // u.....:>b.u..4..
    89D0: E9 64 FF 33 C9 8A 36 84 04 8A 16 4A 04 FE CA B8  // .d.3..6....J....
    89E0: 01 06 E8 F3 BD C3 2E 8E 1E F3 03 0A C0 75 0D E8  // .............u..
    89F0: 18 00 8B EC 89 5E 0E C6 46 1A 1A C3 3C 01 75 09  // .....^..F...<.u.
    8A00: E8 41 00 8B EC C6 46 1A 1A C3 A0 8A 04 BF 7C 8A  // .A....F.......|.
    8A10: 2E 3A 05 72 04 BB FF FF C3 32 E4 D1 E0 03 F8 2E  // .:.r.....2......
    8A20: 8B 5D 04 0A DB 74 05 0A FF 75 04 C3 86 FB C3 A0  // .]...t...u......
    8A30: 10 04 24 30 3C 30 74 06 F6 C3 01 75 EF C3 F6 C3  // ..$0<0t....u....
    8A40: 01 74 E9 C3 BF 7C 8A 2E 8A 0D 32 C0 83 C7 04 2E  // .t...|....2.....
    8A50: 3B 1D 74 12 86 FB 2E 3B 1D 74 0B 83 C7 02 FE C0  // ;.t....;.t......
    8A60: 38 C8 7E EB B0 FF A2 8A 04 C3 BB 08 00 F6 06 89  // 8.~.............
    8A70: 04 02 74 0E BB 07 00 BA CC 03 EC A8 01 74 18 BB  // ..t..........t..
    8A80: 08 00 BA B4 03 E8 DF EC 74 21 B7 01 E8 8C E9 80  // ........t!......
    8A90: FA D4 74 17 86 FB C3 BA D4 03 E8 CA EC 74 0C B7  // ..t..........t..
    8AA0: 02 E8 77 E9 80 FA B4 74 02 86 FB C3 0F 08 0F 08  // ..w....t........
    8AB0: 0F 08 0F 08 03 01 03 01 01 01 00 08 01 01 01 01  // ................
    8AC0: 01 01 01 01 0F 01 0F 08 0F 04 00 02 0F 02 01 01  // ................
    8AD0: 0F 01 FF 01 FF E0 0F 00 00 00 00 07 02 08 FF 0E  // ................
    8AE0: 00 00 3F 00 10 01 08 00 00 00 00 01 00 02 02 01  // ..?.............
    8AF0: 00 04 04 01 00 05 02 05 00 06 01 06 05 06 00 08  // ................
    8B00: 01 08 00 07 02 07 06 07 CA 00 34 00 90 00 96 00  // ..........4.....
    8B10: 00 00 00 00 00 00 5F 57 C3 90 50 66 52 E8 F4 FF  // ......_W..PfR...
    8B20: FF FF 81 EF 10 00 00 00 2E 8B 07 66 BA F8 0C EF  // ...........f....
    8B30: 66 BA FC 0C ED 32 C0 66 8B F8 66 5A 58 C3 66 B8  // f....2.f..fZX.f.
    8B40: 4F 03 66 52 66 56 53 57 50 0A FF 75 44 E8 C8 FF  // O.fRfVSWP..uD...
    8B50: FF FF 66 33 F6 66 BB 53 00 E8 48 00 00 00 C1 E8  // ..f3.f.S..H.....
    8B60: 10 F6 C4 40 75 2B 66 81 E2 FF 00 66 D1 E2 66 8B  // ...@u+f....f..f.
    8B70: C2 66 40 C1 E0 10 66 8B C2 66 BB 13 00 E8 30 00  // .f@...f..f....0.
    8B80: 00 00 66 BB 12 00 E8 27 00 00 00 66 58 32 E4 66  // ..f....'...fX2.f
    8B90: 50 58 5F 5B 66 5E 66 5A C3 90 66 B8 4F 03 C3 90  // PX_[f^fZ..f.O...
    8BA0: 66 B8 4F 03 C3 90 66 52 E8 11 00 00 00 ED 66 5A  // f.O...fR......fZ
    8BB0: C3 90 66 52 E8 05 00 00 00 EF 66 5A C3 90 66 8B  // ..fR......fZ..f.
    8BC0: D7 50 33 C0 66 8B C3 66 03 C6 C1 E0 02 EF 66 83  // .P3.f..f......f.
    8BD0: C2 04 58 C3 84 33 77 33 77 33 77 33 62 33 62 33  // ..X..3w3w3w3b3b3
    8BE0: 62 33 62 33 A4 2F 1B 30 45 30 86 31 85 31 85 31  // b3b3./.0E0.1.1.1
    8BF0: CB 31 30 32 60 32 1D 33 46 33 46 33 BD 31 B0 31  // .102`2.3F3F3.1.1
    8C00: B0 31 B0 31 B0 31 B0 31 CB 31 30 32 60 32 1D 33  // .1.1.1.1.102`2.3
    8C10: 4B 33 91 33 46 33 46 33 FF FF FF FF FF FF 00 00  // K3.3F3F3........
    8C20: FF FF 00 00 FF FF 00 00 FF 00 00 00 FF 00 00 00  // ................
    8C30: FF 00 00 00 FF 00 00 00 00 00 08 10 00 08 10 18  // ................
    8C40: 00 08 10 18 A8 2D 01 A8 2D 02 B6 41 03 96 41 03  // .....-..-..A..A.
    8C50: CD 2E 03 81 2E 03 A9 2D 04 C2 2D 04 D2 2D 04 A8  // .......-..-..-..
    8C60: 2D 03 00 00 00 00 55 35 00 02 55 35 01 02 55 35  // -.....U5..U5..U5
    8C70: 02 02 55 35 03 02 55 35 04 02 55 35 05 02 4F 37  // ..U5..U5..U5..O7
    8C80: 00 02 4F 37 01 02 4F 37 02 02 4F 37 03 02 4F 37  // ..O7..O7..O7..O7
    8C90: 04 02 4F 37 05 02 84 37 00 02 84 37 01 02 84 37  // ..O7...7...7...7
    8CA0: 02 02 84 37 03 02 84 37 04 02 84 37 05 02 BF 39  // ...7...7...7...9
    8CB0: 00 02 BF 39 01 02 BF 39 02 02 BF 39 03 02 BF 39  // ...9...9...9...9
    8CC0: 04 02 BF 39 05 02 BF 39 00 02 BF 39 01 02 BF 39  // ...9...9...9...9
    8CD0: 02 02 BF 39 03 02 BF 39 04 02 BF 39 05 02 86 38  // ...9...9...9...8
    8CE0: 00 02 86 38 01 02 86 38 02 02 86 38 03 02 86 38  // ...8...8...8...8
    8CF0: 04 02 86 38 05 02 C2 38 00 02 C2 38 01 02 C2 38  // ...8...8...8...8
    8D00: 02 02 C2 38 03 02 C2 38 04 02 C2 38 05 02 33 38  // ...8...8...8..38
    8D10: 00 02 33 38 01 02 33 38 02 02 33 38 03 02 33 38  // ..38..38..38..38
    8D20: 04 02 33 38 05 02 67 38 00 02 67 38 01 02 67 38  // ..38..g8..g8..g8
    8D30: 02 02 67 38 03 02 67 38 04 02 67 38 05 02 17 3C  // ..g8..g8..g8...<
    8D40: 00 00 4A 3C 01 00 4A 3C 02 00 37 3C 00 00 25 3B  // ..J<..J<..7<..%;
    8D50: 00 02 1E 39 00 02 1E 39 01 02 1E 39 02 02 1E 39  // ...9...9...9...9
    8D60: 03 02 1E 39 04 02 1E 39 05 02 3D 3B 00 02 92 3D  // ...9...9..=;...=
    8D70: 05 00 92 3D 01 00 92 3D 00 00 92 3D 02 00 D3 3D  // ...=...=...=...=
    8D80: 00 00 D3 3D 02 00 18 3E 00 00 A8 3A 00 02 A8 3A  // ...=...>...:...:
    8D90: 01 02 A8 3A 02 02 A8 3A 03 02 A8 3A 04 02 A8 3A  // ...:...:...:...:
    8DA0: 05 02 64 3C 00 00 8C 3C 00 00 0D 3D 00 00 88 3D  // ..d<...<...=...=
    8DB0: 00 00 6C 39 00 02 6C 39 01 02 6C 39 02 02 6C 39  // ..l9..l9..l9..l9
    8DC0: 03 02 6C 39 04 02 6C 39 05 02 87 3D 00 01 87 3D  // ..l9..l9...=...=
    8DD0: 00 01 8B 36 00 02 8B 36 01 02 8B 36 02 02 8B 36  // ...6...6...6...6
    8DE0: 03 02 8B 36 04 02 8B 36 05 02 AC 3C 00 00 88 3D  // ...6...6...<...=
    8DF0: 00 00 88 3D 00 00 88 3D 00 00 BD 3B 00 00 AF 37  // ...=...=...;...7
    8E00: 00 02 AF 37 01 02 AF 37 02 02 AF 37 03 02 AF 37  // ...7...7...7...7
    8E10: 04 02 AF 37 05 02 DE 37 00 02 DE 37 01 02 DE 37  // ...7...7...7...7
    8E20: 02 02 DE 37 03 02 DE 37 04 02 DE 37 05 02 14 38  // ...7...7...7...8
    8E30: 00 02 14 38 01 02 14 38 02 02 14 38 03 02 14 38  // ...8...8...8...8
    8E40: 04 02 14 38 05 02 CF 3C 00 00 F2 3C 00 00 B0 38  // ...8...<...<...8
    8E50: 01 02 B0 38 02 02 0C 39 01 02 0C 39 02 02 A6 00  // ...8...9...9....
    8E60: 02 01 B6 9B 00 00 AE A7 C8 C7 52 DB FA A7 CC A8  // ..........R.....
    8E70: 16 C8 94 A6 22 B4 EC B4 1E B5 48 B5 52 BB 84 BC  // ....".....H.R...
    8E80: 00 00 F0 D8 00 00 F6 BD 00 00 E4 BE 18 A9 44 AC  // ..............D.
    8E90: A6 BA C4 B0 DC B0 EE B0 7C B1 34 9D 00 00 04 E5  // ........|.4.....
    8EA0: 7C E5 00 00 72 BF EA BF 5E C0 00 00 9C C0 00 00  // |...r...^.......
    8EB0: 00 00 00 00 C8 C0 98 C2 5E C3 06 C5 50 C5 00 E9  // ........^...P...
    8EC0: E6 C5 02 C6 20 C6 00 00 04 E6 74 C7 52 E8 38 C9  // .... .....t.R.8.
    8ED0: 00 00 6A CB B0 CB BA CB C4 CB FC D4 9C D6 B4 DD  // ..j.............
    8EE0: EE D6 D8 D7 00 00 00 00 20 D9 00 00 CE E7 4A DB  // ........ .....J.
    8EF0: 92 BC EE BD 00 00 00 00 00 00 DE DD 24 DF 5C E2  // ............$.\.
    8F00: A8 E4 D0 DA 4A 00 02 01 00 00 B2 9A 00 00 E6 8E  // ....J...........
    8F10: AE 8F F6 8F 2A 90 00 00 6A 9A CA 9A 00 00 86 90  // ....*...j.......
    8F20: 92 90 06 91 86 9A 7A 91 00 00 30 94 00 00 00 00  // ......z...0.....
    8F30: 00 00 00 00 44 94 EC 94 CC 94 00 00 00 00 32 9A  // ....D.........2.
    8F40: F2 94 00 00 00 00 1A 98 EC 98 00 00 00 00 C8 00  // ................
    8F50: 02 01 D6 09 80 02 A0 00 E0 01 2D 00 10 00 60 00  // ..........-...`.
    8F60: 0A 00 02 00 00 00 00 00 08 08 06 00 12 3C A0 0F  // .............<..
    8F70: 20 03 00 01 58 02 1C 00 28 00 80 00 01 00 04 00  //  ...X...(.......
    8F80: 00 00 00 00 00 00 00 00 6A 3C 64 19 00 04 40 01  // ........j<d...@.
    8F90: 00 03 26 00 18 00 88 00 03 00 06 00 00 00 00 00  // ..&.............
    8FA0: 00 00 06 00 55 3C 30 2A 00 05 08 02 C0 03 28 00  // ....U<0*......(.
    8FB0: 60 00 70 00 01 00 03 00 00 00 00 00 00 00 00 00  // `.p.............
    8FC0: E9 3C 30 2A 00 05 98 01 00 04 2A 00 30 00 70 00  // .<0*......*.0.p.
    8FD0: 01 00 03 00 00 00 00 00 00 00 00 00 EA 3C 8F 2F  // .............<./
    8FE0: 78 05 D0 01 1A 04 27 00 58 00 90 00 03 00 04 00  // x.....'.X.......
    8FF0: 00 00 00 00 00 00 02 00 EB 3C 48 3F 40 06 30 02  // .........<H?@.0.
    9000: B0 04 32 00 40 00 C0 00 01 00 03 00 00 00 00 00  // ..2.@...........
    9010: 00 00 00 00 EC 3C 48 00 03 01 00 01 01 10 D0 4C  // .....<H........L
    9020: 01 00 24 71 01 00 01 00 00 00 82 28 00 00 4C 00  // ..$q.......(..L.
    9030: 00 00 B6 03 84 03 46 05 00 00 00 00 00 00 F4 00  // ......F.........
    9040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00  // ..............4.
    9060: 02 01 00 00 00 00 00 2A 00 2A 00 00 2A 2A 2A 00  // .......*.*..***.
    9070: 00 2A 00 2A 2A 15 00 2A 2A 2A 15 15 15 15 15 3F  // .*.**..***.....?
    9080: 15 3F 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F 15 3F  // .?..???..?.???.?
    9090: 3F 3F 5C 00 02 01 00 00 00 00 00 00 00 00 00 00  // ??\.............
    90A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00  // ................
    90B0: 00 00 C8 00 00 00 00 00 34 21 00 00 B8 0B 07 5A  // ........4!.....Z
    90C0: 5A 7D 00 5A 07 01 00 00 00 00 00 FF FF 00 00 00  // Z}.Z............
    90D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    90E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0C 00  // ................
    90F0: 02 01 00 00 00 00 00 00 00 00 74 00 02 01 CB 55  // ..........t....U
    9100: 00 00 00 00 01 00 CB 55 00 00 08 08 02 00 CB 55  // .......U.......U
    9110: 00 00 10 10 03 00 CB 55 00 00 18 14 04 00 CB 55  // .......U.......U
    9120: 00 00 1A 18 05 00 CB 55 00 00 1C 1C 06 00 A7 55  // .......U.......U
    9130: 00 00 08 08 90 00 AB 55 00 00 08 08 91 00 AF 55  // .......U.......U
    9140: 00 00 08 08 92 00 B3 55 00 00 08 08 93 00 B7 55  // .......U.......U
    9150: 00 00 08 08 94 00 BB 55 00 00 08 08 95 00 D7 55  // .......U.......U
    9160: 00 00 01 04 96 00 BF 55 00 00 08 08 97 00 74 00  // .......U......t.
    9170: 01 01 10 01 06 12 11 01 16 12 13 01 06 6A 14 01  // .............j..
    9180: 16 6A 16 01 06 55 17 01 16 55 19 01 06 EA 1A 01  // .j...U...U......
    9190: 16 EA 65 01 16 E9 66 01 0A E9 21 01 0A 12 22 01  // ..e...f...!...".
    91A0: 0A 6A 23 01 0A 55 24 01 0A EA 45 01 16 EB 46 01  // .j#..U$...E...F.
    91B0: 0A EB 75 01 16 EC 76 01 0A EC D2 01 16 70 D4 01  // ..u...v......p..
    91C0: 0A 70 D8 01 16 71 D9 01 0A 71 E2 01 16 72 E4 01  // .p...q...q...r..
    91D0: 0A 72 E8 01 16 73 E9 01 0A 73 F5 01 16 74 F6 01  // .r...s...s...t..
    91E0: 0A 74 B6 02 08 01 00 5C 00 E1 06 00 00 EE 2B 00  // .t.....\......+.
    91F0: 00 1B 00 48 00 00 00 80 A9 03 00 F0 49 02 00 32  // ...H........I..2
    9200: 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9210: 02 01 5C 00 4F 02 46 02 94 00 9E 01 BE 00 28 01  // ..\.O.F.......(.
    9220: 7A 00 8C 00 BC 01 00 00 00 00 72 02 00 00 90 00  // z.........r.....
    9230: A8 02 6D 01 43 01 97 01 F0 49 02 00 71 02 02 02  // ..m.C....I..q...
    9240: 00 00 00 00 00 00 08 00 00 00 00 00 00 00 05 00  // ................
    9250: 07 00 03 00 05 00 00 00 00 00 00 00 01 08 20 03  // .............. .
    9260: 84 03 B6 03 E8 03 1A 04 4C 04 7E 04 B0 04 01 01  // ........L.~.....
    9270: 46 05 01 01 84 03 00 08 60 EA 00 00 00 40 19 01  // F.......`....@..
    9280: 00 01 80 38 01 00 02 DC 4A 01 00 03 90 5F 01 00  // ...8....J...._..
    9290: 04 00 77 01 00 05 90 91 01 00 06 6C B0 01 00 07  // ..w........l....
    92A0: 01 08 D0 4C 01 00 00 00 80 00 00 00 00 00 00 1C  // ...L............
    92B0: 83 01 00 01 00 00 00 00 00 00 00 00 70 A7 01 00  // ............p...
    92C0: 02 00 00 00 00 00 00 00 00 88 BC 01 00 03 00 00  // ................
    92D0: 00 00 00 00 00 00 C0 D4 01 00 04 00 00 00 00 00  // ................
    92E0: 00 00 00 44 23 02 00 05 00 00 00 00 01 00 00 00  // ...D#...........
    92F0: 00 58 02 00 06 00 00 00 00 01 00 00 00 B8 7C 02  // .X............|.
    9300: 00 07 00 00 00 00 01 00 00 00 00 05 60 EA 00 00  // ............`...
    9310: 00 40 19 01 00 00 80 38 01 00 00 DC 4A 01 00 00  // .@.....8....J...
    9320: 90 5F 01 00 00 00 08 28 6E 00 00 00 2C C9 00 00  // ._.....(n...,...
    9330: 01 F8 0B 01 00 02 80 38 01 00 03 90 5F 01 00 04  // .......8...._...
    9340: F4 91 01 00 05 D0 B0 01 00 06 C0 D4 01 00 07 00  // ................
    9350: 08 6C 39 00 00 00 24 5E 00 00 01 FC 85 00 00 02  // .l9...$^........
    9360: AC BC 00 00 03 34 D0 00 00 04 68 6E 01 00 05 08  // .....4....hn....
    9370: 97 01 00 06 EC A3 01 00 07 00 01 68 3C 01 00 00  // ...........h<...
    9380: 01 04 3C 41 00 00 00 00 00 50 C3 00 00 00 00 00  // ..<A.....P......
    9390: 80 38 01 00 02 00 00 24 71 01 00 04 00 00 01 08  // .8.....$q.......
    93A0: 00 98 85 00 00 40 B5 00 00 60 EA 00 00 50 C3 00  // .....@...`...P..
    93B0: 00 01 80 BB 00 00 60 EA 00 00 94 0B 01 00 50 C3  // ......`.......P.
    93C0: 00 00 02 00 E1 00 00 94 0B 01 00 40 19 01 00 50  // ...........@...P
    93D0: C3 00 00 03 78 FF 00 00 40 19 01 00 88 26 01 00  // ....x...@....&..
    93E0: 50 C3 00 00 04 40 19 01 00 80 38 01 00 80 38 01  // P....@....8...8.
    93F0: 00 50 C3 00 00 05 80 38 01 00 DC 4A 01 00 DC 4A  // .P.....8...J...J
    9400: 01 00 50 C3 00 00 06 00 77 01 00 00 77 01 00 90  // ..P.....w...w...
    9410: 5F 01 00 50 C3 00 00 07 90 91 01 00 90 91 01 00  // _..P............
    9420: 00 77 01 00 50 C3 00 00 01 18 00 00 00 00 00 00  // .w..P...........
    9430: 00 0B E4 12 60 09 60 09 4B 00 0A 00 54 03 90 01  // ....`.`.K...T...
    9440: 90 01 90 01 90 01 90 01 90 01 90 01 00 00 00 00  // ................
    9450: 00 02 04 31 07 DC 00 DC 00 DC 00 2C 01 00 00 59  // ...1.......,...Y
    9460: 00 69 00 4A 00 4A 00 5F 00 73 00 73 00 64 00 40  // .i.J.J._.s.s.d.@
    9470: 00 90 92 97 60 96 00 90 55 00 00 00 00 00 00 00  // ....`...U.......
    9480: 00 00 00 00 00 00 00 00 00 00 02 02 D4 30 00 00  // .............0..
    9490: 02 10 60 EA 00 00 02 10 14 00 02 01 02 00 08 00  // ..`.............
    94A0: 80 00 00 02 00 04 00 08 40 00 FF FF 88 00 01 04  // ........@.......
    94B0: 88 06 04 00 13 31 48 00 21 21 00 00 6C 00 00 00  // .....1H.!!..l...
    94C0: 08 00 00 00 13 32 51 00 21 22 00 00 73 00 00 00  // .....2Q.!"..s...
    94D0: 80 00 00 00 13 33 5A 00 1E 21 00 00 7A 00 00 00  // .....3Z..!..z...
    94E0: 00 02 00 00 0C 31 63 00 1E 22 00 00 81 00 00 00  // .....1c.."......
    94F0: 00 04 00 00 01 04 90 00 02 04 01 00 FF 01 04 91  // ................
    9500: 00 02 04 02 00 FF 01 04 94 00 02 04 05 00 FF 01  // ................
    9510: 04 95 00 02 04 06 00 FF 14 06 0F 00 00 00 FF 14  // ................
    9520: 06 0F 00 00 00 FF 14 06 0F 00 00 00 FF 14 06 0F  // ................
    9530: 00 00 00 FF 20 00 03 01 92 E6 C5 00 00 70 03 00  // .... ........p..
    9540: 90 1F 00 00 00 00 00 00 00 00 B8 0B 00 06 60 00  // ..............`.
    9550: 8C 0A 00 00 05 00 01 01 00 00 27 03 02 03 43 00  // ..........'...C.
    9560: 4F 00 00 00 93 02 00 00 00 00 00 00 00 00 01 00  // O...............
    9570: 00 04 00 20 00 00 FF FF 00 00 00 00 00 00 00 00  // ... ............
    9580: 00 00 00 00 00 00 2B 00 00 60 10 07 35 00 01 02  // ......+..`..5...
    9590: 00 00 4B 48 41 38 34 33 38 30 31 42 00 00 00 00  // ..KHA843801B....
    95A0: 00 FF FF FF 00 00 00 00 00 16 00 00 00 81 40 01  // ..............@.
    95B0: 00 82 40 01 00 83 40 01 00 84 40 01 00 85 40 01  // ..@...@...@...@.
    95C0: 00 86 40 01 00 87 40 01 00 88 40 01 00 89 40 01  // ..@...@...@...@.
    95D0: 00 8A 40 01 00 8C 40 01 00 8D 40 01 00 8E 40 01  // ..@...@...@...@.
    95E0: 00 8F 40 01 00 90 40 01 00 91 40 01 00 94 40 01  // ..@...@...@...@.
    95F0: 00 95 40 01 00 96 40 01 00 97 40 01 00 98 40 01  // ..@...@...@...@.
    9600: 00 A1 40 01 00 3C 41 00 00 0A 06 03 03 09 09 03  // ..@..<A.........
    9610: 03 02 02 00 05 08 00 00 00 03 03 05 00 04 00 00  // ................
    9620: 00 00 02 00 00 03 02 01 03 03 02 01 03 01 0D 00  // ................
    9630: 00 8C 02 00 00 08 0C 00 00 2E 00 00 00 00 00 11  // ................
    9640: 00 04 00 00 00 55 14 0D 01 1B 00 07 00 04 00 02  // .....U..........
    9650: 05 09 01 0C 01 00 00 02 00 2C 00 00 00 44 04 00  // .........,...D..
    9660: 00 30 75 00 00 0B 0A 05 03 0F 0F 05 05 02 02 00  // .0u.............
    9670: 05 08 00 00 00 03 03 05 00 06 00 00 00 00 03 00  // ................
    9680: 00 03 02 01 03 03 02 01 03 01 0E 00 00 92 04 00  // ................
    9690: 00 08 0C 00 00 51 00 00 00 00 00 11 00 04 00 00  // .....Q..........
    96A0: 00 55 14 0E 01 30 00 07 00 04 00 02 05 0A 01 0C  // .U...0..........
    96B0: 01 00 00 02 00 4E 00 00 00 44 04 00 00 50 C3 00  // .....N...D...P..
    96C0: 00 0C 11 08 05 18 18 07 07 02 03 00 05 08 00 00  // ................
    96D0: 00 04 03 05 00 09 00 00 00 00 04 00 00 03 02 01  // ................
    96E0: 03 03 02 01 03 01 0E 00 00 9E 07 00 00 08 0C 00  // ................
    96F0: 00 87 00 00 00 00 00 11 00 04 00 00 00 55 14 11  // .............U..
    9700: 01 50 00 07 00 04 00 02 05 0B 02 0C 01 00 00 02  // .P..............
    9710: 00 82 00 00 00 44 04 00 00 80 38 01 00 11 1B 0D  // .....D....8.....
    9720: 08 27 27 0C 0C 04 05 00 05 0D 00 00 00 06 03 07  // .''.............
    9730: 00 0D 00 00 00 00 07 00 00 03 02 01 03 03 02 01  // ................
    9740: 03 01 11 00 00 30 0C 00 00 08 0C 00 00 D8 00 00  // .....0..........
    9750: 00 00 00 11 00 06 00 00 00 86 20 18 01 80 00 07  // .......... .....
    9760: 00 06 00 02 06 10 04 0C 01 00 00 02 00 D0 00 00  // ................
    9770: 00 44 04 00 00 A0 86 01 00 14 21 10 0A 2F 2F 0E  // .D........!..//.
    9780: 0E 04 06 00 05 10 00 00 00 07 04 09 00 10 00 00  // ................
    9790: 00 00 08 00 00 03 02 01 03 03 02 01 03 01 13 00  // ................
    97A0: 00 3C 0F 00 00 08 0F 00 00 0E 01 00 00 00 00 11  // .<..............
    97B0: 00 08 00 00 00 A8 28 1C 01 A0 00 07 00 08 00 02  // ......(.........
    97C0: 08 13 05 0C 01 00 00 02 00 04 01 00 00 44 04 00  // .............D..
    97D0: 00 00 00 00 00 00 00 00 00 FF FF FF 00 FF FF FF  // ................
    97E0: 01 FF FF FF 02 FF FF FF 03 00 00 00 00 11 00 00  // ................
    97F0: 00 4F 5C 01 00 50 5C 01 00 51 5C 01 00 52 5C 01  // .O\..P\..Q\..R\.
    9800: 00 53 5C 01 00 54 5C 01 00 55 5C 01 00 56 5C 01  // .S\..T\..U\..V\.
    9810: 00 57 5C 01 00 00 00 00 01 01 00 00 01 02 00 00  // .W\.............
    9820: 01 03 00 00 01 04 00 00 01 05 00 00 01 06 00 00  // ................
    9830: 01 07 00 00 01 FF FF FF 00 5C 1A AB 61 04 80 00  // .........\..a...
    9840: 00 00 00 00 00 20 01 00 00 00 00 00 00 00 00 00  // ..... ..........
    9850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 36 01  // ..............6.
    9860: 00 00 00 00 07 CC F9 CC CC A8 00 AA 55 00 00 00  // ............U...
    9870: 00 00 00 00 00 02 02 02 02 00 00 10 00 00 00 00  // ................
    9880: 00 00 D2 00 04 02 B0 04 00 00 20 03 00 00 95 00  // .......... .....
    9890: 00 00 35 04 00 00 62 00 00 00 1B 00 00 00 00 00  // ..5...b.........
    98A0: B3 35 FD FF 33 B9 01 00 1D 5A 02 00 1E 43 FD FF  // .5..3....Z...C..
    98B0: 77 74 01 00 86 28 02 00 00 00 00 00 DD 00 00 00  // wt...(..........
    98C0: CC FF FF FF 00 00 00 00 9F 00 00 00 DC FF FF FF  // ................
    98D0: C0 12 00 01 00 01 00 01 00 00 00 00 00 00 AC 09  // ................
    98E0: 00 00 49 0A 00 00 00 00 00 00 AC 09 00 00 49 0A  // ..I...........I.
    98F0: 00 00 00 00 00 00 9A 01 00 00 00 00 00 00 00 00  // ................
    9900: 00 00 9A 01 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 25 00  // ..............%.
    9920: 00 00 01 01 00 00 00 00 06 09 00 00 56 0D 00 00  // ............V...
    9930: 00 00 00 00 06 09 00 00 56 0D 00 00 00 00 00 00  // ........V.......
    9940: 9A 01 00 00 00 00 00 00 00 00 00 00 9A 01 00 00  // ................
    9950: 00 00 00 00 46 01 04 01 01 03 AA 00 08 06 60 00  // ....F.........`.
    9960: 00 00 00 00 27 00 28 00 3F 00 63 00 40 00 9E 00  // ....'.(.?.c.@...
    9970: 41 00 6B 00 42 00 38 00 6B 00 01 00 61 00 20 00  // A.k.B.8.k...a. .
    9980: 76 00 89 00 77 00 C6 00 28 00 FF 00 49 00 D0 00  // v...w...(...I...
    9990: 37 00 14 00 94 00 53 00 92 00 0A 00 93 00 C3 00  // 7.....S.........
    99A0: 95 00 22 00 43 00 9E 00 44 00 59 00 45 00 2E 00  // ..".C...D.Y.E...
    99B0: 46 00 38 00 6C 00 01 00 62 00 A0 00 78 00 60 00  // F.8.l...b...x.`.
    99C0: 79 00 F3 00 29 00 40 00 4A 00 DE 00 38 00 1E 00  // y...).@.J...8...
    99D0: 48 00 FC 00 47 00 07 00 E8 00 03 00 51 00 67 00  // H...G.......Q.g.
    99E0: E8 00 07 00 99 00 FC 00 4B 00 40 00 4C 00 44 00  // ........K.@.L.D.
    99F0: 5E 00 44 00 5C 00 40 00 5D 00 14 00 66 00 CC 00  // ^.D.\.@.]...f...
    9A00: FF 00 01 07 0C 00 2E 00 01 FF 00 FF 00 00 04 03  // ................
    9A10: 22 00 15 06 A2 00 00 00 00 00 D3 00 5C 00 D4 00  // "...........\...
    9A20: 82 00 D5 00 82 00 D6 00 82 00 D7 00 82 00 FF 00  // ................
    9A30: 02 07 0C 00 2E 00 01 FF 00 20 00 00 0A 03 22 00  // ......... ....".
    9A40: 15 06 A6 00 00 00 00 00 D3 00 5C 00 D4 00 4C 00  // ..........\...L.
    9A50: D5 00 4C 00 D6 00 4C 00 D7 00 4C 00 FF 00 08 00  // ..L...L...L.....
    9A60: 3C 00 00 08 00 00 07 00 00 00 00 00 00 00 00 00  // <...............
    9A70: 01 00 00 00 01 00 02 00 00 00 02 00 03 00 00 00  // ................
    9A80: 03 00 04 00 00 00 04 00 05 00 00 00 05 00 06 00  // ................
    9A90: 00 00 06 00 07 00 00 00 07 00 38 00 04 01 04 00  // ..........8.....
    9AA0: 00 00 60 EA 00 00 8C 0A 46 05 00 00 00 00 00 00  // ..`.....F.......
    9AB0: 00 00 7C 01 4E 0C 01 01 00 00 55 00 00 00 8C 0A  // ..|.N.....U.....
    9AC0: 00 00 00 0C 06 01 01 06 06 00 00 00 00 00 00 00  // ................
    9AD0: 00 00 1C 00 03 01 00 09 00 00 F4 01 4E 0C 00 00  // ............N...
    9AE0: 4E 0C 8C 0A 00 00 FF 00 05 00 FF 00 00 01 2C 00  // N.............,.
    9AF0: 02 02 00 09 04 04 10 01 04 04 64 C0 00 00 65 C0  // ..........d...e.
    9B00: 00 00 66 C0 00 00 67 C0 00 00 E8 C0 00 00 A0 21  // ..f...g........!
    9B10: 00 00 42 EC 00 00 8C 0A 00 00 18 00 02 01 00 07  // ..B.............
    9B20: 00 04 00 10 70 08 00 10 70 08 00 A4 1F 00 00 A4  // ....p...p.......
    9B30: 1F 00 EC 00 02 02 00 00 00 00 00 00 00 00 00 00  // ................
    9B40: 00 00 00 00 00 00 24 50 53 50 04 77 80 A3 0C 00  // ......$PSP.w....
    9B50: 00 00 00 00 00 00 00 00 00 00 40 02 00 00 00 00  // ..........@.....
    9B60: 02 00 00 00 00 00 01 00 00 00 00 A0 00 00 00 D0  // ................
    9B70: 02 00 00 00 00 00 03 00 00 00 40 03 00 00 00 04  // ..........@.....
    9B80: 02 00 00 00 00 00 04 00 00 00 00 EC 00 00 00 00  // ................
    9B90: 00 00 00 00 00 00 05 00 00 00 00 01 00 00 00 08  // ................
    9BA0: 02 00 00 00 00 00 07 00 00 00 00 10 00 00 00 10  // ................
    9BB0: 02 00 00 00 00 00 09 00 00 00 08 00 00 00 AE 9B  // ................
    9BC0: 00 00 00 00 00 00 11 00 00 00 00 84 00 00 00 70  // ...............p
    9BD0: 03 00 00 00 00 00 12 00 00 00 00 03 00 00 00 09  // ................
    9BE0: 02 00 00 00 00 00 14 00 00 00 00 50 00 00 00 80  // ...........P....
    9BF0: 02 00 00 00 00 00 21 00 00 00 10 00 00 00 00 0C  // ......!.........
    9C00: 02 00 00 00 00 00 23 00 00 00 00 50 00 00 00 20  // ......#....P... 
    9C10: 02 00 00 00 00 00 01 00 00 00 00 00 00 00 7D 01  // ..............}.
    9C20: 02 01 00 08 37 00 00 4B E5 00 04 49 66 01 4B E5  // ....7..K...If.K.
    9C30: 00 02 44 1E 00 4B E5 00 40 49 DA 00 4A 65 53 00  // ..D..K..@I..JeS.
    9C40: 02 49 C0 00 4B E5 01 01 49 43 00 08 E5 01 FD 66  // .I..K...IC.....f
    9C50: 18 03 24 41 1B 00 4C 25 41 02 44 43 00 0E E5 01  // ..$A..L%A.DC....
    9C60: 02 02 05 02 06 00 00 00 52 15 02 01 02 00 52 47  // ........R.....RG
    9C70: 52 1B 02 05 02 08 00 01 00 52 43 02 05 02 08 00  // R........RC.....
    9C80: 00 00 52 43 02 05 02 00 07 00 00 52 0D 52 3D 52  // ..RC.......R.R=R
    9C90: 02 02 01 02 00 0E E5 02 08 52 0A 52 08 02 01 02  // .........R.R....
    9CA0: 01 52 05 02 25 02 07 52 1C 52 1A 52 16 52 18 52  // .R..%..R.R.R.R.R
    9CB0: 19 02 05 02 00 02 00 00 52 0D 02 25 02 01 52 1C  // ........R..%..R.
    9CC0: 02 05 02 00 01 00 00 55 00 03 4B E5 01 02 44 B7  // .......U..K...D.
    9CD0: 00 02 25 03 01 52 15 3D E5 02 01 49 60 01 4B E5  // ..%..R.=...I`.K.
    9CE0: 00 40 49 DA 00 02 05 02 00 03 00 00 02 05 03 01  // .@I.............
    9CF0: 00 00 00 52 15 43 60 01 02 05 02 00 03 00 00 02  // ...R.C`.........
    9D00: 05 03 02 00 00 00 52 15 02 05 02 01 00 00 00 52  // ......R........R
    9D10: 15 3D E5 02 01 49 60 01 02 05 02 02 0C 09 00 52  // .=...I`........R
    9D20: 15 02 05 02 02 0D 0A 00 52 15 02 05 02 02 2A 14  // ........R.....*.
    9D30: 00 52 15 02 05 02 02 2B 15 00 52 15 02 05 02 02  // .R.....+..R.....
    9D40: 2C 16 00 52 15 02 05 02 02 0E 08 00 52 15 02 05  // ,..R........R...
    9D50: 02 02 0F 07 00 52 15 02 05 02 02 10 13 00 52 15  // .....R........R.
    9D60: 02 05 02 02 06 12 00 52 15 02 05 02 05 00 00 00  // .......R........
    9D70: 52 15 3D E5 02 00 44 60 01 55 00 02 52 1D 0D 65  // R.=...D`.U..R..e
    9D80: 53 00 02 5B 02 05 02 00 07 00 00 52 0D 02 05 02  // S..[.......R....
    9D90: 00 02 00 00 52 0D 52 3D 52 18 5B 00 5F 09 01 01  // ....R.R=R.[._...
    9DA0: 08 00 37 00 00 3D 25 00 01 44 BC 01 52 0E 03 01  // ..7..=%..D..R...
    9DB0: 00 00 15 05 00 02 01 05 10 74 00 00 00 00 01 05  // .........t......
    9DC0: 44 70 71 00 00 00 03 02 01 00 1B 05 01 02 33 05  // Dpq...........3.
    9DD0: 01 01 00 00 00 15 05 01 04 01 02 13 76 01 1B 05  // ............v...
    9DE0: 01 0C 15 05 01 0C 5E 05 01 00 F2 FF FF 00 00 00  // ......^.........
    9DF0: 00 01 02 45 70 01 01 05 C0 70 81 03 30 00 03 02  // ...Ep....p..0...
    9E00: 41 00 33 05 41 24 00 00 00 15 05 41 02 01 02 C1  // A.3.A$.....A....
    9E10: 70 41 03 02 41 00 33 05 41 21 00 00 00 15 05 41  // pA..A.3.A!.....A
    9E20: 02 01 02 C2 70 41 03 02 41 00 15 05 41 0A 33 05  // ....pA..A...A.3.
    9E30: 41 00 90 00 00 0F 25 41 01 01 02 C3 70 41 01 05  // A.....%A....pA..
    9E40: C4 70 81 03 20 00 03 02 41 00 33 05 41 20 00 00  // .p.. ...A.3.A ..
    9E50: 00 15 05 41 02 01 02 C5 70 41 03 02 41 00 33 05  // ...A....pA..A.3.
    9E60: 41 01 00 00 00 15 05 41 02 01 02 C6 70 41 03 02  // A......A....pA..
    9E70: 41 00 15 05 41 0A 33 05 41 00 80 00 00 0F 25 41  // A...A.3.A.....%A
    9E80: 01 01 02 C7 70 41 01 05 42 70 71 00 00 00 09 05  // ....pA..Bpq.....
    9E90: 01 00 F0 FF 0F 0F 25 01 10 01 02 43 70 01 66 FF  // ......%....Cp.f.
    9EA0: 2D 0D 42 F0 01 56 00 40 03 0C 40 00 00 3E 0D 40  // -.B..V.@..@..>.@
    9EB0: 00 00 44 2C 01 01 02 00 00 40 01 04 01 00 02 00  // ..D,.....@......
    9EC0: 2D 0D 42 06 00 43 09 01 66 FF 2D 0D 42 18 09 56  // -.B..C..f.-.B..V
    9ED0: 00 40 03 A4 40 00 00 3E A5 40 FF 44 7B 01 3E A5  // .@..@..>.@.D{.>.
    9EE0: 40 00 44 4D 01 03 25 40 01 01 02 10 74 40 56 00  // @.DM..%@....t@V.
    9EF0: 40 03 0C 40 01 00 01 02 41 74 40 03 0C 40 03 00  // @..@....At@..@..
    9F00: 01 02 42 74 40 03 0C 40 05 00 01 02 43 74 40 2D  // ..Bt@..@....Ct@-
    9F10: 0D 42 07 00 43 33 01 01 05 10 74 00 00 00 00 01  // .B..C3....t.....
    9F20: 05 14 72 09 00 00 00 01 05 10 72 00 00 0F 40 01  // ..r.......r...@.
    9F30: 05 11 72 DB F7 60 85 01 05 12 72 00 88 00 00 01  // ..r..`....r.....
    9F40: 05 FC 70 01 00 00 00 01 05 D8 75 0D 00 20 00 01  // ..p.......u.. ..
    9F50: 05 D4 75 00 00 00 0E 5B 01 05 C9 71 FF FF 00 00  // ..u....[...q....
    9F60: 01 05 CA 71 0E 00 00 00 52 3E 01 04 CB 71 04 00  // ...q....R>...q..
    9F70: 01 05 41 71 03 00 00 00 01 05 10 74 02 00 00 00  // ..Aq.......t....
    9F80: 01 05 C0 75 00 30 00 00 5B 7A 6F 07 66 71 36 00  // ...u.0..[zo.fq6.
    9F90: 00 00 67 71 41 60 04 00 61 71 37 00 00 00 62 71  // ..gqA`..aq7...bq
    9FA0: 41 60 04 00 38 71 10 00 00 00 39 71 10 00 00 00  // A`..8q....9q....
    9FB0: 34 71 10 10 02 00 10 74 01 00 20 00 38 71 18 00  // 4q.....t.. .8q..
    9FC0: 00 00 39 71 14 00 00 00 34 71 20 20 00 00 10 74  // ..9q....4q  ...t
    9FD0: 01 00 21 00 38 71 18 00 00 00 39 71 14 00 00 00  // ..!.8q....9q....
    9FE0: 34 71 20 20 00 00 10 74 01 00 22 00 38 71 10 00  // 4q  ...t..".8q..
    9FF0: 00 00 39 71 10 00 00 00 34 71 10 10 00 00 10 74  // ..9q....4q.....t
    A000: 01 00 23 00 5D 71 02 00 70 1C 5E 71 00 00 00 00  // ..#.]q..p.^q....
    A010: 5F 71 01 00 10 18 60 71 00 00 00 00 59 71 7F 00  // _q....`q....Yq..
    A020: 80 20 5A 71 00 00 00 00 5B 71 7F 00 10 3C 5C 71  // . Zq....[q...<\q
    A030: 00 00 00 00 10 74 00 00 00 00 3B 71 13 11 98 00  // .....t....;q....
    A040: 3D 71 19 C8 41 00 3C 71 0C 10 56 00 3E 71 0E 66  // =q..A.<q..V.>q.f
    A050: 20 00 49 71 00 00 30 00 45 71 00 08 01 00 4A 71  //  .Iq..0.Eq....Jq
    A060: 00 00 40 00 47 71 00 00 10 02 4C 71 24 00 00 00  // ..@.Gq....Lq$...
    A070: 53 71 00 00 10 00 4F 71 00 04 01 00 54 71 00 00  // Sq....Oq....Tq..
    A080: 10 00 46 71 00 84 00 00 50 71 00 84 00 00 51 71  // ..Fq....Pq....Qq
    A090: 00 00 10 00 10 74 01 00 26 00 3B 71 11 11 78 00  // .....t..&.;q..x.
    A0A0: 3D 71 19 C8 41 00 3C 71 0B 10 46 00 3E 71 0E 66  // =q..A.<q..F.>q.f
    A0B0: 20 00 47 71 00 84 10 02 51 71 00 84 10 00 10 74  //  .Gq....Qq.....t
    A0C0: 01 00 2D 00 3B 71 13 11 80 09 3D 71 19 C8 10 04  // ..-.;q....=q....
    A0D0: 3C 71 0C 10 60 05 3E 71 0E 66 00 02 48 71 00 00  // <q..`.>q.f..Hq..
    A0E0: 10 02 4D 71 24 00 00 00 46 71 00 00 00 00 50 71  // ..Mq$...Fq....Pq
    A0F0: 00 00 00 00 47 71 00 84 00 00 4C 71 00 00 00 00  // ....Gq....Lq....
    A100: 51 71 00 84 00 00 52 71 00 00 10 00 10 74 01 00  // Qq....Rq.....t..
    A110: 32 00 3B 71 12 81 09 00 3D 71 0F 18 06 00 3C 71  // 2.;q....=q....<q
    A120: 0B 60 05 00 3E 71 08 06 02 00 46 71 00 00 10 02  // .`..>q....Fq....
    A130: 4B 71 25 00 00 00 45 71 00 84 00 00 4A 71 00 00  // Kq%...Eq....Jq..
    A140: 00 00 4F 71 00 84 00 00 54 71 00 00 00 00 50 71  // ..Oq....Tq....Pq
    A150: 00 00 10 00 47 71 00 00 00 00 4C 71 00 00 00 00  // ....Gq....Lq....
    A160: 51 71 00 00 00 00 10 74 01 00 33 00 3B 71 12 81  // Qq.....t..3.;q..
    A170: 09 00 3D 71 0F 18 06 00 3C 71 0B 60 05 00 3E 71  // ..=q....<q.`..>q
    A180: 08 06 02 00 46 71 00 00 10 02 4B 71 25 00 00 00  // ....Fq....Kq%...
    A190: 45 71 00 84 00 00 4A 71 00 00 00 00 4F 71 00 84  // Eq....Jq....Oq..
    A1A0: 00 00 54 71 00 00 00 00 50 71 00 00 10 00 47 71  // ..Tq....Pq....Gq
    A1B0: 00 00 00 00 4C 71 00 00 00 00 51 71 00 00 00 00  // ....Lq....Qq....
    A1C0: 10 74 01 00 34 00 3B 71 12 81 09 00 3D 71 0F 18  // .t..4.;q....=q..
    A1D0: 06 00 3C 71 0B 60 05 00 3E 71 08 06 02 00 46 71  // ..<q.`..>q....Fq
    A1E0: 00 00 10 02 4B 71 25 00 00 00 45 71 00 84 00 00  // ....Kq%...Eq....
    A1F0: 4A 71 00 00 00 00 4F 71 00 84 00 00 54 71 00 00  // Jq....Oq....Tq..
    A200: 00 00 50 71 00 00 10 00 47 71 00 00 00 00 4C 71  // ..Pq....Gq....Lq
    A210: 00 00 00 00 51 71 00 00 00 00 10 74 01 00 35 00  // ....Qq.....t..5.
    A220: 3B 71 12 81 09 00 3D 71 0F 18 06 00 3C 71 0B 60  // ;q....=q....<q.`
    A230: 05 00 3E 71 08 06 02 00 46 71 00 00 10 02 4B 71  // ..>q....Fq....Kq
    A240: 25 00 00 00 45 71 00 84 00 00 4A 71 00 00 00 00  // %...Eq....Jq....
    A250: 4F 71 00 84 00 00 54 71 00 00 00 00 50 71 00 00  // Oq....Tq....Pq..
    A260: 10 00 47 71 00 00 00 00 4C 71 00 00 00 00 51 71  // ..Gq....Lq....Qq
    A270: 00 00 00 00 10 74 01 00 36 00 3B 71 10 11 C2 00  // .....t..6.;q....
    A280: 3D 71 1E CA 44 00 3C 71 0F 11 C1 00 3E 71 13 86  // =q..D.<q....>q..
    A290: 41 00 44 71 00 8C 01 00 49 71 00 00 50 00 45 71  // A.Dq....Iq..P.Eq
    A2A0: 00 8C 01 00 4A 71 00 00 50 00 46 71 00 84 00 00  // ....Jq..P.Fq....
    A2B0: 47 71 00 84 10 02 4C 71 25 00 00 00 4E 71 00 84  // Gq....Lq%...Nq..
    A2C0: 01 00 53 71 00 00 20 00 4F 71 00 84 01 00 54 71  // ..Sq.. .Oq....Tq
    A2D0: 00 00 30 00 50 71 00 84 00 00 51 71 00 84 10 00  // ..0.Pq....Qq....
    A2E0: 10 74 01 00 37 00 3B 71 14 11 4C 02 3D 71 20 CA  // .t..7.;q..L.=q .
    A2F0: 44 02 3C 71 10 11 1D 00 3E 71 14 87 14 00 44 71  // D.<q....>q....Dq
    A300: 00 8C 01 00 49 71 00 00 30 00 45 71 00 8C 01 00  // ....Iq..0.Eq....
    A310: 4A 71 00 00 50 00 46 71 00 00 10 02 4B 71 25 00  // Jq..P.Fq....Kq%.
    A320: 00 00 4E 71 00 84 01 00 53 71 00 00 20 00 54 71  // ..Nq....Sq.. .Tq
    A330: 00 00 30 00 4F 71 00 84 01 00 50 71 00 00 10 00  // ..0.Oq....Pq....
    A340: 47 71 00 00 00 00 4C 71 00 00 00 00 51 71 00 00  // Gq....Lq....Qq..
    A350: 00 00 10 74 01 00 38 00 3B 71 1E A7 C1 00 3D 71  // ...t..8.;q....=q
    A360: 1A 0B 0F 00 3C 71 14 09 B0 00 3E 71 19 0A 0F 00  // ....<q....>q....
    A370: 44 71 00 84 10 00 49 71 00 00 41 00 46 71 00 8C  // Dq....Iq..A.Fq..
    A380: 01 00 4B 71 00 00 61 00 4E 71 00 84 10 00 53 71  // ..Kq..a.Nq....Sq
    A390: 00 00 20 00 50 71 00 84 01 00 55 71 00 00 30 00  // .. .Pq....Uq..0.
    A3A0: 45 71 00 00 00 00 4A 71 00 00 00 00 4F 71 00 00  // Eq....Jq....Oq..
    A3B0: 00 00 54 71 00 00 00 00 47 71 00 00 10 00 4C 71  // ..Tq....Gq....Lq
    A3C0: 00 00 00 00 51 71 00 00 10 00 10 74 01 00 39 00  // ....Qq.....t..9.
    A3D0: 3B 71 16 D1 80 00 3D 71 1E 0F A5 00 3C 71 14 B0  // ;q....=q....<q..
    A3E0: 90 00 3E 71 18 0C 84 00 44 71 00 8C 01 00 49 71  // ..>q....Dq....Iq
    A3F0: 00 00 62 00 47 71 00 8C 11 00 4C 71 04 00 00 00  // ..b.Gq....Lq....
    A400: 4E 71 00 84 01 00 53 71 00 00 30 00 51 71 00 04  // Nq....Sq..0.Qq..
    A410: 12 00 45 71 00 00 10 00 4A 71 00 00 00 00 4F 71  // ..Eq....Jq....Oq
    A420: 00 00 10 00 54 71 00 00 00 00 46 71 00 00 00 00  // ....Tq....Fq....
    A430: 50 71 00 00 00 00 10 74 01 00 26 00 4C 74 10 FF  // Pq.....t..&.Lt..
    A440: 00 00 10 74 01 00 27 00 4C 74 19 FF 00 00 29 71  // ...t..'.Lt....)q
    A450: F3 01 FF 01 10 74 01 00 28 00 4C 74 16 FF 00 00  // .....t..(.Lt....
    A460: 29 71 F3 01 FF 01 10 74 01 00 29 00 4C 74 1F FF  // )q.....t..).Lt..
    A470: 00 00 29 71 F3 01 FF 01 10 74 01 00 2A 00 4C 74  // ..)q.....t..*.Lt
    A480: 14 FF 00 00 29 71 F3 01 FF 01 10 74 01 00 2B 00  // ....)q.....t..+.
    A490: 4C 74 1D FF 00 00 29 71 F3 01 FF 01 10 74 01 00  // Lt....)q.....t..
    A4A0: 2C 00 4C 74 12 FF 00 00 29 71 F3 01 FF 01 10 74  // ,.Lt....)q.....t
    A4B0: 01 00 2D 00 4D 74 1B FF 00 00 29 71 F3 01 FF 01  // ..-.Mt....)q....
    A4C0: 10 74 01 00 2E 00 4C 74 18 FF 00 00 29 71 F3 01  // .t....Lt....)q..
    A4D0: FF 01 10 74 01 00 2F 00 4C 74 11 FF 00 00 29 71  // ...t../.Lt....)q
    A4E0: F3 01 FF 01 10 74 01 00 30 00 4C 74 1E FF 00 00  // .....t..0.Lt....
    A4F0: 29 71 F3 01 FF 01 10 74 01 00 31 00 4C 74 17 FF  // )q.....t..1.Lt..
    A500: 00 00 29 71 F3 01 FF 01 10 74 01 00 32 00 4B 74  // ..)q.....t..2.Kt
    A510: 1C FF 00 00 29 71 F3 01 FF 01 10 74 01 00 33 00  // ....)q.....t..3.
    A520: 4B 74 15 FF 00 00 29 71 F3 01 FF 01 10 74 01 00  // Kt....)q.....t..
    A530: 34 00 4B 74 1A FF 00 00 29 71 F3 01 FF 01 10 74  // 4.Kt....)q.....t
    A540: 01 00 35 00 4B 74 13 FF 00 00 29 71 F3 01 FF 01  // ..5.Kt....)q....
    A550: 10 74 00 00 00 00 44 74 00 00 40 00 10 74 01 00  // .t....Dt..@..t..
    A560: 36 00 44 74 00 00 00 00 29 71 F3 01 FF 01 10 74  // 6.Dt....)q.....t
    A570: 01 00 37 00 44 74 00 00 00 00 29 71 F3 01 FF 01  // ..7.Dt....)q....
    A580: 10 74 01 00 38 00 44 74 00 00 00 00 29 71 F3 01  // .t..8.Dt....)q..
    A590: FF 01 10 74 01 00 39 00 44 74 00 00 00 00 29 71  // ...t..9.Dt....)q
    A5A0: F3 01 FF 01 10 74 01 00 10 00 29 71 F3 01 FF 01  // .....t....)q....
    A5B0: 10 74 01 00 11 00 29 71 F3 01 FF 01 10 74 01 00  // .t....)q.....t..
    A5C0: 12 00 29 71 F3 01 FF 01 10 74 01 00 13 00 29 71  // ..)q.....t....)q
    A5D0: F3 01 FF 01 10 74 01 00 14 00 29 71 F3 01 FF 01  // .....t....)q....
    A5E0: 10 74 01 00 15 00 29 71 F3 01 FF 01 10 74 01 00  // .t....)q.....t..
    A5F0: 16 00 29 71 F3 01 FF 01 10 74 01 00 17 00 29 71  // ..)q.....t....)q
    A600: F3 01 FF 01 10 74 01 00 18 00 29 71 F3 01 FF 01  // .....t....)q....
    A610: 10 74 01 00 19 00 29 71 F3 01 FF 01 10 74 01 00  // .t....)q.....t..
    A620: 1A 00 29 71 F3 01 FF 01 10 74 01 00 1B 00 29 71  // ..)q.....t....)q
    A630: F3 01 FF 01 10 74 01 00 1C 00 29 71 F3 01 FF 01  // .....t....)q....
    A640: 10 74 01 00 1D 00 29 71 F3 01 FF 01 10 74 01 00  // .t....)q.....t..
    A650: 1E 00 29 71 F3 01 FF 01 10 74 01 00 1F 00 29 71  // ..)q.....t....)q
    A660: F3 01 FF 01 10 74 00 00 00 00 30 74 F1 05 00 00  // .....t....0t....
    A670: 10 74 01 00 20 00 30 74 F1 06 00 00 36 74 00 00  // .t.. .0t....6t..
    A680: 00 00 10 74 01 00 21 00 30 74 F1 06 00 00 36 74  // ...t..!.0t....6t
    A690: 00 00 00 00 10 74 01 00 22 00 30 74 F1 0B 00 00  // .....t..".0t....
    A6A0: 36 74 10 00 00 00 10 74 00 00 00 00 33 74 03 0B  // 6t.....t....3t..
    A6B0: 0E 00 00 00 00 55 01 55 01 55 01 2D 4D 02 4D 02  // .....U.U.U.-M.M.
    A6C0: 4D 02 32 9B 00 9B 00 9B 00 33 9B 00 9B 00 9B 00  // M.2......3......
    A6D0: 34 9B 00 9B 00 9B 00 35 9B 00 9B 00 9B 00 36 6C  // 4......5......6l
    A6E0: 02 6C 02 6C 02 37 6C 02 6C 02 6C 02 38 93 01 55  // .l.l.7l.l.l.8..U
    A6F0: 01 83 60 39 55 01 93 01 41 70 FF 00 1A 01 01 01  // ..`9U...Ap......
    A700: 04 00 37 00 00 01 05 0C 00 08 00 18 11 5C 05 0D  // ..7..........\..
    A710: 00 FC 7F FF FF 02 00 00 00 01 05 0C 00 40 00 18  // .............@..
    A720: 11 5C 05 0D 00 FF FF 9D FF 00 10 E3 80 01 05 0C  // .\..............
    A730: 00 84 00 18 11 5C 05 0D 00 7F FF FF FF 80 00 00  // .....\..........
    A740: 00 01 05 0C 00 00 01 18 11 5C 05 0D 00 BE 3F FF  // .........\....?.
    A750: FF 40 40 01 00 01 05 0C 00 C0 01 14 11 01 05 0D  // .@@.............
    A760: 00 00 40 00 01 01 05 0C 00 80 02 14 11 5C 05 0D  // ..@..........\..
    A770: 00 0F FF FE DF 10 00 01 60 01 05 0C 00 88 02 14  // ........`.......
    A780: 11 5C 05 0D 00 7F F3 97 FF 86 04 88 DA 01 05 0C  // .\..............
    A790: 00 90 02 14 11 5C 05 0D 00 1B F0 FF FF 20 0D 40  // .....\....... .@
    A7A0: 04 01 05 0C 00 C4 02 14 11 5C 05 0D 00 FF 2D FF  // .........\....-.
    A7B0: FF 80 52 18 96 01 05 0C 00 8C 01 18 11 5C 05 0D  // ..R..........\..
    A7C0: 00 9F FF FF FF 62 00 00 00 01 05 0C 00 EC 02 14  // .....b..........
    A7D0: 11 5C 05 0D 00 FF FF DF FF 10 00 20 8A 01 05 0C  // .\......... ....
    A7E0: 00 40 00 14 11 5C 05 0D 00 FF FF FF FC 09 00 01  // .@...\..........
    A7F0: 02 01 05 0C 00 44 00 18 11 5C 05 0D 00 FF FE FF  // .....D...\......
    A800: C7 0F 00 00 18 01 05 0C 00 C8 B0 00 12 01 05 0D  // ................
    A810: 00 00 00 06 00 5B 4B 00 01 01 04 00 37 00 00 52  // .....[K.....7..R
    A820: 39 02 0D 00 01 03 52 43 02 0D 00 04 03 52 43 02  // 9.....RC.....RC.
    A830: 05 00 01 00 B6 03 52 43 02 05 00 04 00 84 03 52  // ......RC.......R
    A840: 43 02 0D 00 0A 03 52 43 02 0D 00 02 03 52 43 02  // C.....RC.....RC.
    A850: 05 00 02 00 46 05 52 43 66 04 01 A4 50 00 24 00  // ....F.RCf...P.$.
    A860: 5B 00 D2 00 01 01 08 04 37 00 00 03 01 01 00 02  // [.......7.......
    A870: 01 01 00 55 38 01 52 10 01 05 00 00 91 2D 01 00  // ...U8.R......-..
    A880: 01 05 01 00 0F 00 00 80 01 05 00 00 91 2D 01 00  // .............-..
    A890: 3C 05 01 00 0F 00 00 80 49 26 00 66 1C 2D 0C 42  // <.......I&.f.-.B
    A8A0: 0A 00 55 00 01 52 12 02 01 01 00 52 1E 02 05 01  // ..U..R.....R....
    A8B0: 08 00 00 00 52 1F 4C E5 01 20 44 68 00 01 05 00  // ....R.L.. Dh....
    A8C0: 00 4F 5C 01 00 0D 25 01 00 20 02 25 01 FF 52 40  // .O\...%.. .%..R@
    A8D0: 52 3E 03 24 41 1C 00 3E 25 41 00 49 BC 00 52 03  // R>.$A..>%A.I..R.
    A8E0: 01 05 00 00 4F 5C 01 00 03 00 00 01 00 09 05 00  // ....O\..........
    A8F0: C0 00 00 00 02 01 01 00 52 1E 01 05 00 00 4F 5C  // ........R.....O\
    A900: 01 00 5C 22 01 00 3F 00 52 3E 02 8C 01 12 00 3D  // ..\"..?.R>.....=
    A910: 8D 01 00 00 44 BC 00 02 0D 01 02 00 52 43 02 25  // ....D.......RC.%
    A920: 01 0F 52 40 02 25 01 00 52 40 02 01 01 00 55 38  // ..R@.%..R@....U8
    A930: 01 52 3B 5B 4B 00 01 01 00 00 37 00 00 42 21 00  // .R;[K.....7..B!.
    A940: 63 00 1F 00 63 01 39 00 63 03 3F 00 63 02 45 00  // c...c.9.c.?.c.E.
    A950: 5A 5A 5B 03 05 40 00 00 05 04 2D 19 40 00 15 05  // ZZ[..@....-.@...
    A960: 40 02 01 02 0C 00 40 02 00 00 0D 00 5B 02 00 00  // @.....@.....[...
    A970: E3 0D 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D 5B 00  // ..[.....[.....[.
    A980: 2C 03 02 01 08 08 37 00 00 3D 25 00 00 44 4C 00  // ,.....7..=%..DL.
    A990: 66 0B 03 04 00 04 00 15 05 00 0A 03 04 01 04 00  // f...............
    A9A0: 1B 05 01 16 2D 05 01 F4 00 00 00 42 21 00 63 01  // ....-......B!.c.
    A9B0: CA 00 63 02 1D 02 63 03 86 02 63 04 82 00 63 05  // ..c...c...c...c.
    A9C0: A7 00 63 06 96 00 5A 5A 55 38 00 5B 01 05 00 00  // ..c...ZZU8.[....
    A9D0: 61 60 01 00 3C E5 01 00 80 49 54 00 01 05 00 00  // a`..<....IT.....
    A9E0: 62 60 01 00 01 01 01 00 01 56 00 40 03 A9 40 00  // b`.......V.@..@.
    A9F0: 01 05 00 00 61 60 01 00 01 02 01 00 40 02 E5 00  // ....a`......@...
    AA00: 01 5B 01 05 00 00 65 60 01 00 4A 25 01 00 01 44  // .[....e`..J%...D
    AA10: 7D 00 55 38 00 5B 01 05 00 00 61 60 01 00 3C E5  // }.U8.[....a`..<.
    AA20: 01 00 80 49 9E 00 5B 01 05 00 00 80 60 01 00 01  // ...I..[.....`...
    AA30: 05 01 00 00 00 03 00 01 05 00 00 80 60 01 00 4A  // ............`..J
    AA40: E5 01 00 80 44 B7 00 43 7D 00 56 00 46 01 05 00  // ....D..C}.V.F...
    AA50: 00 91 60 01 00 03 00 40 01 00 50 02 01 05 00 00  // ..`....@..P.....
    AA60: 91 60 01 00 3C 02 01 00 40 49 00 01 2D 05 46 01  // .`..<...@I..-.F.
    AA70: 00 00 00 3E 05 46 D0 07 00 00 45 CD 00 43 48 00  // ...>.F....E..CH.
    AA80: 03 05 46 00 00 00 00 03 02 40 00 2D 05 40 00 10  // ..F......@.-.@..
    AA90: 00 00 04 02 00 40 04 02 01 01 04 05 02 00 10 00  // .....@..........
    AAA0: 00 03 02 40 00 2D 05 40 00 50 00 00 04 02 03 40  // ...@.-.@.P.....@
    AAB0: 04 02 04 01 04 05 05 78 56 34 12 57 00 06 57 00  // .......xV4.W..W.
    AAC0: 07 57 00 08 57 00 09 57 00 0A 57 00 0B 57 00 0C  // .W..W..W..W..W..
    AAD0: 57 00 0D 57 00 0E 57 00 0F 2D 05 46 40 00 00 00  // W..W..W..-.F@...
    AAE0: 3E 05 46 00 04 00 00 45 07 01 03 05 46 00 17 00  // >.F....E....F...
    AAF0: 00 57 00 00 02 02 02 00 2C 05 02 00 17 00 00 02  // .W......,.......
    AB00: 02 03 00 2C 05 03 00 10 00 00 02 05 04 00 00 00  // ...,............
    AB10: 00 03 02 40 01 33 05 40 F4 00 00 00 02 22 04 40  // ...@.3.@.....".@
    AB20: 02 A2 04 40 02 05 05 00 04 00 D0 52 35 01 05 00  // ...@.......R5...
    AB30: 00 81 60 01 00 54 00 01 00 01 05 00 00 82 60 01  // ..`..T........`.
    AB40: 00 54 00 01 00 03 05 40 00 00 00 00 2D 02 40 00  // .T.....@....-.@.
    AB50: 01 05 00 00 85 60 01 00 01 02 01 00 40 01 05 00  // .....`......@...
    AB60: 00 86 60 01 00 01 02 01 00 01 01 05 00 00 87 60  // ..`............`
    AB70: 01 00 01 05 01 00 00 10 00 00 01 05 00 00 80 60  // ...............`
    AB80: 01 00 01 05 01 00 00 00 02 00 01 05 00 00 80 60  // ...............`
    AB90: 01 00 4A E5 01 00 80 44 0A 02 43 7D 00 66 09 3E  // ..J....D..C}.f.>
    ABA0: 0D 42 00 00 44 81 00 03 0C 40 00 00 2D 0A 40 42  // .B..D....@..-.@B
    ABB0: 2D 0D 42 24 00 3D 64 00 00 00 44 4C 02 2D 0D 42  // -.B$.=d...DL.-.B
    ABC0: 10 00 3E 0A 42 40 45 35 02 43 48 00 02 04 02 08  // ..>.B@E5.CH.....
    ABD0: 00 02 05 03 00 00 E0 0F 2C 04 03 08 00 02 05 04  // ........,.......
    ABE0: 00 02 00 00 02 05 05 00 00 00 54 2C 04 05 04 00  // ..........T,....
    ABF0: 52 35 02 05 01 00 00 E0 0F 2C 04 01 08 00 55 00  // R5.......,....U.
    AC00: 02 02 04 03 04 00 03 05 46 00 50 00 00 57 00 00  // ........F.P..W..
    AC10: 03 05 46 00 10 00 00 04 05 00 00 04 00 00 04 05  // ..F.............
    AC20: 01 01 00 00 00 04 05 02 06 00 00 00 04 01 07 01  // ................
    AC30: 03 01 40 02 2D 05 40 F4 00 00 00 04 02 08 40 04  // ..@.-.@.......@.
    AC40: 01 09 03 56 00 40 03 31 40 00 04 02 0A 40 03 05  // ...V.@.1@....@..
    AC50: 46 00 50 00 00 04 05 00 00 00 00 00 01 05 00 00  // F.P.............
    AC60: 80 60 01 00 3C 05 01 00 FF FF FF FF 44 48 00 01  // .`..<.......DH..
    AC70: 05 00 00 83 60 01 00 03 00 40 01 00 2D 05 40 10  // ....`....@..-.@.
    AC80: 00 00 00 3E 05 40 00 01 00 00 45 13 03 56 00 40  // ...>.@....E..V.@
    AC90: 44 48 00 01 02 01 00 40 03 05 46 00 50 00 00 3F  // DH.....@..F.P..?
    ACA0: 05 00 78 56 34 12 49 1F 03 43 7D 00 7F 04 01 01  // ..xV4.I..C}.....
    ACB0: 00 00 37 00 00 02 05 00 01 00 00 00 52 06 01 05  // ..7.........R...
    ACC0: 00 00 6E A0 01 00 01 05 01 00 03 00 00 00 01 05  // ..n.............
    ACD0: 00 00 EE A0 01 00 01 05 01 00 03 00 00 00 01 05  // ................
    ACE0: 80 29 00 F4 00 00 01 05 00 00 2C A8 01 00 01 05  // .)........,.....
    ACF0: 01 00 00 F4 00 00 1A 0D 00 04 2C 05 00 FF F3 00  // ..........,.....
    AD00: 00 01 01 81 29 00 01 05 00 00 2D A8 01 00 01 01  // ....).....-.....
    AD10: 01 00 00 01 05 85 29 00 00 3D 00 01 05 00 00 31  // ......)..=.....1
    AD20: A8 01 00 01 05 01 00 00 00 3D 00 14 05 00 06 0E  // .........=......
    AD30: 0D 00 3F 00 01 01 86 29 00 01 05 00 00 32 A8 01  // ..?....).....2..
    AD40: 00 01 01 01 00 00 01 05 ED 2A 80 3F 3F 3F 01 05  // .........*.???..
    AD50: EE 2A 00 10 20 10 01 05 EF 2A 40 00 00 00 01 05  // .*.. ....*@.....
    AD60: F0 2A 40 10 04 0D 01 05 F1 2A 00 00 00 80 01 05  // .*@......*......
    AD70: 08 2A FF FF DB 06 01 05 09 2A FF FF DB 06 01 05  // .*.......*......
    AD80: E9 2A FF 07 00 00 01 05 F5 2A F0 BF E0 0D 01 0D  // .*.......*......
    AD90: E7 2A 7F 40 01 05 50 28 EB 0F E4 60 01 05 00 00  // .*.@..P(...`....
    ADA0: 90 A6 01 00 01 05 01 00 EB 0F E4 60 66 FF 2D 0D  // ...........`f.-.
    ADB0: 42 C3 02 03 04 40 00 00 3E 05 40 00 00 00 00 44  // B....@..>.@....D
    ADC0: 2A 01 01 04 00 00 00 00 01 04 01 00 04 00 2D 0D  // *.............-.
    ADD0: 42 08 00 43 07 01 03 00 46 10 74 01 05 10 74 01  // B..C....F.t...t.
    ADE0: 00 10 00 66 FF 2D 0D 42 0F 02 03 04 40 00 00 3E  // ...f.-.B....@..>
    ADF0: 05 40 00 00 00 00 44 91 01 01 04 00 00 00 00 03  // .@....D.........
    AE00: 00 41 01 00 03 04 40 04 00 01 02 00 00 40 01 02  // .A....@......@..
    AE10: 01 00 41 2D 05 40 00 77 01 00 01 02 00 00 40 01  // ..A-.@.w......@.
    AE20: 02 01 00 41 2D 05 40 40 01 00 00 01 02 00 00 40  // ...A-.@@.......@
    AE30: 01 02 01 00 41 2D 0D 42 08 00 43 3E 01 01 02 10  // ....A-.B..C>....
    AE40: 74 46 01 05 00 00 4F 5C 01 00 4A 65 01 00 10 44  // tF....O\..Je...D
    AE50: CB 01 0D 25 43 2A 01 01 05 00 00 43 A1 01 00 5C  // ...%C*.....C...\
    AE60: 0D 01 00 FF 0F 01 00 01 05 00 00 83 A2 01 00 5C  // ...............\
    AE70: 0D 01 00 FF 0F 01 00 03 05 40 08 00 00 00 01 05  // .........@......
    AE80: 00 00 4F 5C 01 00 4A 65 01 00 08 44 E6 01 0F 65  // ..O\..Je...D...e
    AE90: 40 01 5C 4A 42 2A E3 FE 40 01 05 00 00 42 A1 01  // @.\JB*..@....B..
    AEA0: 00 5C 4A 01 00 E3 FE 40 01 05 00 00 82 A2 01 00  // .\J....@........
    AEB0: 5C 4A 01 00 E3 FE 40 5B 7A 70 02 44 70 00 00 32  // \J....@[zp.Dp..2
    AEC0: 2A 00 00 45 70 00 00 33 2A 00 00 00 40 01 00 58  // *..Ep..3*...@..X
    AED0: 2A 00 00 01 40 01 00 59 2A 00 00 04 40 01 00 5C  // *...@..Y*...@..\
    AEE0: 2A 00 00 05 40 01 00 5D 2A 00 00 08 40 01 00 60  // *...@..]*...@..`
    AEF0: 2A 00 00 0A 40 01 00 62 2A 00 00 0C 40 01 00 64  // *...@..b*...@..d
    AF00: 2A 00 00 10 40 01 00 66 2A 00 00 14 40 01 00 68  // *...@..f*...@..h
    AF10: 2A 00 00 15 40 01 00 6A 2A 00 00 1C 40 01 00 6C  // *...@..j*...@..l
    AF20: 2A 00 00 1E 40 01 00 6E 2A 00 00 32 40 01 00 44  // *...@..n*..2@..D
    AF30: 2A 00 00 33 40 01 00 45 2A 00 00 34 40 01 00 46  // *..3@..E*..4@..F
    AF40: 2A 00 00 35 40 01 00 47 2A 00 00 36 40 01 00 48  // *..5@..G*..6@..H
    AF50: 2A 00 00 38 40 01 00 49 2A 00 00 39 40 01 00 4A  // *..8@..I*..9@..J
    AF60: 2A 00 00 3A 40 01 00 4B 2A 00 00 00 00 00 00 00  // *..:@..K*.......
    AF70: A0 01 00 F9 E0 5F FE 01 A0 01 00 F8 E0 5F FE 02  // ....._......._..
    AF80: A0 01 00 F8 E0 5F FE 03 A0 01 00 FA E0 5F FE 0E  // ....._......._..
    AF90: A0 01 00 F9 E0 5F FE 0F A0 01 00 F9 E0 5F FE 2C  // ....._......._.,
    AFA0: A0 01 00 F9 E0 5F FE 2D A0 01 00 F8 E0 5F FE 2E  // ....._.-....._..
    AFB0: A0 01 00 F8 E0 5F FE 2F A0 01 00 F9 E0 5F FE 30  // ....._./....._.0
    AFC0: A0 01 00 FA E0 5F FE 31 A0 01 00 F9 E0 5F FE 3B  // ....._.1....._.;
    AFD0: A0 01 00 F9 E0 5F FE 9D A0 01 00 81 F0 2F FF A0  // ....._......./..
    AFE0: A0 01 00 81 F0 2F FF 80 A0 01 00 F8 E0 5F FE 81  // ...../......._..
    AFF0: A0 01 00 F8 E0 5F FE 82 A0 01 00 F8 E0 5F FE 83  // ....._......._..
    B000: A0 01 00 F9 E0 5F FE 84 A0 01 00 F9 E0 5F FE 8D  // ....._......._..
    B010: A0 01 00 F0 E0 5F FE 8E A0 01 00 F9 E0 5F FE AC  // ....._......._..
    B020: A0 01 00 F8 E0 5F FE AD A0 01 00 F8 E0 5F FE AE  // ....._......._..
    B030: A0 01 00 F8 E0 5F FE AF A0 01 00 F9 E0 5F FE B0  // ....._......._..
    B040: A0 01 00 F8 E0 5F FE B1 A0 01 00 F9 E0 5F FE B2  // ....._......._..
    B050: A0 01 00 F9 E0 5F FE BA A0 01 00 F9 E0 5F FE 24  // ....._......._.$
    B060: A0 01 00 08 04 E1 03 57 A0 01 00 70 60 58 50 D7  // .......W...p`XP.
    B070: A0 01 00 70 60 58 50 ED A1 01 00 BF 3F 3F 00 2D  // ...p`XP.....??.-
    B080: A3 01 00 BF 3F 3F 00 EE A1 01 00 01 00 00 00 F0  // ....??..........
    B090: A1 01 00 01 00 00 00 F2 A1 01 00 01 00 00 00 2E  // ................
    B0A0: A3 01 00 01 00 00 00 30 A3 01 00 01 00 00 00 32  // .......0.......2
    B0B0: A3 01 00 01 00 00 00 F1 A1 01 00 01 00 00 80 F3  // ................
    B0C0: A1 01 00 01 00 00 80 31 A3 01 00 01 00 00 80 33  // .......1.......3
    B0D0: A3 01 00 01 00 00 80 00 A1 01 00 81 55 55 55 02  // ............UUU.
    B0E0: A1 01 00 41 56 55 55 40 A2 01 00 40 55 55 51 42  // ...AVUU@...@UUQB
    B0F0: A2 01 00 40 54 55 55 EA A1 01 00 00 00 00 00 2A  // ...@TUU........*
    B100: A3 01 00 00 00 00 00 E7 A1 01 00 7F 40 1C 00 27  // ............@..'
    B110: A3 01 00 7F 40 1C 00 91 A3 01 00 00 08 01 00 9A  // ....@...........
    B120: A3 01 00 00 08 01 00 00 00 00 00 00 17 00 02 01  // ................
    B130: 00 00 01 05 60 0F 00 00 00 F4 01 05 62 0F 00 00  // ....`.......b...
    B140: 00 00 5B 00 12 00 02 01 00 00 37 00 00 01 05 10  // ..[.......7.....
    B150: 0D 10 48 D1 0F 5B 8E 00 01 01 04 00 37 00 00 01  // ..H..[......7...
    B160: 05 0C 00 40 10 41 01 01 05 0D 00 81 00 00 00 01  // ...@.A..........
    B170: 05 0C 00 10 03 41 01 01 05 0D 00 81 00 00 00 01  // .....A..........
    B180: 05 0C 00 60 04 18 11 5C 05 0D 00 B9 FF FF FF 46  // ...`...\.......F
    B190: 3E 80 00 01 05 0C 00 5C A0 13 10 5C 05 0D 00 FE  // >......\...\....
    B1A0: FF FF FF 81 00 00 00 01 05 0C 00 00 00 41 01 01  // .............A..
    B1B0: 05 0D 00 00 00 00 80 01 05 0C 00 60 A0 13 10 01  // ...........`....
    B1C0: 05 0D 00 00 00 00 01 52 0E 32 05 00 10 00 00 00  // .......R.2......
    B1D0: 01 01 E3 0D 00 1A 05 00 0B 01 01 06 00 00 0D 25  // ...............%
    B1E0: 1F 0E 03 5B A5 02 01 01 08 00 37 00 00 66 FF 2D  // ...[......7..f.-
    B1F0: 0D 42 21 02 03 04 40 00 00 3E 05 40 00 00 00 00  // .B!...@..>.@....
    B200: 44 33 00 01 04 00 00 00 00 01 04 01 00 04 00 2D  // D3.............-
    B210: 0D 42 08 00 43 10 00 02 05 00 C7 1E 00 01 52 45  // .B..C.........RE
    B220: 4B 25 00 01 44 3A 01 02 05 00 E6 1E 00 0B 52 45  // K%..D:........RE
    B230: 14 05 00 15 01 05 00 00 5C 66 01 00 5C 99 01 00  // ........\f..\...
    B240: 1F 00 00 02 05 00 C8 1E 00 0C 52 45 03 01 00 00  // ..........RE....
    B250: 02 05 00 D5 1E 00 06 52 45 14 05 00 0C 0F 01 00  // .......RE.......
    B260: 00 02 05 00 DB 1E 00 0B 52 45 14 05 00 12 0F 01  // ........RE......
    B270: 00 00 02 05 00 D4 1E 00 01 52 45 14 05 00 1D 0F  // .........RE.....
    B280: 01 00 00 01 05 00 00 5D 66 01 00 01 02 01 00 00  // .......]f.......
    B290: 02 05 00 B7 1E 00 08 52 45 14 05 00 01 01 05 00  // .......RE.......
    B2A0: 00 2E 66 01 00 5C 09 01 00 01 FE 00 02 05 00 BF  // ..f..\..........
    B2B0: 1E 00 08 52 45 14 05 00 01 01 05 00 00 52 66 01  // ...RE........Rf.
    B2C0: 00 5C 09 01 00 01 FE 00 02 05 00 F1 1E 00 0B 52  // .\.............R
    B2D0: 45 03 01 00 00 02 05 00 07 1F 00 07 52 45 14 05  // E...........RE..
    B2E0: 00 0B 0F 01 00 00 01 05 00 00 5E 66 01 00 01 02  // ..........^f....
    B2F0: 01 00 00 02 05 00 FC 1E 00 0B 52 45 03 01 00 00  // ..........RE....
    B300: 02 05 00 0E 1F 00 07 52 45 14 05 00 0B 0F 01 00  // .......RE.......
    B310: 00 01 05 00 00 5F 66 01 00 01 02 01 00 00 01 05  // ....._f.........
    B320: 00 00 00 66 01 00 03 00 00 01 00 5C A5 01 00 FC  // ...f.......\....
    B330: 02 01 05 00 00 02 66 01 00 5C 0D 01 00 3F C0 00  // ......f..\...?..
    B340: 23 1B 05 00 10 09 25 00 03 01 05 00 00 00 66 01  // #.....%.......f.
    B350: 00 5C A2 01 00 FC 00 01 05 00 00 F8 74 01 00 03  // .\..........t...
    B360: 00 00 01 00 15 05 00 02 09 8D 00 7F 00 15 1D 00  // ................
    B370: 03 1B 0D 00 09 15 0D 00 03 01 05 00 00 5E 66 01  // .............^f.
    B380: 00 5C 4A 01 00 07 FC 00 01 05 00 00 5F 66 01 00  // .\J........._f..
    B390: 5C 5A 01 00 07 FC 00 01 05 00 00 2F 66 01 00 3C  // \Z........./f..<
    B3A0: 05 01 00 00 00 00 00 44 E8 01 01 05 00 00 6F 66  // .......D......of
    B3B0: 01 00 0D 25 01 00 01 4A 25 01 00 10 44 D3 01 07  // ...%...J%...D...
    B3C0: 25 01 00 FE 4A 25 01 00 10 49 E0 01 01 05 00 00  // %...J%...I......
    B3D0: 53 66 01 00 3C 05 01 00 00 00 00 00 44 1D 02 01  // Sf..<.......D...
    B3E0: 05 00 00 6F 66 01 00 0D 25 01 00 02 4A 25 01 00  // ...of...%...J%..
    B3F0: 20 44 08 02 07 25 01 00 FD 4A 25 01 00 20 49 15  //  D...%...J%.. I.
    B400: 02 5B 7A 84 00 62 66 01 00 96 43 81 01 63 66 01  // .[z..bf...C..cf.
    B410: 00 87 25 09 00 64 66 01 00 35 14 BF 02 59 66 01  // ..%..df..5...Yf.
    B420: 00 01 00 00 00 6B 66 01 00 01 80 00 00 65 66 01  // .....kf......ef.
    B430: 00 01 80 00 00 9F 66 01 00 5C 4F 8A 02 A0 66 01  // ......f..\O...f.
    B440: 00 27 69 03 08 A1 66 01 00 48 E5 21 00 0B 66 01  // .'i...f..H.!..f.
    B450: 00 78 00 FF EF 5C 66 01 00 45 00 40 B5 5D 66 01  // .x...\f..E.@.]f.
    B460: 00 02 68 BC 31 2E 66 01 00 00 21 00 00 52 66 01  // ..h.1.f...!..Rf.
    B470: 00 00 21 00 00 5E 66 01 00 00 00 00 00 5F 66 01  // ..!..^f......_f.
    B480: 00 00 00 00 00 00 00 00 00 00 CA 00 02 01 04 04  // ................
    B490: 37 00 00 66 0C 03 0C 41 00 00 2D 0A 41 42 2D 0D  // 7..f...A..-.AB-.
    B4A0: 42 04 00 3D 24 00 06 00 44 31 00 2D 0D 42 08 00  // B..=$...D1.-.B..
    B4B0: 3E 0A 42 41 45 19 00 55 20 00 5B 56 00 43 03 24  // >.BAE..U .[V.C.$
    B4C0: 43 05 00 03 04 46 00 00 33 05 46 01 00 00 00 01  // C....F..3.F.....
    B4D0: 02 00 00 46 03 00 00 01 00 0D 02 01 00 44 2D 05  // ...F.........D-.
    B4E0: 46 02 00 00 00 01 02 00 00 46 03 24 43 04 00 4B  // F........F.$C..K
    B4F0: E5 00 01 49 AA 00 07 02 01 00 45 2D 05 46 01 00  // ...I......E-.F..
    B500: 00 00 01 02 00 00 46 4A 02 01 00 44 44 90 00 03  // ......FJ...DD...
    B510: 29 43 00 0E A2 00 44 43 98 00 03 29 43 00 08 A2  // )C....DC...)C...
    B520: 00 45 33 05 46 03 00 00 00 01 02 00 00 46 01 02  // .E3.F........F..
    B530: 01 00 00 5B 0D 02 01 00 44 01 04 00 00 00 00 3D  // ...[....D......=
    B540: A5 00 01 44 C4 00 07 02 01 00 45 43 C9 00 0D 02  // ...D......EC....
    B550: 01 00 44 5B 32 00 02 01 04 04 37 00 00 02 01 01  // ..D[2.....7.....
    B560: 00 02 E5 01 01 52 3C 01 05 00 00 15 7E 01 00 01  // .....R<.....~...
    B570: 01 01 00 02 51 C8 01 05 00 00 41 7E 01 00 01 39  // ....Q.....A~...9
    B580: 01 00 01 51 0A 5B 29 00 01 01 00 04 37 00 00 02  // ...Q.[).....7...
    B590: 25 01 01 52 40 02 01 01 00 52 10 02 01 01 00 02  // %..R@....R......
    B5A0: E5 01 03 55 00 02 52 3F 02 25 01 02 52 40 5B 00  // ...U..R?.%..R@[.
    B5B0: 5D 05 01 07 0C 08 37 00 00 3D 25 01 FF 44 33 05  // ].....7..=%..D3.
    B5C0: 3D 25 01 19 46 2F 05 3D 25 01 02 47 2F 05 3D 25  // =%..F/.=%..G/.=%
    B5D0: 01 14 45 33 05 3D 05 00 00 00 00 00 44 DE 02 66  // ..E3.=......D..f
    B5E0: 1B 56 00 02 3D A5 01 02 49 48 00 03 0C 40 10 00  // .V..=...IH...@..
    B5F0: 21 0D 40 14 00 43 61 00 3D A5 01 03 49 5C 00 03  // !.@..Ca.=...I\..
    B600: 0C 40 14 00 21 0D 40 14 00 43 61 00 03 0C 40 18  // .@..!.@..Ca...@.
    B610: 00 3E 0D 40 00 00 44 70 00 03 0A 02 40 43 74 00  // .>.@..Dp....@Ct.
    B620: 0E E5 01 80 4B E5 01 02 49 A2 00 02 A9 02 02 55  // ....K...I......U
    B630: 28 02 3D 05 00 40 4B 4C 00 45 A2 00 0D A5 58 62  // (.=..@KL.E....Xb
    B640: 40 03 21 41 01 33 25 41 14 03 22 43 41 0D E2 FF  // @.!A.3%A.."CA...
    B650: 55 44 66 FF 2D 0D 42 49 05 03 39 40 01 09 0D 40  // UDf.-.BI..9@...@
    B660: 30 00 1B 0D 40 04 21 0D 40 05 00 2D 0A 42 40 03  // 0...@.!.@..-.B@.
    B670: 04 40 00 00 27 05 40 10 27 00 00 02 A2 03 40 02  // .@..'.@.'.....@.
    B680: E4 03 04 00 56 00 00 56 00 01 02 0D 03 40 01 02  // ....V..V.....@..
    B690: 65 01 01 20 05 00 0A 00 00 00 03 02 46 40 3D 05  // e.. ........F@=.
    B6A0: 00 80 8D 5B 00 47 0A 01 3D A5 03 64 45 03 01 02  // ...[.G..=..dE...
    B6B0: 65 03 03 0E E5 01 08 55 28 01 4B E5 01 08 44 15  // e......U(.K...D.
    B6C0: 01 1B 05 46 01 3E 05 46 A0 2F C5 01 48 2A 01 2C  // ...F.>.F./..H*.,
    B6D0: 65 01 01 15 05 46 01 43 15 01 14 2D 01 05 3D A5  // e....F.C...-..=.
    B6E0: 01 00 44 4B 01 4B E5 01 80 49 4B 01 3D A5 03 64  // ..DK.K...IK.=..d
    B6F0: 45 4B 01 0E 25 03 01 15 05 46 01 03 05 01 00 00  // EK..%....F......
    B700: 01 00 4B E5 01 80 44 AD 01 27 04 46 00 00 3E 05  // ..K...D..'.F..>.
    B710: 41 00 00 00 00 44 BF 01 03 04 40 00 00 03 02 00  // A....D....@.....
    B720: 41 27 02 40 41 03 02 40 00 3E 05 41 00 00 00 00  // A'.@A..@.>.A....
    B730: 49 6D 01 7C 05 00 00 00 01 00 7E 04 40 00 00 7C  // Im.|......~.@..|
    B740: 04 40 00 00 7E 02 40 00 03 02 01 40 3E 05 01 33  // .@..~.@....@>..3
    B750: F3 00 00 48 AD 01 03 05 01 00 00 01 00 27 04 46  // ...H.........'.F
    B760: 00 00 7C 02 01 41 7E 04 40 00 00 03 0A 00 40 27  // ..|..A~.@.....@'
    B770: 04 46 00 00 03 8A 00 40 56 18 01 4B E5 01 80 49  // .F.....@V..K...I
    B780: 4A 02 7C 02 02 00 7E 05 40 A0 86 01 00 03 01 41  // J.|...~.@......A
    B790: 03 09 05 41 03 00 00 00 6F 02 40 41 7C 05 40 4E  // ...A....o.@A|.@N
    B7A0: 0C 00 00 7E 04 40 00 00 27 05 40 05 00 00 00 3E  // ...~.@..'.@....>
    B7B0: 05 40 00 00 00 00 49 0D 02 03 25 40 01 03 8A 01  // .@....I...%@....
    B7C0: 40 21 05 40 05 00 00 00 7C 04 40 00 00 7E 05 40  // @!.@....|.@..~.@
    B7D0: 4E 0C 00 00 03 01 41 03 09 05 41 03 00 00 00 75  // N.....A...A....u
    B7E0: 02 40 41 3D A5 01 00 44 42 02 1B 05 40 01 2D 02  // .@A=...DB...@.-.
    B7F0: 00 40 03 02 02 00 33 02 02 40 66 FF 2D 0D 42 3D  // .@....3..@f.-.B=
    B800: 05 56 00 40 03 21 40 01 33 25 40 14 15 25 40 01  // .V.@.!@.3%@..%@.
    B810: 2D 0A 42 40 03 0C 48 00 00 4A 65 20 56 10 44 99  // -.B@..H..Je V.D.
    B820: 03 03 39 41 01 09 0D 41 30 00 1B 0D 41 04 3C 22  // ..9A...A0...A.<"
    B830: 9C 56 41 49 BD 02 3C 21 61 56 03 49 BD 02 3C 29  // .VAI..<!aV.I..<)
    B840: 63 56 03 49 BD 02 03 20 41 9D 56 09 25 41 E0 3E  // cV.I... A.V.%A.>
    B850: 29 41 01 49 BD 02 4B E5 01 40 49 91 03 3C 02 5E  // )A.I..K..@I..<.^
    B860: 56 00 49 BD 02 3C 0A 60 56 01 44 C1 02 0E E5 01  // V.I..<.`V.D.....
    B870: 01 3A 00 00 4B E5 01 01 44 07 05 4B E5 01 02 49  // .:..K...D..K...I
    B880: DE 02 3D 25 02 05 46 DE 02 55 28 02 52 23 56 00  // ..=%..F..U(.R#V.
    B890: 40 03 21 40 01 33 25 40 14 03 0A 48 40 07 25 60  // @.!@.3%@...H@.%`
    B8A0: 01 FE 66 FF 2D 0D 42 3D 05 56 00 40 03 21 40 01  // ..f.-.B=.V.@.!@.
    B8B0: 33 25 40 14 15 25 40 01 2D 0A 42 40 03 0C 48 00  // 3%@..%@.-.B@..H.
    B8C0: 00 07 65 61 56 FE 54 00 5F 56 54 00 60 56 07 65  // ..eaV.T._VT.`V.e
    B8D0: 20 56 EF 4A 65 20 56 20 49 23 03 07 65 30 56 EF  //  V.Je V I#..e0V.
    B8E0: 4A 65 30 56 20 49 30 03 3D 05 00 00 00 00 00 49  // Je0V I0.=......I
    B8F0: 99 03 4A A5 FF 55 80 44 6D 03 56 00 41 5C 25 1E  // ..J..U.Dm.V.A\%.
    B900: 56 F8 06 51 02 4A 65 1E 56 01 44 55 03 2D A5 41  // V..Q.Je.V.DU.-.A
    B910: 01 2D 0D 48 10 00 3E A5 41 04 45 4D 03 56 08 48  // .-.H..>.A.EM.V.H
    B920: 03 21 41 01 33 25 41 14 03 22 43 41 07 E2 FF 55  // .!A.3%A.."CA...U
    B930: 45 4A E5 FF 55 3F 49 2F 05 07 A5 58 62 BF 43 2F  // EJ..U?I/...Xb.C/
    B940: 05 01 02 5E 56 00 43 C3 04 01 05 19 56 80 88 01  // ...^V.C.....V...
    B950: 00 3D A5 01 00 49 BA 03 3D 05 00 E0 3B 66 00 45  // .=...I..=...;f.E
    B960: BA 03 07 25 1A 56 FE 43 DA 03 0D 25 1A 56 01 3D  // ...%.V.C...%.V.=
    B970: A5 01 02 49 DA 03 4B E5 01 08 44 DA 03 01 05 E1  // ...I..K...D.....
    B980: 56 80 88 01 00 0D 25 E2 56 01 0D 25 9D 56 01 03  // V.....%.V..%.V..
    B990: 39 40 01 09 0D 40 30 00 1B 0D 40 04 01 22 9C 56  // 9@...@0...@..".V
    B9A0: 40 0D 65 9D 56 80 5C 79 9D 56 FB 03 56 00 40 03  // @.e.V.\y.V..V.@.
    B9B0: 31 40 03 03 01 41 03 09 05 41 03 00 00 00 75 02  // 1@...A...A....u.
    B9C0: 40 41 03 05 41 A1 83 00 00 3E 25 40 64 48 35 04  // @A..A....>%@dH5.
    B9D0: 03 05 41 24 83 00 00 3E 25 40 30 48 35 04 03 05  // ..A$...>%@0H5...
    B9E0: 41 A3 76 00 00 01 0A 62 56 41 01 E2 64 56 40 0D  // A.v....bVA..dV@.
    B9F0: 25 64 56 02 01 21 61 56 03 01 A5 61 56 E8 01 02  // %dV..!aV...aV...
    BA00: 5E 56 00 54 00 5F 56 01 02 60 56 01 4B E5 01 08  // ^V.T._V..`V.K...
    BA10: 44 6B 04 07 65 9D 56 FE 43 70 04 0D 65 9D 56 01  // Dk..e.V.Cp..e.V.
    BA20: 5C 29 9D 56 1F 01 01 8D 69 56 20 03 01 29 63 56  // \).V....iV ..)cV
    BA30: 03 07 65 9D 56 7F 5C 65 20 56 E3 04 4A 65 20 56  // ..e.V.\e V..Je V
    BA40: 20 49 8C 04 0D 65 20 56 10 4A 65 20 56 20 44 99  //  I...e V.Je V D.
    BA50: 04 4B E5 01 02 49 C3 04 5C 65 30 56 E3 04 4A 65  // .K...I..\e0V..Je
    BA60: 30 56 20 49 AE 04 0D 65 30 56 10 4A 65 30 56 20  // 0V I...e0V.Je0V 
    BA70: 44 BB 04 4B E5 01 80 49 D6 04 01 02 5F 56 02 0D  // D..K...I...._V..
    BA80: 65 61 56 01 51 0A 0D 65 9D 56 40 51 0A 4A 65 9D  // eaV.Q..e.V@Q.Je.
    BA90: 56 20 44 DD 04 07 65 9D 56 BF 56 00 40 03 21 40  // V D...e.V.V.@.!@
    BAA0: 01 33 25 40 14 03 0A 48 40 0D 25 60 01 01 51 0A  // .3%@...H@.%`..Q.
    BAB0: 4B E5 01 02 49 2F 05 3A 00 00 3D 25 02 05 46 2F  // K...I/.:..=%..F/
    BAC0: 05 02 25 03 02 02 E1 03 02 02 61 03 01 02 B9 03  // ..%.......a.....
    BAD0: 01 08 A5 03 04 0E B1 03 02 02 01 02 00 52 2E 3A  // .............R.:
    BAE0: 00 00 5B 02 25 01 0B 43 07 05 7A 20 00 00 00 C8  // ..[.%..C..z ....
    BAF0: 00 90 01 58 02 20 03 E8 03 B0 1E 04 00 04 40 42  // ...X. ........@B
    BB00: 0F 00 04 B0 1E 04 00 00 40 42 0F 00 04 00 AC 00  // ........@B......
    BB10: 02 01 00 00 37 00 00 3D 65 00 01 44 AB 00 56 08  // ....7..=e..D..V.
    BB20: 48 03 21 48 00 01 0D 88 35 02 00 52 14 01 05 93  // H.!H....5..R....
    BB30: 3A 00 00 40 00 01 25 CF 3B 02 01 A5 E6 3A C0 01  // :..@..%.;....:..
    BB40: 0D 96 3A 45 01 5C 05 F4 3A F0 FF FF FF 02 00 00  // ..:E.\..:.......
    BB50: 00 07 25 1D 3B FB 0D 25 83 3A 01 5C 05 3C 3B 88  // ..%.;..%.:.\.<;.
    BB60: 08 F8 FF 00 00 08 00 01 05 41 3B 03 80 FF FF 01  // .........A;.....
    BB70: 25 42 3B 11 01 0D 3D 3B FF 7F 01 05 3E 3B FF 7F  // %B;...=;....>;..
    BB80: 00 00 01 05 C6 3B 07 40 00 00 0D A5 C9 3B 01 01  // .....;.@.....;..
    BB90: 05 3B 3B 00 08 00 04 01 0D 99 3B 04 00 5C 05 1A  // .;;.......;..\..
    BBA0: 3B FF FF FD FF 00 00 02 00 5C 05 DB 3A 00 E0 FF  // ;........\..:...
    BBB0: FF 04 14 00 00 3A 00 00 5B 5B 31 01 02 01 00 04  // .....:..[[1.....
    BBC0: 37 00 00 3D 65 00 02 44 EE 00 3D 65 00 07 44 1E  // 7..=e..D..=e..D.
    BBD0: 00 02 01 01 00 52 17 5B 5C 05 84 35 FF 00 FE 9F  // .....R.[\..5....
    BBE0: 04 2C 01 20 01 05 A2 35 00 0F 00 20 01 05 3B 01  // .,. ...5... ..;.
    BBF0: 1B 02 12 00 01 05 30 01 78 69 10 00 01 05 87 35  // ......0.xi.....5
    BC00: AD 90 02 00 01 8D 7D 39 1B 00 01 25 7C 39 01 01  // ......}9...%|9..
    BC10: 05 31 01 3C 00 01 08 5C 65 D4 00 FC 02 01 05 6D  // .1.<...\e......m
    BC20: 55 00 00 00 00 01 05 42 55 00 00 00 00 01 05 78  // U......BU......x
    BC30: 55 0F 00 00 00 01 05 68 4A 00 00 00 30 01 25 32  // U......hJ...0.%2
    BC40: 01 00 5C 05 3E 35 0F FF FF FF 70 00 00 00 01 05  // ..\.>5....p.....
    BC50: 29 35 08 00 00 00 5C 05 44 35 00 C0 CE 60 08 60  // )5....\.D5...`.`
    BC60: 30 14 55 00 01 52 17 52 23 2C 25 01 01 3D 25 01  // 0.U..R.R#,%..=%.
    BC70: 06 45 AB 00 55 00 01 52 4E 02 25 01 07 52 33 02  // .E..U..RN.%..R3.
    BC80: 05 01 00 07 00 00 52 4D 2C 25 01 01 3D 25 01 06  // ......RM,%..=%..
    BC90: 45 CC 00 66 16 03 0C 41 04 00 4C 0D 41 02 00 44  // E..f...A..L.A..D
    BCA0: ED 00 0D A5 4C 00 02 5B 02 05 01 01 00 00 00 52  // ....L..[.......R
    BCB0: 06 03 01 40 01 33 05 40 01 00 00 00 01 05 EB 35  // ...@.3.@.......5
    BCC0: 00 00 00 00 01 02 ED 35 40 1A 0D 01 04 14 05 01  // .......5@.......
    BCD0: 10 2C 05 01 00 F4 FF F3 01 01 E6 35 01 01 25 C9  // .,.........5..%.
    BCE0: 00 F4 01 05 C4 00 00 00 00 00 5B 00 0E 00 02 01  // ..........[.....
    BCF0: 00 00 52 3E 02 04 00 00 00 5B 5C 01 01 01 00 00  // ..R>.....[\.....
    BD00: 37 00 00 02 05 00 00 00 02 00 52 29 03 05 40 40  // 7.........R)..@@
    BD10: 7E 05 00 27 01 40 00 01 05 00 00 15 6C 01 00 01  // ~..'.@......l...
    BD20: 02 01 00 40 50 02 02 05 00 50 C3 00 00 52 3C 01  // ...@P....P...R<.
    BD30: 05 00 00 41 6C 01 00 01 39 01 00 00 02 05 00 00  // ...Al...9.......
    BD40: 77 01 00 52 3C 01 05 00 00 4B 6C 01 00 01 39 01  // w..R<....Kl...9.
    BD50: 00 00 02 05 00 50 C3 00 00 52 3C 01 05 00 00 55  // .....P...R<....U
    BD60: 6C 01 00 01 39 01 00 00 02 05 00 50 C3 00 00 52  // l...9......P...R
    BD70: 3C 01 05 00 00 5F 6C 01 00 01 39 01 00 00 02 05  // <...._l...9.....
    BD80: 00 60 EA 00 00 52 3C 01 05 00 00 69 6C 01 00 01  // .`...R<....il...
    BD90: 39 01 00 00 02 05 00 40 9C 00 00 52 3C 01 05 00  // 9......@...R<...
    BDA0: 00 91 6C 01 00 01 39 01 00 00 01 05 00 00 83 68  // ..l...9........h
    BDB0: 01 00 01 25 01 00 00 01 05 00 00 3D 7E 01 00 5C  // ...%.......=~..\
    BDC0: A5 01 00 FE 00 01 05 00 00 84 68 01 00 01 05 01  // ..........h.....
    BDD0: 00 10 00 00 00 01 05 00 00 06 7F 01 00 01 05 01  // ................
    BDE0: 00 00 00 25 15 01 05 00 00 07 7F 01 00 01 05 01  // ...%............
    BDF0: 00 00 00 FF 00 01 05 00 00 08 7F 01 00 01 05 01  // ................
    BE00: 00 17 03 10 00 01 05 00 00 09 7F 01 00 01 05 01  // ................
    BE10: 00 07 00 00 00 01 05 00 00 0C 7F 01 00 01 05 01  // ................
    BE20: 00 10 00 00 00 01 05 00 00 0D 7F 01 00 01 05 01  // ................
    BE30: 00 00 00 00 20 01 05 00 00 0E 7F 01 00 01 05 01  // .... ...........
    BE40: 00 50 92 82 01 01 05 00 00 30 6B 01 00 01 05 01  // .P.......0k.....
    BE50: 00 1B 04 00 00 5B 07 00 01 01 00 00 5B 00 EE 00  // .....[......[...
    BE60: 01 01 00 04 37 00 00 03 F9 46 00 08 E5 00 7F 03  // ....7....F......
    BE70: 0A 41 42 2D 0D 41 04 00 03 0C 46 00 00 3E 0D 46  // .AB-.A....F..>.F
    BE80: 00 00 44 ED 00 15 0D 46 02 03 0A 42 41 2D 0A 42  // ..D....F...BA-.B
    BE90: 46 56 30 46 03 04 40 00 00 3E 05 40 00 00 00 00  // FV0F..@..>.@....
    BEA0: 44 53 00 3D FA 00 40 44 5F 00 3E A5 46 01 49 6A  // DS.=..@D_.>.F.Ij
    BEB0: 00 33 0A 42 46 33 0D 42 04 00 43 76 00 03 A5 46  // .3.BF3.B..Cv...F
    BEC0: 01 3D 02 00 40 47 76 00 2D 0A 42 46 2D 0D 42 04  // .=..@Gv.-.BF-.B.
    BED0: 00 43 36 00 4C E5 46 80 44 7E 00 5B 2D 0D 42 04  // .C6.L.F.D~.[-.B.
    BEE0: 00 03 8A 46 42 03 0A 42 41 03 04 40 00 00 03 1A  // ...FB..BA..@....
    BEF0: 42 46 4C E5 40 01 49 B8 00 3E 05 40 00 5C 01 00  // BFL.@.I..>.@.\..
    BF00: 48 AA 00 0F 0D 40 00 04 01 02 00 00 40 01 04 01  // H....@......@...
    BF10: 00 00 00 43 D6 00 56 38 40 01 05 00 00 88 5C 01  // ...C..V8@.....\.
    BF20: 00 01 02 01 00 40 01 05 00 00 89 5C 01 00 01 04  // .....@.....\....
    BF30: 01 00 00 00 33 0D 46 04 00 2D 8D 46 04 00 2D 0D  // ....3.F..-.F..-.
    BF40: 41 04 00 3E 0D 46 00 00 49 87 00 5B 8E 00 01 02  // A..>.F..I..[....
    BF50: 00 04 66 FF 56 08 47 2D 0D 42 5C 00 03 21 47 00  // ..f.V.G-.B\..!G.
    BF60: 09 25 47 F0 42 22 47 63 00 43 00 63 80 36 00 63  // .%G.B"Gc.C.c.6.c
    BF70: 60 3E 00 63 20 2E 00 5A 5A 5B 2D 0D 42 26 00 43  // `>.c ..ZZ[-.B&.C
    BF80: 43 00 2D 0D 42 0C 00 43 43 00 2D 0D 42 18 00 03  // C.-.B..CC.-.B...
    BF90: 21 47 00 09 25 47 07 2D 0A 42 47 2D 0A 42 47 03  // !G..%G.-.BG-.BG.
    BFA0: 0C 48 00 00 5B 7A 32 00 00 00 00 02 00 04 00 06  // .H..[z2.........
    BFB0: 00 08 00 0A 00 00 02 00 2C 00 2D 00 2E 00 2F 00  // ........,.-.../.
    BFC0: 00 00 00 01 00 02 00 03 00 04 00 05 00 06 00 00  // ................
    BFD0: C8 00 90 01 58 02 20 03 E8 03 78 00 01 01 00 00  // ....X. ...x.....
    BFE0: 37 00 00 52 14 0D A5 6A 3B 01 54 20 6C 3B 07 25  // 7..R...j;.T l;.%
    BFF0: 5E 3B FE 54 20 5F 3B 42 29 00 63 00 31 00 63 01  // ^;.T _;B).c.1.c.
    C000: 39 00 63 02 4D 00 5A 5A 43 70 00 01 25 5F 3B 02  // 9.c.M.ZZCp..%_;.
    C010: 43 3E 00 01 25 5F 3B 01 54 20 5C 3B 54 00 5D 3B  // C>..%_;.T \;T.];
    C020: 54 00 61 3B 43 70 00 01 0D 5D 3B 01 01 01 05 61  // T.a;Cp...];....a
    C030: 3B 01 00 01 00 0D 65 62 3B 01 0D 65 65 3B 01 01  // ;.....eb;..ee;..
    C040: 0D 6B 3B 10 10 01 25 5C 3B 01 54 30 6A 3B 3A 00  // .k;...%\;.T0j;:.
    C050: 00 5B 74 00 01 01 00 00 37 00 00 4A A5 4E 00 01  // .[t.....7..J.N..
    C060: 44 15 00 02 65 00 01 0E 25 00 80 52 14 03 00 46  // D...e...%..R...F
    C070: CC 00 08 25 00 0F 52 14 54 30 B0 3B 3C 69 B0 3B  // ...%..R.T0.;<i.;
    C080: 00 44 65 00 01 69 B0 3B 00 3D 65 00 00 44 65 00  // .De..i.;.=e..De.
    C090: 4A A5 AF 3B 01 44 65 00 4C 25 46 01 44 69 00 4A  // J..;.De.L%F.Di.J
    C0A0: 25 B6 3B 01 49 4D 00 4A 25 B6 3B 01 44 55 00 4A  // %.;.IM.J%.;.DU.J
    C0B0: 25 B6 3B 01 49 5D 00 3A 00 00 5B 4A 25 B0 3B 01  // %.;.I].:..[J%.;.
    C0C0: 44 69 00 43 65 00 3E 00 01 01 00 00 37 00 00 52  // Di.Ce.>.....7..R
    C0D0: 14 3D 65 00 01 44 30 00 0D 65 AF 3B 03 07 25 AF  // .=e..D0..e.;..%.
    C0E0: 3B FE 4A A5 AF 3B 01 49 1C 00 07 E5 1A 3B 7F 54  // ;.J..;.I.....;.T
    C0F0: 20 BC 3B 43 3A 00 0D E5 1A 3B 80 0D 25 AF 3B 01  //  .;C:....;..%.;.
    C100: 3A 00 00 5B 2C 00 02 01 00 00 37 00 00 3C 21 FC  // :..[,.....7..<!.
    C110: 00 00 49 19 00 0D A5 C0 00 01 43 26 00 3C 61 FC  // ..I.......C&.<a.
    C120: 00 00 49 26 00 0D A5 C0 00 02 0D A5 C1 00 01 5B  // ..I&...........[
    C130: CF 01 03 01 00 00 37 00 00 01 05 00 00 11 6C 01  // ......7.......l.
    C140: 00 03 05 40 8C 0A 00 00 3C 05 01 00 00 00 00 00  // ...@....<.......
    C150: 44 2A 00 03 05 40 10 27 00 00 03 02 46 40 3D A5  // D*...@.'....F@=.
    C160: 00 02 49 3A 00 02 02 00 46 5B 03 05 40 15 6C 01  // ..I:....F[..@.l.
    C170: 00 03 05 41 00 6C 01 00 3D 25 00 00 44 72 00 03  // ...A.l..=%..Dr..
    C180: 05 40 15 6E 01 00 03 05 41 00 6E 01 00 3D 25 00  // .@.n....A.n..=%.
    C190: 01 44 72 00 03 05 40 15 7E 01 00 03 05 41 00 7E  // .Dr...@.~....A.~
    C1A0: 01 00 01 02 00 00 40 03 88 40 01 00 03 18 40 01  // ......@..@....@.
    C1B0: 00 09 8D 40 FF 01 3E 8D 40 00 00 49 C8 00 01 02  // ...@..>.@..I....
    C1C0: 00 00 41 03 00 40 01 00 09 05 40 FF 01 00 00 3E  // ..A..@....@....>
    C1D0: 0D 40 00 00 49 B1 00 03 05 46 44 6E 02 00 43 EB  // .@..I....FDn..C.
    C1E0: 00 21 02 40 46 03 00 41 01 00 09 05 41 00 1E 00  // .!.@F..A....A...
    C1F0: 00 1B 05 41 09 43 E3 00 7C 02 40 46 7E 05 40 00  // ...A.C..|.@F~.@.
    C200: 00 01 00 03 00 41 01 00 09 05 41 00 F0 00 00 1B  // .....A....A.....
    C210: 05 41 0C 75 02 40 41 03 02 46 40 3D A5 00 01 49  // .A.u.@A..F@=...I
    C220: F7 00 02 02 00 46 5B 3D E5 00 00 49 59 01 56 00  // .....F[=...IY.V.
    C230: 40 03 29 40 00 21 0D 40 0A 00 03 05 41 4A 6C 01  // @.)@.!.@....AJl.
    C240: 00 3D 25 00 00 44 2D 01 03 05 41 4A 6E 01 00 3D  // .=%..D-...AJn..=
    C250: 25 00 01 44 2D 01 03 05 41 4A 7E 01 00 2D 02 40  // %..D-...AJ~..-.@
    C260: 41 01 02 00 00 40 03 00 41 01 00 09 05 41 00 00  // A....@..A....A..
    C270: F0 07 1B 05 41 14 02 E2 00 41 3D E5 00 00 49 59  // ....A....A=...IY
    C280: 01 02 05 00 10 27 00 00 5B 56 00 40 03 39 40 00  // .....'..[V.@.9@.
    C290: 55 38 00 66 FF 2D 0D 42 A7 01 3E 0C 40 02 00 47  // U8.f.-.B..>.@..G
    C2A0: 7A 01 2D 0D 42 08 00 43 6A 01 33 0C 40 04 00 21  // z.-.B..Cj.3.@..!
    C2B0: 0C 40 06 00 2D 0C 40 00 00 03 09 42 00 55 00 00  // .@..-.@....B.U..
    C2C0: 02 0A 00 40 7C 05 46 40 42 0F 00 7E 01 40 00 02  // ...@|.F@B..~.@..
    C2D0: 02 00 40 5B 7A 28 00 FF FF 07 00 00 00 00 00 C8  // ..@[z(..........
    C2E0: 00 3F 00 08 00 19 00 40 06 5F 00 40 00 32 00 80  // .?.....@._.@.2..
    C2F0: 0C 7E 00 60 00 64 00 00 32 7F 00 7F 00 64 00 00  // .~.`.d..2....d..
    C300: C6 00 01 03 04 00 37 00 00 56 00 46 56 00 00 03  // ......7..V.FV...
    C310: 21 00 00 55 20 00 3D 65 00 03 44 2C 00 3D 65 00  // !..U .=e..D,.=e.
    C320: 0D 46 BB 00 02 29 00 00 32 25 00 08 0E 25 00 60  // .F...)..2%...%.`
    C330: 52 14 5C 22 3E 4D F8 00 02 22 00 00 52 14 03 08  // R.\">M..."..R...
    C340: 41 DA 3A 09 0D 41 03 00 66 FF 2D 0D 42 C2 00 2D  // A.:..A..f.-.B..-
    C350: 0A 42 41 03 24 00 00 00 3D E2 00 00 48 A7 00 3E  // .BA.$...=...H..>
    C360: 25 00 04 44 76 00 03 22 46 00 33 25 46 01 15 25  // %..Dv.."F.3%F..%
    C370: 46 04 0F 25 46 01 33 39 00 00 3E 25 00 01 44 93  // F..%F.39..>%..D.
    C380: 00 3E 25 00 02 44 8C 00 03 25 46 21 03 65 00 2F  // .>%..D...%F!.e./
    C390: 43 97 00 03 65 00 13 03 79 46 00 33 65 46 01 15  // C...e...yF.3eF..
    C3A0: 2D 46 03 0F 65 46 01 52 14 01 02 07 3C 46 01 52  // -F..eF.R....<F.R
    C3B0: 06 3C 00 54 00 0E 3C 54 00 05 3C 3A 00 00 5B 7A  // .<.T..<T..<:..[z
    C3C0: 04 00 03 02 01 04 A8 01 01 04 00 08 37 00 00 3D  // ............7..=
    C3D0: 65 02 01 49 3D 01 4B A5 02 03 49 5D 00 02 05 00  // e..I=.K...I]....
    C3E0: 00 03 00 05 02 05 01 00 05 02 00 3C 21 FC 00 02  // ...........<!...
    C3F0: 49 57 00 01 8D C0 00 00 02 51 02 01 05 C6 00 00  // IW.......Q......
    C400: 00 10 00 01 05 C8 00 00 00 50 00 01 0D C3 00 02  // .........P......
    C410: 00 54 20 CA 00 01 05 C2 00 00 01 00 00 56 20 40  // .T ..........V @
    C420: 43 83 00 0E 25 02 80 52 14 54 00 CC 00 56 08 48  // C...%..R.T...V.H
    C430: 08 25 02 07 0D 25 CA 00 01 01 25 C2 00 01 54 00  // .%...%....%...T.
    C440: C6 00 54 00 C8 00 56 20 40 07 65 53 00 FF 3D A5  // ..T...V @.eS..=.
    C450: 01 01 47 94 00 0D 65 53 00 00 03 A0 40 C9 00 03  // ..G...eS....@...
    C460: 00 46 C4 00 03 02 41 46 2D 00 46 C6 00 2D 00 41  // .F....AF-.F..-.A
    C470: C8 00 52 14 01 32 21 3A 40 01 32 22 3A 40 01 02  // ..R..2!:@.2":@..
    C480: 1E 3A 46 01 02 1F 3A 41 54 30 DB 3A 54 00 6F 3B  // .:F...:AT0.:T.o;
    C490: 01 01 70 3B 00 54 08 23 3A 54 08 24 3A 54 08 25  // ..p;.T.#:T.$:T.%
    C4A0: 3A 54 08 26 3A 01 09 28 3A 00 01 19 27 3A 00 5C  // :T.&:..(:...':.\
    C4B0: 19 1B 3A FC F8 01 07 A5 1B 46 0F 07 8D 1B 3A 0F  // ..:......F....:.
    C4C0: FE 01 09 20 3A 01 01 25 1A 3A 01 0D 25 C6 3B 04  // ... :..%.:..%.;.
    C4D0: 5C 62 C6 3B FE 40 54 20 3A 3A 54 20 41 3A 54 00  // \b.;.@T ::T A:T.
    C4E0: D9 3B 54 00 D7 3B 54 00 DB 3B 4B A5 02 03 49 39  // .;T..;T..;K...I9
    C4F0: 01 0E 25 02 80 52 14 01 05 CC 00 01 00 00 00 3A  // ..%..R.........:
    C500: 00 00 5B 52 14 3D 65 02 00 49 5A 01 54 20 1A 3A  // ..[R.=e..IZ.T .:
    C510: 3A 00 00 3C 21 FC 00 02 49 59 01 54 08 C1 00 5B  // :..<!...IY.T...[
    C520: 3D 65 02 10 44 67 01 01 09 20 3A 01 5B 03 00 40  // =e..Dg... :.[..@
    C530: 1E 3A 09 05 40 00 00 00 FF 2D 01 40 00 09 0D 40  // .:..@....-.@...@
    C540: 00 F0 01 02 1E 3A 40 08 0D 00 FF 0F 56 00 41 03  // .....:@.....V.A.
    C550: 31 41 01 74 0A 00 41 2C 09 01 00 08 25 00 FC 14  // 1A.t..A,....%...
    C560: 05 00 10 01 01 6F 3B 00 01 09 27 3A 01 5B 49 00  // .....o;...':.[I.
    C570: 01 01 00 00 37 00 00 52 14 07 65 C9 3B FE 3D 65  // ....7..R..e.;.=e
    C580: 00 01 44 37 00 54 30 71 3A 54 30 2A 3A 54 20 C8  // ..D7.T0q:T0*:T .
    C590: 3B 54 20 CE 3B 54 30 CE 3B 4A 25 C9 3B 01 49 2B  // ;T .;T0.;J%.;.I+
    C5A0: 00 3A 00 00 5B 0D 25 CE 3B 01 54 00 B1 3B 07 25  // .:..[.%.;.T..;.%
    C5B0: DA 3A F4 3A 00 00 5B 00 95 00 01 03 00 00 37 00  // .:.:..[.......7.
    C5C0: 00 52 14 0D 25 1D 3B 04 54 20 7E 3A 54 00 86 3A  // .R..%.;.T ~:T..:
    C5D0: 3D 65 00 01 49 56 00 0D 25 84 3A 07 01 25 85 3A  // =e..IV..%.:..%.:
    C5E0: 01 51 01 4A 25 85 3A 02 44 29 00 54 20 85 3A 54  // .Q.J%.:.D).T .:T
    C5F0: 08 87 3A 54 08 88 3A 54 08 89 3A 01 0D 8A 3A FF  // ..:T..:T..:...:.
    C600: FF 01 0D 8B 3A FF FF 01 0D 8C 3A FF FF 5B 01 31  // ....:.....:..[.1
    C610: 7F 3A 00 56 00 41 03 19 41 01 3B 02 41 3D 65 00  // .:.V.A..A.;.A=e.
    C620: 02 49 78 00 03 00 40 82 3A 04 02 00 40 43 81 00  // .Ix...@.:...@C..
    C630: 03 03 40 00 01 02 82 3A 40 2D 05 46 04 00 00 00  // ..@....:@-.F....
    C640: 2D 8D 41 01 00 3E 89 41 01 45 65 00 5B 00 1B 00  // -.A..>.A.Ee.[...
    C650: 01 01 00 00 02 05 00 01 00 00 00 52 29 26 05 00  // ...........R)&..
    C660: 10 27 00 00 02 02 00 40 5B 00 1E 00 01 01 00 00  // .'.....@[.......
    C670: 37 00 00 02 05 00 02 00 00 00 52 29 26 05 00 10  // 7.........R)&...
    C680: 27 00 00 02 02 00 40 5B 53 01 02 03 00 18 37 00  // '.....@[S.....7.
    C690: 00 66 FF 2D 0D 42 47 01 55 28 05 2D 09 42 05 2D  // .f.-.BG.U(.-.B.-
    C6A0: 09 42 05 03 0C 48 00 00 03 09 41 03 2D 19 41 03  // .B...H....A.-.A.
    C6B0: 3E 0D 41 03 00 46 3F 00 5C 05 C6 3B FB 0F F0 FF  // >.A..F?.\..;....
    C6C0: 00 30 00 00 43 4B 00 5C 05 C6 3B FF 0F F0 FF 04  // .0..CK.\..;.....
    C6D0: 40 00 00 03 09 41 00 2D 19 41 00 33 0D 41 01 00  // @....A.-.A.3.A..
    C6E0: 01 0A 93 3B 41 54 08 95 3B 01 99 95 3B 02 03 19  // ...;AT..;...;...
    C6F0: 41 00 33 09 41 02 56 18 41 03 B1 41 04 33 1A 41  // A.3.A.V.A..A.3.A
    C700: 41 01 8A 94 3B 41 03 19 41 00 33 09 41 02 2D 1A  // A...;A..A.3.A.-.
    C710: 41 41 2D 09 41 00 4B 25 04 10 44 99 00 2D 09 41  // AA-.A.K%..D..-.A
    C720: 00 01 0A 94 3B 41 03 21 41 04 09 25 41 02 1B 25  // ....;A.!A..%A..%
    C730: 41 01 01 22 96 3B 41 54 00 71 3B 01 31 71 3B 04  // A..".;AT.q;.1q;.
    C740: 01 B1 71 3B 04 03 09 41 01 2D 19 41 01 33 0D 41  // ..q;...A.-.A.3.A
    C750: 01 00 01 0A 9A 3B 41 54 08 A1 3B 01 99 A1 3B 03  // .....;AT..;...;.
    C760: 03 19 41 01 33 09 41 03 56 18 41 03 B9 41 04 33  // ..A.3.A.V.A..A.3
    C770: 1A 41 41 01 8A A0 3B 41 03 19 41 01 33 09 41 03  // .AA...;A..A.3.A.
    C780: 2D 1A 41 41 2D 09 41 01 4B 25 04 20 44 0B 01 2D  // -.AA-.A.K%. D..-
    C790: 09 41 01 01 0A A0 3B 41 03 21 41 04 09 25 41 04  // .A....;A.!A..%A.
    C7A0: 1B 25 41 02 01 22 A2 3B 41 54 00 72 3B 01 39 72  // .%A..".;AT.r;.9r
    C7B0: 3B 04 01 B9 72 3B 04 03 21 41 04 09 25 41 80 1B  // ;...r;..!A..%A..
    C7C0: 25 41 07 01 22 B1 3B 41 3A 00 00 5B 7A 0C 00 00  // %A..".;A:..[z...
    C7D0: 00 00 02 00 04 00 06 00 08 00 0A 00 54 00 01 01  // ............T...
    C7E0: 00 04 37 00 00 66 1C 56 00 40 03 64 40 14 00 2D  // ..7..f.V.@.d@..-
    C7F0: 0D 42 18 00 54 30 50 00 3D A4 00 16 00 49 3B 00  // .B..T0P.=....I;.
    C800: 3D 25 00 00 44 4E 00 3D 24 00 1C 00 49 3B 00 3D  // =%..DN.=$...I;.=
    C810: 64 00 1A 00 44 4E 00 2D 0C 42 14 00 2D 25 40 01  // d...DN.-.B..-%@.
    C820: 3E 62 40 40 49 1C 00 56 20 40 01 A2 50 00 40 5B  // >b@@I..V @..P.@[
    C830: 4D 00 01 01 00 00 37 00 00 55 00 00 01 05 00 00  // M.....7..U......
    C840: 4F 5C 01 00 03 00 41 01 00 09 E5 41 0F 3E E5 41  // O\....A....A.>.A
    C850: 01 44 36 00 3E E5 41 02 44 32 00 03 E5 41 06 43  // .D6.>.A.D2...A.C
    C860: 36 00 03 E5 41 0F 09 A5 41 C0 1B 35 41 02 2D A5  // 6...A...A..5A.-.
    C870: 41 15 02 3A 00 41 02 72 00 41 52 34 5B 00 21 01  // A..:.A.r.AR4[.!.
    C880: 01 01 00 00 37 00 00 52 3E 01 05 00 00 00 44 01  // ....7..R>.....D.
    C890: 00 01 05 01 00 01 00 00 00 01 05 00 00 08 44 01  // ..............D.
    C8A0: 00 01 05 01 00 FE FF FF FF 01 05 00 00 1C 44 01  // ..............D.
    C8B0: 00 5C 65 01 00 0F 10 01 05 00 00 32 44 01 00 01  // .\e........2D...
    C8C0: 05 01 00 01 00 00 00 01 05 00 00 33 44 01 00 01  // ...........3D...
    C8D0: 05 01 00 01 00 00 00 01 05 00 00 34 44 01 00 01  // ...........4D...
    C8E0: 05 01 00 01 00 00 00 01 05 00 00 35 44 01 00 01  // ...........5D...
    C8F0: 05 01 00 01 00 00 00 01 05 00 00 36 44 01 00 01  // ...........6D...
    C900: 05 01 00 01 00 00 00 01 05 00 00 38 44 01 00 01  // ...........8D...
    C910: 05 01 00 09 00 00 00 03 24 40 1A 00 3E 25 40 45  // ........$@..>%@E
    C920: 49 E3 00 01 05 00 00 0C 44 01 00 01 05 01 00 0C  // I.......D.......
    C930: 40 20 00 01 05 00 00 10 44 01 00 01 05 01 00 87  // @ ......D.......
    C940: 53 06 24 01 05 00 00 14 44 01 00 01 05 01 00 53  // S.$.....D......S
    C950: C7 4D FF 01 05 00 00 47 44 01 00 0D 25 01 00 10  // .M.....GD...%...
    C960: 5B 01 05 00 00 0C 44 01 00 01 05 01 00 08 40 10  // [.....D.......@.
    C970: 00 01 05 00 00 10 44 01 00 01 05 01 00 63 54 0D  // ......D......cT.
    C980: 13 01 05 00 00 14 44 01 00 01 05 01 00 53 BA 4C  // ......D......S.L
    C990: FF 01 05 00 00 47 44 01 00 07 25 01 00 EF 5B 00  // .....GD...%...[.
    C9A0: 31 02 01 01 00 00 37 00 00 0D 25 64 4A 08 07 25  // 1.....7...%dJ..%
    C9B0: 8A 4A FE 56 00 41 03 39 41 01 09 25 41 0F 03 0A  // .J.V.A.9A..%A...
    C9C0: 40 42 66 FF 2D 0D 42 11 02 15 25 41 02 2D 0A 42  // @Bf.-.B...%A.-.B
    C9D0: 41 03 0C 41 00 00 01 02 00 00 41 07 A5 01 00 FE  // A..A......A.....
    C9E0: 54 08 01 00 01 0C 6B 4A 02 00 03 0A 42 40 03 05  // T.....kJ....B@..
    C9F0: 40 BC 34 00 00 56 00 41 03 21 41 00 27 02 40 41  // @.4..V.A.!A.'.@A
    CA00: 01 8A 67 4A 40 01 25 67 4A 02 0D 25 65 4A 02 01  // ..gJ@.%gJ..%eJ..
    CA10: A9 69 4A 01 4B 25 01 01 49 7F 00 54 30 69 4A 01  // .iJ.K%..I..T0iJ.
    CA20: 0D 69 4A 00 31 2B A5 69 4A 01 4B 25 01 02 44 96  // .iJ.1+.iJ.K%..D.
    CA30: 00 2B A5 69 4A 01 56 00 41 03 71 41 01 0F E5 41  // .+.iJ.V.A.qA...A
    CA40: 80 01 02 6A 4A 41 03 69 41 00 2D A5 41 01 01 02  // ...jJA.iA.-.A...
    CA50: 6A 4A 41 4B 25 01 02 44 C6 00 56 28 41 2D A5 41  // jJAK%..D..V(A-.A
    CA60: 01 01 02 6A 4A 41 4B 25 01 01 44 E7 00 03 71 41  // ...jJAK%..D...qA
    CA70: 00 2D A5 41 01 01 02 6A 4A 41 03 79 41 00 2D A5  // .-.A...jJA.yA.-.
    CA80: 41 01 01 02 6A 4A 41 0D 25 64 4A 01 03 A5 41 01  // A...jJA.%dJ...A.
    CA90: 43 BA 01 03 29 40 01 03 65 40 01 03 99 40 00 56  // C...)@..e@...@.V
    CAA0: 00 41 03 71 41 01 0F 65 41 01 0F E5 41 80 01 02  // .A.qA..eA...A...
    CAB0: 6A 4A 41 01 A5 69 4A 04 3D 65 01 04 47 28 01 01  // jJA..iJ.=e..G(..
    CAC0: 0D 69 4A 01 13 43 57 01 01 A2 69 4A 40 01 0D 69  // .iJ..CW...iJ@..i
    CAD0: 4A 01 31 43 57 01 07 65 69 4A EF 01 A5 69 4A 03  // J.1CW..eiJ...iJ.
    CAE0: 3E 25 40 04 46 57 01 01 A2 69 4A 40 31 A5 69 4A  // >%@.FW...iJ@1.iJ
    CAF0: 01 5C 65 69 4A FD 20 0D 25 64 4A 01 03 A5 41 00  // .\eiJ. .%dJ...A.
    CB00: 43 BA 01 03 05 41 01 00 00 80 03 AA 41 40 01 02  // C....A......A@..
    CB10: 6A 4A 41 3D 65 01 01 49 82 01 02 A8 00 6A 4A 43  // jJA=e..I.....jJC
    CB20: F9 01 56 00 41 03 1A 41 40 3B 02 41 03 28 41 6A  // ..V.A..A@;.A.(Aj
    CB30: 4A 03 68 41 6A 4A 03 A8 41 6A 4A 03 E8 41 6A 4A  // J.hAjJ..AjJ..AjJ
    CB40: 04 02 00 41 56 28 40 2D 8D 40 04 00 3E 25 40 04  // ...AV(@-.@..>%@.
    CB50: 47 F9 01 33 25 40 04 43 36 01 02 65 00 02 03 0D  // G..3%@.C6..e....
    CB60: 41 64 00 33 0D 41 01 00 3E 0D 41 00 00 44 F9 01  // Ad.3.A..>.A..D..
    CB70: 51 64 4A 25 66 4A 10 44 C3 01 4A 65 66 4A 06 49  // QdJ%fJ.D..JefJ.I
    CB80: F9 01 02 65 00 01 0D 25 65 4A 02 3E A5 41 00 44  // ...e...%eJ.>.A.D
    CB90: 63 01 4B 25 01 01 44 F3 00 0D 25 65 4A 02 01 25  // c.K%..D...%eJ..%
    CBA0: 64 4A 02 51 01 54 00 64 4A 54 00 6B 4A 5B 7A 20  // dJ.Q.T.dJT.kJ[z 
    CBB0: 00 A6 55 01 00 AA 55 03 02 AE 55 05 04 B2 55 42  // ..U...U...U...UB
    CBC0: 41 B6 55 49 48 BA 55 4B 4A D6 55 29 28 BF 55 4D  // A.UIH.UKJ.U)(.UM
    CBD0: 4C 00 46 00 02 02 00 04 37 00 00 55 30 00 32 25  // L.F.....7..U0.2%
    CBE0: 00 01 20 25 00 08 56 08 48 03 22 48 40 0D A5 C1  // .. %..V.H."H@...
    CBF0: 4A 01 02 A0 00 C0 4A 08 A5 00 03 4A 25 C0 4A 02  // J.....J....J%.J.
    CC00: 44 3C 00 5C 0D C1 4A FF FE 01 00 43 42 00 0D 0D  // D<.\..J....CB...
    CC10: C1 4A 01 01 3A 00 00 5B 0A 00 01 02 00 00 5B 7A  // .J..:..[......[z
    CC20: 00 00 0A 00 01 01 00 04 55 00 00 5B 37 09 01 01  // ........U..[7...
    CC30: 00 00 37 00 00 01 05 00 00 D2 32 01 00 01 05 01  // ..7.......2.....
    CC40: 00 03 00 00 00 01 05 00 00 F2 32 01 00 01 05 01  // ..........2.....
    CC50: 00 04 00 00 00 01 05 00 00 12 33 01 00 01 05 01  // ..........3.....
    CC60: 00 05 00 00 00 01 05 00 00 32 33 01 00 01 05 01  // .........23.....
    CC70: 00 06 00 00 00 01 05 00 00 4F 5C 01 00 03 00 41  // .........O\....A
    CC80: 01 00 09 E5 41 0F 3E E5 41 01 49 3B 02 01 05 00  // ....A.>.A.I;....
    CC90: 00 88 5C 01 00 01 05 01 00 07 00 00 00 01 05 00  // ..\.............
    CCA0: 00 89 5C 01 00 03 00 41 01 00 4C A5 41 10 44 3B  // ..\....A..L.A.D;
    CCB0: 02 52 3E 03 24 40 1A 00 3E 25 40 45 49 9D 00 66  // .R>.$@..>%@EI..f
    CCC0: FF 2D 0D 42 3F 02 43 A4 00 66 FF 2D 0D 42 BB 05  // .-.B?.C..f.-.B..
    CCD0: 03 04 41 00 00 3E 05 41 00 00 00 00 44 D0 01 26  // ..A..>.A....D..&
    CCE0: 05 00 30 11 00 00 33 25 40 01 15 05 40 07 0F 05  // ..0...3%@...@...
    CCF0: 40 02 00 00 00 01 05 00 00 0D 5C 01 00 01 02 01  // @.........\.....
    CD00: 00 40 01 05 00 00 0B 5C 01 00 01 04 01 00 00 00  // .@.....\........
    CD10: 01 05 00 00 0B 5C 01 00 03 00 46 01 00 03 00 46  // .....\....F....F
    CD20: 01 00 03 00 46 01 00 03 00 46 01 00 4A 05 01 00  // ....F....F..J...
    CD30: 00 00 00 10 44 00 01 01 05 00 00 0D 5C 01 00 0F  // ....D.......\...
    CD40: 05 40 00 80 00 00 01 02 01 00 40 01 05 00 00 0C  // .@........@.....
    CD50: 5C 01 00 01 04 01 00 04 00 01 05 00 00 0D 5C 01  // \.............\.
    CD60: 00 5E 25 40 9F 20 01 02 01 00 40 01 05 00 00 0C  // .^%@. ....@.....
    CD70: 5C 01 00 01 04 01 00 08 00 01 05 00 00 0D 5C 01  // \.............\.
    CD80: 00 5E 25 40 9F 40 01 02 01 00 40 01 05 00 00 0C  // .^%@.@....@.....
    CD90: 5C 01 00 01 04 01 00 0C 00 01 05 00 00 0D 5C 01  // \.............\.
    CDA0: 00 5E 25 40 9F 60 01 02 01 00 40 01 05 00 00 0C  // .^%@.`....@.....
    CDB0: 5C 01 00 01 04 01 00 10 00 01 05 00 00 0B 5C 01  // \.............\.
    CDC0: 00 01 04 01 00 14 00 01 05 00 00 0B 5C 01 00 03  // ............\...
    CDD0: 00 46 01 00 03 00 46 01 00 03 00 46 01 00 03 00  // .F....F....F....
    CDE0: 46 01 00 4A 05 01 00 00 00 00 10 44 B7 01 51 C8  // F..J.......D..Q.
    CDF0: 51 C8 51 64 2D 0D 42 18 00 43 A4 00 01 05 00 00  // Q.Qd-.B..C......
    CE00: 0D 5C 01 00 09 0D 40 9F 7F 01 02 01 00 40 01 05  // .\....@......@..
    CE10: 00 00 0B 5C 01 00 01 05 01 00 01 03 00 00 01 05  // ...\............
    CE20: 00 00 0B 5C 01 00 03 00 46 01 00 03 00 46 01 00  // ...\....F....F..
    CE30: 03 00 46 01 00 03 00 46 01 00 4A 05 01 00 00 00  // ..F....F..J.....
    CE40: 00 10 44 0E 02 01 05 00 00 0D 5C 01 00 0F 25 40  // ..D.......\...%@
    CE50: 03 01 02 01 00 40 01 05 00 00 0D 5C 01 00 09 25  // .....@.....\...%
    CE60: 40 FD 01 02 01 00 40 5B 7A F8 06 01 03 B0 0F 08  // @.....@[z.......
    CE70: 00 50 00 0E 00 00 00 00 00 00 00 00 00 00 00 42  // .P.............B
    CE80: 09 B0 0F 01 03 B0 0F 40 00 04 04 0C 00 00 00 00  // .......@........
    CE90: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 40  // .......B.......@
    CEA0: 00 04 02 0C 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    CEB0: 09 B0 0F 01 03 B0 02 02 08 00 20 0C 00 00 00 00  // .......... .....
    CEC0: 00 00 00 00 00 00 00 42 09 B0 02 01 03 B0 03 02  // .......B........
    CED0: 08 00 20 0C 00 00 00 00 00 00 00 00 00 00 00 42  // .. ............B
    CEE0: 09 B0 03 01 03 B0 06 02 08 00 20 0C 00 00 00 00  // .......... .....
    CEF0: 00 00 00 00 00 00 00 42 09 B0 06 01 03 B0 07 02  // .......B........
    CF00: 08 00 20 0C 00 00 00 00 00 00 00 00 00 00 00 42  // .. ............B
    CF10: 09 B0 07 01 03 B0 0F 00 0C 00 04 0C 00 00 00 00  // ................
    CF20: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 80  // .......B........
    CF30: 00 02 08 0C 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    CF40: 09 B0 0F 01 03 B0 0F 00 82 00 80 0C 00 00 00 00  // ................
    CF50: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00  // .......B........
    CF60: 02 10 80 0C 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    CF70: 09 B0 0F 01 03 B0 0F 00 82 40 00 0C 00 00 00 00  // .........@......
    CF80: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00  // .......B........
    CF90: 82 00 08 0C 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    CFA0: 09 B0 0F 01 03 B0 0F 00 42 00 80 0C 00 00 00 00  // ........B.......
    CFB0: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00  // .......B........
    CFC0: 42 00 10 0C 00 00 00 00 00 00 00 00 00 00 00 42  // B..............B
    CFD0: 09 B0 0F 01 03 B0 0F 00 42 00 08 0C 00 00 00 00  // ........B.......
    CFE0: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00  // .......B........
    CFF0: 02 10 04 0C 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D000: 09 B0 0F 01 03 B0 0F 00 02 10 02 0C 00 00 00 00  // ................
    D010: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00  // .......B........
    D020: 02 10 40 0C 00 00 00 00 00 00 00 00 00 00 00 42  // ..@............B
    D030: 09 B0 0F 01 03 B0 02 08 80 00 02 0C 00 00 00 00  // ................
    D040: 00 00 00 00 00 00 00 42 09 B0 02 01 03 B0 03 08  // .......B........
    D050: 80 00 02 0C 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D060: 09 B0 03 01 03 B0 06 08 80 00 02 0C 00 00 00 00  // ................
    D070: 00 00 00 00 00 00 00 42 09 B0 06 01 03 B0 07 08  // .......B........
    D080: 80 00 02 0C 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D090: 09 B0 07 01 03 B0 02 08 80 00 20 0C 00 00 00 00  // .......... .....
    D0A0: 00 00 00 00 00 00 00 42 09 B0 02 01 03 B0 03 08  // .......B........
    D0B0: 80 00 20 0C 00 00 00 00 00 00 00 00 00 00 00 42  // .. ............B
    D0C0: 09 B0 03 01 03 B0 06 08 80 00 20 0C 00 00 00 00  // .......... .....
    D0D0: 00 00 00 00 00 00 00 42 09 B0 06 01 03 B0 07 08  // .......B........
    D0E0: 80 00 20 0C 00 00 00 00 00 00 00 00 00 00 00 42  // .. ............B
    D0F0: 09 B0 07 01 03 B0 0F 08 00 02 80 0C 00 00 00 00  // ................
    D100: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 08  // .......B........
    D110: 00 02 04 0C 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D120: 09 B0 0F 01 03 B0 0F 08 00 02 02 0C 00 00 00 00  // ................
    D130: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00  // .......B........
    D140: 82 00 04 0C 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D150: 09 B0 0F 01 03 B0 0F 00 42 00 02 0C 00 00 00 00  // ........B.......
    D160: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 80  // .......B........
    D170: 00 42 00 0C 00 00 00 00 00 00 00 00 00 00 00 42  // .B.............B
    D180: 09 B0 0F 01 03 B0 0F 80 00 82 00 0C 00 00 00 00  // ................
    D190: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 01  // .......B........
    D1A0: 00 02 08 10 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D1B0: 09 B0 0F 01 03 B0 0F 10 80 00 20 10 00 00 00 00  // .......... .....
    D1C0: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 00 0F 00  // .......B........
    D1D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D1E0: 00 00 0F 00 00 00 00 01 03 B0 0F 08 00 50 00 06  // .............P..
    D1F0: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D200: 03 B0 0F 40 00 04 04 04 00 00 00 00 00 00 00 00  // ...@............
    D210: 00 00 00 42 09 B0 0F 01 03 B0 0F 40 00 04 02 04  // ...B.......@....
    D220: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D230: 03 B0 02 02 08 00 20 04 00 00 00 00 00 00 00 00  // ...... .........
    D240: 00 00 00 42 09 B0 02 01 03 B0 03 02 08 00 20 04  // ...B.......... .
    D250: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 03 01  // ...........B....
    D260: 03 B0 06 02 08 00 20 04 00 00 00 00 00 00 00 00  // ...... .........
    D270: 00 00 00 42 09 B0 06 01 03 B0 07 02 08 00 20 04  // ...B.......... .
    D280: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 07 01  // ...........B....
    D290: 03 B0 0F 00 0C 00 04 04 00 00 00 00 00 00 00 00  // ................
    D2A0: 00 00 00 42 09 B0 0F 01 03 B0 0F 80 00 02 08 04  // ...B............
    D2B0: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D2C0: 03 B0 0F 00 82 00 80 04 00 00 00 00 00 00 00 00  // ................
    D2D0: 00 00 00 42 09 B0 0F 01 03 B0 0F 00 02 10 80 04  // ...B............
    D2E0: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D2F0: 03 B0 0F 00 82 40 00 04 00 00 00 00 00 00 00 00  // .....@..........
    D300: 00 00 00 42 09 B0 0F 01 03 B0 0F 00 82 00 08 04  // ...B............
    D310: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D320: 03 B0 0F 00 42 00 80 04 00 00 00 00 00 00 00 00  // ....B...........
    D330: 00 00 00 42 09 B0 0F 01 03 B0 0F 00 42 00 10 04  // ...B........B...
    D340: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D350: 03 B0 0F 00 42 00 08 04 00 00 00 00 00 00 00 00  // ....B...........
    D360: 00 00 00 42 09 B0 0F 01 03 B0 0F 00 02 10 04 04  // ...B............
    D370: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D380: 03 B0 0F 00 02 10 02 04 00 00 00 00 00 00 00 00  // ................
    D390: 00 00 00 42 09 B0 0F 01 03 B0 0F 00 02 10 40 04  // ...B..........@.
    D3A0: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D3B0: 03 B0 02 08 80 00 02 04 00 00 00 00 00 00 00 00  // ................
    D3C0: 00 00 00 42 09 B0 02 01 03 B0 03 08 80 00 02 04  // ...B............
    D3D0: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 03 01  // ...........B....
    D3E0: 03 B0 06 08 80 00 02 04 00 00 00 00 00 00 00 00  // ................
    D3F0: 00 00 00 42 09 B0 06 01 03 B0 07 08 80 00 02 04  // ...B............
    D400: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 07 01  // ...........B....
    D410: 03 B0 02 08 80 00 20 04 00 00 00 00 00 00 00 00  // ...... .........
    D420: 00 00 00 42 09 B0 02 01 03 B0 03 08 80 00 20 04  // ...B.......... .
    D430: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 03 01  // ...........B....
    D440: 03 B0 06 08 80 00 20 04 00 00 00 00 00 00 00 00  // ...... .........
    D450: 00 00 00 42 09 B0 06 01 03 B0 07 08 80 00 20 04  // ...B.......... .
    D460: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 07 01  // ...........B....
    D470: 03 B0 0F 08 00 02 80 04 00 00 00 00 00 00 00 00  // ................
    D480: 00 00 00 42 09 B0 0F 01 03 B0 0F 08 00 02 04 04  // ...B............
    D490: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D4A0: 03 B0 0F 08 00 02 02 04 00 00 00 00 00 00 00 00  // ................
    D4B0: 00 00 00 42 09 B0 0F 01 03 B0 0F 00 82 00 04 04  // ...B............
    D4C0: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D4D0: 03 B0 0F 00 42 00 02 04 00 00 00 00 00 00 00 00  // ....B...........
    D4E0: 00 00 00 42 09 B0 0F 01 03 B0 0F 80 00 42 00 04  // ...B.........B..
    D4F0: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D500: 03 B0 0F 80 00 82 00 04 00 00 00 00 00 00 00 00  // ................
    D510: 00 00 00 42 09 B0 0F 01 03 B0 0F 01 00 02 08 10  // ...B............
    D520: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D530: 03 B0 0F 10 80 00 20 10 00 00 00 00 00 00 00 00  // ...... .........
    D540: 00 00 00 42 09 B0 0F 01 03 00 0F 00 00 00 00 00  // ...B............
    D550: 00 00 00 00 00 00 00 00 00 00 00 42 00 00 0F 00  // ...........B....
    D560: 00 00 00 00 A0 01 01 08 08 00 03 01 00 00 3D E5  // ..............=.
    D570: 00 01 44 33 00 3D E5 00 02 44 33 00 02 05 00 00  // ..D3.=...D3.....
    D580: 00 01 00 52 29 20 05 00 64 00 00 00 03 02 46 40  // ...R) ..d.....F@
    D590: 02 02 00 00 43 E4 00 02 05 00 01 00 02 00 52 29  // ....C.........R)
    D5A0: 03 01 01 00 02 02 00 00 03 01 46 00 56 38 46 03  // ..........F.V8F.
    D5B0: 05 40 80 C3 C9 01 27 02 40 46 2D 05 40 31 00 00  // .@....'.@F-.@1..
    D5C0: 00 27 05 40 32 00 00 00 21 05 40 32 00 00 00 21  // .'.@2...!.@2...!
    D5D0: 02 46 40 03 02 46 40 55 00 03 27 05 46 19 00 00  // .F@..F@U..'.F...
    D5E0: 00 7C 05 40 00 40 00 00 7E 02 40 01 02 8A 01 40  // .|.@.@..~.@....@
    D5F0: 02 1A 01 40 3D E5 00 01 49 E1 00 02 A5 03 01 03  // ...@=...I.......
    D600: 02 00 40 21 05 01 F4 01 00 00 03 02 01 40 7C 05  // ..@!.........@|.
    D610: 00 32 00 00 00 7E 05 40 10 27 00 00 7C 05 40 4E  // .2...~.@.'..|.@N
    D620: 0C 00 00 7E 02 40 01 02 0A 03 40 21 02 40 01 27  // ...~.@....@!.@.'
    D630: 05 40 4E 0C 00 00 33 02 00 40 02 8A 02 00 02 1A  // .@N...3..@......
    D640: 02 00 43 E4 00 55 00 02 03 01 00 00 55 38 00 03  // ..C..U......U8..
    D650: 05 40 00 32 00 00 3D 05 00 00 00 00 00 44 26 01  // .@.2..=......D&.
    D660: 03 02 40 46 27 01 40 00 3E 05 40 9C 18 00 00 47  // ..@F'.@.>.@....G
    D670: 15 01 03 05 40 00 32 00 00 3E 05 40 C8 00 00 00  // ....@.2..>.@....
    D680: 46 26 01 03 05 40 C8 00 00 00 66 FF 2D 0D 42 80  // F&...@....f.-.B.
    D690: 01 3E 0C 40 02 00 47 3D 01 2D 0D 42 08 00 43 2D  // .>.@..G=.-.B..C-
    D6A0: 01 33 0C 40 00 00 3E E5 00 03 49 53 01 2D 0C 40  // .3.@..>...IS.-.@
    D6B0: 06 00 33 0D 40 01 00 27 0C 40 06 00 2D 0C 40 04  // ..3.@..'.@..-.@.
    D6C0: 00 02 E2 00 40 33 0C 40 04 00 21 0C 40 06 00 2D  // ....@3.@..!.@..-
    D6D0: 0C 40 00 00 27 02 46 40 02 0A 00 40 02 B2 00 40  // .@..'.F@...@...@
    D6E0: 5B 7A 20 00 C8 00 40 06 08 00 19 00 40 06 80 0C  // [z ...@.....@...
    D6F0: 40 00 32 00 80 0C 38 18 60 00 64 00 00 32 00 32  // @.2...8.`.d..2.2
    D700: 7F 00 64 00 51 00 02 01 00 00 01 05 00 00 74 21  // ..d.Q.........t!
    D710: 01 00 01 05 01 00 0A 00 F0 FF 01 05 00 00 75 21  // ..............u!
    D720: 01 00 01 05 01 00 25 00 00 00 01 05 00 00 74 21  // ......%.......t!
    D730: 01 00 01 05 01 00 09 00 F0 FF 01 05 00 00 75 21  // ..............u!
    D740: 01 00 01 05 01 00 01 00 00 00 0D 25 B6 F0 01 07  // ...........%....
    D750: 25 B6 F0 FE 5B 00 EA 00 02 01 08 08 37 00 00 66  // %...[.......7..f
    D760: 1C 2D 0C 42 06 00 02 01 02 00 02 F0 02 50 00 3D  // .-.B.........P.=
    D770: E5 00 03 44 21 00 5B 56 00 40 20 0D 01 20 00 03  // ...D!.[V.@ .. ..
    D780: 05 00 00 01 00 00 33 02 00 40 0E E5 02 80 52 12  // ......3..@....R.
    D790: 55 38 00 20 05 00 03 00 00 00 27 05 40 10 27 00  // U8. ......'.@.'.
    D7A0: 00 01 05 00 00 88 5C 01 00 01 02 01 00 00 01 05  // ......\.........
    D7B0: 00 00 89 5C 01 00 01 02 01 00 40 2D 05 00 01 00  // ...\......@-....
    D7C0: 00 00 56 00 41 01 05 00 00 88 5C 01 00 01 05 01  // ..V.A.....\.....
    D7D0: 00 01 00 00 00 01 05 00 00 89 5C 01 00 03 00 01  // ..........\.....
    D7E0: 01 00 01 05 00 00 88 5C 01 00 01 02 01 00 00 3E  // .......\.......>
    D7F0: 25 41 12 49 C4 00 3E E5 01 00 44 C4 00 2D E5 01  // %A.I..>...D..-..
    D800: 07 03 04 40 04 00 03 BA 40 01 01 05 00 00 89 5C  // ...@....@......\
    D810: 01 00 01 02 01 00 40 43 D2 00 01 05 00 00 89 5C  // ......@C.......\
    D820: 01 00 01 04 01 00 04 00 2D 05 00 01 00 00 00 2D  // ........-......-
    D830: 25 41 01 2D 0D 42 04 00 3E 25 41 16 45 8C 00 5B  // %A.-.B..>%A.E..[
    D840: 17 01 01 02 10 04 37 00 00 3D 25 00 FF 49 CE 00  // ......7..=%..I..
    D850: 01 05 00 00 28 68 01 00 01 05 01 00 00 70 03 00  // ....(h.......p..
    D860: 01 05 00 00 29 68 01 00 03 00 40 01 00 66 18 03  // ....)h....@..f..
    D870: 00 40 01 00 03 00 00 01 00 03 00 41 01 00 3E 05  // .@.........A..>.
    D880: 40 00 00 00 00 44 CD 00 03 05 01 10 70 03 00 01  // @....D......p...
    D890: 05 00 00 28 68 01 00 01 02 01 00 01 01 05 00 00  // ...(h...........
    D8A0: 29 68 01 00 03 00 02 01 00 03 00 03 01 00 01 05  // )h..............
    D8B0: 00 00 88 5C 01 00 01 02 01 00 02 01 05 00 00 89  // ...\............
    D8C0: 5C 01 00 01 02 01 00 03 2D 05 01 08 00 00 00 33  // \.......-......3
    D8D0: 0D 40 01 00 3E 0D 40 00 00 49 4F 00 01 05 00 00  // .@..>.@..IO.....
    D8E0: 28 68 01 00 01 02 01 00 01 01 05 00 00 3E 5C 01  // (h...........>\.
    D8F0: 00 01 05 01 00 08 00 00 00 01 05 01 00 04 00 00  // ................
    D900: 00 01 05 01 00 01 00 00 00 51 32 50 02 5B 01 05  // .........Q2P.[..
    D910: 00 00 58 5C 01 00 01 65 01 00 FF 01 21 01 00 00  // ..X\...e....!...
    D920: 01 05 00 00 3E 5C 01 00 01 05 01 00 05 00 00 00  // ....>\..........
    D930: 51 0A 01 05 00 00 3E 5C 01 00 01 05 01 00 01 00  // Q.....>\........
    D940: 00 00 51 0A 01 05 00 00 58 5C 01 00 3C 61 01 00  // ..Q.....X\..<a..
    D950: 00 49 04 01 51 64 5B 00 30 00 01 03 00 04 02 01  // .I..Qd[.0.......
    D960: 01 00 02 E5 01 02 52 3C 01 05 00 00 15 6E 01 00  // ......R<.....n..
    D970: 01 01 01 00 02 50 02 01 05 00 00 41 6E 01 00 01  // .....P.....An...
    D980: 39 01 00 01 51 C8 5B 5B AF 01 01 04 00 04 37 00  // 9...Q.[[......7.
    D990: 00 3D 65 00 03 44 5C 01 02 01 01 00 02 65 01 07  // .=e..D\......e..
    D9A0: 52 50 3D 05 02 00 00 00 00 44 0B 01 01 05 00 00  // RP=......D......
    D9B0: 00 68 01 00 4A E5 01 00 80 49 24 00 3D 25 00 01  // .h..J....I$.=%..
    D9C0: 49 46 00 01 05 00 00 01 68 01 00 43 4E 00 01 05  // IF......h..CN...
    D9D0: 00 00 00 68 01 00 03 24 40 04 00 09 25 40 DF 01  // ...h...$@...%@..
    D9E0: 22 01 00 40 01 05 00 00 00 68 01 00 4A E5 01 00  // "..@.....h..J...
    D9F0: 80 49 5C 00 56 00 40 3D 25 00 01 49 95 00 03 0C  // .I\.V.@=%..I....
    DA00: 40 05 00 15 0D 40 07 09 65 40 7F 01 05 00 00 09  // @....@..e@......
    DA10: 68 01 00 5C 8A 01 00 7F 00 40 43 B3 00 03 24 40  // h..\.....@C...$@
    DA20: 05 00 15 0D 40 01 1B 25 40 01 0F 65 40 40 01 05  // ....@..%@..e@@..
    DA30: 00 00 0A 68 01 00 01 0A 01 00 40 01 05 00 00 0B  // ...h......@.....
    DA40: 68 01 00 03 00 46 01 00 09 25 46 FC 3D 25 00 01  // h....F...%F.=%..
    DA50: 44 CF 00 0F 25 46 01 56 00 40 03 19 40 00 21 05  // D...%F.V.@..@.!.
    DA60: 40 64 00 00 00 03 05 41 78 5D 02 00 33 02 41 40  // @d.....Ax]..3.A@
    DA70: 27 05 41 71 02 00 00 03 A2 46 40 01 02 01 00 46  // '.Aq.....F@....F
    DA80: 01 05 00 00 00 68 01 00 4A E5 01 00 80 49 F8 00  // .....h..J....I..
    DA90: 51 32 5B 02 01 01 00 52 50 3D 05 02 00 00 00 00  // Q2[....RP=......
    DAA0: 44 58 01 01 05 00 00 86 68 01 00 54 20 01 00 03  // DX......h..T ...
    DAB0: 05 41 FF FF FF FF 69 01 41 02 01 05 00 00 87 68  // .A....i.A......h
    DAC0: 01 00 09 00 41 01 00 0F 01 41 01 01 02 01 00 41  // ....A....A.....A
    DAD0: 01 05 00 00 8A 68 01 00 0D 01 01 00 02 51 32 5B  // .....h.......Q2[
    DAE0: 55 00 00 5B 02 01 01 00 52 50 3D 05 02 00 00 00  // U..[....RP=.....
    DAF0: 00 44 58 01 02 E4 00 05 00 02 A4 00 06 00 02 0D  // .DX.............
    DB00: 02 01 01 03 24 41 08 00 4C 25 41 01 44 8B 01 02  // ....$A..L%A.D...
    DB10: 65 02 02 02 64 01 0C 00 02 8C 01 0E 00 3D 65 01  // e...d........=e.
    DB20: FF 44 AE 01 02 99 02 00 02 25 01 32 52 36 2D 0D  // .D.......%.2R6-.
    DB30: 42 04 00 43 8B 01 5B 00 79 00 01 03 04 00 37 00  // B..C..[.y.....7.
    DB40: 00 03 0A 00 42 66 20 03 0C 41 00 00 2D 0A 41 42  // ....Bf ..A..-.AB
    DB50: 2D 0D 42 04 00 3E 0A 42 41 44 75 00 3D 0C 00 00  // -.B..>.BADu.=...
    DB60: 00 44 34 00 2D 0C 42 02 00 43 1D 00 02 0A 01 42  // .D4.-.B..C.....B
    DB70: 3D 65 00 00 44 46 00 3D 65 00 04 49 74 00 03 E4  // =e..DF.=e..It...
    DB80: 41 05 00 02 04 01 08 00 3E E5 41 00 44 75 00 3D  // A.......>.A.Du.=
    DB90: 8C 00 10 00 47 6B 00 2D 0D 42 06 00 33 E5 41 01  // ....Gk.-.B..3.A.
    DBA0: 43 50 00 02 04 00 0C 00 03 0A 42 00 5B 55 00 01  // CP........B.[U..
    DBB0: 5B 00 07 00 02 02 04 04 5B 00 62 02 01 05 00 00  // [.......[.b.....
    DBC0: 37 00 00 03 20 46 52 00 0E 25 00 60 52 14 08 25  // 7... FR..%.`R..%
    DBD0: 00 0F 42 29 00 63 0F 58 00 63 11 4F 01 63 12 C7  // ..B).c.X.c.O.c..
    DBE0: 01 63 01 1F 02 63 00 48 02 63 08 1E 01 63 09 FF  // .c...c.H.c...c..
    DBF0: 00 63 0A 06 01 63 13 0E 01 63 14 16 01 63 0B 26  // .c...c...c...c.&
    DC00: 01 63 0C 0F 02 63 0D 2E 01 63 10 47 01 5A 5A 43  // .c...c...c.G.ZZC
    DC10: FB 00 54 00 B0 4D 01 0D 41 4D 1F 00 3D A5 00 00  // ..T..M..AM..=...
    DC20: 44 77 00 3D A5 00 02 44 E9 00 3D A5 00 05 49 F1  // Dw.=...D..=...I.
    DC30: 00 54 08 DF 4D 3D 25 02 00 49 86 00 02 25 02 02  // .T..M=%..I...%..
    DC40: 32 25 02 01 01 E1 DF 4D 02 4A 25 E2 4D 01 49 CC  // 2%.....M.J%.M.I.
    DC50: 00 7B 05 01 00 80 00 00 7E 05 40 8C 0A 00 00 56  // .{......~.@....V
    DC60: 00 46 03 29 46 02 27 02 40 46 07 65 E6 4D FE 01  // .F.)F.'.@F.e.M..
    DC70: 05 E7 4D 00 80 00 00 01 02 E8 4D 40 0D E5 E9 4D  // ..M.......M@...M
    DC80: 10 0D 65 3E 4D 04 02 20 00 3E 4D 08 25 00 07 0E  // ..e>M.. .>M.%...
    DC90: 25 00 00 52 14 14 3D 00 04 5C B9 AF 3B 8F 00 3A  // %..R..=..\..;..:
    DCA0: 00 00 5B 01 05 B0 4D 01 00 00 00 07 E5 3E 4D 2F  // ..[...M......>M/
    DCB0: 0D 65 3E 4D 04 3A 00 00 5B 54 20 EE 4D 43 FB 00  // .e>M.:..[T .MC..
    DCC0: 01 25 EE 4D 01 43 FB 00 01 25 EE 4D 02 43 FB 00  // .%.M.C...%.M.C..
    DCD0: 01 25 EE 4D 03 43 FB 00 07 25 DE 4D EF 43 FB 00  // .%.M.C...%.M.C..
    DCE0: 0D 25 DE 4D 10 43 FB 00 0D 65 E6 4D 01 51 0A 07  // .%.M.C...e.M.Q..
    DCF0: 25 E3 4D FE 51 0A 01 0D E2 4D 01 02 51 C8 43 FB  // %.M.Q....M..Q.C.
    DD00: 00 0D 25 F4 4D 10 43 FB 00 01 69 85 4D 02 4C 25  // ..%.M.C...i.M.L%
    DD10: 46 10 49 72 01 3D A5 00 03 49 72 01 4A 25 4B 4D  // F.Ir.=...Ir.J%KM
    DD20: 10 49 72 01 01 A5 85 4D 02 43 77 01 01 B1 85 4D  // .Ir....M.Cw....M
    DD30: 00 3D 25 02 00 44 8C 01 32 25 02 01 14 25 02 04  // .=%..D..2%...%..
    DD40: 5C E1 85 4D 8F 02 3D E5 00 04 47 9B 01 0D 25 85  // \..M..=...G...%.
    DD50: 4D 01 43 A0 01 07 25 85 4D FE 3D A5 00 05 44 AE  // M.C...%.M.=...D.
    DD60: 01 3D A5 00 00 49 BF 01 02 A5 00 00 03 39 40 00  // .=...I.......9@.
    DD70: 33 25 40 01 01 22 E1 4D 40 02 E0 02 86 4D 43 FB  // 3%@..".M@....MC.
    DD80: 00 02 E0 02 86 4D 4B E5 02 01 44 FB 00 02 B0 00  // .....MK...D.....
    DD90: 85 4D 02 E5 00 04 4A 25 85 4D 01 44 E8 01 02 E5  // .M....J%.M.D....
    DDA0: 00 08 3D A5 00 02 44 F6 01 3D A5 00 03 49 FF 01  // ..=...D..=...I..
    DDB0: 54 00 86 4D 50 02 43 FB 00 02 A5 00 00 03 31 43  // T..MP.C.......1C
    DDC0: 00 4A 62 85 4D 44 44 FB 00 54 08 E2 4D 51 C8 0D  // .Jb.MDD..T..MQ..
    DDD0: 25 E3 4D 01 51 32 43 FB 00 0D 25 86 4D 01 3D A5  // %.M.Q2C...%.M.=.
    DDE0: 00 00 44 34 02 01 0D B7 4D 0F 01 43 FB 00 03 39  // ..D4....M..C...9
    DDF0: 43 00 03 02 40 44 33 25 40 01 01 0A B7 4D 40 43  // C...@D3%@....M@C
    DE00: FB 00 54 00 B7 4D 07 25 86 4D FE 07 0D 85 4D FE  // ..T..M.%.M....M.
    DE10: 80 54 20 DE 4D 54 20 EE 4D 43 FB 00 29 00 01 01  // .T .MT .MC..)...
    DE20: 00 00 37 00 00 66 1C 2D 0D 42 18 00 03 30 40 50  // ..7..f.-.B...0@P
    DE30: 00 3E 25 40 00 44 28 00 33 25 40 01 2D 0C 42 14  // .>%@.D(.3%@.-.B.
    DE40: 00 43 15 00 5B 00 46 01 01 06 00 00 37 00 00 42  // .C..[.F.....7..B
    DE50: 29 00 63 07 24 01 63 01 25 00 63 00 C0 00 63 0B  // ).c.$.c.%.c...c.
    DE60: 27 01 63 04 2C 01 5A 5A 43 3F 01 02 65 00 11 52  // '.c.,.ZZC?..e..R
    DE70: 04 4B E5 02 01 49 20 01 02 65 00 0A 55 08 02 52  // .K...I ..e..U..R
    DE80: 4D 3D E5 00 04 47 50 00 68 25 00 01 02 25 02 01  // M=...GP.h%...%..
    DE90: 52 4D 68 25 00 01 3D A5 00 00 49 82 00 20 05 01  // RMh%..=...I.. ..
    DEA0: 64 00 00 00 02 05 01 14 1E 00 02 2C 21 01 00 02  // d..........,!...
    DEB0: 01 02 00 02 02 00 40 52 0C 26 05 00 64 00 00 00  // ......@R.&..d...
    DEC0: 02 02 01 40 02 01 00 02 02 65 00 01 55 08 02 52  // ...@.....e..U..R
    DED0: 4D 3D E5 00 04 47 A0 00 68 25 00 01 02 25 02 01  // M=...G..h%...%..
    DEE0: 52 4D 68 25 00 01 51 05 02 65 00 01 52 04 51 0A  // RMh%..Q..e..R.Q.
    DEF0: 02 65 00 09 52 4D 3D E5 00 04 47 20 01 68 25 00  // .e..RM=...G .h%.
    DF00: 01 52 4D 43 20 01 02 65 00 12 52 04 4B E5 02 01  // .RMC ..e..R.K...
    DF10: 44 20 01 02 65 00 08 52 4D 3D E5 00 04 47 E4 00  // D ..e..RM=...G..
    DF20: 68 25 00 01 52 4D 68 25 00 01 02 65 00 00 52 04  // h%..RMh%...e..R.
    DF30: 02 65 00 00 52 4D 3D E5 00 04 47 01 01 68 25 00  // .e..RM=...G..h%.
    DF40: 01 52 4D 68 25 00 01 3D A5 00 00 49 20 01 02 01  // .RMh%..=...I ...
    DF50: 02 00 02 05 01 14 00 00 00 2C 21 01 00 55 00 00  // .........,!..U..
    DF60: 52 0C 02 01 00 02 3A 00 00 5B 43 20 01 52 4D 43  // R.....:..[C .RMC
    DF70: 20 01 66 06 02 29 00 00 02 68 00 4E 00 02 8C 00  //  .f..)...h.N....
    DF80: 20 00 52 33 5B 02 29 00 00 52 33 5B 38 03 02 01  //  .R3[.)..R3[8...
    DF90: 00 00 37 00 00 0E 25 00 20 52 14 08 25 00 0F 42  // ..7...%. R..%..B
    DFA0: 29 00 63 07 35 00 63 0A 3D 00 63 01 21 01 63 00  // ).c.5.c.=.c.!.c.
    DFB0: 7B 01 63 09 BB 01 63 08 E9 01 63 0B 01 02 5A 5A  // {.c...c...c...ZZ
    DFC0: 5B 0D 65 02 56 08 43 AD 02 03 0A 46 48 66 FF 2D  // [.e.V.C....FHf.-
    DFD0: 0D 42 1A 03 56 00 40 20 25 00 05 2D 0A 42 40 20  // .B..V.@ %..-.B@ 
    DFE0: 25 00 02 03 0A 48 40 01 04 44 55 00 00 01 64 43  // %....H@..DU...dC
    DFF0: 55 04 00 07 E5 43 55 FC 07 A5 43 55 8F 03 0A 48  // U....CU...CU...H
    E000: 46 56 00 41 3D E5 00 04 47 96 00 03 05 41 00 80  // FV.A=...G....A..
    E010: 01 01 4B 25 02 01 44 96 00 09 4D 41 7F FF 03 E5  // ..K%..D...MA....
    E020: 41 02 5C FA 11 56 FC 41 5C 52 03 56 7F FE 41 3D  // A.\..V.A\R.V..A=
    E030: A5 00 00 49 CC 00 07 A5 FF 55 7F 66 FF 2D 0D 42  // ...I.....U.f.-.B
    E040: DE 02 2D 0D 42 06 00 56 00 41 3D A5 02 14 49 49  // ..-.B..V.A=...II
    E050: 02 03 25 41 20 43 49 02 0D A5 FF 55 80 66 FF 2D  // ..%A CI....U.f.-
    E060: 0D 42 B6 02 03 04 40 00 00 3E 05 40 00 00 00 00  // .B....@..>.@....
    E070: 44 AD 02 03 21 43 00 03 E2 41 44 4C E4 41 05 00  // D...!C...ADL.A..
    E080: 44 07 01 3D A4 00 04 00 49 07 01 3D 04 01 00 00  // D..=....I..=....
    E090: 47 0F 01 2D 0D 42 0C 00 43 D8 00 03 04 40 06 00  // G..-.B..C....@..
    E0A0: 03 24 41 0A 00 03 64 41 0B 00 43 52 02 07 65 02  // .$A...dA..CR..e.
    E0B0: 56 F7 03 0A 46 48 56 00 41 3D E5 00 04 47 3C 01  // V...FHV.A=...G<.
    E0C0: 07 25 20 56 F9 43 42 01 5C 25 20 56 F9 02 4A 65  // .% V.CB.\% V..Je
    E0D0: 1E 56 01 44 42 01 07 25 1E 56 F8 4A 65 1E 56 01  // .V.DB..%.V.Je.V.
    E0E0: 44 4F 01 2D E5 41 01 2D 0D 48 10 00 3E E5 41 04  // DO.-.A.-.H..>.A.
    E0F0: 45 2D 01 03 0A 48 46 0D 25 0F 56 02 4A 25 0F 56  // E-...HF.%.V.J%.V
    E100: 04 44 70 01 43 AD 02 07 25 0F 56 FD 4A 25 0F 56  // .Dp.C...%.V.J%.V
    E110: 04 49 80 01 0D 65 02 56 08 56 00 41 4A 65 1E 56  // .I...e.V.V.AJe.V
    E120: 01 44 90 01 5C 25 1E 56 F8 04 51 02 4A 65 1E 56  // .D..\%.V..Q.Je.V
    E130: 01 44 A0 01 2D A5 41 01 2D 0D 48 10 00 3E A5 41  // .D..-.A.-.H..>.A
    E140: 04 45 90 01 43 AD 02 03 0A 46 48 56 08 48 20 25  // .E..C....FHV.H %
    E150: 00 02 03 22 48 40 0D 25 43 55 01 0D E5 44 55 10  // ..."H@.%CU...DU.
    E160: 03 0A 48 46 0D A5 11 56 01 51 14 0D 25 11 56 01  // ..HF...V.Q..%.V.
    E170: 51 14 43 AD 02 07 A5 11 56 FE 56 00 40 20 25 00  // Q.C.....V.V.@ %.
    E180: 02 03 0A 48 40 07 E5 44 55 EF 43 AD 02 08 A5 00  // ...H@..DU.C.....
    E190: 1B 66 FF 2D 0D 42 DE 02 03 21 43 00 03 A2 40 44  // .f.-.B...!C...@D
    E1A0: 03 0C 40 02 00 4C A4 40 00 00 49 29 02 2D 0C 42  // ..@..L.@..I).-.B
    E1B0: 04 00 43 14 02 2D 0D 42 06 00 3D A4 00 00 00 44  // ..C..-.B..=....D
    E1C0: 49 02 03 24 41 00 00 3E 25 41 FF 44 49 02 2D 0A  // I..$A..>%A.DI.-.
    E1D0: 42 40 43 2E 02 03 04 40 01 00 03 65 41 08 01 0A  // B@C....@...eA...
    E1E0: 01 56 40 01 05 19 56 88 88 01 00 01 F2 1A 56 40  // .V@...V.......V@
    E1F0: 01 BA 20 56 40 01 BA 30 56 40 01 BA 40 56 40 01  // .. V@..0V@..@V@.
    E200: BA 50 56 40 01 25 1F 56 20 01 25 2F 56 20 01 25  // .PV@.%.V .%/V .%
    E210: 3F 56 20 01 25 4F 56 20 01 2A 1F 56 41 01 2A 2F  // ?V .%OV .*.VA.*/
    E220: 56 41 01 2A 3F 56 41 01 2A 4F 56 41 3D 65 00 0B  // VA.*?VA.*OVA=e..
    E230: 44 AD 02 5C A2 06 56 DF 41 3A 00 00 5B 7A 84 00  // D..\..V.A:..[z..
    E240: 0C 00 FF FF FF 00 02 3F 00 00 00 5F 00 08 40 9C  // .......?..._..@.
    E250: 00 00 03 3F 00 00 00 5F 00 08 FF FF FF 00 03 3F  // ...?..._.......?
    E260: 00 00 2A 57 20 10 00 00 00 00 3F 00 05 00 39 00  // ..*W .....?...9.
    E270: 00 4B 00 00 80 01 3A 00 00 80 02 1B 00 00 80 03  // .K....:.........
    E280: 00 00 00 80 08 34 25 00 80 09 1C 25 00 80 0A 00  // .....4%....%....
    E290: 1B 00 9F 10 14 3F 00 80 11 01 38 00 9F 18 00 4A  // .....?....8....J
    E2A0: 00 9F FF 00 00 FF 03 02 01 00 01 03 02 01 00 01  // ................
    E2B0: 03 02 01 00 01 03 02 01 00 01 03 02 01 00 01 03  // ................
    E2C0: 02 01 00 01 4C 02 01 02 00 00 37 00 00 3D 0D 00  // ....L.....7..=..
    E2D0: 00 00 44 CE 01 56 00 41 03 21 41 01 09 25 41 0F  // ..D..V.A.!A..%A.
    E2E0: 15 0D 41 02 03 0A 40 42 66 FF 2D 0D 42 34 02 2D  // ..A...@Bf.-.B4.-
    E2F0: 0A 42 41 03 0C 48 02 00 0D A5 A6 55 01 54 08 A6  // .BA..H.....U.T..
    E300: 55 03 0C 48 00 00 03 F9 41 01 15 3D 41 04 5C BA  // U..H....A..=A.\.
    E310: 26 4C 8F 41 03 0A 42 40 4A 25 26 4C 01 49 81 00  // &L.A..B@J%&L.I..
    E320: 0D 0D 26 4C 01 01 0D 25 26 4C 10 4A 25 26 4C 20  // ..&L...%&L.J%&L 
    E330: 44 67 00 07 25 26 4C EF 4A 25 26 4C 20 49 74 00  // Dg..%&L.J%&L It.
    E340: 0D 25 29 4C 40 56 00 41 03 09 41 00 3B 02 41 03  // .%)L@V.A..A.;.A.
    E350: 3B 41 00 1B 25 41 04 01 A2 27 4C 41 03 69 41 01  // ;A..%A...'LA.iA.
    E360: 15 2D 41 04 01 2A 27 4C 41 56 00 40 0F E5 40 80  // .-A..*'LAV.@..@.
    E370: 03 73 40 00 01 02 2C 4C 40 56 00 40 03 6B 40 00  // .s@...,L@V.@.k@.
    E380: 01 02 2C 4C 40 03 63 40 00 01 02 2C 4C 40 03 7B  // ..,L@.c@...,L@.{
    E390: 40 00 09 65 40 0F 01 02 2C 4C 40 3E 25 41 04 47  // @..e@...,L@>%A.G
    E3A0: 10 01 33 25 41 04 2D 05 46 04 00 00 00 03 63 40  // ..3%A.-.F.....c@
    E3B0: 00 01 02 2C 4C 40 03 6B 40 00 01 02 2C 4C 40 03  // ...,L@.k@...,L@.
    E3C0: 73 40 00 01 02 2C 4C 40 03 7B 40 00 01 02 2C 4C  // s@...,L@.{@...,L
    E3D0: 40 43 D7 00 0D 25 29 4C 02 0D 25 27 4C 01 03 29  // @C...%)L..%'L..)
    E3E0: 40 01 21 25 40 0A 2D 25 40 32 4A 25 2A 4C 01 49  // @.!%@.-%@2J%*L.I
    E3F0: 42 01 51 0A 33 25 40 01 3E 25 40 00 49 26 01 02  // B.Q.3%@.>%@.I&..
    E400: 65 01 01 43 CA 01 4A 05 2A 4C F0 8F FF 00 44 54  // e..C..J.*L....DT
    E410: 01 02 65 01 02 43 CA 01 01 05 2C 4C 01 00 00 80  // ..e..C....,L....
    E420: 03 00 40 2C 4C 02 6A 01 40 02 B8 01 2A 4C 08 A5  // ..@,L.j.@...*L..
    E430: 01 1F 3D A5 01 00 46 7C 01 02 65 01 03 43 CA 01  // ..=...F|..e..C..
    E440: 32 A5 01 01 3D 8D 00 00 00 44 CA 01 3D A5 01 00  // 2...=....D..=...
    E450: 44 CA 01 03 31 41 01 03 19 40 00 56 18 40 3B 02  // D...1A...@.V.@;.
    E460: 40 03 28 40 2C 4C 03 68 40 2C 4C 03 A8 40 2C 4C  // @.(@,L.h@,L..@,L
    E470: 03 E8 40 2C 4C 04 02 00 40 3E 25 41 04 47 CA 01  // ..@,L...@>%A.G..
    E480: 33 25 41 04 2D 05 46 04 00 00 00 43 9D 01 3A 00  // 3%A.-.F....C..:.
    E490: 00 5B 66 FF 2D 0D 42 34 02 03 0C 48 00 00 01 8D  // .[f.-.B4...H....
    E4A0: 2E 4C 0D 00 01 05 2F 4C 00 1C 02 00 01 05 30 4C  // .L..../L......0L
    E4B0: 10 11 3D 12 2D 0D 42 04 00 2C 25 00 01 3D 25 00  // ..=.-.B..,%..=%.
    E4C0: 06 49 D5 01 56 08 48 03 25 41 10 0D 65 D5 55 40  // .I..V.H.%A..e.U@
    E4D0: 07 65 D5 55 BF 33 25 41 01 3E 25 41 00 49 07 02  // .e.U.3%A.>%A.I..
    E4E0: 0D 25 79 55 01 54 30 79 55 0D 25 7A 55 01 54 30  // .%yU.T0yU.%zU.T0
    E4F0: 7A 55 51 32 5B 7A 18 00 00 00 00 00 1C 00 04 00  // zUQ2[z..........
    E500: 38 00 08 00 54 00 0C 00 70 00 10 00 8C 00 14 00  // 8...T...p.......
    E510: 5C 00 01 02 00 04 02 25 01 04 03 31 41 00 09 0D  // \......%...1A...
    E520: 41 0F 00 15 0D 41 01 66 FF 2D 0D 42 50 00 2D 0A  // A....A.f.-.BP.-.
    E530: 42 41 03 0C 48 00 00 07 A5 A6 55 FE 01 0D A6 55  // BA..H.....U....U
    E540: 11 11 50 02 4A 0D A9 55 01 00 49 41 00 02 25 01  // ..P.J..U..IA..%.
    E550: 13 54 08 A6 55 54 00 A8 55 3A 00 00 5B 7A 0C 00  // .T..UT..U:..[z..
    E560: 00 00 04 00 08 00 0C 00 10 00 14 00 78 00 01 01  // ............x...
    E570: 00 04 37 00 00 55 00 01 52 3E 02 E4 01 1B 00 66  // ..7..U..R>.....f
    E580: 1C 2D 0C 42 04 00 52 12 4B E5 00 02 44 34 00 01  // .-.B..R.K...D4..
    E590: 05 00 00 4F 5C 01 00 0D 0D 01 00 02 04 43 42 00  // ...O\........CB.
    E5A0: 01 05 00 00 4F 5C 01 00 07 0D 01 00 FD FB 52 07  // ....O\........R.
    E5B0: 02 05 01 24 71 01 03 55 00 02 52 3F 02 05 01 80  // ...$q..U..R?....
    E5C0: 38 01 03 02 25 02 01 52 3F 02 05 01 50 C3 00 03  // 8...%..R?...P...
    E5D0: 02 25 02 02 52 3F 02 05 01 3C 41 00 03 02 25 02  // .%..R?...<A...%.
    E5E0: 03 52 3F 5B 88 00 01 01 08 04 37 00 00 01 05 00  // .R?[......7.....
    E5F0: 00 91 2D 01 00 03 88 00 01 00 56 20 00 03 22 43  // ..-.......V .."C
    E600: 00 03 02 40 44 03 62 40 00 01 05 00 00 91 2D 01  // ...@D.b@......-.
    E610: 00 0F E5 40 80 01 02 01 00 40 01 05 00 00 91 2D  // ...@.....@.....-
    E620: 01 00 03 02 41 01 42 21 00 63 08 4E 00 5A 5A 43  // ....A.B!.c.N.ZZC
    E630: 6E 00 15 2D 40 06 01 05 00 00 52 5C 01 00 5C EA  // n..-@.....R\..\.
    E640: 01 00 3F 40 43 63 00 2D 25 00 01 3E 25 00 04 45  // ..?@Cc.-%..>%..E
    E650: 19 00 01 05 00 00 91 2D 01 00 01 1A 01 00 00 01  // .......-........
    E660: 05 00 00 91 2D 01 00 03 02 41 01 5B C9 01 02 01  // ....-....A.[....
    E670: 04 04 37 00 00 42 21 00 63 07 29 00 63 03 66 00  // ..7..B!.c.).c.f.
    E680: 63 02 CD 00 63 04 F2 00 63 0C 7D 01 63 0D A0 01  // c...c...c.}.c...
    E690: 5A 5A 43 C8 01 01 0D 5B 55 9F 0F 01 05 5C 55 00  // ZZC....[U....\U.
    E6A0: 00 00 00 01 05 5D 55 7D 00 00 00 66 06 01 4C 5D  // .....]U}...f..L]
    E6B0: 55 31 00 03 24 46 3B 00 3E 25 46 00 44 58 00 01  // U1..$F;.>%F.DX..
    E6C0: 25 5D 55 00 4A 25 59 55 10 49 C8 01 0D E5 59 55  // %]U.J%YU.I....YU
    E6D0: 02 5B 4A 25 59 55 01 44 C8 01 4A 25 5A 55 10 44  // .[J%YU.D..J%ZU.D
    E6E0: 6E 00 4A E5 59 55 02 49 89 00 4A 25 5A 55 08 49  // n.J.YU.I..J%ZU.I
    E6F0: C8 01 43 BD 00 4A E5 59 55 01 49 C8 01 4A 25 59  // ..C..J.YU.I..J%Y
    E700: 55 10 44 BD 00 0D A5 59 55 03 0D 65 59 55 03 01  // U.D....YU..eYU..
    E710: 0D 5B 55 00 00 5C 25 59 55 EF 01 4A 25 5A 55 10  // .[U..\%YU..J%ZU.
    E720: 44 AF 00 01 0D 5B 55 9F 0F 07 E5 59 55 FC 0D E5  // D....[U....YU...
    E730: 5D 55 01 0D 25 59 55 11 5B 66 06 03 24 46 3B 00  // ]U..%YU.[f..$F;.
    E740: 3E 25 46 00 49 C8 01 4A 25 59 55 01 44 C8 01 4A  // >%F.I..J%YU.D..J
    E750: 25 5A 55 10 44 E3 00 5C E5 59 55 FE 02 5B 4A 65  // %ZU.D..\.YU..[Je
    E760: 53 00 02 44 FF 00 0D 25 61 55 01 3D 8D 00 00 00  // S..D...%aU.=....
    E770: 44 7C 01 03 05 46 60 FE CD 00 56 00 41 03 19 41  // D|...F`...V.A..A
    E780: 00 21 05 41 FF 0F 00 00 27 02 46 40 3E 05 41 00  // .!.A....'.F@>.A.
    E790: 00 00 00 44 2F 01 2D 0D 40 01 00 01 8A 5B 55 40  // ...D/.-.@....[U@
    E7A0: 56 00 41 03 19 41 00 21 02 40 41 27 02 46 40 01  // V.A..A.!.@A'.F@.
    E7B0: A5 60 55 0C 01 0A 60 55 40 15 05 40 04 56 00 41  // .`U...`U@..@.V.A
    E7C0: 03 29 41 00 2D 0D 41 01 00 21 02 40 41 1B 05 40  // .)A.-.A..!.@A..@
    E7D0: 08 01 0A 5E 55 40 0D E5 5E 55 C0 07 25 61 55 FE  // ...^U@..^U..%aU.
    E7E0: 4A 65 61 55 01 49 74 01 5B 4A 25 59 55 01 44 95  // JeaU.It.[J%YU.D.
    E7F0: 01 4A 25 59 55 10 49 C8 01 4A 25 5A 55 10 44 8D  // .J%YU.I..J%ZU.D.
    E800: 01 07 E5 5D 55 FE 0D 25 59 55 11 5B 4A 25 59 55  // ...]U..%YU.[J%YU
    E810: 01 44 C8 01 4A 25 59 55 10 44 C8 01 4A 25 5A 55  // .D..J%YU.D..J%ZU
    E820: 10 44 B0 01 07 A5 59 55 FC 07 65 59 55 FC 5C 25  // .D....YU..eYU.\%
    E830: 59 55 EF 01 5B 00 83 00 03 01 08 00 37 00 00 56  // YU..[.......7..V
    E840: 00 01 3D E5 00 20 48 1B 00 03 39 43 00 03 02 01  // ..=.. H...9C....
    E850: 44 56 00 00 03 09 00 00 1B 05 00 05 2D 05 00 00  // DV..........-...
    E860: 74 01 00 01 02 00 00 00 03 00 40 01 00 56 00 41  // t.........@..V.A
    E870: 03 21 41 00 09 25 41 1F 75 02 40 41 03 65 41 20  // .!A..%A.u.@A.eA 
    E880: 33 62 41 41 3D EA 00 41 47 73 00 2D 0D 00 01 00  // 3bAA=..AGs.-....
    E890: 01 02 00 00 00 02 00 00 01 00 03 2A 41 41 56 28  // ...........*AAV(
    E8A0: 41 6E 02 00 41 0F 01 40 00 02 02 00 40 33 05 01  // An..A..@....@3..
    E8B0: 01 00 00 00 08 02 00 01 5B 00 AE 00 03 01 00 10  // ........[.......
    E8C0: 37 00 00 56 00 40 4A 25 00 EC 01 44 30 00 4A 25  // 7..V.@J%...D0.J%
    E8D0: 05 EC 1E 49 30 00 03 25 40 01 01 05 05 EC 03 00  // ...I0..%@.......
    E8E0: 00 00 4A 65 05 EC 0F 49 28 00 3D 65 02 00 49 3B  // ..Je...I(.=e..I;
    E8F0: 00 2C 25 02 F4 3D E5 02 00 49 46 00 2C A5 02 F4  // .,%..=...IF.,...
    E900: 3D 65 02 02 49 61 00 01 05 00 00 28 68 01 00 01  // =e..Ia.....(h...
    E910: 01 01 00 00 02 05 00 A4 A0 05 00 54 00 63 C0 01  // ...........T.c..
    E920: 01 64 C0 00 01 21 65 C0 02 01 01 66 C0 01 01 31  // .d...!e....f...1
    E930: 67 C0 02 01 01 E8 C0 03 3D 65 02 01 44 8E 00 3D  // g.......=e..D..=
    E940: E5 02 01 44 8E 00 51 02 4A E5 A0 21 80 49 8E 00  // ...D..Q.J..!.I..
    E950: 3E 25 40 01 49 AD 00 01 05 05 EC 01 00 00 00 4A  // >%@.I..........J
    E960: 65 05 EC 0F 49 A5 00 5B FD 02 02 01 00 00 37 00  // e...I..[......7.
    E970: 00 3D 25 01 01 44 7F 00 3D 25 01 02 44 6C 01 3D  // .=%..D..=%..Dl.=
    E980: 25 01 00 49 CE 02 3D 05 00 00 00 00 00 49 39 00  // %..I..=......I9.
    E990: 3A 00 00 0D 25 90 4A 01 4A 65 90 4A 01 44 30 00  // :...%.J.Je.J.D0.
    E9A0: 5B 54 20 90 4A 02 E5 00 03 52 3C 03 00 40 24 01  // [T .J....R<..@$.
    E9B0: 3E 39 40 00 44 7B 00 4A A5 24 01 08 44 4F 00 03  // >9@.D{.J.$..DO..
    E9C0: 39 40 00 3E E5 40 00 49 66 00 03 E5 40 20 01 02  // 9@.>.@.If...@ ..
    E9D0: 24 01 40 4A A5 24 01 08 44 6B 00 4A A5 24 01 10  // $.@J.$..Dk.J.$..
    E9E0: 44 73 00 55 38 00 5B 3D 65 01 02 44 DB 00 02 05  // Ds.U8.[=e..D....
    E9F0: 00 08 E8 00 00 52 3C 3C F9 24 01 00 44 C5 00 07  // .....R<<.$..D...
    EA00: 25 15 01 FE 4A A5 24 01 10 44 9C 00 03 00 40 24  // %...J.$..D....@$
    EA10: 01 03 F9 40 00 3E 25 40 00 49 B8 00 03 25 40 68  // ...@.>%@.I...%@h
    EA20: 01 02 24 01 40 4A A5 24 01 10 44 BD 00 5D 05 00  // ..$.@J.$..D..]..
    EA30: 00 00 00 FF 00 00 00 00 52 29 07 0D 18 01 F8 FE  // ........R)......
    EA40: 43 3E 01 02 05 00 40 7F 95 23 07 25 15 01 FE 4A  // C>....@..#.%...J
    EA50: A5 F9 34 03 44 3E 01 56 08 40 03 31 40 01 15 0D  // ..4.D>.V.@.1@...
    EA60: 40 0E 0F 0D 40 0F 04 01 0A 10 35 40 5C B1 11 35  // @...@.....5@\..5
    EA70: FC 01 51 05 07 A5 F9 34 FC 01 25 FD 34 40 01 05  // ..Q....4..%.4@..
    EA80: FA 34 00 00 DD 00 01 65 14 35 01 54 08 FC 34 01  // .4.....e.5.T..4.
    EA90: A5 FD 34 E8 0D A5 11 35 10 4A 65 1C 35 02 44 31  // ..4....5.Je.5.D1
    EAA0: 01 0D 65 11 35 03 01 01 42 01 00 01 01 46 01 00  // ..e.5...B....F..
    EAB0: 01 01 4A 01 00 01 01 4E 01 00 01 01 52 01 00 01  // ..J....N....R...
    EAC0: 01 56 01 00 3D 65 01 02 49 6B 01 5C 0D 18 01 F8  // .V..=e..Ik.\....
    EAD0: FF 01 01 5B 56 00 41 03 31 41 01 09 25 41 03 15  // ...[V.A.1A..%A..
    EAE0: 25 41 02 66 FF 2D 0D 42 D5 02 2D 0A 42 41 26 05  // %A.f.-.B..-.BA&.
    EAF0: 00 0A 00 00 00 03 04 41 00 00 27 02 41 40 3E 05  // .......A..'.A@>.
    EB00: 40 00 00 01 00 45 A5 01 03 0D 40 FF FF 66 FF 2D  // @....E....@..f.-
    EB10: 0D 42 E5 02 56 00 41 03 39 41 01 15 25 41 02 2D  // .B..V.A.9A..%A.-
    EB20: 0A 42 41 03 0C 48 00 00 01 0A 3A 3B 40 3A 00 00  // .BA..H....:;@:..
    EB30: 3D 65 01 0B 49 30 02 20 05 00 64 00 00 00 03 0C  // =e..I0. ..d.....
    EB40: 48 02 00 03 00 41 40 01 0F 25 41 10 09 0D 41 DF  // H....A@..%A...A.
    EB50: F7 4B A5 01 04 44 F4 01 0F 65 41 08 03 0C 48 00  // .K...D...eA...H.
    EB60: 00 4A 05 AF 3B 01 00 00 00 44 19 02 03 0C 48 02  // .J..;....D....H.
    EB70: 00 3C 02 41 01 40 49 19 02 3C 02 40 01 41 44 CE  // .<.A.@I..<.@.AD.
    EB80: 02 03 0C 48 02 00 07 25 40 01 EF 01 02 41 01 40  // ...H...%@....A.@
    EB90: 01 0A 40 01 41 43 CE 02 56 00 40 03 8D 40 0C 00  // ..@.AC..V.@..@..
    EBA0: 3D 65 01 18 44 53 02 03 8D 40 3E 00 3D 65 01 19  // =e..DS...@>.=e..
    EBB0: 44 53 02 03 A9 40 01 33 A5 40 14 03 31 40 01 09  // DS...@.3.@..1@..
    EBC0: 25 40 03 15 25 40 04 0F 0D 40 01 01 4B A5 01 04  // %@..%@...@..K...
    EBD0: 44 70 02 0F 0D 40 00 02 56 00 41 03 29 41 01 33  // Dp...@..V.A.)A.3
    EBE0: 25 41 14 03 0C 48 00 00 4A 05 AF 3B 01 00 00 00  // %A...H..J..;....
    EBF0: 44 AC 02 03 0C 48 02 00 4A 25 40 01 10 49 AC 02  // D....H..J%@..I..
    EC00: 3C 22 43 01 41 49 AC 02 03 1A 48 40 3C 0A 00 01  // <"C.AI....H@<...
    EC10: 40 44 CE 02 03 1A 48 40 07 25 00 01 FE 03 0C 48  // @D....H@.%.....H
    EC20: 02 00 01 22 43 01 41 07 0D 40 01 EF F7 03 1A 48  // ..."C.A..@.....H
    EC30: 40 01 0A 00 01 40 3A 00 00 5B 7A 28 00 00 CA 9A  // @....@:..[z(....
    EC40: 3B 80 7C 81 4A 00 2F 68 59 00 94 35 77 00 00 00  // ;.|.J./hY..5w...
    EC50: 00 00 02 04 00 00 04 08 00 00 06 0C 00 00 08 10  // ................
    EC60: 00 00 0A 14 00 FF FF FF 00 00 00 00 00 00 00 00  // ................
    EC70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    EC80: 00 00 00 00                                      // ....


WDDT
----
[000h 0000 004h]                   Signature : "WDDT"    [Watchdog Description Table]
[004h 0004 004h]                Table Length : 00000040
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 85
[00Ah 0010 006h]                      Oem ID : "ALASKA"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 20091013

[024h 0036 002h]       Specification Version : 0000
[026h 0038 002h]               Table Version : 0100
[028h 0040 002h]               PCI Vendor ID : 0100

[02Ah 0042 00Ch]              Timer Register : [Generic Address Structure]
[02Ah 0042 001h]                    Space ID : 01 [SystemIO]
[02Bh 0043 001h]                   Bit Width : FF
[02Ch 0044 001h]                  Bit Offset : 00
[02Dh 0045 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Eh 0046 008h]                     Address : 0000000000000000

[036h 0054 002h]                   Max Count : 003F
[038h 0056 002h]                   Min Count : 0004
[03Ah 0058 002h]                      Period : 0258
[03Ch 0060 002h]      Status (decoded below) : 0001
                                   Available : 1
                                      Active : 0
                                     OS Owns : 0
                                  User Reset : 0
                               Timeout Reset : 0
                            Power Fail Reset : 0
                               Unknown Reset : 0
[03Eh 0062 002h]  Capability (decoded below) : 0000
                                  Auto Reset : 0
                               Timeout Alert : 0

Raw Table Data: Length 64 (0x40)

    0000: 57 44 44 54 40 00 00 00 01 85 41 4C 41 53 4B 41  // WDDT@.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 00 00 00 00 49 4E 54 4C  // A M I ......INTL
    0020: 13 10 09 20 00 00 00 01 00 01 01 FF 00 00 00 00  // ... ............
    0030: 00 00 00 00 00 00 3F 00 04 00 58 02 01 00 00 00  // ......?...X.....


