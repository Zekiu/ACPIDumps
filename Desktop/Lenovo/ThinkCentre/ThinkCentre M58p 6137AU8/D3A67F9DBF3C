
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20221020
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x000000A6  0x01  "LENOVO"  "TC-5C   "  0x0000012E  "INTL"   0x20050228
 02)  MCFG  0x0000003C  0x01  "LENOVO"  "TC-5C   "  0x0000012E  " LTP"   0x00000000
 03)  ASF!  0x00000077  0x20  "LENOVO"  "TC-5C   "  0x0000012E  "PTL "   0x00000001
 04)  APIC  0x00000068  0x01  "LENOVO"  "TC-5C   "  0x0000012E  " LTP"   0x00000000
 05)  SLIC  0x00000176  0x01  "LENOVO"  "TC-5C   "  0x0000012E  " LTP"   0x00000000
 06)  SSDT  0x000000A6  0x01  "LENOVO"  "TC-5C   "  0x0000012E  "INTL"   0x20050228
 07)  BOOT  0x00000028  0x01  "LENOVO"  "TC-5C   "  0x0000012E  " LTP"   0x00000001
 08)  SSDT  0x000013C2  0x01  "LENOVO"  "TC-5C   "  0x0000012E  "INTL"   0x20050228
 09)  DSDT  0x00009693  0x01  "LENOVO"  "TC-5C   "  0x0000012E  "MSFT"   0x0100000E
 10)  SSDT  0x000000A6  0x01  "LENOVO"  "TC-5C   "  0x0000012E  "INTL"   0x20050228
 11)  SSDT  0x000000A6  0x01  "LENOVO"  "TC-5C   "  0x0000012E  "INTL"   0x20050228
 12)  SSDT  0x000000A6  0x01  "LENOVO"  "TC-5C   "  0x0000012E  "INTL"   0x20050228
 13)  DMAR  0x00000120  0x01  "LENOVO"  "TC-5C   "  0x0000012E  "LOHR"   0x00000001
 14)  FACP  0x000000F4  0x03  "LENOVO"  "TC-5C   "  0x0000012E  "PTL "   0x00000002
 15)  SSDT  0x0000025F  0x01  "LENOVO"  "TC-5C   "  0x0000012E  "INTL"   0x20050228
 16)  SSDT  0x000000A6  0x01  "LENOVO"  "TC-5C   "  0x0000012E  "INTL"   0x20050228
 17)  TCPA  0x00000032  0x02  "LENOVO"  "TC-5C   "  0x0000012E  "PTL "   0x00000000
 18)  HPET  0x00000038  0x01  "LENOVO"  "TC-5C   "  0x0000012E  " LTP"   0x00000001
 19)  SSDT  0x000000A6  0x01  "LENOVO"  "TC-5C   "  0x0000012E  "INTL"   0x20050228
 20)  FACS  0x00000040  0x01
 21)  SSDT  0x0000016E  0x01  "LENOVO"  "TC-5C   "  0x0000012E  "INTL"   0x20050228
 22)  SSDT  0x000001DD  0x01  "LENOVO"  "TC-5C   "  0x0000012E  "INTL"   0x20050228
 23)  SSDT  0x00000085  0x01  "LENOVO"  "TC-5C   "  0x0000012E  "INTL"   0x20050228
 24)  SSDT  0x0000067D  0x01  "LENOVO"  "TC-5C   "  0x0000012E  "INTL"   0x20050228

Found 24 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 00000068
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : AD
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TC-5C   "
[018h 0024 004h]                Oem Revision : 0000012E
[01Ch 0028 004h]             Asl Compiler ID : " LTP"
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 01
[037h 0055 001h]               Local Apic ID : 01
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 01 [I/O APIC]
[03Dh 0061 001h]                      Length : 0C
[03Eh 0062 001h]                 I/O Apic ID : 02
[03Fh 0063 001h]                    Reserved : 00
[040h 0064 004h]                     Address : FEC00000
[044h 0068 004h]                   Interrupt : 00000000

[048h 0072 001h]               Subtable Type : 04 [Local APIC NMI]
[049h 0073 001h]                      Length : 06
[04Ah 0074 001h]                Processor ID : 00
[04Bh 0075 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[04Dh 0077 001h]        Interrupt Input LINT : 01

[04Eh 0078 001h]               Subtable Type : 04 [Local APIC NMI]
[04Fh 0079 001h]                      Length : 06
[050h 0080 001h]                Processor ID : 01
[051h 0081 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[053h 0083 001h]        Interrupt Input LINT : 01

[054h 0084 001h]               Subtable Type : 02 [Interrupt Source Override]
[055h 0085 001h]                      Length : 0A
[056h 0086 001h]                         Bus : 00
[057h 0087 001h]                      Source : 00
[058h 0088 004h]                   Interrupt : 00000002
[05Ch 0092 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1

[05Eh 0094 001h]               Subtable Type : 02 [Interrupt Source Override]
[05Fh 0095 001h]                      Length : 0A
[060h 0096 001h]                         Bus : 00
[061h 0097 001h]                      Source : 09
[062h 0098 004h]                   Interrupt : 00000009
[066h 0102 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 104 (0x68)

    0000: 41 50 49 43 68 00 00 00 01 AD 4C 45 4E 4F 56 4F  // APICh.....LENOVO
    0010: 54 43 2D 35 43 20 20 20 2E 01 00 00 20 4C 54 50  // TC-5C   .... LTP
    0020: 00 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 01 0C 02 00  // ................
    0040: 00 00 C0 FE 00 00 00 00 04 06 00 05 00 01 04 06  // ................
    0050: 01 05 00 01 02 0A 00 00 02 00 00 00 05 00 02 0A  // ................
    0060: 00 09 09 00 00 00 0D 00                          // ........


ASF!
----
[000h 0000 004h]                   Signature : "ASF!"    [Alert Standard Format Table]
[004h 0004 004h]                Table Length : 00000077
[008h 0008 001h]                    Revision : 20
[009h 0009 001h]                    Checksum : 82
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TC-5C   "
[018h 0024 004h]                Oem Revision : 0000012E
[01Ch 0028 004h]             Asl Compiler ID : "PTL "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 001h]               Subtable Type : 00 [ASF Information]
[025h 0037 001h]                    Reserved : 00
[026h 0038 002h]                      Length : 0010
[028h 0040 001h]         Minimum Reset Value : 3C
[029h 0041 001h]    Minimum Polling Interval : 02
[02Ah 0042 002h]                   System ID : 4830
[02Ch 0044 004h]             Manufacturer ID : 664A0000
[030h 0048 001h]                       Flags : 00
[031h 0049 003h]                    Reserved : 000000

[034h 0052 001h]               Subtable Type : 01 [ASF Alerts]
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]                      Length : 0014
[038h 0056 001h]                  AssertMask : 00
[039h 0057 001h]                DeassertMask : 00
[03Ah 0058 001h]                 Alert Count : 01
[03Bh 0059 001h]           Alert Data Length : 0C

[03Ch 0060 001h]                     Address : 88
[03Dh 0061 001h]                     Command : 04
[03Eh 0062 001h]                        Mask : 01
[03Fh 0063 001h]                       Value : 01
[040h 0064 001h]                  SensorType : 05
[041h 0065 001h]                        Type : 6F
[042h 0066 001h]                      Offset : 00
[043h 0067 001h]                  SourceType : 68
[044h 0068 001h]                    Severity : 10
[045h 0069 001h]                SensorNumber : FF
[046h 0070 001h]                      Entity : 1C
[047h 0071 001h]                    Instance : 00

[048h 0072 001h]               Subtable Type : 02 [ASF Remote Control]
[049h 0073 001h]                    Reserved : 00
[04Ah 0074 002h]                      Length : 0018
[04Ch 0076 001h]               Control Count : 04
[04Dh 0077 001h]         Control Data Length : 04
[04Eh 0078 002h]                    Reserved : 0000

[050h 0080 001h]                    Function : 02
[051h 0081 001h]                     Address : 88
[052h 0082 001h]                     Command : 00
[053h 0083 001h]                       Value : 01

[054h 0084 001h]                    Function : 01
[055h 0085 001h]                     Address : 88
[056h 0086 001h]                     Command : 00
[057h 0087 001h]                       Value : 02

[058h 0088 001h]                    Function : 00
[059h 0089 001h]                     Address : 88
[05Ah 0090 001h]                     Command : 00
[05Bh 0091 001h]                       Value : 03

[05Ch 0092 001h]                    Function : 03
[05Dh 0093 001h]                     Address : 88
[05Eh 0094 001h]                     Command : 00
[05Fh 0095 001h]                       Value : 04

[060h 0096 001h]               Subtable Type : 83 [ASF RMCP Boot Options]
[061h 0097 001h]                    Reserved : 00
[062h 0098 002h]                      Length : 0017
[064h 0100 007h]                Capabilities : 20 00 00 00 00 13 F0
[06Bh 0107 001h]             Completion Code : 01
[06Ch 0108 004h]               Enterprise ID : 00000000
[070h 0112 001h]                     Command : 00
[071h 0113 002h]                   Parameter : 0000
[073h 0115 002h]                Boot Options : 0000
[075h 0117 002h]              Oem Parameters : 0000


Raw Table Data: Length 119 (0x77)

    0000: 41 53 46 21 77 00 00 00 20 82 4C 45 4E 4F 56 4F  // ASF!w... .LENOVO
    0010: 54 43 2D 35 43 20 20 20 2E 01 00 00 50 54 4C 20  // TC-5C   ....PTL 
    0020: 01 00 00 00 00 00 10 00 3C 02 30 48 00 00 4A 66  // ........<.0H..Jf
    0030: 00 00 00 00 01 00 14 00 00 00 01 0C 88 04 01 01  // ................
    0040: 05 6F 00 68 10 FF 1C 00 02 00 18 00 04 04 00 00  // .o.h............
    0050: 02 88 00 01 01 88 00 02 00 88 00 03 03 88 00 04  // ................
    0060: 83 00 17 00 20 00 00 00 00 13 F0 01 00 00 00 00  // .... ...........
    0070: 00 00 00 00 00 00 00                             // .......


BOOT
----
[000h 0000 004h]                   Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : BE
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TC-5C   "
[018h 0024 004h]                Oem Revision : 0000012E
[01Ch 0028 004h]             Asl Compiler ID : " LTP"
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 001h]         Boot Register Index : 36
[025h 0037 003h]                    Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 BE 4C 45 4E 4F 56 4F  // BOOT(.....LENOVO
    0010: 54 43 2D 35 43 20 20 20 2E 01 00 00 20 4C 54 50  // TC-5C   .... LTP
    0020: 01 00 00 00 36 00 00 00                          // ....6...


DMAR
----
[000h 0000 004h]                   Signature : "DMAR"    [DMA Remapping Table]
[004h 0004 004h]                Table Length : 00000120
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 98
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TC-5C   "
[018h 0024 004h]                Oem Revision : 0000012E
[01Ch 0028 004h]             Asl Compiler ID : "LOHR"
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 001h]          Host Address Width : 23
[025h 0037 001h]                       Flags : 00
[026h 0038 00Ah]                    Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050 002h]                      Length : 0018

[034h 0052 001h]                       Flags : 00
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]          PCI Segment Number : 0000
[038h 0056 008h]       Register Base Address : 00000000FED90000

[040h 0064 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065 001h]                Entry Length : 08
[042h 0066 002h]                    Reserved : 0000
[044h 0068 001h]              Enumeration ID : 00
[045h 0069 001h]              PCI Bus Number : 00

[046h 0070 002h]                    PCI Path : 1B,00


[048h 0072 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074 002h]                      Length : 0020

[04Ch 0076 001h]                       Flags : 00
[04Dh 0077 001h]                    Reserved : 00
[04Eh 0078 002h]          PCI Segment Number : 0000
[050h 0080 008h]       Register Base Address : 00000000FED91000

[058h 0088 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[059h 0089 001h]                Entry Length : 08
[05Ah 0090 002h]                    Reserved : 0000
[05Ch 0092 001h]              Enumeration ID : 00
[05Dh 0093 001h]              PCI Bus Number : 00

[05Eh 0094 002h]                    PCI Path : 02,00


[060h 0096 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[061h 0097 001h]                Entry Length : 08
[062h 0098 002h]                    Reserved : 0000
[064h 0100 001h]              Enumeration ID : 00
[065h 0101 001h]              PCI Bus Number : 00

[066h 0102 002h]                    PCI Path : 02,01


[068h 0104 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[06Ah 0106 002h]                      Length : 0028

[06Ch 0108 001h]                       Flags : 00
[06Dh 0109 001h]                    Reserved : 00
[06Eh 0110 002h]          PCI Segment Number : 0000
[070h 0112 008h]       Register Base Address : 00000000FED92000

[078h 0120 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[079h 0121 001h]                Entry Length : 08
[07Ah 0122 002h]                    Reserved : 0000
[07Ch 0124 001h]              Enumeration ID : 00
[07Dh 0125 001h]              PCI Bus Number : 00

[07Eh 0126 002h]                    PCI Path : 03,00


[080h 0128 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[081h 0129 001h]                Entry Length : 08
[082h 0130 002h]                    Reserved : 0000
[084h 0132 001h]              Enumeration ID : 00
[085h 0133 001h]              PCI Bus Number : 00

[086h 0134 002h]                    PCI Path : 03,02


[088h 0136 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[089h 0137 001h]                Entry Length : 08
[08Ah 0138 002h]                    Reserved : 0000
[08Ch 0140 001h]              Enumeration ID : 00
[08Dh 0141 001h]              PCI Bus Number : 00

[08Eh 0142 002h]                    PCI Path : 03,03


[090h 0144 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[092h 0146 002h]                      Length : 0010

[094h 0148 001h]                       Flags : 01
[095h 0149 001h]                    Reserved : 00
[096h 0150 002h]          PCI Segment Number : 0000
[098h 0152 008h]       Register Base Address : 00000000FED93000

[0A0h 0160 002h]               Subtable Type : 0001 [Reserved Memory Region]
[0A2h 0162 002h]                      Length : 0028

[0A4h 0164 002h]                    Reserved : 0000
[0A6h 0166 002h]          PCI Segment Number : 0000
[0A8h 0168 008h]                Base Address : 00000000D7C00000
[0B0h 0176 008h]         End Address (limit) : 00000000DFFFFFFF

[0B8h 0184 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0B9h 0185 001h]                Entry Length : 08
[0BAh 0186 002h]                    Reserved : 0000
[0BCh 0188 001h]              Enumeration ID : 00
[0BDh 0189 001h]              PCI Bus Number : 00

[0BEh 0190 002h]                    PCI Path : 02,00


[0C0h 0192 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0C1h 0193 001h]                Entry Length : 08
[0C2h 0194 002h]                    Reserved : 0000
[0C4h 0196 001h]              Enumeration ID : 00
[0C5h 0197 001h]              PCI Bus Number : 00

[0C6h 0198 002h]                    PCI Path : 02,01


[0C8h 0200 002h]               Subtable Type : 0001 [Reserved Memory Region]
[0CAh 0202 002h]                      Length : 0058

[0CCh 0204 002h]                    Reserved : 0000
[0CEh 0206 002h]          PCI Segment Number : 0000
[0D0h 0208 008h]                Base Address : 00000000CFFBC000
[0D8h 0216 008h]         End Address (limit) : 00000000CFFFFFFF

[0E0h 0224 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0E1h 0225 001h]                Entry Length : 08
[0E2h 0226 002h]                    Reserved : 0000
[0E4h 0228 001h]              Enumeration ID : 00
[0E5h 0229 001h]              PCI Bus Number : 00

[0E6h 0230 002h]                    PCI Path : 1D,00


[0E8h 0232 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0E9h 0233 001h]                Entry Length : 08
[0EAh 0234 002h]                    Reserved : 0000
[0ECh 0236 001h]              Enumeration ID : 00
[0EDh 0237 001h]              PCI Bus Number : 00

[0EEh 0238 002h]                    PCI Path : 1D,01


[0F0h 0240 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0F1h 0241 001h]                Entry Length : 08
[0F2h 0242 002h]                    Reserved : 0000
[0F4h 0244 001h]              Enumeration ID : 00
[0F5h 0245 001h]              PCI Bus Number : 00

[0F6h 0246 002h]                    PCI Path : 1D,02


[0F8h 0248 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0F9h 0249 001h]                Entry Length : 08
[0FAh 0250 002h]                    Reserved : 0000
[0FCh 0252 001h]              Enumeration ID : 00
[0FDh 0253 001h]              PCI Bus Number : 00

[0FEh 0254 002h]                    PCI Path : 1D,07


[100h 0256 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[101h 0257 001h]                Entry Length : 08
[102h 0258 002h]                    Reserved : 0000
[104h 0260 001h]              Enumeration ID : 00
[105h 0261 001h]              PCI Bus Number : 00

[106h 0262 002h]                    PCI Path : 1A,00


[108h 0264 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[109h 0265 001h]                Entry Length : 08
[10Ah 0266 002h]                    Reserved : 0000
[10Ch 0268 001h]              Enumeration ID : 00
[10Dh 0269 001h]              PCI Bus Number : 00

[10Eh 0270 002h]                    PCI Path : 1A,01


[110h 0272 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[111h 0273 001h]                Entry Length : 08
[112h 0274 002h]                    Reserved : 0000
[114h 0276 001h]              Enumeration ID : 00
[115h 0277 001h]              PCI Bus Number : 00

[116h 0278 002h]                    PCI Path : 1A,02


[118h 0280 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[119h 0281 001h]                Entry Length : 08
[11Ah 0282 002h]                    Reserved : 0000
[11Ch 0284 001h]              Enumeration ID : 00
[11Dh 0285 001h]              PCI Bus Number : 00

[11Eh 0286 002h]                    PCI Path : 1A,07


Raw Table Data: Length 288 (0x120)

    0000: 44 4D 41 52 20 01 00 00 01 98 4C 45 4E 4F 56 4F  // DMAR .....LENOVO
    0010: 54 43 2D 35 43 20 20 20 2E 01 00 00 4C 4F 48 52  // TC-5C   ....LOHR
    0020: 01 00 00 00 23 00 00 00 00 00 00 00 00 00 00 00  // ....#...........
    0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 1B 00 00 00 20 00 00 00 00 00  // .......... .....
    0050: 00 10 D9 FE 00 00 00 00 01 08 00 00 00 00 02 00  // ................
    0060: 01 08 00 00 00 00 02 01 00 00 28 00 00 00 00 00  // ..........(.....
    0070: 00 20 D9 FE 00 00 00 00 01 08 00 00 00 00 03 00  // . ..............
    0080: 01 08 00 00 00 00 03 02 01 08 00 00 00 00 03 03  // ................
    0090: 00 00 10 00 01 00 00 00 00 30 D9 FE 00 00 00 00  // .........0......
    00A0: 01 00 28 00 00 00 00 00 00 00 C0 D7 00 00 00 00  // ..(.............
    00B0: FF FF FF DF 00 00 00 00 01 08 00 00 00 00 02 00  // ................
    00C0: 01 08 00 00 00 00 02 01 01 00 58 00 00 00 00 00  // ..........X.....
    00D0: 00 C0 FB CF 00 00 00 00 FF FF FF CF 00 00 00 00  // ................
    00E0: 01 08 00 00 00 00 1D 00 01 08 00 00 00 00 1D 01  // ................
    00F0: 01 08 00 00 00 00 1D 02 01 08 00 00 00 00 1D 07  // ................
    0100: 01 08 00 00 00 00 1A 00 01 08 00 00 00 00 1A 01  // ................
    0110: 01 08 00 00 00 00 1A 02 01 08 00 00 00 00 1A 07  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 1, "LENOVO", "TC-5C   ", 0x0000012E)
{
    Scope (_GPE)
    {
        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            DEBG = 0x01
            Sleep (0x64)
            Sleep (0x64)
            If (\_SB.PCI0.EXP1.HPCS)
            {
                If (\_SB.PCI0.EXP1.PDC1)
                {
                    \_SB.PCI0.EXP1.PDC1 = 0x01
                }

                If (\_SB.PCI0.EXP1.ABP1)
                {
                    \_SB.PCI0.EXP1.ABP1 = 0x01
                }

                \_SB.PCI0.EXP1.HPCS = 0x01
                Notify (\_SB.PCI0.EXP1, 0x01) // Device Check
                If (\_SB.PCI0.EXP1.PDS1)
                {
                    DEBG = 0x21
                    If ((\_SB.PCI0.EXP1.PXS1.X1DV == 0xFFFFFFFF))
                    {
                        DEBG = 0x2F
                    }
                }
                Else
                {
                    DEBG = 0x20
                }
            }

            If (\_SB.PCI0.EXP2.HPCS)
            {
                If (\_SB.PCI0.EXP2.PDC2)
                {
                    \_SB.PCI0.EXP2.PDC2 = 0x01
                }

                If (\_SB.PCI0.EXP2.ABP2)
                {
                    \_SB.PCI0.EXP2.ABP2 = 0x01
                }

                \_SB.PCI0.EXP2.HPCS = 0x01
                Notify (\_SB.PCI0.EXP2, 0x01) // Device Check
                If (\_SB.PCI0.EXP2.PDS2)
                {
                    DEBG = 0x31
                    If ((\_SB.PCI0.EXP2.PXS2.X2DV == 0xFFFFFFFF))
                    {
                        DEBG = 0x3F
                    }
                }
                Else
                {
                    DEBG = 0x30
                }
            }

            If (\_SB.PCI0.EXP3.HPCS)
            {
                If (\_SB.PCI0.EXP3.PDC3)
                {
                    \_SB.PCI0.EXP3.PDC3 = 0x01
                }

                If (\_SB.PCI0.EXP3.ABP3)
                {
                    \_SB.PCI0.EXP3.ABP3 = 0x01
                }

                \_SB.PCI0.EXP3.HPCS = 0x01
                Notify (\_SB.PCI0.EXP3, 0x01) // Device Check
                If (\_SB.PCI0.EXP3.PDS3)
                {
                    DEBG = 0x41
                    If ((\_SB.PCI0.EXP3.PXS3.X3DV == 0xFFFFFFFF))
                    {
                        DEBG = 0x4F
                    }
                }
                Else
                {
                    DEBG = 0x40
                }
            }

            If (\_SB.PCI0.EXP4.HPCS)
            {
                If (\_SB.PCI0.EXP4.PDC4)
                {
                    \_SB.PCI0.EXP4.PDC4 = 0x01
                }

                If (\_SB.PCI0.EXP4.ABP4)
                {
                    \_SB.PCI0.EXP4.ABP4 = 0x01
                }

                \_SB.PCI0.EXP4.HPCS = 0x01
                Notify (\_SB.PCI0.EXP4, 0x01) // Device Check
                If (\_SB.PCI0.EXP4.PDS4)
                {
                    DEBG = 0x51
                    If ((\_SB.PCI0.EXP4.PXS4.X4DV == 0xFFFFFFFF))
                    {
                        DEBG = 0x5F
                    }
                }
                Else
                {
                    DEBG = 0x50
                }
            }

            If (\_SB.PCI0.EXP5.HPCS)
            {
                If (\_SB.PCI0.EXP5.PDC5)
                {
                    \_SB.PCI0.EXP5.PDC5 = 0x01
                }

                If (\_SB.PCI0.EXP5.ABP5)
                {
                    \_SB.PCI0.EXP5.ABP5 = 0x01
                }

                \_SB.PCI0.EXP5.HPCS = 0x01
                Notify (\_SB.PCI0.EXP5, 0x01) // Device Check
                If (\_SB.PCI0.EXP5.PDS5)
                {
                    DEBG = 0x61
                    If ((\_SB.PCI0.EXP5.PXS5.X5DV == 0xFFFFFFFF))
                    {
                        DEBG = 0x6F
                    }
                }
                Else
                {
                    DEBG = 0x60
                }
            }

            If (\_SB.PCI0.EXP6.HPCS)
            {
                If (\_SB.PCI0.EXP6.PDC6)
                {
                    \_SB.PCI0.EXP6.PDC6 = 0x01
                }

                If (\_SB.PCI0.EXP6.ABP6)
                {
                    \_SB.PCI0.EXP6.ABP6 = 0x01
                }

                \_SB.PCI0.EXP6.HPCS = 0x01
                Notify (\_SB.PCI0.EXP6, 0x01) // Device Check
                If (\_SB.PCI0.EXP6.PDS6)
                {
                    DEBG = 0x71
                    If ((\_SB.PCI0.EXP6.PXS6.X6DV == 0xFFFFFFFF))
                    {
                        DEBG = 0x7F
                    }
                }
                Else
                {
                    DEBG = 0x70
                }
            }
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            DEBG = 0x02
            \_SB.PCI0.IEIT.EITB ()
        }

        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            DEBG = 0x03
            Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            DEBG = 0x04
            Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
        }

        Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            DEBG = 0x05
            Notify (\_SB.PCI0.USB6, 0x02) // Device Wake
        }

        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (\_SB.PCI0.IGD0.GSSE)
            {
                \_SB.PCI0.IGD0.OPRN ()
            }
            Else
            {
                \_SB.PCI0.LPC0.SCIS = 0x01
            }
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            DEBG = 0x08
            Notify (\_SB.PCI0.LPC0.SIO.COM1, 0x02) // Device Wake
            Notify (\_SB.PCI0.LPC0.SIO.COM2, 0x02) // Device Wake
            Notify (\_SB.PCI0.PWRB, 0x02) // Device Wake
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            DEBG = 0x09
            If (\_SB.PCI0.PEG.PMES)
            {
                \_SB.PCI0.PEG.PMES = 0x01
                Notify (\_SB.PCI0.PEG, 0x02) // Device Wake
            }

            If (\_SB.PCI0.EXP1.PSP1)
            {
                \_SB.PCI0.EXP1.PSP1 = 0x01
                \_SB.PCI0.EXP1.PMCS = 0x01
                Notify (\_SB.PCI0.EXP1, 0x02) // Device Wake
            }

            If (\_SB.PCI0.EXP2.PSP2)
            {
                \_SB.PCI0.EXP2.PSP2 = 0x01
                \_SB.PCI0.EXP2.PMCS = 0x01
                Notify (\_SB.PCI0.EXP2, 0x02) // Device Wake
            }

            If (\_SB.PCI0.EXP3.PSP3)
            {
                \_SB.PCI0.EXP3.PSP3 = 0x01
                \_SB.PCI0.EXP3.PMCS = 0x01
                Notify (\_SB.PCI0.EXP3, 0x02) // Device Wake
            }

            If (\_SB.PCI0.EXP4.PSP4)
            {
                \_SB.PCI0.EXP4.PSP4 = 0x01
                \_SB.PCI0.EXP4.PMCS = 0x01
                Notify (\_SB.PCI0.EXP4, 0x02) // Device Wake
            }

            If (\_SB.PCI0.EXP5.PSP5)
            {
                \_SB.PCI0.EXP5.PSP5 = 0x01
                \_SB.PCI0.EXP5.PMCS = 0x01
                Notify (\_SB.PCI0.EXP5, 0x02) // Device Wake
            }

            If (\_SB.PCI0.EXP6.PSP6)
            {
                \_SB.PCI0.EXP6.PSP6 = 0x01
                \_SB.PCI0.EXP6.PMCS = 0x01
                Notify (\_SB.PCI0.EXP6, 0x02) // Device Wake
            }
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            DEBG = 0x0B
            Notify (\_SB.PCI0.PCIB, 0x02) // Device Wake
        }

        Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            DEBG = 0x0C
            Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            DEBG = 0x0D
            If (\_SB.PCI0.ESB1.PMES)
            {
                \_SB.PCI0.ESB1.PMES = 0x01
                Notify (\_SB.PCI0.ESB1, 0x02) // Device Wake
            }

            If (\_SB.PCI0.ESB2.PMES)
            {
                \_SB.PCI0.ESB2.PMES = 0x01
                Notify (\_SB.PCI0.ESB2, 0x02) // Device Wake
            }

            If (\_SB.PCI0.LAN.PMES)
            {
                \_SB.PCI0.LAN.PMES = 0x01
                Notify (\_SB.PCI0.LAN, 0x02) // Device Wake
            }
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            DEBG = 0x0E
            Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
            Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
        }

        Method (_L1D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            DEBG = 0x1D
            \_SB.PCI0.LPC0.SIO.PMSK = 0x01
            \_SB.PCI0.LPC0.SIO.PMSM = 0x01
            \_SB.PCI0.LPC0.SIO.PMES = 0x01
            Notify (\_SB.PCI0.LPC0.SIO.KBC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.LPC0.SIO.MSE0, 0x02) // Device Wake
            Notify (\_SB.PCI0.PWRB, 0x02) // Device Wake
            \_SB.PHSR (0x90)
        }
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x00, 0x00001010, 0x06){}
        Processor (CPU1, 0x01, 0x00001010, 0x06){}
        Processor (CPU2, 0x02, 0x00001010, 0x06){}
        Processor (CPU3, 0x03, 0x00001010, 0x06){}
        Processor (CPU4, 0x04, 0x00001010, 0x06){}
        Processor (CPU5, 0x05, 0x00001010, 0x06){}
        Processor (CPU6, 0x06, 0x00001010, 0x06){}
        Processor (CPU7, 0x07, 0x00001010, 0x06){}
    }

    Device (WMI1)
    {
        Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
        Name (_UID, 0x01)  // _UID: Unique ID
        Name (_WDG, Buffer (0xA0)
        {
            /* 0000 */  0x0E, 0x23, 0xF5, 0x51, 0x77, 0x96, 0xCD, 0x46,  // .#.Qw..F
            /* 0008 */  0xA1, 0xCF, 0xC0, 0xB2, 0x3E, 0xE3, 0x4D, 0xB7,  // ....>.M.
            /* 0010 */  0x41, 0x30, 0x5A, 0x05, 0x64, 0x9A, 0x47, 0x98,  // A0Z.d.G.
            /* 0018 */  0xF5, 0x33, 0x33, 0x4E, 0xA7, 0x07, 0x8E, 0x25,  // .33N...%
            /* 0020 */  0x1E, 0xBB, 0xC3, 0xA1, 0x41, 0x31, 0x01, 0x06,  // ....A1..
            /* 0028 */  0xEF, 0x54, 0x4B, 0x6A, 0xED, 0xA5, 0x33, 0x4D,  // .TKj..3M
            /* 0030 */  0x94, 0x55, 0xB0, 0xD9, 0xB4, 0x8D, 0xF4, 0xB3,  // .U......
            /* 0038 */  0x41, 0x32, 0x01, 0x06, 0xB6, 0xEB, 0xF1, 0x74,  // A2.....t
            /* 0040 */  0x7A, 0x92, 0x7D, 0x4C, 0x95, 0xDF, 0x69, 0x8E,  // z.}L..i.
            /* 0048 */  0x21, 0xE8, 0x0E, 0xB5, 0x41, 0x33, 0x01, 0x06,  // !...A3..
            /* 0050 */  0xFF, 0x04, 0xEF, 0x7E, 0x28, 0x43, 0x7C, 0x44,  // ...~(C|D
            /* 0058 */  0xB5, 0xBB, 0xD4, 0x49, 0x92, 0x5D, 0x53, 0x8D,  // ...I.]S.
            /* 0060 */  0x41, 0x34, 0x01, 0x06, 0x9E, 0x15, 0xDB, 0x8A,  // A4......
            /* 0068 */  0x32, 0x1E, 0x5C, 0x45, 0xBC, 0x93, 0x30, 0x8A,  // 2.\E..0.
            /* 0070 */  0x7E, 0xD9, 0x82, 0x46, 0x41, 0x35, 0x40, 0x05,  // ~..FA5@.
            /* 0078 */  0xFD, 0xD9, 0x51, 0x26, 0x1C, 0x91, 0x69, 0x4D,  // ..Q&..iM
            /* 0080 */  0xB9, 0x4E, 0xD0, 0xDE, 0xD5, 0x96, 0x3B, 0xD7,  // .N....;.
            /* 0088 */  0x41, 0x36, 0x01, 0x06, 0x21, 0x12, 0x90, 0x05,  // A6..!...
            /* 0090 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
            /* 0098 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
        })
        Name (RETN, Package (0x05)
        {
            "Success", 
            "Not Supported", 
            "Invalid Parameter", 
            "Access Denied", 
            "System Busy"
        })
        Name (ITEM, Package (0x2D)
        {
            Package (0x03)
            {
                0x00, 
                "USB Support", 
                0x03
            }, 

            Package (0x03)
            {
                0x00, 
                "USB Front PORTS", 
                0x04
            }, 

            Package (0x03)
            {
                0x00, 
                "USB Rear PORTS", 
                0x05
            }, 

            Package (0x03)
            {
                0x00, 
                "USB1", 
                0x06
            }, 

            Package (0x03)
            {
                0x00, 
                "USB2", 
                0x07
            }, 

            Package (0x03)
            {
                0x00, 
                "USB3", 
                0x08
            }, 

            Package (0x03)
            {
                0x00, 
                "USB4", 
                0x09
            }, 

            Package (0x03)
            {
                0x00, 
                "USB5", 
                0x0A
            }, 

            Package (0x03)
            {
                0x00, 
                "USB6", 
                0x0B
            }, 

            Package (0x03)
            {
                0x00, 
                "USB7", 
                0x0C
            }, 

            Package (0x03)
            {
                0x00, 
                "USB8", 
                0x0D
            }, 

            Package (0x03)
            {
                0x0C, 
                "Select Active Video", 
                0x0E
            }, 

            Package (0x03)
            {
                0x0E, 
                "Pre-Allocated Memory Size", 
                0x0F
            }, 

            Package (0x03)
            {
                0x0D, 
                "Total Graphics Memory", 
                0x10
            }, 

            Package (0x03)
            {
                0x00, 
                "PAVP Configuration", 
                0x11
            }, 

            Package (0x03)
            {
                0x00, 
                "External SATA Port", 
                0x12
            }, 

            Package (0x03)
            {
                0x00, 
                "Serial ATA", 
                0x13
            }, 

            Package (0x03)
            {
                0x0B, 
                "Native Mode operation:", 
                0x14
            }, 

            Package (0x03)
            {
                0x00, 
                "Enable RAID Support", 
                0x15
            }, 

            Package (0x03)
            {
                0x00, 
                "Enable AHCI Support", 
                0x16
            }, 

            Package (0x03)
            {
                0x22, 
                "Hard Disk Pre-Delay:", 
                0x17
            }, 

            Package (0x03)
            {
                0x00, 
                "Audio Support", 
                0x18
            }, 

            Package (0x03)
            {
                0x00, 
                "Onboard GBE LAN", 
                0x19
            }, 

            Package (0x03)
            {
                0x13, 
                "Boot Agent", 
                0x1A
            }, 

            Package (0x03)
            {
                0x0F, 
                "Plug and Play Operating System", 
                0x1B
            }, 

            Package (0x03)
            {
                0x00, 
                "Legacy Free", 
                0x1C
            }, 

            Package (0x03)
            {
                0x00, 
                "PCI Parity", 
                0x1D
            }, 

            Package (0x03)
            {
                0x00, 
                "Core Multi-Processing", 
                0x1E
            }, 

            Package (0x03)
            {
                0x23, 
                "Processor Power Management", 
                0x1F
            }, 

            Package (0x03)
            {
                0x24, 
                "C State supported", 
                0x20
            }, 

            Package (0x03)
            {
                0x01, 
                "Execute Disable Bit", 
                0x21
            }, 

            Package (0x03)
            {
                0x00, 
                "MEBx Reset", 
                0x22
            }, 

            Package (0x03)
            {
                0x00, 
                "Press <CTRL-P> to enter MEBx", 
                0x23
            }, 

            Package (0x03)
            {
                0x25, 
                "Console Type", 
                0x24
            }, 

            Package (0x03)
            {
                0x04, 
                "Continue C.R. after POST", 
                0x25
            }, 

            Package (0x03)
            {
                0x1A, 
                "After Power Loss", 
                0x26
            }, 

            Package (0x03)
            {
                0x00, 
                "Hard Disk Timeout", 
                0x27
            }, 

            Package (0x03)
            {
                0x02, 
                "Wake on LAN", 
                0x28
            }, 

            Package (0x03)
            {
                0x02, 
                "PCI Modem Ring Detect", 
                0x29
            }, 

            Package (0x03)
            {
                0x02, 
                "Serial Port A Ring Detect", 
                0x2A
            }, 

            Package (0x03)
            {
                0x02, 
                "PCI Wake Up", 
                0x2B
            }, 

            Package (0x03)
            {
                0x64, 
                "Primary Startup Sequence", 
                0x2C
            }, 

            Package (0x03)
            {
                0x64, 
                "Automatic Startup Sequence", 
                0x2D
            }, 

            Package (0x03)
            {
                0x64, 
                "Error Startup Sequence", 
                0x2E
            }, 

            Package (0x03)
            {
                0x64, 
                "Manufacturing Startup Sequence", 
                0x2F
            }
        })
        Name (VSEL, Package (0x26)
        {
            Package (0x02)
            {
                "Disabled", 
                "Enabled"
            }, 

            Package (0x02)
            {
                "Enabled", 
                "Disabled"
            }, 

            Package (0x03)
            {
                "Disabled", 
                "Automatic", 
                "Primary"
            }, 

            Package (0x03)
            {
                "Disabled", 
                "Enabled", 
                "Automatic"
            }, 

            Package (0x02)
            {
                "Off", 
                "On"
            }, 

            Package (0x02)
            {
                "Full", 
                "Half"
            }, 

            Package (0x03)
            {
                "Normal", 
                "IrDA", 
                "ASKIR"
            }, 

            Package (0x02)
            {
                "IRQ5", 
                "IRQ7"
            }, 

            Package (0x02)
            {
                "DMA1", 
                "DMA3"
            }, 

            Package (0x03)
            {
                "ECP+EPP", 
                "ECP", 
                "EPP"
            }, 

            Package (0x02)
            {
                "1.9", 
                "1.7"
            }, 

            Package (0x02)
            {
                "Automatic", 
                "Serial ATA"
            }, 

            Package (0x04)
            {
                "IGD", 
                "PEG", 
                "PCI", 
                "Auto"
            }, 

            Package (0x04)
            {
                "NULL", 
                "128MB", 
                "256MB", 
                "MaxDVMT"
            }, 

            Package (0x03)
            {
                "32MB", 
                "64MB", 
                "128MB"
            }, 

            Package (0x02)
            {
                "No", 
                "Yes"
            }, 

            Package (0x05)
            {
                "Disabled", 
                "3F8/IRQ4", 
                "2F8/IRQ3", 
                "3E8/IRQ4", 
                "2E8/IRQ3"
            }, 

            Package (0x04)
            {
                "Disabled", 
                "378", 
                "278", 
                "3BC"
            }, 

            Package (0x10)
            {
                "Disabled", 
                "AutoSelect", 
                "", 
                "3", 
                "4", 
                "5", 
                "6", 
                "7", 
                "", 
                "9", 
                "10", 
                "11", 
                "", 
                "", 
                "", 
                ""
            }, 

            Package (0x03)
            {
                "Disable", 
                "PXE", 
                "SMC"
            }, 

            Package (0x02)
            {
                "MaximizePerformance", 
                "Balanced"
            }, 

            Package (0x02)
            {
                "Quick", 
                "Diagnostics"
            }, 

            Package (0x0D)
            {
                "Disabled", 
                "", 
                "", 
                "", 
                "4", 
                "5", 
                "6", 
                "7", 
                "8", 
                "9", 
                "10", 
                "11", 
                "12"
            }, 

            Package (0x04)
            {
                "Auto", 
                "On", 
                "Off", 
                ""
            }, 

            Package (0x04)
            {
                "IGD", 
                "PEG", 
                "PCI", 
                "Auto"
            }, 

            Package (0x03)
            {
                "DVMT", 
                "Fixed", 
                "Auto"
            }, 

            Package (0x03)
            {
                "Stay Off", 
                "Last State", 
                "Power on"
            }, 

            Package (0x03)
            {
                "Inactive", 
                "Active", 
                "Disable"
            }, 

            Package (0x02)
            {
                "Quick", 
                "Enhance"
            }, 

            Package (0x02)
            {
                "Normal", 
                "Legacy"
            }, 

            Package (0x02)
            {
                "Fast", 
                "Fast"
            }, 

            Package (0x02)
            {
                "Enable", 
                "Once"
            }, 

            Package (0x04)
            {
                "3F8", 
                "2F8", 
                "3E8", 
                "2E8"
            }, 

            Package (0x02)
            {
                "IRQ3", 
                "IRQ4"
            }, 

            Package (0x08)
            {
                "Disabled", 
                "3 Secconds", 
                "6 Secconds", 
                "6 Secconds", 
                "12 Secconds", 
                "15 Secconds", 
                "21 Secconds", 
                "30 Secconds"
            }, 

            Package (0x04)
            {
                "Disabled", 
                "GV1/GV3 Only", 
                "C States Onley", 
                "Enabled"
            }, 

            Package (0x04)
            {
                "C1", 
                "C12", 
                "C123", 
                "C1234"
            }, 

            Package (0x07)
            {
                "VT100", 
                "VT100 8bit", 
                "PC-Ansi 7bit", 
                "PC ANSI", 
                "VT100+", 
                "VT-UTF8", 
                "ASCII"
            }
        })
        Name (VLST, Package (0x0E)
        {
            "UN_DEFINED", 
            "IDE_HDD", 
            "IDE_CD", 
            "USB_FDC", 
            "USB_HDD", 
            "USB_KEY", 
            "USB_CDROM", 
            "USB_LS120", 
            "PCI_BEV", 
            "PCI_SCSI", 
            "AHCI_HDD", 
            "AHCI_CD", 
            "Bootable Add-in Cards", 
            "Nothing Here"
        })
        Name (PENC, Package (0x02)
        {
            "ascii", 
            "scancode"
        })
        Name (PKBD, Package (0x03)
        {
            "us", 
            "fr", 
            "gr"
        })
        OperationRegion (DP80, SystemIO, 0x80, 0x01)
        Field (DP80, ByteAcc, NoLock, Preserve)
        {
            XP80,   8
        }

        Name (PCFG, Buffer (0x80){})
        Name (IBUF, Buffer (0x80){})
        Name (PSTR, Buffer (0x41){})
        Method (TXTX, 1, NotSerialized)
        {
            XP80 = Arg0
        }

        Method (WQA0, 1, NotSerialized)
        {
            TXTX (0x00)
            Local6 = SizeOf (ITEM)
            Local6--
            If ((Arg0 > Local6))
            {
                Return ("")
            }

            Local0 = DerefOf (ITEM [Arg0])
            Local4 = DerefOf (Local0 [0x02])
            \WITM = Local4
            If ((\WMIS (0x00, Local4) != 0x00))
            {
                Return ("")
            }

            Local1 = DerefOf (Local0 [0x00])
            Local2 = DerefOf (Local0 [0x01])
            If ((Local1 < 0x64))
            {
                Concatenate (Local2, ",", Local6)
                Local3 = DerefOf (VSEL [Local1])
                Local5 = SizeOf (Local3)
                If ((\WSEL < Local5))
                {
                    Concatenate (Local6, DerefOf (Local3 [\WSEL]), Local7)
                    Return (Local7)
                }
                Else
                {
                    Concatenate (Local6, \WSEL, Local7)
                }
            }
            Else
            {
                Local3 = SizeOf (VLST)
                If ((\WLS0 < Local3))
                {
                    Concatenate (Local2, ",", Local7)
                    Concatenate (Local7, DerefOf (VLST [\WLS0]), Local2)
                }

                If ((\WLS1 < Local3))
                {
                    Concatenate (Local2, ":", Local7)
                    Concatenate (Local7, DerefOf (VLST [\WLS1]), Local2)
                }

                If ((\WLS2 < Local3))
                {
                    Concatenate (Local2, ":", Local7)
                    Concatenate (Local7, DerefOf (VLST [\WLS2]), Local2)
                }

                If ((\WLS3 < Local3))
                {
                    Concatenate (Local2, ":", Local7)
                    Concatenate (Local7, DerefOf (VLST [\WLS3]), Local2)
                }

                If ((\WLS4 < Local3))
                {
                    Concatenate (Local2, ":", Local7)
                    Concatenate (Local7, DerefOf (VLST [\WLS4]), Local2)
                }

                If ((\WLS5 < Local3))
                {
                    Concatenate (Local2, ":", Local7)
                    Concatenate (Local7, DerefOf (VLST [\WLS5]), Local2)
                }

                If ((\WLS6 < Local3))
                {
                    Concatenate (Local2, ":", Local7)
                    Concatenate (Local7, DerefOf (VLST [\WLS6]), Local2)
                }

                If ((\WLS7 < Local3))
                {
                    Concatenate (Local2, ":", Local7)
                    Concatenate (Local7, DerefOf (VLST [\WLS7]), Local2)
                }

                Return (Local2)
            }
        }

        Method (WMA1, 3, NotSerialized)
        {
            TXTX (0x01)
            Local0 = WSET (Arg2)
            Return (DerefOf (RETN [Local0]))
        }

        Method (WMA2, 3, NotSerialized)
        {
            TXTX (0x02)
            Local0 = \WMIS (0x02, 0x00)
            Return (DerefOf (RETN [Local0]))
        }

        Method (WMA3, 3, NotSerialized)
        {
            Local0 = \WMIS (0x03, 0x00)
            TXTX (0x03)
            Return (DerefOf (RETN [Local0]))
        }

        Method (WMA4, 3, NotSerialized)
        {
            Local0 = \WMIS (0x04, 0x00)
            TXTX (0x04)
            Return (DerefOf (RETN [Local0]))
        }

        Method (WQA5, 2, NotSerialized)
        {
            TXTX (0x05)
            Local0 = \WMIS (0x05, 0x00)
            Return ("Not Supported")
        }

        Method (WMA6, 3, NotSerialized)
        {
            TXTX (0x06)
            Local0 = \WMIS (0x06, 0x00)
            Return ("Not Supported")
        }

        Method (SCMP, 3, NotSerialized)
        {
            Local0 = SizeOf (Arg0)
            If ((Local0 == 0x00))
            {
                Return (0x00)
            }

            Local0++
            Name (STR1, Buffer (Local0){})
            STR1 = Arg0
            Local0--
            Local1 = 0x00
            Local2 = Arg2
            While ((Local1 < Local0))
            {
                Local3 = DerefOf (STR1 [Local1])
                Local4 = DerefOf (Arg1 [Local2])
                If ((Local3 != Local4))
                {
                    Return (0x00)
                }

                Local1++
                Local2++
            }

            Local4 = DerefOf (Arg1 [Local2])
            If ((Local4 == 0x00))
            {
                Return (0x01)
            }

            If (((Local4 == 0x2C) || (Local4 == 0x3A)))
            {
                Return (0x01)
            }

            Return (0x00)
        }

        Method (GITM, 1, NotSerialized)
        {
            Local0 = 0x00
            Local1 = SizeOf (ITEM)
            While ((Local0 < Local1))
            {
                Local2 = DerefOf (ITEM [Local0])
                Local3 = DerefOf (Local2 [0x01])
                If (SCMP (Local3, Arg0, 0x00))
                {
                    Return (Local0)
                }

                Local0++
            }

            Return (0xFFFFFFFF)
        }

        Method (GSEL, 3, NotSerialized)
        {
            Local0 = 0x00
            Local1 = SizeOf (Arg0)
            While ((Local0 < Local1))
            {
                Local2 = DerefOf (Arg0 [Local0])
                If (SCMP (Local2, Arg1, Arg2))
                {
                    Return (Local0)
                }

                Local0++
            }

            Return (0xFFFFFFFF)
        }

        Method (SLEN, 2, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [Arg1])
            Return (SizeOf (Local0))
        }

        Method (CLRP, 0, NotSerialized)
        {
            PSTR [0x00] = 0x00
            \WPAS = PSTR /* \WMI1.PSTR */
        }

        Method (GPAS, 2, NotSerialized)
        {
            Local0 = Arg1
            Local1 = 0x00
            While ((Local1 <= 0x40))
            {
                Local2 = DerefOf (Arg0 [Local0])
                If (((Local2 == 0x2C) || (Local2 == 0x00)))
                {
                    PSTR [Local1] = 0x00
                    Return (Local1)
                }

                PSTR [Local1] = Local2
                Local0++
                Local1++
            }

            PSTR [Local1] = 0x00
            Return (0xFFFFFFFF)
        }

        Method (CPAS, 2, NotSerialized)
        {
            CLRP ()
            Local0 = Arg1
            Local1 = GPAS (Arg0, Local0)
            If ((Local1 == 0xFFFFFFFF))
            {
                Return (0x02)
            }

            If ((Local1 == 0x00))
            {
                Return (0x00)
            }

            \WPAS = PSTR /* \WMI1.PSTR */
            Local0 += Local1
            Local0++
            Local6 = GSEL (PENC, Arg0, Local0)
            If ((Local6 == 0xFFFFFFFF))
            {
                Return (0x02)
            }

            \WENC = Local6
            If ((Local6 == 0x01))
            {
                Local0 += SLEN (PENC, 0x01)
                If ((DerefOf (Arg0 [Local0]) != 0x2C))
                {
                    Return (0x02)
                }

                Local0++
                Local6 = GSEL (PKBD, Arg0, Local0)
                If ((Local6 == 0xFFFFFFFF))
                {
                    Return (0x02)
                }

                \WKBD = Local6
            }

            Return (0x00)
        }

        Method (WSET, 1, NotSerialized)
        {
            Local0 = SizeOf (Arg0)
            If (((Local0 == 0x00) || (Local0 >= 0x7F)))
            {
                Return (0x02)
            }

            Local0++
            IBUF = Arg0
            Local1 = GITM (IBUF)
            If ((Local1 == 0xFFFFFFFF))
            {
                Return (0x02)
            }

            Local3 = DerefOf (ITEM [Local1])
            \WITM = DerefOf (Local3 [0x02])
            Local4 = DerefOf (Local3 [0x01])
            Local2 = SizeOf (Local4)
            Local2++
            Local4 = DerefOf (Local3 [0x00])
            If ((Local4 < 0x64))
            {
                Local5 = DerefOf (VSEL [Local4])
                Local6 = GSEL (Local5, IBUF, Local2)
                If ((Local6 == 0xFFFFFFFF))
                {
                    Return (0x02)
                }

                \WSEL = Local6
            }
            Else
            {
                \WLS0 = 0x3F
                \WLS1 = 0x3F
                \WLS2 = 0x3F
                \WLS3 = 0x3F
                \WLS4 = 0x3F
                \WLS5 = 0x3F
                \WLS6 = 0x3F
                \WLS7 = 0x3F
                Local6 = GSEL (VLST, IBUF, Local2)
                If ((Local6 == 0xFFFFFFFF))
                {
                    Return (0x02)
                }

                \WLS0 = Local6
                Local2 += SLEN (VLST, Local6)
                Local4 = DerefOf (IBUF [Local2])
                If (((Local2 < Local0) && (Local4 == 0x3A)))
                {
                    Local2++
                    Local6 = GSEL (VLST, IBUF, Local2)
                    If ((Local6 == 0xFFFFFFFF))
                    {
                        Return (0x02)
                    }

                    \WLS1 = Local6
                    Local2 += SLEN (VLST, Local6)
                    Local4 = DerefOf (IBUF [Local2])
                }

                If (((Local2 < Local0) && (Local4 == 0x3A)))
                {
                    Local2++
                    Local6 = GSEL (VLST, IBUF, Local2)
                    If ((Local6 == 0xFFFFFFFF))
                    {
                        Return (0x02)
                    }

                    \WLS2 = Local6
                    Local2 += SLEN (VLST, Local6)
                    Local4 = DerefOf (IBUF [Local2])
                }

                If (((Local2 < Local0) && (Local4 == 0x3A)))
                {
                    Local2++
                    Local6 = GSEL (VLST, IBUF, Local2)
                    If ((Local6 == 0xFFFFFFFF))
                    {
                        Return (0x02)
                    }

                    \WLS3 = Local6
                    Local2 += SLEN (VLST, Local6)
                    Local4 = DerefOf (IBUF [Local2])
                }

                If (((Local2 < Local0) && (Local4 == 0x3A)))
                {
                    Local2++
                    Local6 = GSEL (VLST, IBUF, Local2)
                    If ((Local6 == 0xFFFFFFFF))
                    {
                        Return (0x02)
                    }

                    \WLS4 = Local6
                    Local2 += SLEN (VLST, Local6)
                    Local4 = DerefOf (IBUF [Local2])
                }

                If (((Local2 < Local0) && (Local4 == 0x3A)))
                {
                    Local2++
                    Local6 = GSEL (VLST, IBUF, Local2)
                    If ((Local6 == 0xFFFFFFFF))
                    {
                        Return (0x02)
                    }

                    \WLS5 = Local6
                    Local2 += SLEN (VLST, Local6)
                    Local4 = DerefOf (IBUF [Local2])
                }

                If (((Local2 < Local0) && (Local4 == 0x3A)))
                {
                    Local2++
                    Local6 = GSEL (VLST, IBUF, Local2)
                    If ((Local6 == 0xFFFFFFFF))
                    {
                        Return (0x02)
                    }

                    \WLS6 = Local6
                    Local2 += SLEN (VLST, Local6)
                    Local4 = DerefOf (IBUF [Local2])
                }

                If (((Local2 < Local0) && (Local4 == 0x3A)))
                {
                    Local2++
                    Local6 = GSEL (VLST, IBUF, Local2)
                    If ((Local6 == 0xFFFFFFFF))
                    {
                        Return (0x02)
                    }

                    \WLS7 = Local6
                    Local2 += SLEN (VLST, Local6)
                    Local4 = DerefOf (IBUF [Local2])
                }
            }

            If (((Local4 == 0x2C) && (Local2 < Local0)))
            {
                Local2++
                Local0 = CPAS (IBUF, Local2)
                If ((Local0 != 0x00))
                {
                    Return (Local0)
                }
            }

            Return (\WMIS (0x01, 0x00))
        }

        Name (WQBA, Buffer (0x07D4)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
            /* 0008 */  0xC4, 0x07, 0x00, 0x00, 0x06, 0x31, 0x00, 0x00,  // .....1..
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
            /* 0018 */  0xA8, 0xDA, 0x97, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
            /* 0020 */  0x10, 0x11, 0x10, 0x0A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
            /* 0028 */  0x83, 0x50, 0x4C, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PL...EA
            /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
            /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
            /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
            /* 0048 */  0x31, 0x0E, 0x88, 0x14, 0x40, 0x48, 0xE6, 0x28,  // 1...@H.(
            /* 0050 */  0x28, 0x81, 0x85, 0xC0, 0x11, 0x82, 0x7E, 0x05,  // (.....~.
            /* 0058 */  0x20, 0x74, 0x88, 0x26, 0x83, 0x02, 0x9C, 0x22,  //  t.&..."
            /* 0060 */  0x08, 0xD2, 0x96, 0x05, 0xE8, 0x16, 0xE0, 0x5B,  // .......[
            /* 0068 */  0x80, 0x76, 0x08, 0xA1, 0x55, 0x28, 0xC0, 0xA4,  // .v..U(..
            /* 0070 */  0x00, 0x9F, 0x60, 0xB2, 0x28, 0x40, 0x36, 0x98,  // ..`.(@6.
            /* 0078 */  0x6C, 0xC3, 0x91, 0x61, 0x30, 0x91, 0x63, 0x40,  // l..a0.c@
            /* 0080 */  0x89, 0x19, 0x03, 0x4A, 0xE7, 0x14, 0x64, 0x13,  // ...J..d.
            /* 0088 */  0x58, 0xD0, 0x85, 0xA2, 0x68, 0x1A, 0x51, 0x12,  // X...h.Q.
            /* 0090 */  0x1C, 0xD4, 0x31, 0x44, 0x08, 0x5E, 0xAE, 0x00,  // ..1D.^..
            /* 0098 */  0xC9, 0x13, 0x90, 0xE6, 0x79, 0xC9, 0xFA, 0x20,  // ....y.. 
            /* 00A0 */  0x34, 0x04, 0x36, 0x02, 0x1E, 0x45, 0x02, 0x08,  // 4.6..E..
            /* 00A8 */  0x8B, 0xB1, 0x4C, 0x89, 0x87, 0x41, 0x79, 0x00,  // ..L..Ay.
            /* 00B0 */  0x91, 0x9C, 0xA1, 0xA2, 0x80, 0xED, 0x75, 0x22,  // ......u"
            /* 00B8 */  0x1A, 0xD6, 0x71, 0x32, 0x49, 0x70, 0xA8, 0x51,  // ..q2Ip.Q
            /* 00C0 */  0x5A, 0xA2, 0x00, 0xF3, 0x23, 0xD3, 0x44, 0x8E,  // Z...#.D.
            /* 00C8 */  0xAD, 0xE9, 0x11, 0x0B, 0x92, 0x49, 0x1B, 0x0A,  // .....I..
            /* 00D0 */  0x6A, 0xE8, 0x9E, 0xD6, 0x49, 0x79, 0xA2, 0x11,  // j...Iy..
            /* 00D8 */  0x0F, 0xCA, 0x30, 0x09, 0x3C, 0x0A, 0x86, 0xC6,  // ..0.<...
            /* 00E0 */  0x09, 0xCA, 0x82, 0x90, 0x83, 0x81, 0xA2, 0x00,  // ........
            /* 00E8 */  0x4F, 0xC2, 0x73, 0x2C, 0x5E, 0x80, 0xF0, 0x19,  // O.s,^...
            /* 00F0 */  0x93, 0xA3, 0x40, 0x8C, 0x04, 0x3E, 0x12, 0x78,  // ..@..>.x
            /* 00F8 */  0x34, 0xC7, 0x8C, 0x05, 0x0A, 0x17, 0xF0, 0x7C,  // 4......|
            /* 0100 */  0x8E, 0x21, 0x72, 0xDC, 0x43, 0x8D, 0x71, 0x14,  // .!r.C.q.
            /* 0108 */  0x91, 0x13, 0xBC, 0x03, 0x44, 0x31, 0x5A, 0x41,  // ....D1ZA
            /* 0110 */  0xF3, 0x16, 0x62, 0xB0, 0x68, 0x06, 0xEB, 0x19,  // ..b.h...
            /* 0118 */  0x9C, 0x0C, 0x3A, 0xC1, 0xFF, 0xFF, 0x08, 0xB8,  // ..:.....
            /* 0120 */  0x0C, 0x08, 0x79, 0x14, 0x60, 0x75, 0x50, 0x9A,  // ..y.`uP.
            /* 0128 */  0x86, 0x09, 0xBA, 0x17, 0x60, 0x4D, 0x80, 0x31,  // ....`M.1
            /* 0130 */  0x01, 0x1A, 0x31, 0xA4, 0x4C, 0x80, 0xB3, 0xFB,  // ..1.L...
            /* 0138 */  0x82, 0x66, 0xD4, 0x96, 0x00, 0x73, 0x02, 0xB4,  // .f...s..
            /* 0140 */  0x09, 0xF0, 0x86, 0x20, 0x94, 0xF3, 0x8C, 0x72,  // ... ...r
            /* 0148 */  0x2C, 0xA7, 0x18, 0xE5, 0x61, 0x20, 0xE6, 0xCB,  // ,...a ..
            /* 0150 */  0x40, 0xD0, 0x28, 0x31, 0x62, 0x9E, 0x4B, 0x5C,  // @.(1b.K\
            /* 0158 */  0xC3, 0x46, 0x88, 0x11, 0xF2, 0x14, 0x02, 0xC5,  // .F......
            /* 0160 */  0x6D, 0x7F, 0x10, 0x64, 0xD0, 0xB8, 0xD1, 0xFB,  // m..d....
            /* 0168 */  0xB4, 0x70, 0x56, 0x27, 0x70, 0xF4, 0x4F, 0x0A,  // .pV'p.O.
            /* 0170 */  0x26, 0xF0, 0x94, 0x0F, 0xEC, 0xD9, 0xE0, 0x04,  // &.......
            /* 0178 */  0x8E, 0x35, 0x6A, 0x8C, 0x53, 0x49, 0xE0, 0xD8,  // .5j.SI..
            /* 0180 */  0x0F, 0x08, 0x69, 0x00, 0x51, 0x24, 0x78, 0xD4,  // ..i.Q$x.
            /* 0188 */  0x69, 0xC1, 0xE7, 0x02, 0x0F, 0xED, 0xA0, 0x3D,  // i......=
            /* 0190 */  0xC7, 0x13, 0x08, 0x72, 0x08, 0x47, 0xF0, 0xC4,  // ...r.G..
            /* 0198 */  0xF0, 0x40, 0xE0, 0x31, 0xB0, 0x9B, 0x82, 0x8F,  // .@.1....
            /* 01A0 */  0x00, 0x3E, 0x21, 0xE0, 0x5D, 0x03, 0xEA, 0x6A,  // .>!.]..j
            /* 01A8 */  0xF0, 0x60, 0xC0, 0x06, 0x1D, 0x0E, 0x33, 0x5E,  // .`....3^
            /* 01B0 */  0x0F, 0x3F, 0xDC, 0x09, 0x9C, 0xE4, 0x03, 0x06,  // .?......
            /* 01B8 */  0x3F, 0x6C, 0x78, 0x70, 0xB8, 0x79, 0x9E, 0xCC,  // ?lxp.y..
            /* 01C0 */  0x91, 0x95, 0x2A, 0xC0, 0xEC, 0xE1, 0x40, 0x07,  // ..*...@.
            /* 01C8 */  0x09, 0x9F, 0x36, 0xD8, 0x19, 0x00, 0x23, 0x7F,  // ..6...#.
            /* 01D0 */  0x10, 0xA8, 0x91, 0x19, 0xDA, 0xE3, 0x7E, 0xE9,  // ......~.
            /* 01D8 */  0x30, 0xE4, 0x73, 0xC2, 0x61, 0x31, 0xB1, 0xA7,  // 0.s.a1..
            /* 01E0 */  0x0E, 0x3A, 0x1E, 0xF0, 0x5F, 0x46, 0x9E, 0x33,  // .:.._F.3
            /* 01E8 */  0x3C, 0x7D, 0xCF, 0xD7, 0x04, 0xC3, 0x0E, 0x1C,  // <}......
            /* 01F0 */  0x3D, 0x10, 0x43, 0x3F, 0x6C, 0x1C, 0xC6, 0x69,  // =.C?l..i
            /* 01F8 */  0xF8, 0xFE, 0xE1, 0xF3, 0x02, 0x8C, 0x53, 0x80,  // ......S.
            /* 0200 */  0x47, 0xEE, 0xFF, 0xFF, 0x21, 0xC5, 0xA7, 0x09,  // G...!...
            /* 0208 */  0x7E, 0xB4, 0xF0, 0x69, 0x82, 0x5D, 0x0F, 0x4E,  // ~..i.].N
            /* 0210 */  0xE3, 0x39, 0xC0, 0xC3, 0x39, 0x2B, 0x1F, 0x26,  // .9..9+.&
            /* 0218 */  0xC0, 0x76, 0x3F, 0x61, 0x23, 0x7A, 0xB7, 0xF0,  // .v?a#z..
            /* 0220 */  0x68, 0xB0, 0xA7, 0x00, 0xF0, 0x9D, 0x5F, 0xC0,  // h....._.
            /* 0228 */  0x79, 0xD7, 0x60, 0x83, 0x85, 0x71, 0x7E, 0x01,  // y.`..q~.
            /* 0230 */  0x1E, 0x27, 0x04, 0x0F, 0x81, 0x1F, 0x24, 0x3C,  // .'....$<
            /* 0238 */  0x04, 0x3E, 0x80, 0xE7, 0x8F, 0x33, 0xB4, 0xD2,  // .>...3..
            /* 0240 */  0x79, 0x21, 0x07, 0x06, 0xEF, 0x9C, 0x03, 0x63,  // y!.....c
            /* 0248 */  0x14, 0x3C, 0xCF, 0x63, 0xC3, 0x04, 0x0A, 0xF2,  // .<.c....
            /* 0250 */  0x1A, 0x50, 0xA8, 0x67, 0x01, 0x85, 0xF1, 0xA9,  // .P.g....
            /* 0258 */  0x06, 0x78, 0xFD, 0xFF, 0x4F, 0x35, 0xC0, 0xE5,  // .x..O5..
            /* 0260 */  0x70, 0x80, 0x3B, 0x39, 0xC0, 0xBD, 0x17, 0xB0,  // p.;9....
            /* 0268 */  0x8B, 0xC3, 0x73, 0x0D, 0x5C, 0xD1, 0xE7, 0x1A,  // ..s.\...
            /* 0270 */  0xA8, 0xF7, 0x96, 0xE2, 0xC6, 0xA8, 0x6B, 0x4C,  // ......kL
            /* 0278 */  0x90, 0x47, 0x81, 0x47, 0x9A, 0x28, 0xCF, 0x33,  // .G.G.(.3
            /* 0280 */  0xEF, 0x32, 0x11, 0x9E, 0x6D, 0x7C, 0xAD, 0xF1,  // .2..m|..
            /* 0288 */  0x14, 0xE2, 0xF8, 0x5A, 0x63, 0xC4, 0x97, 0x89,  // ...Zc...
            /* 0290 */  0x77, 0x1B, 0xE3, 0x1E, 0xDC, 0x63, 0xCD, 0x43,  // w....c.C
            /* 0298 */  0x8E, 0x41, 0x8E, 0x26, 0xC2, 0x8B, 0x41, 0xC0,  // .A.&..A.
            /* 02A0 */  0xC7, 0x1B, 0x1F, 0x6B, 0xC0, 0x2B, 0xE6, 0x85,  // ...k.+..
            /* 02A8 */  0x22, 0x0B, 0xC7, 0x1A, 0x40, 0xE3, 0xFF, 0xFF,  // "...@...
            /* 02B0 */  0x58, 0x03, 0xDC, 0xB0, 0x1E, 0x50, 0xC0, 0x77,  // X....P.w
            /* 02B8 */  0x64, 0x60, 0x37, 0x14, 0x78, 0x27, 0x14, 0xC0,  // d`7.x'..
            /* 02C0 */  0x4F, 0xE2, 0x17, 0x80, 0x8E, 0x1C, 0x4E, 0x0B,  // O.....N.
            /* 02C8 */  0x22, 0x1B, 0x6F, 0x00, 0x9F, 0x02, 0xA8, 0x1A,  // ".o.....
            /* 02D0 */  0x20, 0x4D, 0x13, 0x36, 0xC1, 0xF4, 0xE4, 0x82,  //  M.6....
            /* 02D8 */  0xF7, 0x91, 0xC0, 0xB9, 0x49, 0x94, 0x7C, 0x58,  // ....I.|X
            /* 02E0 */  0x14, 0xCE, 0x59, 0x0F, 0x22, 0x14, 0xC4, 0x80,  // ..Y."...
            /* 02E8 */  0x0E, 0x72, 0x9C, 0x40, 0x9F, 0x51, 0x7C, 0x10,  // .r.@.Q|.
            /* 02F0 */  0x39, 0xD1, 0x27, 0x42, 0x0F, 0xCA, 0xC3, 0x78,  // 9.'B...x
            /* 02F8 */  0x47, 0x61, 0x27, 0x10, 0x1F, 0x26, 0x3C, 0x76,  // Ga'..&<v
            /* 0300 */  0x1F, 0x13, 0xF8, 0x3F, 0xC6, 0xB3, 0x31, 0xBA,  // ...?..1.
            /* 0308 */  0xD5, 0x60, 0xE8, 0xFF, 0x7F, 0x4E, 0xE1, 0x60,  // .`...N.`
            /* 0310 */  0x3E, 0x88, 0x70, 0x82, 0xBA, 0x6E, 0x12, 0x20,  // >.p..n. 
            /* 0318 */  0xD3, 0x77, 0x54, 0x00, 0x05, 0x90, 0xEF, 0x05,  // .wT.....
            /* 0320 */  0x3E, 0x07, 0x3C, 0x1B, 0xB0, 0x31, 0x3C, 0x0A,  // >.<..1<.
            /* 0328 */  0x18, 0xCD, 0xE8, 0x3C, 0xFC, 0x64, 0x51, 0x71,  // ...<.dQq
            /* 0330 */  0x27, 0x4B, 0x41, 0x3C, 0x59, 0x47, 0x99, 0x2C,  // 'KA<YG.,
            /* 0338 */  0x7A, 0x26, 0xBE, 0x57, 0x78, 0x46, 0x6F, 0x5A,  // z&.WxFoZ
            /* 0340 */  0x9E, 0xA3, 0x27, 0xEC, 0x7B, 0x08, 0xAC, 0xC3,  // ..'.{...
            /* 0348 */  0x40, 0xC8, 0x07, 0x03, 0x4F, 0xC3, 0x70, 0x9E,  // @...O.p.
            /* 0350 */  0x2C, 0x87, 0xF3, 0x64, 0xF9, 0x58, 0x7C, 0x0D,  // ,..d.X|.
            /* 0358 */  0x01, 0x9F, 0xC0, 0xD9, 0x82, 0x1C, 0x1E, 0x13,  // ........
            /* 0360 */  0x6B, 0x54, 0xF4, 0x2A, 0xE4, 0xE1, 0xF1, 0xCB,  // kT.*....
            /* 0368 */  0x81, 0xE7, 0xF3, 0x8C, 0x70, 0x94, 0x4F, 0x12,  // ....p.O.
            /* 0370 */  0x38, 0x8C, 0x67, 0x12, 0x0F, 0xD1, 0xB7, 0x22,  // 8.g...."
            /* 0378 */  0x58, 0x13, 0x39, 0x69, 0xDF, 0x16, 0x4E, 0x36,  // X.9i..N6
            /* 0380 */  0xE8, 0xEB, 0x19, 0xE6, 0x56, 0x04, 0xFB, 0xFF,  // ....V...
            /* 0388 */  0x7F, 0x2B, 0x82, 0x73, 0x41, 0x83, 0x99, 0xE9,  // .+.sA...
            /* 0390 */  0x5E, 0x85, 0x8A, 0x75, 0xAF, 0x02, 0xC4, 0x0E,  // ^..u....
            /* 0398 */  0xEB, 0xB5, 0xC7, 0x07, 0x2B, 0xB8, 0xF7, 0x2A,  // ....+..*
            /* 03A0 */  0xB8, 0x97, 0xAA, 0x67, 0x85, 0x63, 0x0C, 0xFF,  // ...g.c..
            /* 03A8 */  0x30, 0x15, 0xE3, 0x94, 0x5E, 0x3B, 0x0D, 0x14,  // 0...^;..
            /* 03B0 */  0x26, 0x4A, 0xBC, 0xF7, 0x2A, 0x8F, 0xF1, 0xBD,  // &J..*...
            /* 03B8 */  0x8A, 0x5D, 0xA1, 0xC2, 0xC4, 0x7A, 0xB9, 0x32,  // .]...z.2
            /* 03C0 */  0xEA, 0xEB, 0x44, 0xB8, 0x40, 0x41, 0x22, 0xBD,  // ..D.@A".
            /* 03C8 */  0x5A, 0x45, 0x89, 0x1C, 0xDF, 0x90, 0xEF, 0x55,  // ZE.....U
            /* 03D0 */  0xE0, 0x95, 0x73, 0xAF, 0x02, 0xD9, 0xFF, 0xFF,  // ..s.....
            /* 03D8 */  0x5E, 0x05, 0x98, 0x47, 0x7B, 0xAF, 0x02, 0xE3,  // ^..G{...
            /* 03E0 */  0xB5, 0x81, 0xDD, 0x90, 0x60, 0x01, 0xBD, 0x58,  // ....`..X
            /* 03E8 */  0x01, 0x86, 0x32, 0x5F, 0xAC, 0x68, 0xDE, 0x8B,  // ..2_.h..
            /* 03F0 */  0x15, 0xE2, 0xFF, 0x7F, 0x2E, 0x61, 0x7A, 0x2E,  // .....az.
            /* 03F8 */  0x56, 0x64, 0x9E, 0xF0, 0x6F, 0x56, 0x00, 0xA7,  // Vd..oV..
            /* 0400 */  0xFF, 0xFF, 0x37, 0x2B, 0xC0, 0xD8, 0xBD, 0x08,  // ..7+....
            /* 0408 */  0x73, 0xB4, 0x82, 0x97, 0xF2, 0x66, 0x45, 0xE3,  // s....fE.
            /* 0410 */  0x2C, 0x43, 0x01, 0x17, 0x44, 0x61, 0x7C, 0xB3,  // ,C..Da|.
            /* 0418 */  0x02, 0x1C, 0x5D, 0x57, 0x70, 0x43, 0x86, 0x0B,  // ..]WpC..
            /* 0420 */  0x16, 0x25, 0x98, 0x0F, 0x21, 0x9E, 0xCE, 0x11,  // .%..!...
            /* 0428 */  0x3F, 0x24, 0xBC, 0x04, 0x3C, 0xE6, 0x78, 0xC0,  // ?$..<.x.
            /* 0430 */  0x0F, 0x04, 0xBE, 0x5C, 0x81, 0xE9, 0xFF, 0x4F,  // ...\...O
            /* 0438 */  0xE0, 0x93, 0xEF, 0x59, 0xBE, 0x4D, 0xBD, 0xF7,  // ...Y.M..
            /* 0440 */  0xF2, 0x03, 0xD6, 0x7B, 0x95, 0x0F, 0xBF, 0xB1,  // ...{....
            /* 0448 */  0xDE, 0x19, 0x5E, 0xAE, 0x3C, 0x92, 0x28, 0x27,  // ..^.<.('
            /* 0450 */  0x11, 0xCA, 0x77, 0xAB, 0xF7, 0x2A, 0xA3, 0x44,  // ..w..*.D
            /* 0458 */  0x7C, 0x21, 0xF6, 0x29, 0xD8, 0xD0, 0x46, 0x79,  // |!.)..Fy
            /* 0460 */  0xAA, 0x88, 0x6E, 0xBC, 0x97, 0x2B, 0xF0, 0x4A,  // ..n..+.J
            /* 0468 */  0xBA, 0x5C, 0x01, 0x34, 0x19, 0xFE, 0xCB, 0x15,  // .\.4....
            /* 0470 */  0xF8, 0x6E, 0x0E, 0xD8, 0x6B, 0x12, 0x9C, 0xFF,  // .n..k...
            /* 0478 */  0xFF, 0x35, 0x89, 0x5F, 0xAF, 0x00, 0x3F, 0xD9,  // .5._..?.
            /* 0480 */  0xAF, 0x57, 0x34, 0xF7, 0xF5, 0x0A, 0x25, 0x0A,  // .W4...%.
            /* 0488 */  0x42, 0x8A, 0x80, 0x34, 0x53, 0xF0, 0xDC, 0xAF,  // B..4S...
            /* 0490 */  0x00, 0x4E, 0xFC, 0xFF, 0xEF, 0x57, 0x80, 0xE5,  // .N...W..
            /* 0498 */  0x70, 0xF7, 0x2B, 0xA0, 0x77, 0x3B, 0x02, 0x2F,  // p.+.w;./
            /* 04A0 */  0xCA, 0xDB, 0x11, 0xF6, 0x8A, 0x85, 0xCF, 0x78,  // .......x
            /* 04A8 */  0xC5, 0xA2, 0x61, 0x56, 0xA2, 0x78, 0x6B, 0xA2,  // ..aV.xk.
            /* 04B0 */  0x30, 0xBE, 0x62, 0x01, 0x93, 0xFF, 0xFF, 0x15,  // 0.b.....
            /* 04B8 */  0x0B, 0x98, 0x1D, 0x44, 0x71, 0xA3, 0x86, 0x7B,  // ...Dq..{
            /* 04C0 */  0x71, 0xF2, 0xAD, 0xC7, 0xF3, 0x8D, 0xE8, 0x3B,  // q......;
            /* 04C8 */  0x0C, 0xE6, 0x84, 0x05, 0xE3, 0x86, 0x05, 0x7F,  // ........
            /* 04D0 */  0x48, 0x0F, 0xC3, 0x3E, 0x49, 0xBC, 0x63, 0xF9,  // H..>I.c.
            /* 04D8 */  0x68, 0x65, 0x90, 0x37, 0xE0, 0x27, 0xAB, 0x07,  // he.7.'..
            /* 04E0 */  0xAB, 0x28, 0x46, 0x08, 0x78, 0x3C, 0xEF, 0xC2,  // .(F.x<..
            /* 04E8 */  0x3E, 0x5A, 0xBD, 0x69, 0x19, 0x25, 0x76, 0x2C,  // >Z.i.%v,
            /* 04F0 */  0x5F, 0xA8, 0x9E, 0xB5, 0x7C, 0xCD, 0x32, 0x44,  // _...|.2D
            /* 04F8 */  0xDC, 0x07, 0x62, 0xDF, 0xB0, 0x00, 0xDB, 0xFF,  // ..b.....
            /* 0500 */  0xFF, 0x1B, 0x16, 0xE0, 0xE8, 0xE2, 0xC0, 0x0F,  // ........
            /* 0508 */  0x0E, 0xD8, 0x1B, 0x16, 0xE0, 0x73, 0xA6, 0xE0,  // .....s..
            /* 0510 */  0xB9, 0x61, 0x01, 0x9B, 0xFF, 0xFF, 0x0D, 0x0B,  // .a......
            /* 0518 */  0xE0, 0xFF, 0xFF, 0xFF, 0x86, 0x05, 0x1C, 0x6E,  // .......n
            /* 0520 */  0x57, 0xD8, 0x5B, 0x16, 0x96, 0xC0, 0xC1, 0x56,  // W.[....V
            /* 0528 */  0x41, 0x43, 0xAD, 0x44, 0x51, 0x60, 0x50, 0x37,  // AC.DQ`P7
            /* 0530 */  0x2C, 0xC0, 0xD1, 0xB8, 0x3D, 0x6A, 0x70, 0x9C,  // ,...=jp.
            /* 0538 */  0x0D, 0x9E, 0x24, 0x30, 0xE7, 0x6A, 0xDC, 0x6C,  // ..$0.j.l
            /* 0540 */  0x0E, 0x2E, 0x70, 0x84, 0xDE, 0x41, 0x35, 0x77,  // ..p..A5w
            /* 0548 */  0x76, 0x49, 0x81, 0x71, 0xCB, 0x82, 0x7B, 0xA9,  // vI.q..{.
            /* 0550 */  0x7A, 0x68, 0x88, 0x72, 0x10, 0xAF, 0xC2, 0x0F,  // zh.r....
            /* 0558 */  0x56, 0x8F, 0x52, 0x47, 0xF6, 0x78, 0xF5, 0x34,  // V.RG.x.4
            /* 0560 */  0xEC, 0x63, 0x96, 0x6F, 0x59, 0x86, 0x8A, 0xF0,  // .c.oY...
            /* 0568 */  0x96, 0xC5, 0xCE, 0x10, 0xF1, 0x62, 0x45, 0x09,  // .....bE.
            /* 0570 */  0xF1, 0x5E, 0x11, 0xDA, 0x77, 0x2E, 0x83, 0x3F,  // .^..w..?
            /* 0578 */  0x1A, 0x1B, 0x35, 0xE8, 0xCB, 0xF1, 0x5B, 0x16,  // ..5...[.
            /* 0580 */  0xBC, 0xFF, 0xFF, 0x2D, 0x0B, 0x7E, 0xEC, 0xBF,  // ...-.~..
            /* 0588 */  0x8A, 0x46, 0xE5, 0x5B, 0x16, 0xC0, 0x8F, 0x81,  // .F.[....
            /* 0590 */  0xDB, 0xC9, 0x78, 0xD0, 0x77, 0x80, 0xE3, 0xF6,  // ..x.w...
            /* 0598 */  0xAD, 0xC1, 0xF7, 0x2A, 0x16, 0x60, 0xD4, 0xF4,  // ...*.`..
            /* 05A0 */  0xB2, 0xE4, 0x03, 0x05, 0x3F, 0x5D, 0xF8, 0x40,  // ....?].@
            /* 05A8 */  0xC1, 0xEE, 0x06, 0x61, 0x0D, 0xF1, 0x50, 0x82,  // ...a..P.
            /* 05B0 */  0x19, 0x19, 0xF8, 0x87, 0x73, 0xDC, 0x1E, 0xC5,  // ....s...
            /* 05B8 */  0xBB, 0x83, 0x8F, 0x24, 0x64, 0x64, 0xE8, 0x73,  // ...$dd.s
            /* 05C0 */  0x81, 0xFF, 0xFF, 0x07, 0x0B, 0xFC, 0x00, 0x9E,  // ........
            /* 05C8 */  0x5A, 0x3C, 0x76, 0x36, 0x38, 0x70, 0x9D, 0x02,  // Z<v68p..
            /* 05D0 */  0x80, 0xC3, 0xE0, 0xC0, 0x79, 0x12, 0xE0, 0x93,  // ....y...
            /* 05D8 */  0xF3, 0xE0, 0xC0, 0x05, 0xE8, 0xC1, 0x01, 0x9F,  // ........
            /* 05E0 */  0x50, 0x83, 0x43, 0x8F, 0xC7, 0xC0, 0x21, 0x7D,  // P.C...!}
            /* 05E8 */  0x70, 0x63, 0x37, 0x8B, 0xA7, 0x21, 0x0F, 0x0D,  // pc7..!..
            /* 05F0 */  0x6C, 0x12, 0x86, 0x06, 0xF4, 0xFE, 0xFF, 0x43,  // l......C
            /* 05F8 */  0xC3, 0x4C, 0xE2, 0x71, 0xE5, 0xD0, 0xC0, 0x7C,  // .L.q...|
            /* 0600 */  0xDD, 0xF4, 0xD0, 0x80, 0x4F, 0xBC, 0xA1, 0xA1,  // ....O...
            /* 0608 */  0x87, 0xE4, 0xC3, 0x42, 0xCC, 0xC7, 0xA1, 0x08,  // ...B....
            /* 0610 */  0xEF, 0x0B, 0x3E, 0x6A, 0x31, 0xF4, 0xF7, 0x19,  // ..>j1...
            /* 0618 */  0xDF, 0x2E, 0x7C, 0x65, 0xC4, 0x8D, 0x0F, 0x5C,  // ..|e...\
            /* 0620 */  0x97, 0x3C, 0x8F, 0x0F, 0xF8, 0x9C, 0xCD, 0x3C,  // .<.....<
            /* 0628 */  0x3E, 0xDC, 0x19, 0xCB, 0xE3, 0x83, 0xE1, 0xF2,  // >.......
            /* 0630 */  0xCE, 0x43, 0xCE, 0x30, 0x3E, 0x83, 0xB1, 0xE1,  // .C.0>...
            /* 0638 */  0x81, 0xED, 0x00, 0xE6, 0xE1, 0x81, 0xFF, 0xFF,  // ........
            /* 0640 */  0x3F, 0x3C, 0xFC, 0xBD, 0x14, 0x8C, 0x77, 0x4D,  // ?<....wM
            /* 0648 */  0x7E, 0x2D, 0x81, 0x71, 0xD4, 0xC2, 0xDF, 0x4B,  // ~-.q...K
            /* 0650 */  0x01, 0x3F, 0xA3, 0xE0, 0x5A, 0x6F, 0xE3, 0x34,  // .?..Zo.4
            /* 0658 */  0xC8, 0x8B, 0x48, 0xB1, 0x5E, 0x04, 0x14, 0xC6,  // ..H.^...
            /* 0660 */  0x87, 0x3B, 0xC0, 0xD1, 0x58, 0x1F, 0xEE, 0xC0,  // .;..X...
            /* 0668 */  0x72, 0x2F, 0x60, 0xF7, 0x87, 0xFF, 0xFF, 0xAB,  // r/`.....
            /* 0670 */  0x1D, 0xCC, 0x63, 0x1D, 0xEC, 0xBB, 0xC3, 0x53,  // ..c....S
            /* 0678 */  0xDC, 0xF3, 0xDC, 0x33, 0xDD, 0x93, 0x9C, 0xCF,  // ...3....
            /* 0680 */  0xE2, 0x31, 0x5E, 0xE7, 0x82, 0xC4, 0x89, 0xF0,  // .1^.....
            /* 0688 */  0x3A, 0xF0, 0x58, 0xE7, 0x4B, 0x46, 0xBC, 0x40,  // :.X.KF.@
            /* 0690 */  0x8F, 0x75, 0xC6, 0x88, 0xF3, 0x76, 0x67, 0xC4,  // .u...vg.
            /* 0698 */  0x57, 0x8A, 0x10, 0x4F, 0x75, 0x3E, 0xE2, 0x19,  // W..Ou>..
            /* 06A0 */  0xEF, 0x61, 0x22, 0x5C, 0x98, 0x37, 0xBB, 0xC7,  // .a"\.7..
            /* 06A8 */  0x3A, 0xF0, 0xCA, 0xB9, 0x8B, 0x03, 0x34, 0x41,  // :.....4A
            /* 06B0 */  0x7B, 0x48, 0x81, 0xFD, 0xFF, 0x3F, 0xA4, 0xC0,  // {H...?..
            /* 06B8 */  0xB8, 0x36, 0xB0, 0x5B, 0x0A, 0xBC, 0x9B, 0x38,  // .6.[...8
            /* 06C0 */  0xE0, 0x28, 0xCB, 0x4D, 0x9C, 0xE6, 0xB8, 0x89,  // .(.M....
            /* 06C8 */  0xA3, 0x38, 0xAC, 0x06, 0x48, 0xF3, 0x84, 0x7F,  // .8..H...
            /* 06D0 */  0x0F, 0x07, 0xFF, 0x24, 0x7C, 0x0F, 0x07, 0x16,  // ...$|...
            /* 06D8 */  0x53, 0xF1, 0x3D, 0x1C, 0x18, 0xFE, 0xFF, 0xEF,  // S.=.....
            /* 06E0 */  0xE1, 0xC0, 0xE0, 0xBA, 0x8B, 0xBB, 0x87, 0x83,  // ........
            /* 06E8 */  0x9F, 0xC0, 0xF7, 0x70, 0xE0, 0x2D, 0x78, 0xA4,  // ...p.-x.
            /* 06F0 */  0xF4, 0xF2, 0x0D, 0xAE, 0x2B, 0x39, 0x1E, 0xF4,  // ....+9..
            /* 06F8 */  0x95, 0x1C, 0xA6, 0x42, 0x9B, 0x3E, 0x35, 0x1A,  // ...B.>5.
            /* 0700 */  0xB5, 0x6A, 0x50, 0xA6, 0x46, 0x99, 0x06, 0xB5,  // .jP.F...
            /* 0708 */  0xFA, 0x54, 0x6A, 0x8C, 0xE0, 0x75, 0xC7, 0x77,  // .Tj..u.w
            /* 0710 */  0x09, 0x2A, 0x66, 0x31, 0x1A, 0x8D, 0xA3, 0x80,  // .*f1....
            /* 0718 */  0x50, 0xD9, 0xBF, 0x45, 0x81, 0x38, 0xE4, 0x47,  // P..E.8.G
            /* 0720 */  0x47, 0x80, 0x0E, 0xF6, 0x9D, 0xD2, 0x75, 0x9D,  // G.....u.
            /* 0728 */  0xAC, 0x4D, 0x20, 0x8E, 0x6F, 0x02, 0xA2, 0x11,  // .M .o...
            /* 0730 */  0x10, 0x69, 0x51, 0x01, 0xC4, 0x72, 0x83, 0x08,  // .iQ..r..
            /* 0738 */  0xC8, 0x2A, 0xD6, 0x24, 0x20, 0x6B, 0xFE, 0xBE,  // .*.$ k..
            /* 0740 */  0x08, 0xDC, 0x3A, 0x75, 0x00, 0xB1, 0x94, 0x20,  // ..:u... 
            /* 0748 */  0x34, 0xD1, 0xC2, 0x05, 0xEA, 0x78, 0x20, 0x1A,  // 4....x .
            /* 0750 */  0x0C, 0x31, 0xF2, 0xFF, 0x07, 0x62, 0xC1, 0x28,  // .1...b.(
            /* 0758 */  0x04, 0x64, 0x19, 0x9F, 0x3B, 0x81, 0x5B, 0x80,  // .d..;.[.
            /* 0760 */  0x15, 0x20, 0x26, 0x1F, 0x84, 0x0A, 0xF6, 0x02,  // . &.....
            /* 0768 */  0xCA, 0xD4, 0x83, 0x08, 0xC8, 0x4A, 0xD7, 0x2A,  // .....J.*
            /* 0770 */  0x20, 0xEB, 0x06, 0x11, 0x90, 0xB3, 0x9A, 0x01,  //  .......
            /* 0778 */  0x67, 0x19, 0xDD, 0x00, 0x31, 0x85, 0x0F, 0x05,  // g...1...
            /* 0780 */  0x81, 0x58, 0x93, 0x1E, 0x50, 0x26, 0x10, 0x44,  // .X..P&.D
            /* 0788 */  0x17, 0x0E, 0xE2, 0x07, 0x88, 0x49, 0x03, 0x11,  // .....I..
            /* 0790 */  0x90, 0xE3, 0xFC, 0x4A, 0x04, 0xEE, 0x38, 0x8A,  // ...J..8.
            /* 0798 */  0x00, 0xA9, 0x23, 0x10, 0x16, 0x0F, 0x84, 0xCA,  // ..#.....
            /* 07A0 */  0xFE, 0x84, 0xE9, 0x0C, 0x41, 0x2C, 0x81, 0xB0,  // ....A,..
            /* 07A8 */  0x88, 0x20, 0x54, 0xB6, 0xA6, 0x9B, 0x1F, 0xF5,  // . T.....
            /* 07B0 */  0x04, 0xC2, 0x02, 0x83, 0x50, 0x99, 0xA6, 0x06,  // ....P...
            /* 07B8 */  0xC1, 0xA4, 0xB9, 0x02, 0x62, 0xC1, 0x40, 0x68,  // ....b.@h
            /* 07C0 */  0x84, 0x07, 0xD5, 0xE1, 0x90, 0x3C, 0x20, 0x02,  // .....< .
            /* 07C8 */  0xB2, 0xF6, 0x67, 0x88, 0x80, 0x9C, 0x04, 0x44,  // ..g....D
            /* 07D0 */  0x40, 0xFE, 0xFF, 0x03                           // @...
        })
    }

    OperationRegion (MNVS, SystemMemory, 0xCFFBAFBC, 0x1000)
    Field (MNVS, AnyAcc, NoLock, Preserve)
    {
        FXXX,   8, 
        WITM,   8, 
        WSEL,   8, 
        WLS0,   8, 
        WLS1,   8, 
        WLS2,   8, 
        WLS3,   8, 
        WLS4,   8, 
        WLS5,   8, 
        WLS6,   8, 
        WLS7,   8, 
        WENC,   8, 
        WKBD,   8, 
        WPAS,   520, 
        CMD,    8, 
        ERR,    32, 
        PAR0,   32, 
        PAR1,   32, 
        PAR2,   32, 
        PAR3,   32, 
        BTSQ,   256, 
        Offset (0x320), 
        PS2M,   8, 
        PS2K,   8, 
        Offset (0x32A), 
        Z000,   8
    }

    OperationRegion (SMI0, SystemIO, 0xB2, 0x01)
    Field (SMI0, ByteAcc, NoLock, Preserve)
    {
        APMC,   8
    }

    Mutex (MSMI, 0x07)
    OperationRegion (DP80, SystemIO, 0x80, 0x01)
    Field (DP80, ByteAcc, NoLock, Preserve)
    {
        XP80,   8
    }

    Method (SMI, 5, NotSerialized)
    {
        Acquire (MSMI, 0xFFFF)
        CMD = Arg0
        PAR0 = Arg1
        PAR1 = Arg2
        PAR2 = Arg3
        PAR3 = Arg4
        APMC = 0xF5
        While ((ERR == 0x01))
        {
            Sleep (0x64)
            APMC = 0xF5
        }

        Local0 = PAR0 /* \PAR0 */
        Release (MSMI)
        Return (Local0)
    }

    Method (WMIS, 2, NotSerialized)
    {
        Return (SMI (0x10, Arg0, Arg1, 0x00, 0x00))
    }

    Scope (_SB)
    {
        OperationRegion (SMI0, SystemIO, 0x0000FE00, 0x00000002)
        Field (SMI0, AnyAcc, NoLock, Preserve)
        {
            SMIC,   8
        }

        OperationRegion (SMI1, SystemMemory, 0xCFF9ADBC, 0x00000090)
        Field (SMI1, AnyAcc, NoLock, Preserve)
        {
            BCMD,   8, 
            DID,    32, 
            INFO,   1024
        }

        Field (SMI1, AnyAcc, NoLock, Preserve)
        {
            AccessAs (ByteAcc, 0x00), 
            Offset (0x05), 
            INF,    8
        }

        Device (PCI0)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                \_SB.OSHT ()
                If (CondRefOf (_OSI, Local0))
                {
                    OSYS = 0x07D1
                }
                ElseIf ((SizeOf (_OS) == 0x14))
                {
                    OSYS = 0x07D0
                }
                ElseIf ((SizeOf (_OS) == 0x27))
                {
                    OSYS = 0x07CF
                }
                Else
                {
                    OSYS = 0x07CE
                }
            }

            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_BBN, 0x00)  // _BBN: BIOS Bus Number
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg2
                Local1 = (Local0 * 0x04)
                Name (BUF1, Buffer (Local1){})
                BUF1 = Arg3
                Local1 = 0x00
                Local2 = 0x00
                While (Local0)
                {
                    Local2 = (Local1 * 0x04)
                    CreateDWordField (BUF1, Local2, CAPB)
                    If (Arg2)
                    {
                        (CAPB & 0xFFFFFFFC)
                        (CAPB | 0x00)
                    }
                    Else
                    {
                    }

                    Local1++
                    Local0--
                }

                Return (BUF1) /* \_SB_.PCI0._OSC.BUF1 */
            }

            OperationRegion (REGS, PCI_Config, 0x40, 0xC0)
            Field (REGS, ByteAcc, NoLock, Preserve)
            {
                Offset (0x50), 
                PAM0,   8, 
                PAM1,   8, 
                PAM2,   8, 
                PAM3,   8, 
                PAM4,   8, 
                PAM5,   8, 
                PAM6,   8, 
                    ,   7, 
                HEN,    1, 
                Offset (0x60), 
                TASM,   10, 
                Offset (0x62), 
                Offset (0x70), 
                Z001,   16
            }

            Name (RSRC, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x003F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0040,             // Length
                    0x00,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    0x00,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    0x00,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FDFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F100,         // Length
                    0x00,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED40000,         // Range Minimum
                    0xFED4FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local1 = Zero
                CreateDWordField (RSRC, \_SB.PCI0._Y00._MIN, BTMN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y00._MAX, BTMX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y00._LEN, BTLN)  // _LEN: Length
                BTMN = ((Z001 & 0xFFF0) << 0x10)
                BTLN = (0xFFFFFFFF - BTMN) /* \_SB_.PCI0._CRS.BTMN */
                BTMX = ((BTMN + BTLN) - 0x01)
                CreateBitField (RSRC, \_SB.PCI0._Y01._RW, C0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y01._MIN, C0MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y01._MAX, C0MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y01._LEN, C0LN)  // _LEN: Length
                C0RW = One
                If (((PAM1 & 0x03) == 0x01))
                {
                    C0RW = Zero
                }

                C0LN = Zero
                If (!(PAM1 & 0x03))
                {
                    C0LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y02._MIN, C4MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y02._MAX, C4MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                C4RW = One
                If (((PAM1 & 0x30) == 0x10))
                {
                    C4RW = Zero
                }

                C4LN = Zero
                If (!(PAM1 & 0x30))
                {
                    C4LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y03._RW, C8RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y03._MIN, C8MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y03._MAX, C8MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y03._LEN, C8LN)  // _LEN: Length
                C8RW = One
                If (((PAM2 & 0x03) == 0x01))
                {
                    C8RW = Zero
                }

                C8LN = Zero
                If (!(PAM2 & 0x03))
                {
                    C8LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y04._RW, CCRW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y04._MIN, CCMN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y04._MAX, CCMX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y04._LEN, CCLN)  // _LEN: Length
                CCRW = One
                If (((PAM2 & 0x30) == 0x10))
                {
                    CCRW = Zero
                }

                CCLN = Zero
                If (!(PAM2 & 0x30))
                {
                    CCLN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y05._RW, D0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y05._MIN, D0MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y05._MAX, D0MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y05._LEN, D0LN)  // _LEN: Length
                D0RW = One
                If (((PAM3 & 0x03) == 0x01))
                {
                    D0RW = Zero
                }

                D0LN = Zero
                If (!(PAM3 & 0x03))
                {
                    D0LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y06._RW, D4RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y06._MIN, D4MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y06._MAX, D4MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y06._LEN, D4LN)  // _LEN: Length
                D4RW = One
                If (((PAM3 & 0x30) == 0x10))
                {
                    D4RW = Zero
                }

                D4LN = Zero
                If (!(PAM3 & 0x30))
                {
                    D4LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y07._RW, D8RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y07._MIN, D8MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y07._MAX, D8MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y07._LEN, D8LN)  // _LEN: Length
                D8RW = One
                If (((PAM4 & 0x03) == 0x01))
                {
                    D8RW = Zero
                }

                D8LN = Zero
                If (!(PAM4 & 0x03))
                {
                    D8LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y08._RW, DCRW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y08._MIN, DCMN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y08._MAX, DCMX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y08._LEN, DCLN)  // _LEN: Length
                DCRW = One
                If (((PAM4 & 0x30) == 0x10))
                {
                    DCRW = Zero
                }

                DCLN = Zero
                If (!(PAM4 & 0x30))
                {
                    DCLN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y09._RW, E0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y09._MIN, E0MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y09._MAX, E0MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y09._LEN, E0LN)  // _LEN: Length
                E0RW = One
                If (((PAM5 & 0x03) == 0x01))
                {
                    E0RW = Zero
                }

                E0LN = Zero
                If (!(PAM5 & 0x03))
                {
                    E0LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0A._MIN, E4MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0A._MAX, E4MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0A._LEN, E4LN)  // _LEN: Length
                E4RW = One
                If (((PAM5 & 0x30) == 0x10))
                {
                    E4RW = Zero
                }

                E4LN = Zero
                If (!(PAM5 & 0x30))
                {
                    E4LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0B._MIN, E8MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0B._MAX, E8MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0B._LEN, E8LN)  // _LEN: Length
                E8RW = One
                If (((PAM6 & 0x03) == 0x01))
                {
                    E8RW = Zero
                }

                E8LN = Zero
                If (!(PAM6 & 0x03))
                {
                    E8LN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0C._MIN, ECMN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0C._MAX, ECMX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0C._LEN, ECLN)  // _LEN: Length
                ECRW = One
                If (((PAM6 & 0x30) == 0x10))
                {
                    ECRW = Zero
                }

                ECLN = Zero
                If (!(PAM6 & 0x30))
                {
                    ECLN = 0x4000
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0D._MIN, F0MN)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0D._MAX, F0MX)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
                F0RW = One
                If (((PAM0 & 0x30) == 0x10))
                {
                    F0RW = Zero
                }

                F0LN = Zero
                If (!(PAM0 & 0x30))
                {
                    F0LN = 0x00010000
                }

                Return (RSRC) /* \_SB_.PCI0.RSRC */
            }

            Name (_S1D, 0x01)  // _S1D: S1 Device State
            Name (_S3D, 0x02)  // _S3D: S3 Device State
            Name (_S4D, 0x02)  // _S4D: S4 Device State
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (!\PICF)
                {
                    Return (Package (0x18)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x01, 
                            \_SB.PCI0.LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x02, 
                            \_SB.PCI0.LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x03, 
                            \_SB.PCI0.LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0019FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x01, 
                            \_SB.PCI0.LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x02, 
                            \_SB.PCI0.LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x01, 
                            \_SB.PCI0.LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            \_SB.PCI0.LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            \_SB.PCI0.LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x01, 
                            \_SB.PCI0.LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            \_SB.PCI0.LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            \_SB.PCI0.LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x01, 
                            \_SB.PCI0.LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            \_SB.PCI0.LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            \_SB.PCI0.LPC0.LNKD, 
                            0x00
                        }
                    })
                }
                Else
                {
                    Return (Package (0x18)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x00, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0019FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }
                    })
                }
            }

            Name (NATA, Package (0x03)
            {
                0x001F0002, 
                0x001F0005
            })
            Method (GETP, 1, Serialized)
            {
                If (((Arg0 & 0x09) == 0x00))
                {
                    Return (0xFFFFFFFF)
                }

                If (((Arg0 & 0x09) == 0x08))
                {
                    Return (0x0384)
                }

                Local0 = ((Arg0 & 0x0300) >> 0x08)
                Local1 = ((Arg0 & 0x3000) >> 0x0C)
                Return ((0x1E * (0x09 - (Local0 + Local1))))
            }

            Method (GETD, 5, Serialized)
            {
                If (Arg0)
                {
                    If ((Arg1 && Arg4))
                    {
                        Return (0x14)
                    }

                    If ((Arg2 && Arg4))
                    {
                        Return (((0x04 - Arg3) * 0x0F))
                    }

                    Return (((0x04 - Arg3) * 0x1E))
                }

                Return (0xFFFFFFFF)
            }

            Method (GETT, 1, NotSerialized)
            {
                Return ((0x1E * (0x09 - (((Arg0 >> 0x02) & 0x03
                    ) + (Arg0 & 0x03)))))
            }

            Method (GETF, 3, Serialized)
            {
                Name (TMPF, 0x00)
                If (Arg0)
                {
                    TMPF |= 0x01
                }

                If ((Arg2 & 0x02))
                {
                    TMPF |= 0x02
                }

                If (Arg1)
                {
                    TMPF |= 0x04
                }

                If ((Arg2 & 0x20))
                {
                    TMPF |= 0x08
                }

                If ((Arg2 & 0x4000))
                {
                    TMPF |= 0x10
                }

                Return (TMPF) /* \_SB_.PCI0.GETF.TMPF */
            }

            Method (SETP, 3, Serialized)
            {
                If ((Arg0 >= 0xF0))
                {
                    Return (0x08)
                }
                Else
                {
                    If ((Arg1 & 0x02))
                    {
                        If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                        {
                            Return (0x2301)
                        }

                        If (((Arg0 <= 0xB4) && (Arg2 & 0x01)))
                        {
                            Return (0x2101)
                        }
                    }

                    Return (0x1001)
                }
            }

            Method (SETD, 1, Serialized)
            {
                If ((Arg0 <= 0x14))
                {
                    Return (0x01)
                }

                If ((Arg0 <= 0x1E))
                {
                    Return (0x02)
                }

                If ((Arg0 <= 0x2D))
                {
                    Return (0x01)
                }

                If ((Arg0 <= 0x3C))
                {
                    Return (0x02)
                }

                If ((Arg0 <= 0x5A))
                {
                    Return (0x01)
                }

                Return (0x00)
            }

            Method (SETT, 3, Serialized)
            {
                If ((Arg1 & 0x02))
                {
                    If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                    {
                        Return (0x0B)
                    }

                    If (((Arg0 <= 0xB4) && (Arg2 & 0x01)))
                    {
                        Return (0x09)
                    }
                }

                Return (0x04)
            }

            Device (PEG)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (Z002, PCI_Config, 0xC0, 0x04)
                Field (Z002, DWordAcc, NoLock, Preserve)
                {
                        ,   15, 
                    PMES,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x05
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!\PICF)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                }
            }

            Device (IGD0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
                Field (IGDP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x12), 
                        ,   1, 
                    GIVD,   1, 
                        ,   2, 
                    GUMA,   3, 
                    Offset (0x14), 
                        ,   4, 
                    GMFN,   1, 
                    Offset (0x18), 
                    SSRW,   32, 
                    Offset (0xA4), 
                    ASLE,   8, 
                    Offset (0xA8), 
                    GSSE,   1, 
                    GSSB,   14, 
                    GSES,   1, 
                    Offset (0xB0), 
                    Offset (0xB1), 
                    CDVL,   5, 
                    Offset (0xB2), 
                    Offset (0xBC), 
                    ASLS,   32
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((ASLS == 0xFEF00000))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                OperationRegion (IGDM, SystemMemory, 0xCFF98D64, 0x00002040)
                Field (IGDM, AnyAcc, NoLock, Preserve)
                {
                    SIGN,   128, 
                    SIZE,   32, 
                    OVER,   32, 
                    SVER,   256, 
                    VVER,   128, 
                    GVER,   128, 
                    MBOX,   32, 
                    Offset (0x100), 
                    DRDY,   32, 
                    CSTS,   32, 
                    CEVT,   32, 
                    Offset (0x120), 
                    DIDL,   256, 
                    CPDL,   256, 
                    CADL,   256, 
                    NADL,   256, 
                    ASLP,   32, 
                    TIDX,   32, 
                    CHPD,   32, 
                    CLID,   32, 
                    CDCK,   32, 
                    SXSW,   32, 
                    EVTS,   32, 
                    CNOT,   32, 
                    NRDY,   32, 
                    Offset (0x200), 
                    SCIE,   1, 
                    GEFC,   4, 
                    GXFC,   3, 
                    GESF,   8, 
                    Offset (0x204), 
                    PARM,   32, 
                    DSLP,   32, 
                    Offset (0x300), 
                    ARDY,   32, 
                    ASLC,   32, 
                    TCHE,   32, 
                    ALSI,   32, 
                    BCLP,   32, 
                    PFIT,   32, 
                    Offset (0x400), 
                    GVD1,   57344, 
                    IBTT,   8, 
                    IPAT,   8, 
                    ITVF,   8, 
                    ITVM,   8, 
                    IPSC,   8, 
                    IBLC,   8, 
                    IBIA,   8, 
                    ISSC,   8, 
                    I409,   8, 
                    I509,   8, 
                    I609,   8, 
                    I709,   8, 
                    IDMM,   8, 
                    IDMS,   8, 
                    IF1E,   8, 
                    GSMI,   8, 
                    HVCO,   8, 
                    LIDS,   8, 
                    CGCS,   16
                }

                Name (DBTB, Package (0x11)
                {
                    0x00, 
                    0x01, 
                    0x02, 
                    0x03, 
                    0x04, 
                    0x05, 
                    0x06, 
                    0x07, 
                    0x08, 
                    0x09, 
                    0x0A, 
                    0x10, 
                    0x11, 
                    0x12, 
                    0x13, 
                    0x14, 
                    0xFF
                })
                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                }

                Name (SUCC, 0x01)
                Name (NVLD, 0x02)
                Name (CRIT, 0x04)
                Name (NCRT, 0x06)
                Method (GBDA, 0, Serialized)
                {
                    If ((GESF == 0x00))
                    {
                        PARM = 0x00
                        PARM |= (0x01 << 0x00)
                        PARM |= (0x01 << 0x03)
                        PARM |= (0x01 << 0x04)
                        PARM |= (0x01 << 0x05)
                        PARM |= (0x01 << 0x06)
                        PARM |= (0x01 << 0x09)
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x01))
                    {
                        PARM = 0x00
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x04))
                    {
                        Name (LOOP, 0x00)
                        PARM &= 0xFFFFFF00
                        PARM |= DerefOf (DBTB [IBTT]) /* \_SB_.PCI0.IGD0.PARM */
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x05))
                    {
                        PARM = IPSC /* \_SB_.PCI0.IGD0.IPSC */
                        PARM |= (IPAT << 0x08)
                        PARM += 0x0100
                        PARM |= (LIDS << 0x10)
                        PARM ^= (0x01 << 0x10)
                        PARM |= (IBIA << 0x14)
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x06))
                    {
                        PARM = ITVF /* \_SB_.PCI0.IGD0.ITVF */
                        PARM |= (ITVM << 0x04)
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x07))
                    {
                        PARM = GIVD /* \_SB_.PCI0.IGD0.GIVD */
                        PARM ^= 0x01
                        PARM |= (GMFN << 0x01)
                        PARM |= (0x02 << 0x0B)
                        If ((IDMM == 0x00))
                        {
                            PARM |= (IDMS << 0x0D)
                        }

                        If (((IDMM == 0x01) || (IDMM == 0x03)))
                        {
                            PARM |= (IDMS << 0x11)
                        }

                        PARM |= (CGCS << 0x15)
                        GESF = 0x01
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    If ((GESF == 0x0A))
                    {
                        PARM = 0x00
                        If (ISSC)
                        {
                            (0x03 | PARM)
                        }

                        GESF = 0x00
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    GESF = Zero
                    Return (CRIT) /* \_SB_.PCI0.IGD0.CRIT */
                }

                Method (SBCB, 0, Serialized)
                {
                    If ((GESF == 0x00))
                    {
                        PARM = 0x00
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.IGD0.SUCC */
                }

                Method (OPRN, 0, Serialized)
                {
                    If ((GEFC == 0x04))
                    {
                        GXFC = GBDA ()
                    }

                    If ((GEFC == 0x06))
                    {
                        GXFC = SBCB ()
                    }

                    GEFC = 0x00
                    \_SB.PCI0.LPC0.SCIS = 0x01
                    GSSE = 0x00
                    SCIE = 0x00
                    Return (Zero)
                }
            }

            Device (IGD1)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
            }

            Device (ME0)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
            }

            Device (ME1)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
            }

            Device (ME2)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
            }

            Device (ME3)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
            }

            Device (LAN)
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                OperationRegion (LANF, PCI_Config, 0xCC, 0x04)
                Field (LANF, DWordAcc, NoLock, Preserve)
                {
                        ,   15, 
                    PMES,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x05
                })
            }

            Device (USB4)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                Name (_S1D, 0x01)  // _S1D: S1 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                OperationRegion (USBO, PCI_Config, 0xC4, 0x04)
                Field (USBO, DWordAcc, Lock, Preserve)
                {
                    RSEN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        RSEN = 0x03
                    }
                    Else
                    {
                        RSEN = 0x00
                    }
                }
            }

            Device (USB5)
            {
                Name (_ADR, 0x001A0001)  // _ADR: Address
                Name (_S1D, 0x01)  // _S1D: S1 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                OperationRegion (USBO, PCI_Config, 0xC4, 0x04)
                Field (USBO, DWordAcc, Lock, Preserve)
                {
                    RSEN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x05, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        RSEN = 0x03
                    }
                    Else
                    {
                        RSEN = 0x00
                    }
                }
            }

            Device (USB7)
            {
                Name (_ADR, 0x001A0002)  // _ADR: Address
                Name (_S1D, 0x01)  // _S1D: S1 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                OperationRegion (USBO, PCI_Config, 0xC4, 0x04)
                Field (USBO, DWordAcc, Lock, Preserve)
                {
                    RSEN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x05, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        RSEN = 0x03
                    }
                    Else
                    {
                        RSEN = 0x00
                    }
                }
            }

            Device (ESB2)
            {
                Name (_ADR, 0x001A0007)  // _ADR: Address
                Name (_S1D, 0x01)  // _S1D: S1 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                OperationRegion (EH2F, PCI_Config, 0x54, 0x04)
                Field (EH2F, DWordAcc, NoLock, Preserve)
                {
                        ,   15, 
                    PMES,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x03
                })
            }

            Device (EXP1)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (P1CS, PCI_Config, 0x40, 0x0100)
                Field (P1CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP1,   1, 
                        ,   2, 
                    PDC1,   1, 
                        ,   2, 
                    PDS1,   1, 
                    Offset (0x22), 
                    PSP1,   1, 
                    Offset (0x9F), 
                        ,   6, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Device (PXS1)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (X1CS, PCI_Config, 0x00, 0x0100)
                    Field (X1CS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        X1DV,   32
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x01)
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!\PICF)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                }
            }

            Device (EXP2)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (P2CS, PCI_Config, 0x40, 0x0100)
                Field (P2CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP2,   1, 
                        ,   2, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x22), 
                    PSP2,   1, 
                    Offset (0x9F), 
                        ,   6, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Device (PXS2)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (X2CS, PCI_Config, 0x00, 0x0100)
                    Field (X2CS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        X2DV,   32
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x01)
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!\PICF)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC0.LNKA, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x10
                            }
                        })
                    }
                }
            }

            Device (EXP3)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (P3CS, PCI_Config, 0x40, 0x0100)
                Field (P3CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP3,   1, 
                        ,   2, 
                    PDC3,   1, 
                        ,   2, 
                    PDS3,   1, 
                    Offset (0x22), 
                    PSP3,   1, 
                    Offset (0x9F), 
                        ,   6, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Device (PXS3)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (X3CS, PCI_Config, 0x00, 0x0100)
                    Field (X3CS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        X3DV,   32
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x01)
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!\PICF)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC0.LNKB, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x11
                            }
                        })
                    }
                }
            }

            Device (EXP4)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (P4CS, PCI_Config, 0x40, 0x0100)
                Field (P4CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP4,   1, 
                        ,   2, 
                    PDC4,   1, 
                        ,   2, 
                    PDS4,   1, 
                    Offset (0x22), 
                    PSP4,   1, 
                    Offset (0x9F), 
                        ,   6, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Device (PXS4)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (X4CS, PCI_Config, 0x00, 0x0100)
                    Field (X4CS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        X4DV,   32
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x01)
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!\PICF)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC0.LNKC, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x12
                            }
                        })
                    }
                }
            }

            Device (EXP5)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (P5CS, PCI_Config, 0x40, 0x0100)
                Field (P5CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP5,   1, 
                        ,   2, 
                    PDC5,   1, 
                        ,   2, 
                    PDS5,   1, 
                    Offset (0x22), 
                    PSP5,   1, 
                    Offset (0x9F), 
                        ,   6, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Device (PXS5)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (X5CS, PCI_Config, 0x00, 0x0100)
                    Field (X5CS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        X5DV,   32
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x01)
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!\PICF)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                }
            }

            Device (EXP6)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (P6CS, PCI_Config, 0x40, 0x0100)
                Field (P6CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP6,   1, 
                        ,   2, 
                    PDC6,   1, 
                        ,   2, 
                    PDS6,   1, 
                    Offset (0x22), 
                    PSP6,   1, 
                    Offset (0x9F), 
                        ,   6, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Device (PXS6)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (X6CS, PCI_Config, 0x00, 0x0100)
                    Field (X6CS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        X6DV,   32
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x01)
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!\PICF)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC0.LNKA, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x10
                            }
                        })
                    }
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Name (_S1D, 0x01)  // _S1D: S1 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                OperationRegion (USBO, PCI_Config, 0xC4, 0x04)
                Field (USBO, DWordAcc, Lock, Preserve)
                {
                    RSEN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x03, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        RSEN = 0x03
                    }
                    Else
                    {
                        RSEN = 0x00
                    }
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                Name (_S1D, 0x01)  // _S1D: S1 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                OperationRegion (USBO, PCI_Config, 0xC4, 0x04)
                Field (USBO, DWordAcc, Lock, Preserve)
                {
                    RSEN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x04, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        RSEN = 0x03
                    }
                    Else
                    {
                        RSEN = 0x00
                    }
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                Name (_S1D, 0x01)  // _S1D: S1 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                OperationRegion (USBO, PCI_Config, 0xC4, 0x04)
                Field (USBO, DWordAcc, Lock, Preserve)
                {
                    RSEN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0C, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        RSEN = 0x03
                    }
                    Else
                    {
                        RSEN = 0x00
                    }
                }
            }

            Device (USB6)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                Name (_S1D, 0x01)  // _S1D: S1 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                OperationRegion (USBO, PCI_Config, 0xC4, 0x04)
                Field (USBO, DWordAcc, Lock, Preserve)
                {
                    RSEN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        RSEN = 0x03
                    }
                    Else
                    {
                        RSEN = 0x00
                    }
                }
            }

            Device (ESB1)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                Name (_S1D, 0x01)  // _S1D: S1 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                OperationRegion (EH1F, PCI_Config, 0x54, 0x04)
                Field (EH1F, DWordAcc, NoLock, Preserve)
                {
                        ,   15, 
                    PMES,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x03
                })
            }

            Device (PCIB)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x05
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!\PICF)
                    {
                        Return (Package (0x08)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC0.LNKH, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC0.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x00, 
                                \_SB.PCI0.LPC0.LNKH, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x01, 
                                \_SB.PCI0.LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x02, 
                                \_SB.PCI0.LPC0.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x03, 
                                \_SB.PCI0.LPC0.LNKE, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x08)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x14
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x17
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x16
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x15
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x00, 
                                0x00, 
                                0x17
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x01, 
                                0x00, 
                                0x16
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x02, 
                                0x00, 
                                0x15
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x03, 
                                0x00, 
                                0x14
                            }
                        })
                    }
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Name (DVEN, 0x00)
                Method (DECD, 4, Serialized)
                {
                    Debug = Arg0
                }

                Device (MBRD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x1F)  // _UID: Unique ID
                    Name (RSRC, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x06,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x06,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x1000,             // Range Minimum
                            0x1000,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            _Y0E)
                        IO (Decode16,
                            0x1180,             // Range Minimum
                            0x1180,             // Range Maximum
                            0x01,               // Alignment
                            0x40,               // Length
                            _Y0F)
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0xFE00,             // Range Minimum
                            0xFE00,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED14000,         // Address Base
                            0x00004000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xF8000000,         // Address Base
                            0x04000000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED20000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED12000,         // Address Base
                            0x00001000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED45000,         // Address Base
                            0x0004B000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFEF00000,         // Address Base
                            0x00100000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED18000,         // Address Base
                            0x00001000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED19000,         // Address Base
                            0x00001000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED1C000,         // Address Base
                            0x00004000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED90000,         // Address Base
                            0x00004000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFEE00000,         // Address Base
                            0x00001000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.MBRD._Y0E._MIN, PMMN)  // _MIN: Minimum Base Address
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.MBRD._Y0E._MAX, PMMX)  // _MAX: Maximum Base Address
                        PMMN = (^^PMBA & 0xFF80)
                        PMMX = PMMN /* \_SB_.PCI0.LPC0.MBRD._CRS.PMMN */
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.MBRD._Y0F._MIN, GPMN)  // _MIN: Minimum Base Address
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.MBRD._Y0F._MAX, GPMX)  // _MAX: Maximum Base Address
                        GPMN = (^^GPBA & 0xFF80)
                        GPMX = GPMN /* \_SB_.PCI0.LPC0.MBRD._CRS.GPMN */
                        Return (RSRC) /* \_SB_.PCI0.LPC0.MBRD.RSRC */
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer16, )
                            {4}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {2}
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y10)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (HPAE)
                        {
                            Local1 = 0x0F
                        }
                        Else
                        {
                            Local1 = 0x00
                        }

                        Return (Local1)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPC0.HPET._Y10._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == 0x01))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }
                        }

                        Return (BUF0) /* \_SB_.PCI0.LPC0.HPET.BUF0 */
                    }
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.TIMR.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.TIMR.BUF1 */
                    }
                }

                Device (LNKA)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y11)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRA |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKA._Y11._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRA & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Debug = RSRC /* \_SB_.PCI0.LPC0.LNKA.RSRC */
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKA.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        Debug = Arg0
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRA = (Local0 | (PIRA & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRA & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKB)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y12)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRB |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKB._Y12._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRB & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKB.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRB = (Local0 | (PIRB & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRB & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKC)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y13)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRC |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKC._Y13._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRC & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKC.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRC = (Local0 | (PIRC & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRC & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKD)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y14)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRD |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKD._Y14._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRD & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKD.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRD = (Local0 | (PIRD & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRD & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKE)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y15)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRE |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKE._Y15._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRE & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Debug = RSRC /* \_SB_.PCI0.LPC0.LNKE.RSRC */
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKE.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        Debug = Arg0
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRE = (Local0 | (PIRE & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRE & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKF)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y16)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRF |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKF._Y16._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRF & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Debug = RSRC /* \_SB_.PCI0.LPC0.LNKF.RSRC */
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKF.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        Debug = Arg0
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRF = (Local0 | (PIRF & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRF & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKG)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y17)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRG |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKG._Y17._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRG & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Debug = RSRC /* \_SB_.PCI0.LPC0.LNKG.RSRC */
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKG.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        Debug = Arg0
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRG = (Local0 | (PIRG & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRG & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                Device (LNKH)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x08)  // _UID: Unique ID
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,11,12,14,15}
                    })
                    Name (RSRC, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y18)
                            {}
                    })
                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRH |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (RSRC, \_SB.PCI0.LPC0.LNKH._Y18._INT, IRQ0)  // _INT: Interrupts
                        Local0 = (PIRH & 0x0F)
                        IRQ0 = (0x01 << Local0)
                        Debug = RSRC /* \_SB_.PCI0.LPC0.LNKH.RSRC */
                        Return (RSRC) /* \_SB_.PCI0.LPC0.LNKH.RSRC */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        Debug = Arg0
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRH = (Local0 | (PIRH & 0x70))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRH & 0x80))
                        {
                            Return (0x09)
                        }

                        Return (0x0B)
                    }
                }

                OperationRegion (TCOI, SystemIO, 0x1060, 0x08)
                Field (TCOI, WordAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                        ,   9, 
                    SCIS,   1, 
                    Offset (0x06)
                }

                OperationRegion (GPOX, SystemIO, 0x1180, 0x30)
                Field (GPOX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                        ,   3, 
                    IO27,   1, 
                    Offset (0x0F), 
                        ,   3, 
                    LV27,   1, 
                    Offset (0x1B), 
                        ,   3, 
                    BL27,   1
                }

                OperationRegion (PIRX, PCI_Config, 0x60, 0x04)
                Field (PIRX, DWordAcc, Lock, Preserve)
                {
                    AccessAs (ByteAcc, 0x00), 
                    PIRA,   8, 
                    PIRB,   8, 
                    PIRC,   8, 
                    PIRD,   8
                }

                OperationRegion (PIRY, PCI_Config, 0x68, 0x04)
                Field (PIRY, DWordAcc, Lock, Preserve)
                {
                    AccessAs (ByteAcc, 0x00), 
                    PIRE,   8, 
                    PIRF,   8, 
                    PIRG,   8, 
                    PIRH,   8
                }

                OperationRegion (ROUT, SystemIO, 0xB8, 0x04)
                Field (ROUT, DWordAcc, Lock, Preserve)
                {
                    AccessAs (ByteAcc, 0x00), 
                    GPI0,   2, 
                    GPI1,   2, 
                    GPI2,   2, 
                    GPI3,   2, 
                    GPI4,   2, 
                    GPI5,   2, 
                    GPI6,   2, 
                    GPI7,   2, 
                    GPI8,   2, 
                    GPI9,   2, 
                    GP10,   2, 
                    GP11,   2, 
                    GP12,   2, 
                    GP13,   2, 
                    GP14,   2, 
                    GP15,   2
                }

                OperationRegion (PMIO, SystemIO, 0x1000, 0x30)
                Field (PMIO, WordAcc, NoLock, Preserve)
                {
                    AccessAs (DWordAcc, 0x00), 
                    Offset (0x2D), 
                        ,   4, 
                    GPES,   1, 
                    Offset (0x2F), 
                        ,   4, 
                    GPEE,   1
                }

                OperationRegion (REGS, PCI_Config, 0x40, 0x10)
                Field (REGS, DWordAcc, Lock, Preserve)
                {
                    PMBA,   16, 
                    Offset (0x08), 
                    GPBA,   16
                }

                Device (FWH)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadWrite,
                            0xFF800000,         // Address Base
                            0x00800000,         // Address Length
                            )
                    })
                }

                Device (SIO)
                {
                    Name (_HID, EisaId ("PNP0A05") /* Generic Container Device */)  // _HID: Hardware ID
                    Mutex (Z003, 0x00)
                    OperationRegion (SMC1, SystemIO, 0x0000004E, 0x00000002)
                    Field (SMC1, ByteAcc, Lock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, AnyAcc, NoLock, Preserve)
                    {
                        AccessAs (ByteAcc, 0x00), 
                        Offset (0x02), 
                        CFG,    8, 
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x22), 
                        PWC,    8, 
                        LPWC,   8, 
                        Offset (0x30), 
                        ACTR,   1, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        Offset (0x70), 
                        INTR,   8, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xF0), 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8
                    }

                    IndexField (INDX, DATA, AnyAcc, NoLock, WriteAsOnes)
                    {
                        Offset (0xF0), 
                        LPTM,   3
                    }

                    Method (ENFG, 0, NotSerialized)
                    {
                        INDX = 0x55
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = 0xAA
                    }

                    Device (COM1)
                    {
                        Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                        Name (_UID, 0x01)  // _UID: Unique ID
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x08, 
                            0x04
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x04
                            If (ACTR)
                            {
                                Local1 = 0x0F
                            }
                            ElseIf ((IOAH || IOAL))
                            {
                                Local1 = 0x0D
                            }
                            Else
                            {
                                Local1 = 0x00
                            }

                            EXFG ()
                            Release (Z003)
                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x04
                            ACTR = Zero
                            EXFG ()
                            Release (Z003)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (RSRC, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y19)
                                IRQNoFlags (_Y1A)
                                    {}
                            })
                            CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.COM1._CRS._Y19._MIN, IO1)  // _MIN: Minimum Base Address
                            CreateByteField (RSRC, 0x03, IO2)
                            CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.COM1._CRS._Y19._MAX, IO3)  // _MAX: Maximum Base Address
                            CreateByteField (RSRC, 0x05, IO4)
                            CreateWordField (RSRC, \_SB.PCI0.LPC0.SIO.COM1._CRS._Y1A._INT, IRQV)  // _INT: Interrupts
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x04
                            If (ACTR)
                            {
                                IO1 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IO2 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                IO3 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IO4 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                Local0 = 0x01
                                IRQV = (Local0 << INTR) /* \_SB_.PCI0.LPC0.SIO_.INTR */
                            }

                            EXFG ()
                            Release (Z003)
                            Return (RSRC) /* \_SB_.PCI0.LPC0.SIO_.COM1._CRS.RSRC */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IO1)
                            CreateByteField (Arg0, 0x03, IO2)
                            CreateWordField (Arg0, 0x09, IRQV)
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x04
                            IOAL = IO1 /* \_SB_.PCI0.LPC0.SIO_.COM1._SRS.IO1_ */
                            IOAH = IO2 /* \_SB_.PCI0.LPC0.SIO_.COM1._SRS.IO2_ */
                            FindSetRightBit (IRQV, Local0)
                            INTR = (Local0 - 0x01)
                            ACTR = 0x01
                            EXFG ()
                            Release (Z003)
                        }
                    }

                    Device (COM2)
                    {
                        Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x08, 
                            0x04
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x05
                            Local2 = (OPT2 & 0x38)
                            If ((Local2 == 0x00))
                            {
                                If (ACTR)
                                {
                                    Local1 = 0x0F
                                }
                                ElseIf ((IOAH || IOAL))
                                {
                                    Local1 = 0x0D
                                }
                                Else
                                {
                                    Local1 = 0x00
                                }
                            }
                            Else
                            {
                                Local1 = 0x00
                            }

                            EXFG ()
                            Release (Z003)
                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x05
                            ACTR = Zero
                            EXFG ()
                            Release (Z003)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (RSRC, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y1B)
                                IRQNoFlags (_Y1C)
                                    {}
                            })
                            CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.COM2._CRS._Y1B._MIN, IO1)  // _MIN: Minimum Base Address
                            CreateByteField (RSRC, 0x03, IO2)
                            CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.COM2._CRS._Y1B._MAX, IO3)  // _MAX: Maximum Base Address
                            CreateByteField (RSRC, 0x05, IO4)
                            CreateWordField (RSRC, \_SB.PCI0.LPC0.SIO.COM2._CRS._Y1C._INT, IRQV)  // _INT: Interrupts
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x05
                            If (ACTR)
                            {
                                IO1 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IO2 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                IO3 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IO4 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                Local0 = 0x01
                                IRQV = (Local0 << INTR) /* \_SB_.PCI0.LPC0.SIO_.INTR */
                            }

                            EXFG ()
                            Release (Z003)
                            Return (RSRC) /* \_SB_.PCI0.LPC0.SIO_.COM2._CRS.RSRC */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IO1)
                            CreateByteField (Arg0, 0x03, IO2)
                            CreateWordField (Arg0, 0x09, IRQV)
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x05
                            IOAL = IO1 /* \_SB_.PCI0.LPC0.SIO_.COM2._SRS.IO1_ */
                            IOAH = IO2 /* \_SB_.PCI0.LPC0.SIO_.COM2._SRS.IO2_ */
                            FindSetRightBit (IRQV, Local0)
                            INTR = (Local0 - 0x01)
                            ACTR = 0x01
                            Local0 = OPT2 /* \_SB_.PCI0.LPC0.SIO_.OPT2 */
                            Local0 &= 0xC7
                            OPT2 = Local0
                            EXFG ()
                            Release (Z003)
                        }
                    }

                    Device (IRDA)
                    {
                        Name (_HID, EisaId ("PNP0510") /* Generic IRDA-compatible Device */)  // _HID: Hardware ID
                        Name (_UID, 0x01)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x05
                            Local2 = (OPT2 & 0x38)
                            If ((Local2 == 0x08))
                            {
                                If (ACTR)
                                {
                                    Local1 = 0x0F
                                }
                                ElseIf ((IOAH || IOAL))
                                {
                                    Local1 = 0x0D
                                }
                                Else
                                {
                                    Local1 = 0x00
                                }
                            }
                            Else
                            {
                                Local1 = 0x00
                            }

                            EXFG ()
                            Release (Z003)
                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x05
                            ACTR = Zero
                            EXFG ()
                            Release (Z003)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (RSRC, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y1D)
                                IRQNoFlags (_Y1E)
                                    {}
                            })
                            CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.IRDA._CRS._Y1D._MIN, IO1)  // _MIN: Minimum Base Address
                            CreateByteField (RSRC, 0x03, IO2)
                            CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.IRDA._CRS._Y1D._MAX, IO3)  // _MAX: Maximum Base Address
                            CreateByteField (RSRC, 0x05, IO4)
                            CreateWordField (RSRC, \_SB.PCI0.LPC0.SIO.IRDA._CRS._Y1E._INT, IRQV)  // _INT: Interrupts
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x05
                            If (ACTR)
                            {
                                IO1 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IO2 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                IO3 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IO4 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                Local0 = 0x01
                                IRQV = (Local0 << INTR) /* \_SB_.PCI0.LPC0.SIO_.INTR */
                            }

                            EXFG ()
                            Release (Z003)
                            Return (RSRC) /* \_SB_.PCI0.LPC0.SIO_.IRDA._CRS.RSRC */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IO1)
                            CreateByteField (Arg0, 0x03, IO2)
                            CreateWordField (Arg0, 0x09, IRQV)
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x05
                            IOAL = IO1 /* \_SB_.PCI0.LPC0.SIO_.IRDA._SRS.IO1_ */
                            IOAH = IO2 /* \_SB_.PCI0.LPC0.SIO_.IRDA._SRS.IO2_ */
                            FindSetRightBit (IRQV, Local0)
                            INTR = (Local0 - 0x01)
                            ACTR = 0x01
                            Local0 = OPT2 /* \_SB_.PCI0.LPC0.SIO_.OPT2 */
                            Local0 &= 0xC7
                            Local0 |= 0x08
                            OPT2 = Local0
                            EXFG ()
                            Release (Z003)
                        }
                    }

                    Device (ASKR)
                    {
                        Name (_HID, EisaId ("PNP0510") /* Generic IRDA-compatible Device */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x05
                            Local2 = (OPT2 & 0x38)
                            If ((Local2 == 0x10))
                            {
                                If (ACTR)
                                {
                                    Local1 = 0x0F
                                }
                                ElseIf ((IOAH || IOAL))
                                {
                                    Local1 = 0x0D
                                }
                                Else
                                {
                                    Local1 = 0x00
                                }
                            }
                            Else
                            {
                                Local1 = 0x00
                            }

                            EXFG ()
                            Release (Z003)
                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x05
                            ACTR = Zero
                            EXFG ()
                            Release (Z003)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (RSRC, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y1F)
                                IRQNoFlags (_Y20)
                                    {}
                            })
                            CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.ASKR._CRS._Y1F._MIN, IO1)  // _MIN: Minimum Base Address
                            CreateByteField (RSRC, 0x03, IO2)
                            CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.ASKR._CRS._Y1F._MAX, IO3)  // _MAX: Maximum Base Address
                            CreateByteField (RSRC, 0x05, IO4)
                            CreateWordField (RSRC, \_SB.PCI0.LPC0.SIO.ASKR._CRS._Y20._INT, IRQV)  // _INT: Interrupts
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x05
                            If (ACTR)
                            {
                                IO1 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IO2 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                IO3 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IO4 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                Local0 = 0x01
                                IRQV = (Local0 << INTR) /* \_SB_.PCI0.LPC0.SIO_.INTR */
                            }

                            EXFG ()
                            Release (Z003)
                            Return (RSRC) /* \_SB_.PCI0.LPC0.SIO_.ASKR._CRS.RSRC */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IO1)
                            CreateByteField (Arg0, 0x03, IO2)
                            CreateWordField (Arg0, 0x09, IRQV)
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x05
                            IOAL = IO1 /* \_SB_.PCI0.LPC0.SIO_.ASKR._SRS.IO1_ */
                            IOAH = IO2 /* \_SB_.PCI0.LPC0.SIO_.ASKR._SRS.IO2_ */
                            FindSetRightBit (IRQV, Local0)
                            INTR = (Local0 - 0x01)
                            ACTR = 0x01
                            Local0 = OPT2 /* \_SB_.PCI0.LPC0.SIO_.OPT2 */
                            Local0 &= 0xC7
                            Local0 |= 0x10
                            OPT2 = Local0
                            EXFG ()
                            Release (Z003)
                        }
                    }

                    Device (FDC)
                    {
                        Name (_HID, EisaId ("PNP0700"))  // _HID: Hardware ID
                        Name (_UID, 0x01)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x00
                            If (ACTR)
                            {
                                Local1 = 0x0F
                            }
                            ElseIf ((IOAH || IOAL))
                            {
                                Local1 = 0x0D
                            }
                            Else
                            {
                                Local1 = 0x00
                            }

                            EXFG ()
                            Release (Z003)
                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x00
                            ACTR = Zero
                            EXFG ()
                            Release (Z003)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (RSRC, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x06,               // Length
                                    _Y21)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x01,               // Alignment
                                    0x01,               // Length
                                    _Y22)
                                IRQNoFlags (_Y23)
                                    {}
                                DMA (Compatibility, NotBusMaster, Transfer16, _Y24)
                                    {}
                            })
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x00
                            If (ACTR)
                            {
                                CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.FDC._CRS._Y21._MIN, IO1)  // _MIN: Minimum Base Address
                                CreateByteField (RSRC, 0x03, IO2)
                                CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.FDC._CRS._Y21._MAX, IO3)  // _MAX: Maximum Base Address
                                CreateByteField (RSRC, 0x05, IO4)
                                CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.FDC._CRS._Y22._MIN, IO5)  // _MIN: Minimum Base Address
                                CreateByteField (RSRC, 0x0B, IO6)
                                CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.FDC._CRS._Y22._MAX, IO7)  // _MAX: Maximum Base Address
                                CreateByteField (RSRC, 0x0D, IO8)
                                CreateWordField (RSRC, \_SB.PCI0.LPC0.SIO.FDC._CRS._Y23._INT, IRQV)  // _INT: Interrupts
                                CreateByteField (RSRC, \_SB.PCI0.LPC0.SIO.FDC._CRS._Y24._DMA, DMAV)  // _DMA: Direct Memory Access
                                IO1 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IO2 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                IO3 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IO4 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                IO5 = (IOAL + 0x07)
                                IO6 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                IO7 = (IOAL + 0x07)
                                IO8 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                Local0 = 0x01
                                IRQV = (Local0 << INTR) /* \_SB_.PCI0.LPC0.SIO_.INTR */
                                Local0 = 0x01
                                DMAV = (Local0 << DMCH) /* \_SB_.PCI0.LPC0.SIO_.DMCH */
                            }

                            EXFG ()
                            Release (Z003)
                            Return (RSRC) /* \_SB_.PCI0.LPC0.SIO_.FDC_._CRS.RSRC */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x03F0,             // Range Minimum
                                    0x03F0,             // Range Maximum
                                    0x08,               // Alignment
                                    0x06,               // Length
                                    )
                                IO (Decode16,
                                    0x03F7,             // Range Minimum
                                    0x03F7,             // Range Maximum
                                    0x01,               // Alignment
                                    0x01,               // Length
                                    )
                                IRQNoFlags ()
                                    {6}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {2}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x0370,             // Range Minimum
                                    0x0370,             // Range Maximum
                                    0x08,               // Alignment
                                    0x06,               // Length
                                    )
                                IO (Decode16,
                                    0x0377,             // Range Minimum
                                    0x0377,             // Range Maximum
                                    0x01,               // Alignment
                                    0x01,               // Length
                                    )
                                IRQNoFlags ()
                                    {6}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {2}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IO1)
                            CreateByteField (Arg0, 0x03, IO2)
                            CreateWordField (Arg0, 0x11, IRQV)
                            CreateByteField (Arg0, 0x14, DMAV)
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x00
                            IOAL = IO1 /* \_SB_.PCI0.LPC0.SIO_.FDC_._SRS.IO1_ */
                            IOAH = IO2 /* \_SB_.PCI0.LPC0.SIO_.FDC_._SRS.IO2_ */
                            FindSetRightBit (IRQV, Local0)
                            INTR = (Local0 - 0x01)
                            FindSetRightBit (DMAV, Local0)
                            DMCH = (Local0 - 0x01)
                            ACTR = 0x01
                            EXFG ()
                            Release (Z003)
                        }
                    }

                    Device (LPT)
                    {
                        Name (_HID, EisaId ("PNP0400") /* Standard LPT Parallel Port */)  // _HID: Hardware ID
                        Name (_UID, 0x01)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            Local0 = LPTM /* \_SB_.PCI0.LPC0.SIO_.LPTM */
                            Local0 &= 0x07
                            If ((Local0 == 0x04))
                            {
                                If (ACTR)
                                {
                                    Local1 = 0x0F
                                }
                                ElseIf ((IOAH || IOAL))
                                {
                                    Local1 = 0x0D
                                }
                                Else
                                {
                                    Local1 = 0x00
                                }
                            }
                            Else
                            {
                                Local1 = 0x00
                            }

                            EXFG ()
                            Release (Z003)
                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            ACTR = 0x00
                            EXFG ()
                            Release (Z003)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            Name (CRSA, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y25)
                                IRQNoFlags (_Y26)
                                    {}
                            })
                            CreateByteField (CRSA, \_SB.PCI0.LPC0.SIO.LPT._CRS._Y25._MIN, IOA1)  // _MIN: Minimum Base Address
                            CreateByteField (CRSA, 0x03, IOA2)
                            CreateByteField (CRSA, \_SB.PCI0.LPC0.SIO.LPT._CRS._Y25._MAX, IOA3)  // _MAX: Maximum Base Address
                            CreateByteField (CRSA, 0x05, IOA4)
                            CreateByteField (CRSA, \_SB.PCI0.LPC0.SIO.LPT._CRS._Y25._ALN, ALA1)  // _ALN: Alignment
                            CreateByteField (CRSA, \_SB.PCI0.LPC0.SIO.LPT._CRS._Y25._LEN, LNA1)  // _LEN: Length
                            CreateWordField (CRSA, \_SB.PCI0.LPC0.SIO.LPT._CRS._Y26._INT, IRQA)  // _INT: Interrupts
                            If (ACTR)
                            {
                                IOA1 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IOA2 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                IOA3 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IOA4 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                Local0 = 0x01
                                IRQA = (Local0 << INTR) /* \_SB_.PCI0.LPC0.SIO_.INTR */
                                If ((IOAL == 0xBC))
                                {
                                    ALA1 = 0x08
                                    LNA1 = 0x03
                                }

                                Return (CRSA) /* \_SB_.PCI0.LPC0.SIO_.LPT_._CRS.CRSA */
                            }
                            Else
                            {
                                Return (CRSA) /* \_SB_.PCI0.LPC0.SIO_.LPT_._CRS.CRSA */
                            }

                            EXFG ()
                            Release (Z003)
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x03,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x03,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            CreateByteField (Arg0, 0x02, IOA1)
                            CreateByteField (Arg0, 0x03, IOA2)
                            CreateByteField (Arg0, 0x04, IOA3)
                            CreateByteField (Arg0, 0x05, IOA4)
                            CreateByteField (Arg0, 0x06, ALA1)
                            CreateByteField (Arg0, 0x07, LNA1)
                            CreateWordField (Arg0, 0x09, IRQA)
                            IOAL = IOA1 /* \_SB_.PCI0.LPC0.SIO_.LPT_._SRS.IOA1 */
                            IOAH = IOA2 /* \_SB_.PCI0.LPC0.SIO_.LPT_._SRS.IOA2 */
                            FindSetRightBit (IRQA, Local0)
                            INTR = (Local0 - 0x01)
                            ACTR = 0x01
                            Local0 = LPTM /* \_SB_.PCI0.LPC0.SIO_.LPTM */
                            Local0 &= 0xF8
                            Local0 |= 0x04
                            LPTM = Local0
                            EXFG ()
                            Release (Z003)
                        }
                    }

                    Device (LPBI)
                    {
                        Name (_HID, EisaId ("PNP0400") /* Standard LPT Parallel Port */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            Local0 = LPTM /* \_SB_.PCI0.LPC0.SIO_.LPTM */
                            Local0 &= 0x07
                            If ((Local0 == 0x00))
                            {
                                If (ACTR)
                                {
                                    Local1 = 0x0F
                                }
                                ElseIf ((IOAH || IOAL))
                                {
                                    Local1 = 0x0D
                                }
                                Else
                                {
                                    Local1 = 0x00
                                }
                            }
                            Else
                            {
                                Local1 = 0x00
                            }

                            EXFG ()
                            Release (Z003)
                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            ACTR = 0x00
                            EXFG ()
                            Release (Z003)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            Name (CRSA, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y27)
                                IRQNoFlags (_Y28)
                                    {}
                            })
                            CreateByteField (CRSA, \_SB.PCI0.LPC0.SIO.LPBI._CRS._Y27._MIN, IOA1)  // _MIN: Minimum Base Address
                            CreateByteField (CRSA, 0x03, IOA2)
                            CreateByteField (CRSA, \_SB.PCI0.LPC0.SIO.LPBI._CRS._Y27._MAX, IOA3)  // _MAX: Maximum Base Address
                            CreateByteField (CRSA, 0x05, IOA4)
                            CreateByteField (CRSA, \_SB.PCI0.LPC0.SIO.LPBI._CRS._Y27._ALN, ALA1)  // _ALN: Alignment
                            CreateByteField (CRSA, \_SB.PCI0.LPC0.SIO.LPBI._CRS._Y27._LEN, LNA1)  // _LEN: Length
                            CreateWordField (CRSA, \_SB.PCI0.LPC0.SIO.LPBI._CRS._Y28._INT, IRQA)  // _INT: Interrupts
                            If (ACTR)
                            {
                                IOA1 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IOA2 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                IOA3 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IOA4 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                Local0 = 0x01
                                IRQA = (Local0 << INTR) /* \_SB_.PCI0.LPC0.SIO_.INTR */
                                If ((IOAL == 0xBC))
                                {
                                    ALA1 = 0x08
                                    LNA1 = 0x03
                                }

                                Return (CRSA) /* \_SB_.PCI0.LPC0.SIO_.LPBI._CRS.CRSA */
                            }
                            Else
                            {
                                Return (CRSA) /* \_SB_.PCI0.LPC0.SIO_.LPBI._CRS.CRSA */
                            }

                            EXFG ()
                            Release (Z003)
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x03,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x03,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            CreateByteField (Arg0, 0x02, IOA1)
                            CreateByteField (Arg0, 0x03, IOA2)
                            CreateByteField (Arg0, 0x04, IOA3)
                            CreateByteField (Arg0, 0x05, IOA4)
                            CreateByteField (Arg0, 0x06, ALA1)
                            CreateByteField (Arg0, 0x07, LNA1)
                            CreateWordField (Arg0, 0x09, IRQA)
                            IOAL = IOA1 /* \_SB_.PCI0.LPC0.SIO_.LPBI._SRS.IOA1 */
                            IOAH = IOA2 /* \_SB_.PCI0.LPC0.SIO_.LPBI._SRS.IOA2 */
                            FindSetRightBit (IRQA, Local0)
                            INTR = (Local0 - 0x01)
                            ACTR = 0x01
                            Local0 = LPTM /* \_SB_.PCI0.LPC0.SIO_.LPTM */
                            Local0 &= 0xF8
                            LPTM = Local0
                            EXFG ()
                            Release (Z003)
                        }
                    }

                    Device (EPP)
                    {
                        Name (_HID, EisaId ("PNP0400") /* Standard LPT Parallel Port */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            Local0 = LPTM /* \_SB_.PCI0.LPC0.SIO_.LPTM */
                            Local0 &= 0x07
                            If ((Local0 == 0x01))
                            {
                                If (ACTR)
                                {
                                    Local1 = 0x0F
                                }
                                ElseIf ((IOAH || IOAL))
                                {
                                    Local1 = 0x0D
                                }
                                Else
                                {
                                    Local1 = 0x00
                                }
                            }
                            Else
                            {
                                Local1 = 0x00
                            }

                            EXFG ()
                            Release (Z003)
                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            ACTR = 0x00
                            EXFG ()
                            Release (Z003)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            Name (CRSA, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y29)
                                IRQNoFlags (_Y2A)
                                    {}
                            })
                            CreateByteField (CRSA, \_SB.PCI0.LPC0.SIO.EPP._CRS._Y29._MIN, IOA1)  // _MIN: Minimum Base Address
                            CreateByteField (CRSA, 0x03, IOA2)
                            CreateByteField (CRSA, \_SB.PCI0.LPC0.SIO.EPP._CRS._Y29._MAX, IOA3)  // _MAX: Maximum Base Address
                            CreateByteField (CRSA, 0x05, IOA4)
                            CreateWordField (CRSA, \_SB.PCI0.LPC0.SIO.EPP._CRS._Y2A._INT, IRQA)  // _INT: Interrupts
                            If (ACTR)
                            {
                                IOA1 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IOA2 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                IOA3 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IOA4 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                Local0 = 0x01
                                IRQA = (Local0 << INTR) /* \_SB_.PCI0.LPC0.SIO_.INTR */
                                Return (CRSA) /* \_SB_.PCI0.LPC0.SIO_.EPP_._CRS.CRSA */
                            }
                            Else
                            {
                                Return (CRSA) /* \_SB_.PCI0.LPC0.SIO_.EPP_._CRS.CRSA */
                            }

                            EXFG ()
                            Release (Z003)
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0178,             // Range Minimum
                                    0x0178,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0178,             // Range Minimum
                                    0x0178,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            CreateByteField (Arg0, 0x02, IOA1)
                            CreateByteField (Arg0, 0x03, IOA2)
                            CreateByteField (Arg0, 0x04, IOA3)
                            CreateByteField (Arg0, 0x05, IOA4)
                            CreateWordField (Arg0, 0x09, IRQA)
                            IOAL = IOA1 /* \_SB_.PCI0.LPC0.SIO_.EPP_._SRS.IOA1 */
                            IOAH = IOA2 /* \_SB_.PCI0.LPC0.SIO_.EPP_._SRS.IOA2 */
                            FindSetLeftBit (IRQA, Local0)
                            INTR = (Local0 - 0x01)
                            ACTR = 0x01
                            Local0 = LPTM /* \_SB_.PCI0.LPC0.SIO_.LPTM */
                            Local0 &= 0xF8
                            Local0 |= 0x01
                            LPTM = Local0
                            EXFG ()
                            Release (Z003)
                        }
                    }

                    Device (ECP)
                    {
                        Name (_HID, EisaId ("PNP0401") /* ECP Parallel Port */)  // _HID: Hardware ID
                        Name (_UID, 0x01)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            Local0 = LPTM /* \_SB_.PCI0.LPC0.SIO_.LPTM */
                            Local0 &= 0x07
                            If ((Local0 == 0x02))
                            {
                                If (ACTR)
                                {
                                    Local1 = 0x0F
                                }
                                ElseIf ((IOAH || IOAL))
                                {
                                    Local1 = 0x0D
                                }
                                Else
                                {
                                    Local1 = 0x00
                                }
                            }
                            Else
                            {
                                Local1 = 0x00
                            }

                            EXFG ()
                            Release (Z003)
                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            ACTR = 0x00
                            DMCH = 0x00
                            EXFG ()
                            Release (Z003)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            Name (CRSB, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y2B)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y2C)
                                IRQNoFlags (_Y2D)
                                    {}
                                DMA (Compatibility, NotBusMaster, Transfer16, _Y2E)
                                    {}
                            })
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.ECP._CRS._Y2B._MIN, IOB1)  // _MIN: Minimum Base Address
                            CreateByteField (CRSB, 0x03, IOB2)
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.ECP._CRS._Y2B._MAX, IOB3)  // _MAX: Maximum Base Address
                            CreateByteField (CRSB, 0x05, IOB4)
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.ECP._CRS._Y2B._ALN, ALB1)  // _ALN: Alignment
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.ECP._CRS._Y2B._LEN, LNB1)  // _LEN: Length
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.ECP._CRS._Y2C._MIN, IOB5)  // _MIN: Minimum Base Address
                            CreateByteField (CRSB, 0x0B, IOB6)
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.ECP._CRS._Y2C._MAX, IOB7)  // _MAX: Maximum Base Address
                            CreateByteField (CRSB, 0x0D, IOB8)
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.ECP._CRS._Y2C._ALN, ALB2)  // _ALN: Alignment
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.ECP._CRS._Y2C._LEN, LNB2)  // _LEN: Length
                            CreateWordField (CRSB, \_SB.PCI0.LPC0.SIO.ECP._CRS._Y2D._INT, IRQB)  // _INT: Interrupts
                            CreateWordField (CRSB, \_SB.PCI0.LPC0.SIO.ECP._CRS._Y2E._DMA, DMAV)  // _DMA: Direct Memory Access
                            If (ACTR)
                            {
                                IOB1 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IOB2 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                IOB3 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IOB4 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                IOB5 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IOB6 = (IOAH + 0x04)
                                IOB7 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IOB8 = (IOAH + 0x04)
                                If ((IOAL == 0xBC))
                                {
                                    ALB1 = 0x08
                                    LNB1 = 0x03
                                    ALB2 = 0x08
                                    LNB2 = 0x03
                                }

                                Local0 = 0x01
                                IRQB = (Local0 << INTR) /* \_SB_.PCI0.LPC0.SIO_.INTR */
                                Local0 = 0x01
                                DMAV = (Local0 << DMCH) /* \_SB_.PCI0.LPC0.SIO_.DMCH */
                                Return (CRSB) /* \_SB_.PCI0.LPC0.SIO_.ECP_._CRS.CRSB */
                            }
                            Else
                            {
                                Return (CRSB) /* \_SB_.PCI0.LPC0.SIO_.ECP_._CRS.CRSB */
                            }

                            EXFG ()
                            Release (Z003)
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {1,3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {1,3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {1,3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {1,3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x07BC,             // Range Minimum
                                    0x07BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x03,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {1,3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x07BC,             // Range Minimum
                                    0x07BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x03,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {1,3}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            CreateByteField (Arg0, 0x02, IOB1)
                            CreateByteField (Arg0, 0x03, IOB2)
                            CreateByteField (Arg0, 0x04, IOB3)
                            CreateByteField (Arg0, 0x05, IOB4)
                            CreateByteField (Arg0, 0x06, ALB1)
                            CreateByteField (Arg0, 0x07, LNB1)
                            CreateByteField (Arg0, 0x0A, IOB5)
                            CreateByteField (Arg0, 0x0B, IOB6)
                            CreateByteField (Arg0, 0x0C, IOB7)
                            CreateByteField (Arg0, 0x0D, IOB8)
                            CreateByteField (Arg0, 0x0E, ALB2)
                            CreateByteField (Arg0, 0x0F, LNB2)
                            CreateWordField (Arg0, 0x11, IRQB)
                            CreateWordField (Arg0, 0x14, DMAV)
                            IOAL = IOB1 /* \_SB_.PCI0.LPC0.SIO_.ECP_._SRS.IOB1 */
                            IOAH = IOB2 /* \_SB_.PCI0.LPC0.SIO_.ECP_._SRS.IOB2 */
                            FindSetLeftBit (IRQB, Local0)
                            INTR = (Local0 - 0x01)
                            FindSetLeftBit (DMAV, Local0)
                            DMCH = (Local0 - 0x01)
                            ACTR = 0x01
                            Local0 = LPTM /* \_SB_.PCI0.LPC0.SIO_.LPTM */
                            Local0 &= 0xF8
                            Local0 |= 0x02
                            LPTM = Local0
                            EXFG ()
                            Release (Z003)
                        }
                    }

                    Device (EPCP)
                    {
                        Name (_HID, EisaId ("PNP0401") /* ECP Parallel Port */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            Local0 = LPTM /* \_SB_.PCI0.LPC0.SIO_.LPTM */
                            Local0 &= 0x07
                            If ((Local0 == 0x03))
                            {
                                If (ACTR)
                                {
                                    Local1 = 0x0F
                                }
                                ElseIf ((IOAH || IOAL))
                                {
                                    Local1 = 0x0D
                                }
                                Else
                                {
                                    Local1 = 0x00
                                }
                            }
                            Else
                            {
                                Local1 = 0x00
                            }

                            EXFG ()
                            Release (Z003)
                            Return (Local1)
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            ACTR = 0x00
                            DMCH = 0x00
                            EXFG ()
                            Release (Z003)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            Name (CRSB, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y2F)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y30)
                                IRQNoFlags (_Y31)
                                    {}
                                DMA (Compatibility, NotBusMaster, Transfer16, _Y32)
                                    {}
                            })
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.EPCP._CRS._Y2F._MIN, IOB1)  // _MIN: Minimum Base Address
                            CreateByteField (CRSB, 0x03, IOB2)
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.EPCP._CRS._Y2F._MAX, IOB3)  // _MAX: Maximum Base Address
                            CreateByteField (CRSB, 0x05, IOB4)
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.EPCP._CRS._Y2F._ALN, ALB1)  // _ALN: Alignment
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.EPCP._CRS._Y2F._LEN, LNB1)  // _LEN: Length
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.EPCP._CRS._Y30._MIN, IOB5)  // _MIN: Minimum Base Address
                            CreateByteField (CRSB, 0x0B, IOB6)
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.EPCP._CRS._Y30._MAX, IOB7)  // _MAX: Maximum Base Address
                            CreateByteField (CRSB, 0x0D, IOB8)
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.EPCP._CRS._Y30._ALN, ALB2)  // _ALN: Alignment
                            CreateByteField (CRSB, \_SB.PCI0.LPC0.SIO.EPCP._CRS._Y30._LEN, LNB2)  // _LEN: Length
                            CreateWordField (CRSB, \_SB.PCI0.LPC0.SIO.EPCP._CRS._Y31._INT, IRQB)  // _INT: Interrupts
                            CreateWordField (CRSB, \_SB.PCI0.LPC0.SIO.EPCP._CRS._Y32._DMA, DMAV)  // _DMA: Direct Memory Access
                            If (ACTR)
                            {
                                IOB1 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IOB2 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                IOB3 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IOB4 = IOAH /* \_SB_.PCI0.LPC0.SIO_.IOAH */
                                IOB5 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IOB6 = (IOAH + 0x04)
                                IOB7 = IOAL /* \_SB_.PCI0.LPC0.SIO_.IOAL */
                                IOB8 = (IOAH + 0x04)
                                If ((IOAL == 0xBC))
                                {
                                    ALB1 = 0x01
                                    LNB1 = 0x04
                                    ALB2 = 0x01
                                    LNB2 = 0x04
                                }

                                Local0 = 0x01
                                IRQB = (Local0 << INTR) /* \_SB_.PCI0.LPC0.SIO_.INTR */
                                Local0 = 0x01
                                DMAV = (Local0 << DMCH) /* \_SB_.PCI0.LPC0.SIO_.DMCH */
                                Return (CRSB) /* \_SB_.PCI0.LPC0.SIO_.EPCP._CRS.CRSB */
                            }
                            Else
                            {
                                Return (CRSB) /* \_SB_.PCI0.LPC0.SIO_.EPCP._CRS.CRSB */
                            }

                            EXFG ()
                            Release (Z003)
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {1,3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {1,3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {1,3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {1,3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x04,               // Length
                                    )
                                IO (Decode16,
                                    0x07BC,             // Range Minimum
                                    0x07BC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {1,3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0178,             // Range Minimum
                                    0x0178,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0578,             // Range Minimum
                                    0x0578,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5}
                                DMA (Compatibility, NotBusMaster, Transfer16, )
                                    {1,3}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            Acquire (Z003, 0xFFFF)
                            ENFG ()
                            LDN = 0x03
                            CreateByteField (Arg0, 0x02, IOB1)
                            CreateByteField (Arg0, 0x03, IOB2)
                            CreateByteField (Arg0, 0x04, IOB3)
                            CreateByteField (Arg0, 0x05, IOB4)
                            CreateByteField (Arg0, 0x06, ALB1)
                            CreateByteField (Arg0, 0x07, LNB1)
                            CreateByteField (Arg0, 0x0A, IOB5)
                            CreateByteField (Arg0, 0x0B, IOB6)
                            CreateByteField (Arg0, 0x0C, IOB7)
                            CreateByteField (Arg0, 0x0D, IOB8)
                            CreateByteField (Arg0, 0x0E, ALB2)
                            CreateByteField (Arg0, 0x0F, LNB2)
                            CreateWordField (Arg0, 0x11, IRQB)
                            CreateWordField (Arg0, 0x14, DMAV)
                            IOAL = IOB1 /* \_SB_.PCI0.LPC0.SIO_.EPCP._SRS.IOB1 */
                            IOAH = IOB2 /* \_SB_.PCI0.LPC0.SIO_.EPCP._SRS.IOB2 */
                            FindSetLeftBit (IRQB, Local0)
                            INTR = (Local0 - 0x01)
                            FindSetLeftBit (DMAV, Local0)
                            DMCH = (Local0 - 0x01)
                            ACTR = 0x01
                            Local0 = LPTM /* \_SB_.PCI0.LPC0.SIO_.LPTM */
                            Local0 &= 0xF8
                            Local0 |= 0x03
                            LPTM = Local0
                            EXFG ()
                            Release (Z003)
                        }
                    }

                    OperationRegion (PMEB, SystemIO, 0x0500, 0x80)
                    Field (PMEB, ByteAcc, NoLock, Preserve)
                    {
                        PMES,   1, 
                        Offset (0x02), 
                        PMEE,   1, 
                        Offset (0x04), 
                            ,   3, 
                        PMSK,   1, 
                        PMSM,   1, 
                        Offset (0x0A), 
                            ,   3, 
                        PMEK,   1, 
                        PMEM,   1, 
                        Offset (0x35), 
                        GP32,   8, 
                        GP33,   8, 
                        Offset (0x4D), 
                            ,   2, 
                        GP3P,   1, 
                        GP3,    1
                    }

                    Device (KBC0)
                    {
                        Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (PSK0, ResourceTemplate ()
                            {
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {1}
                            })
                            Name (PSK1, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x01,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x01,               // Alignment
                                    0x01,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {1}
                            })
                            If ((PS2K == 0x01))
                            {
                                Return (PSK1) /* \_SB_.PCI0.LPC0.SIO_.KBC0._CRS.PSK1 */
                            }
                            Else
                            {
                                Return (PSK0) /* \_SB_.PCI0.LPC0.SIO_.KBC0._CRS.PSK0 */
                            }
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((PS2K == 0x01))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x1D, 
                            0x04
                        })
                        Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                        {
                            Acquire (Z003, 0xFFFF)
                            \_SB.PCI0.LPC0.SIO.PMEK = 0x00
                            \_SB.PCI0.LPC0.SIO.PMSM = 0x01
                            \_SB.PCI0.LPC0.SIO.PMSK = 0x01
                            If (Arg0)
                            {
                                \_SB.PCI0.LPC0.SIO.PMEK = 0x01
                            }

                            Release (Z003)
                        }
                    }

                    Device (MSE0)
                    {
                        Name (_HID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _HID: Hardware ID
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (PSM0, ResourceTemplate ()
                            {
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {12}
                            })
                            Name (PSM1, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x01,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x01,               // Alignment
                                    0x01,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Exclusive, )
                                    {12}
                            })
                            If ((PS2M == 0x01))
                            {
                                If ((PS2K == 0x01))
                                {
                                    Return (PSM0) /* \_SB_.PCI0.LPC0.SIO_.MSE0._CRS.PSM0 */
                                }
                                Else
                                {
                                    Return (PSM1) /* \_SB_.PCI0.LPC0.SIO_.MSE0._CRS.PSM1 */
                                }
                            }
                            Else
                            {
                                Return (PSM0) /* \_SB_.PCI0.LPC0.SIO_.MSE0._CRS.PSM0 */
                            }
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((PS2M == 0x01))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x1D, 
                            0x04
                        })
                        Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                        {
                            Acquire (Z003, 0xFFFF)
                            \_SB.PCI0.LPC0.SIO.PMEM = 0x00
                            \_SB.PCI0.LPC0.SIO.PMSM = 0x01
                            \_SB.PCI0.LPC0.SIO.PMSK = 0x01
                            If (Arg0)
                            {
                                \_SB.PCI0.LPC0.SIO.PMEM = 0x01
                            }

                            Release (Z003)
                        }
                    }

                    Device (NOKM)
                    {
                        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                        Name (_UID, 0x1E)  // _UID: Unique ID
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (NKM0, Buffer (0x02)
                            {
                                 0x79, 0x00                                       // y.
                            })
                            Name (NKM1, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x01,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x01,               // Alignment
                                    0x01,               // Length
                                    )
                            })
                            If ((PS2M == 0x00))
                            {
                                If ((PS2K == 0x00))
                                {
                                    Return (NKM1) /* \_SB_.PCI0.LPC0.SIO_.NOKM._CRS.NKM1 */
                                }
                                Else
                                {
                                    Return (NKM0) /* \_SB_.PCI0.LPC0.SIO_.NOKM._CRS.NKM0 */
                                }
                            }
                            Else
                            {
                                Return (NKM0) /* \_SB_.PCI0.LPC0.SIO_.NOKM._CRS.NKM0 */
                            }
                        }
                    }

                    Method (FAON, 0, NotSerialized)
                    {
                        ENFG ()
                        LDN = 0x0A
                        ACTR = One
                        GP33 = Zero
                        GP3 = Zero
                        GP32 = Zero
                        GP3P = Zero
                        EXFG ()
                    }

                    Method (FAOF, 0, NotSerialized)
                    {
                        ENFG ()
                        LDN = 0x0A
                        ACTR = One
                        GP33 = Zero
                        GP3 = One
                        GP32 = Zero
                        GP3P = One
                        EXFG ()
                    }

                    Method (FSTA, 0, NotSerialized)
                    {
                        ENFG ()
                        LDN = 0x0A
                        ACTR = One
                        Local0 = GP3 /* \_SB_.PCI0.LPC0.SIO_.GP3_ */
                        Local1 = GP3P /* \_SB_.PCI0.LPC0.SIO_.GP3P */
                        EXFG ()
                        Local0 |= Local1
                        Return (Local0)
                    }
                }
            }

            Device (IDE1)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                OperationRegion (PBIO, SystemIO, 0x00001CA8, 0x00000008)
                Field (PBIO, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                        ,   7, 
                    PBSY,   1
                }

                OperationRegion (SBIO, SystemIO, 0x00001CA0, 0x00000008)
                Field (SBIO, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                        ,   7, 
                    SBSY,   1
                }

                OperationRegion (IDE, PCI_Config, 0x40, 0xC0)
                Field (IDE, DWordAcc, NoLock, Preserve)
                {
                    PRIT,   16, 
                    SECT,   16, 
                    PSIT,   4, 
                    SSIT,   4, 
                    Offset (0x08), 
                    SDMA,   4, 
                    Offset (0x0A), 
                    SDT0,   2, 
                        ,   2, 
                    SDT1,   2, 
                    Offset (0x0B), 
                    SDT2,   2, 
                        ,   2, 
                    SDT3,   2, 
                    Offset (0x14), 
                    ICR0,   4, 
                    ICR1,   4, 
                    ICR2,   4, 
                    ICR3,   4, 
                    ICR4,   4, 
                    ICR5,   4, 
                    Offset (0x50), 
                    MAP,    8, 
                    Offset (0x52), 
                    PCS,    16
                }

                Method (BSSP, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        If (\SPN1)
                        {
                            Local1 = (0x0A00 & PCS)
                            Local3 = 0x00
                            If ((0x0800 == Local1))
                            {
                                While ((SBSY && (0x4B > Local3)))
                                {
                                    Sleep (0x64)
                                    Local3++
                                }
                            }

                            \SPN1 = 0x00
                        }
                    }
                    ElseIf (\SPN0)
                    {
                        Local0 = (0x0500 & PCS)
                        Local2 = 0x00
                        If ((0x0400 == Local0))
                        {
                            While ((PBSY && (0x4B > Local2)))
                            {
                                Sleep (0x64)
                                Local2++
                            }
                        }

                        \SPN0 = 0x00
                    }
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GETP (PRIT)
                        DMA0 = GETD ((SDMA & 0x01), (ICR3 & 0x01), (
                            ICR0 & 0x01), SDT0, (ICR1 & 0x01))
                        If ((DMA0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.IDE1.PRID._GTM.PIO0 */
                        }

                        If ((PRIT & 0x4000))
                        {
                            If (((PRIT & 0x90) == 0x80))
                            {
                                PIO1 = 0x0384
                            }
                            Else
                            {
                                PIO1 = GETT (PSIT)
                            }
                        }
                        Else
                        {
                            PIO1 = 0xFFFFFFFF
                        }

                        DMA1 = GETD ((SDMA & 0x02), (ICR3 & 0x02), (
                            ICR0 & 0x02), SDT1, (ICR1 & 0x02))
                        If ((DMA1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.IDE1.PRID._GTM.PIO1 */
                        }

                        FLAG = GETF ((SDMA & 0x01), (SDMA & 0x02), PRIT)
                        Return (PBUF) /* \_SB_.PCI0.IDE1.PRID._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        If ((SizeOf (Arg1) == 0x0200))
                        {
                            PRIT &= 0xCCF0
                            SDMA &= 0x0E
                            SDT0 = 0x00
                            ICR0 &= 0x0E
                            ICR1 &= 0x0E
                            ICR3 &= 0x0E
                            ICR5 &= 0x0E
                            CreateWordField (Arg1, 0x62, W490)
                            CreateWordField (Arg1, 0x6A, W530)
                            CreateWordField (Arg1, 0x7E, W630)
                            CreateWordField (Arg1, 0x80, W640)
                            CreateWordField (Arg1, 0xB0, W880)
                            CreateWordField (Arg1, 0xBA, W930)
                            PRIT |= 0x8004
                            If (((FLAG & 0x02) && (W490 & 0x0800)))
                            {
                                PRIT |= 0x02
                            }

                            PRIT |= SETP (PIO0, W530, W640)
                            If ((FLAG & 0x01))
                            {
                                SDMA |= 0x01
                                SDT0 = SETD (DMA0)
                                If ((DMA0 < 0x1E))
                                {
                                    ICR3 |= 0x01
                                }

                                If ((DMA0 < 0x3C))
                                {
                                    ICR0 |= 0x01
                                }

                                ICR1 |= 0x01
                            }
                        }

                        If ((SizeOf (Arg2) == 0x0200))
                        {
                            PRIT &= 0xBF0F
                            PSIT = 0x00
                            SDMA &= 0x0D
                            SDT1 = 0x00
                            ICR0 &= 0x0D
                            ICR1 &= 0x0D
                            ICR3 &= 0x0D
                            ICR5 &= 0x0D
                            CreateWordField (Arg2, 0x62, W491)
                            CreateWordField (Arg2, 0x6A, W531)
                            CreateWordField (Arg2, 0x7E, W631)
                            CreateWordField (Arg2, 0x80, W641)
                            CreateWordField (Arg2, 0xB0, W881)
                            CreateWordField (Arg2, 0xBA, W931)
                            PRIT |= 0x8040
                            If (((FLAG & 0x08) && (W491 & 0x0800)))
                            {
                                PRIT |= 0x20
                            }

                            If ((FLAG & 0x10))
                            {
                                PRIT |= 0x4000
                                If ((PIO1 > 0xF0))
                                {
                                    PRIT |= 0x80
                                }
                                Else
                                {
                                    PRIT |= 0x10
                                    PSIT = SETT (PIO1, W531, W641)
                                }
                            }

                            If ((FLAG & 0x04))
                            {
                                SDMA |= 0x02
                                SDT1 = SETD (DMA1)
                                If ((DMA1 < 0x1E))
                                {
                                    ICR3 |= 0x02
                                }

                                If ((DMA1 < 0x3C))
                                {
                                    ICR0 |= 0x02
                                }

                                ICR1 |= 0x02
                            }
                        }
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        BSSP (0x00)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (PIB0, 0x01, PMD0)
                            CreateByteField (PIB0, 0x08, DMD0)
                            If ((PRIT & 0x02))
                            {
                                If (((PRIT & 0x09) == 0x08))
                                {
                                    PMD0 = 0x08
                                }
                                Else
                                {
                                    PMD0 = 0x0A
                                    Local0 = ((PRIT & 0x0300) >> 0x08)
                                    Local1 = ((PRIT & 0x3000) >> 0x0C)
                                    Local2 = (Local0 + Local1)
                                    If ((0x03 == Local2))
                                    {
                                        PMD0 = 0x0B
                                    }

                                    If ((0x05 == Local2))
                                    {
                                        PMD0 = 0x0C
                                    }
                                }
                            }
                            Else
                            {
                                PMD0 = 0x01
                            }

                            If ((SDMA & 0x01))
                            {
                                DMD0 = (SDT0 | 0x40)
                                If ((ICR1 & 0x01))
                                {
                                    If ((ICR0 & 0x01))
                                    {
                                        DMD0 += 0x02
                                    }

                                    If ((ICR3 & 0x01))
                                    {
                                        DMD0 = 0x45
                                    }
                                }
                            }
                            Else
                            {
                                DMD0 = (((PMD0 & 0x07) - 0x02) | 0x20)
                            }

                            Return (PIB0) /* \_SB_.PCI0.IDE1.PRID.P_D0._GTF.PIB0 */
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (PIB1, 0x01, PMD1)
                            CreateByteField (PIB1, 0x08, DMD1)
                            If ((PRIT & 0x20))
                            {
                                If (((PRIT & 0x90) == 0x80))
                                {
                                    PMD1 = 0x08
                                }
                                Else
                                {
                                    Local0 = ((PSIT & 0x03) + ((PSIT & 0x0C) >> 0x02
                                        ))
                                    If ((0x05 == Local0))
                                    {
                                        PMD1 = 0x0C
                                    }
                                    ElseIf ((0x03 == Local0))
                                    {
                                        PMD1 = 0x0B
                                    }
                                    Else
                                    {
                                        PMD1 = 0x0A
                                    }
                                }
                            }
                            Else
                            {
                                PMD1 = 0x01
                            }

                            If ((SDMA & 0x02))
                            {
                                DMD1 = (SDT1 | 0x40)
                                If ((ICR1 & 0x02))
                                {
                                    If ((ICR0 & 0x02))
                                    {
                                        DMD1 += 0x02
                                    }

                                    If ((ICR3 & 0x02))
                                    {
                                        DMD1 = 0x45
                                    }
                                }
                            }
                            Else
                            {
                                DMD1 = (((PMD1 & 0x07) - 0x02) | 0x20)
                            }

                            Return (PIB1) /* \_SB_.PCI0.IDE1.PRID.P_D1._GTF.PIB1 */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (SBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (SBUF, 0x00, PIO0)
                        CreateDWordField (SBUF, 0x04, DMA0)
                        CreateDWordField (SBUF, 0x08, PIO1)
                        CreateDWordField (SBUF, 0x0C, DMA1)
                        CreateDWordField (SBUF, 0x10, FLAG)
                        PIO0 = GETP (SECT)
                        DMA0 = GETD ((SDMA & 0x04), (ICR3 & 0x04), (
                            ICR0 & 0x04), SDT2, (ICR1 & 0x04))
                        If ((DMA0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.IDE1.SECD._GTM.PIO0 */
                        }

                        If ((SECT & 0x4000))
                        {
                            If (((SECT & 0x90) == 0x80))
                            {
                                PIO1 = 0x0384
                            }
                            Else
                            {
                                PIO1 = GETT (SSIT)
                            }
                        }
                        Else
                        {
                            PIO1 = 0xFFFFFFFF
                        }

                        DMA1 = GETD ((SDMA & 0x08), (ICR3 & 0x08), (
                            ICR0 & 0x08), SDT3, (ICR1 & 0x08))
                        If ((DMA1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.IDE1.SECD._GTM.PIO1 */
                        }

                        FLAG = GETF ((SDMA & 0x04), (SDMA & 0x08), SECT)
                        Return (SBUF) /* \_SB_.PCI0.IDE1.SECD._GTM.SBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        If ((SizeOf (Arg1) == 0x0200))
                        {
                            SECT &= 0xCCF0
                            SDMA &= 0x0B
                            SDT2 = 0x00
                            ICR0 &= 0x0B
                            ICR1 &= 0x0B
                            ICR3 &= 0x0B
                            ICR5 &= 0x0B
                            CreateWordField (Arg1, 0x62, W490)
                            CreateWordField (Arg1, 0x6A, W530)
                            CreateWordField (Arg1, 0x7E, W630)
                            CreateWordField (Arg1, 0x80, W640)
                            CreateWordField (Arg1, 0xB0, W880)
                            CreateWordField (Arg1, 0xBA, W930)
                            SECT |= 0x8004
                            If (((FLAG & 0x02) && (W490 & 0x0800)))
                            {
                                SECT |= 0x02
                            }

                            SECT |= SETP (PIO0, W530, W640)
                            If ((FLAG & 0x01))
                            {
                                SDMA |= 0x04
                                SDT2 = SETD (DMA0)
                                If ((DMA0 < 0x1E))
                                {
                                    ICR3 |= 0x04
                                }

                                If ((DMA0 < 0x3C))
                                {
                                    ICR0 |= 0x04
                                }

                                ICR1 |= 0x04
                            }
                        }

                        If ((SizeOf (Arg2) == 0x0200))
                        {
                            SECT &= 0xBF0F
                            SSIT = 0x00
                            SDMA &= 0x07
                            SDT3 = 0x00
                            ICR0 &= 0x07
                            ICR1 &= 0x07
                            ICR3 &= 0x07
                            ICR5 &= 0x07
                            CreateWordField (Arg2, 0x62, W491)
                            CreateWordField (Arg2, 0x6A, W531)
                            CreateWordField (Arg2, 0x7E, W631)
                            CreateWordField (Arg2, 0x80, W641)
                            CreateWordField (Arg2, 0xB0, W881)
                            CreateWordField (Arg2, 0xBA, W931)
                            SECT |= 0x8040
                            If (((FLAG & 0x08) && (W491 & 0x0800)))
                            {
                                SECT |= 0x20
                            }

                            If ((FLAG & 0x10))
                            {
                                SECT |= 0x4000
                                If ((PIO1 > 0xF0))
                                {
                                    SECT |= 0x80
                                }
                                Else
                                {
                                    SECT |= 0x10
                                    SSIT = SETT (PIO1, W531, W641)
                                }
                            }

                            If ((FLAG & 0x04))
                            {
                                SDMA |= 0x08
                                SDT3 = SETD (DMA1)
                                If ((DMA1 < 0x1E))
                                {
                                    ICR3 |= 0x08
                                }

                                If ((DMA1 < 0x3C))
                                {
                                    ICR0 |= 0x08
                                }

                                ICR1 |= 0x08
                            }
                        }
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        BSSP (0x01)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (SIB0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (SIB0, 0x01, PMD0)
                            CreateByteField (SIB0, 0x08, DMD0)
                            If ((SECT & 0x02))
                            {
                                If (((SECT & 0x09) == 0x08))
                                {
                                    PMD0 = 0x08
                                }
                                Else
                                {
                                    PMD0 = 0x0A
                                    Local0 = ((SECT & 0x0300) >> 0x08)
                                    Local1 = ((SECT & 0x3000) >> 0x0C)
                                    Local2 = (Local0 + Local1)
                                    If ((0x03 == Local2))
                                    {
                                        PMD0 = 0x0B
                                    }

                                    If ((0x05 == Local2))
                                    {
                                        PMD0 = 0x0C
                                    }
                                }
                            }
                            Else
                            {
                                PMD0 = 0x01
                            }

                            If ((SDMA & 0x04))
                            {
                                DMD0 = (SDT2 | 0x40)
                                If ((ICR1 & 0x04))
                                {
                                    If ((ICR0 & 0x04))
                                    {
                                        DMD0 += 0x02
                                    }

                                    If ((ICR3 & 0x04))
                                    {
                                        DMD0 = 0x45
                                    }
                                }
                            }
                            Else
                            {
                                DMD0 = (((PMD0 & 0x07) - 0x02) | 0x20)
                            }

                            Return (SIB0) /* \_SB_.PCI0.IDE1.SECD.S_D0._GTF.SIB0 */
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (SIB1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (SIB1, 0x01, PMD1)
                            CreateByteField (SIB1, 0x08, DMD1)
                            If ((SECT & 0x20))
                            {
                                If (((SECT & 0x90) == 0x80))
                                {
                                    PMD1 = 0x08
                                }
                                Else
                                {
                                    Local0 = ((SSIT & 0x03) + ((SSIT & 0x0C) >> 0x02
                                        ))
                                    If ((0x05 == Local0))
                                    {
                                        PMD1 = 0x0C
                                    }
                                    ElseIf ((0x03 == Local0))
                                    {
                                        PMD1 = 0x0B
                                    }
                                    Else
                                    {
                                        PMD1 = 0x0A
                                    }
                                }
                            }
                            Else
                            {
                                PMD1 = 0x01
                            }

                            If ((SDMA & 0x08))
                            {
                                DMD1 = (SDT3 | 0x40)
                                If ((ICR1 & 0x08))
                                {
                                    If ((ICR0 & 0x08))
                                    {
                                        DMD1 += 0x02
                                    }

                                    If ((ICR3 & 0x08))
                                    {
                                        DMD1 = 0x45
                                    }
                                }
                            }
                            Else
                            {
                                DMD1 = (((PMD1 & 0x07) - 0x02) | 0x20)
                            }

                            Return (SIB1) /* \_SB_.PCI0.IDE1.SECD.S_D1._GTF.SIB1 */
                        }
                    }
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
            }

            Device (CHAP)
            {
                Name (_ADR, 0x001F0004)  // _ADR: Address
            }

            Device (IDE2)
            {
                Name (_ADR, 0x001F0005)  // _ADR: Address
                OperationRegion (PBIO, SystemIO, 0x000001F0, 0x00000008)
                Field (PBIO, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                        ,   7, 
                    PBSY,   1
                }

                OperationRegion (SBIO, SystemIO, 0x00000170, 0x00000008)
                Field (SBIO, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                        ,   7, 
                    SBSY,   1
                }

                OperationRegion (IDE, PCI_Config, 0x40, 0xC0)
                Field (IDE, DWordAcc, NoLock, Preserve)
                {
                    PRIT,   16, 
                    SECT,   16, 
                    PSIT,   4, 
                    SSIT,   4, 
                    Offset (0x08), 
                    SDMA,   4, 
                    Offset (0x0A), 
                    SDT0,   2, 
                        ,   2, 
                    SDT1,   2, 
                    Offset (0x0B), 
                    SDT2,   2, 
                        ,   2, 
                    SDT3,   2, 
                    Offset (0x14), 
                    ICR0,   4, 
                    ICR1,   4, 
                    ICR2,   4, 
                    ICR3,   4, 
                    ICR4,   4, 
                    ICR5,   4, 
                    Offset (0x50), 
                    MAP,    8, 
                    Offset (0x52), 
                    PCS,    16
                }

                Method (BSSP, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        If (\SPN1)
                        {
                            Local1 = (0x0A00 & PCS)
                            Local3 = 0x00
                            If ((0x0800 == Local1))
                            {
                                While ((SBSY && (0x4B > Local3)))
                                {
                                    Sleep (0x64)
                                    Local3++
                                }
                            }

                            \SPN1 = 0x00
                        }
                    }
                    ElseIf (\SPN0)
                    {
                        Local0 = (0x0500 & PCS)
                        Local2 = 0x00
                        If ((0x0400 == Local0))
                        {
                            While ((PBSY && (0x4B > Local2)))
                            {
                                Sleep (0x64)
                                Local2++
                            }
                        }

                        \SPN0 = 0x00
                    }
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GETP (PRIT)
                        DMA0 = GETD ((SDMA & 0x01), (ICR3 & 0x01), (
                            ICR0 & 0x01), SDT0, (ICR1 & 0x01))
                        If ((DMA0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.IDE2.PRID._GTM.PIO0 */
                        }

                        If ((PRIT & 0x4000))
                        {
                            If (((PRIT & 0x90) == 0x80))
                            {
                                PIO1 = 0x0384
                            }
                            Else
                            {
                                PIO1 = GETT (PSIT)
                            }
                        }
                        Else
                        {
                            PIO1 = 0xFFFFFFFF
                        }

                        DMA1 = GETD ((SDMA & 0x02), (ICR3 & 0x02), (
                            ICR0 & 0x02), SDT1, (ICR1 & 0x02))
                        If ((DMA1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.IDE2.PRID._GTM.PIO1 */
                        }

                        FLAG = GETF ((SDMA & 0x01), (SDMA & 0x02), PRIT)
                        Return (PBUF) /* \_SB_.PCI0.IDE2.PRID._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        If ((SizeOf (Arg1) == 0x0200))
                        {
                            PRIT &= 0xCCF0
                            SDMA &= 0x0E
                            SDT0 = 0x00
                            ICR0 &= 0x0E
                            ICR1 &= 0x0E
                            ICR3 &= 0x0E
                            ICR5 &= 0x0E
                            CreateWordField (Arg1, 0x62, W490)
                            CreateWordField (Arg1, 0x6A, W530)
                            CreateWordField (Arg1, 0x7E, W630)
                            CreateWordField (Arg1, 0x80, W640)
                            CreateWordField (Arg1, 0xB0, W880)
                            CreateWordField (Arg1, 0xBA, W930)
                            PRIT |= 0x8004
                            If (((FLAG & 0x02) && (W490 & 0x0800)))
                            {
                                PRIT |= 0x02
                            }

                            PRIT |= SETP (PIO0, W530, W640)
                            If ((FLAG & 0x01))
                            {
                                SDMA |= 0x01
                                SDT0 = SETD (DMA0)
                                If ((DMA0 < 0x1E))
                                {
                                    ICR3 |= 0x01
                                }

                                If ((DMA0 < 0x3C))
                                {
                                    ICR0 |= 0x01
                                }

                                ICR1 |= 0x01
                            }
                        }

                        If ((SizeOf (Arg2) == 0x0200))
                        {
                            PRIT &= 0xBF0F
                            PSIT = 0x00
                            SDMA &= 0x0D
                            SDT1 = 0x00
                            ICR0 &= 0x0D
                            ICR1 &= 0x0D
                            ICR3 &= 0x0D
                            ICR5 &= 0x0D
                            CreateWordField (Arg2, 0x62, W491)
                            CreateWordField (Arg2, 0x6A, W531)
                            CreateWordField (Arg2, 0x7E, W631)
                            CreateWordField (Arg2, 0x80, W641)
                            CreateWordField (Arg2, 0xB0, W881)
                            CreateWordField (Arg2, 0xBA, W931)
                            PRIT |= 0x8040
                            If (((FLAG & 0x08) && (W491 & 0x0800)))
                            {
                                PRIT |= 0x20
                            }

                            If ((FLAG & 0x10))
                            {
                                PRIT |= 0x4000
                                If ((PIO1 > 0xF0))
                                {
                                    PRIT |= 0x80
                                }
                                Else
                                {
                                    PRIT |= 0x10
                                    PSIT = SETT (PIO1, W531, W641)
                                }
                            }

                            If ((FLAG & 0x04))
                            {
                                SDMA |= 0x02
                                SDT1 = SETD (DMA1)
                                If ((DMA1 < 0x1E))
                                {
                                    ICR3 |= 0x02
                                }

                                If ((DMA1 < 0x3C))
                                {
                                    ICR0 |= 0x02
                                }

                                ICR1 |= 0x02
                            }
                        }
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        BSSP (0x00)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (PIB0, 0x01, PMD0)
                            CreateByteField (PIB0, 0x08, DMD0)
                            If ((PRIT & 0x02))
                            {
                                If (((PRIT & 0x09) == 0x08))
                                {
                                    PMD0 = 0x08
                                }
                                Else
                                {
                                    PMD0 = 0x0A
                                    Local0 = ((PRIT & 0x0300) >> 0x08)
                                    Local1 = ((PRIT & 0x3000) >> 0x0C)
                                    Local2 = (Local0 + Local1)
                                    If ((0x03 == Local2))
                                    {
                                        PMD0 = 0x0B
                                    }

                                    If ((0x05 == Local2))
                                    {
                                        PMD0 = 0x0C
                                    }
                                }
                            }
                            Else
                            {
                                PMD0 = 0x01
                            }

                            If ((SDMA & 0x01))
                            {
                                DMD0 = (SDT0 | 0x40)
                                If ((ICR1 & 0x01))
                                {
                                    If ((ICR0 & 0x01))
                                    {
                                        DMD0 += 0x02
                                    }

                                    If ((ICR3 & 0x01))
                                    {
                                        DMD0 = 0x45
                                    }
                                }
                            }
                            Else
                            {
                                DMD0 = (((PMD0 & 0x07) - 0x02) | 0x20)
                            }

                            Return (PIB0) /* \_SB_.PCI0.IDE2.PRID.P_D0._GTF.PIB0 */
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (PIB1, 0x01, PMD1)
                            CreateByteField (PIB1, 0x08, DMD1)
                            If ((PRIT & 0x20))
                            {
                                If (((PRIT & 0x90) == 0x80))
                                {
                                    PMD1 = 0x08
                                }
                                Else
                                {
                                    Local0 = ((PSIT & 0x03) + ((PSIT & 0x0C) >> 0x02
                                        ))
                                    If ((0x05 == Local0))
                                    {
                                        PMD1 = 0x0C
                                    }
                                    ElseIf ((0x03 == Local0))
                                    {
                                        PMD1 = 0x0B
                                    }
                                    Else
                                    {
                                        PMD1 = 0x0A
                                    }
                                }
                            }
                            Else
                            {
                                PMD1 = 0x01
                            }

                            If ((SDMA & 0x02))
                            {
                                DMD1 = (SDT1 | 0x40)
                                If ((ICR1 & 0x02))
                                {
                                    If ((ICR0 & 0x02))
                                    {
                                        DMD1 += 0x02
                                    }

                                    If ((ICR3 & 0x02))
                                    {
                                        DMD1 = 0x45
                                    }
                                }
                            }
                            Else
                            {
                                DMD1 = (((PMD1 & 0x07) - 0x02) | 0x20)
                            }

                            Return (PIB1) /* \_SB_.PCI0.IDE2.PRID.P_D1._GTF.PIB1 */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (SBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (SBUF, 0x00, PIO0)
                        CreateDWordField (SBUF, 0x04, DMA0)
                        CreateDWordField (SBUF, 0x08, PIO1)
                        CreateDWordField (SBUF, 0x0C, DMA1)
                        CreateDWordField (SBUF, 0x10, FLAG)
                        PIO0 = GETP (SECT)
                        DMA0 = GETD ((SDMA & 0x04), (ICR3 & 0x04), (
                            ICR0 & 0x04), SDT2, (ICR1 & 0x04))
                        If ((DMA0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.IDE2.SECD._GTM.PIO0 */
                        }

                        If ((SECT & 0x4000))
                        {
                            If (((SECT & 0x90) == 0x80))
                            {
                                PIO1 = 0x0384
                            }
                            Else
                            {
                                PIO1 = GETT (SSIT)
                            }
                        }
                        Else
                        {
                            PIO1 = 0xFFFFFFFF
                        }

                        DMA1 = GETD ((SDMA & 0x08), (ICR3 & 0x08), (
                            ICR0 & 0x08), SDT3, (ICR1 & 0x08))
                        If ((DMA1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.IDE2.SECD._GTM.PIO1 */
                        }

                        FLAG = GETF ((SDMA & 0x04), (SDMA & 0x08), SECT)
                        Return (SBUF) /* \_SB_.PCI0.IDE2.SECD._GTM.SBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        If ((SizeOf (Arg1) == 0x0200))
                        {
                            SECT &= 0xCCF0
                            SDMA &= 0x0B
                            SDT2 = 0x00
                            ICR0 &= 0x0B
                            ICR1 &= 0x0B
                            ICR3 &= 0x0B
                            ICR5 &= 0x0B
                            CreateWordField (Arg1, 0x62, W490)
                            CreateWordField (Arg1, 0x6A, W530)
                            CreateWordField (Arg1, 0x7E, W630)
                            CreateWordField (Arg1, 0x80, W640)
                            CreateWordField (Arg1, 0xB0, W880)
                            CreateWordField (Arg1, 0xBA, W930)
                            SECT |= 0x8004
                            If (((FLAG & 0x02) && (W490 & 0x0800)))
                            {
                                SECT |= 0x02
                            }

                            SECT |= SETP (PIO0, W530, W640)
                            If ((FLAG & 0x01))
                            {
                                SDMA |= 0x04
                                SDT2 = SETD (DMA0)
                                If ((DMA0 < 0x1E))
                                {
                                    ICR3 |= 0x04
                                }

                                If ((DMA0 < 0x3C))
                                {
                                    ICR0 |= 0x04
                                }

                                ICR1 |= 0x04
                            }
                        }

                        If ((SizeOf (Arg2) == 0x0200))
                        {
                            SECT &= 0xBF0F
                            SSIT = 0x00
                            SDMA &= 0x07
                            SDT3 = 0x00
                            ICR0 &= 0x07
                            ICR1 &= 0x07
                            ICR3 &= 0x07
                            ICR5 &= 0x07
                            CreateWordField (Arg2, 0x62, W491)
                            CreateWordField (Arg2, 0x6A, W531)
                            CreateWordField (Arg2, 0x7E, W631)
                            CreateWordField (Arg2, 0x80, W641)
                            CreateWordField (Arg2, 0xB0, W881)
                            CreateWordField (Arg2, 0xBA, W931)
                            SECT |= 0x8040
                            If (((FLAG & 0x08) && (W491 & 0x0800)))
                            {
                                SECT |= 0x20
                            }

                            If ((FLAG & 0x10))
                            {
                                SECT |= 0x4000
                                If ((PIO1 > 0xF0))
                                {
                                    SECT |= 0x80
                                }
                                Else
                                {
                                    SECT |= 0x10
                                    SSIT = SETT (PIO1, W531, W641)
                                }
                            }

                            If ((FLAG & 0x04))
                            {
                                SDMA |= 0x08
                                SDT3 = SETD (DMA1)
                                If ((DMA1 < 0x1E))
                                {
                                    ICR3 |= 0x08
                                }

                                If ((DMA1 < 0x3C))
                                {
                                    ICR0 |= 0x08
                                }

                                ICR1 |= 0x08
                            }
                        }
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        BSSP (0x01)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (SIB0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (SIB0, 0x01, PMD0)
                            CreateByteField (SIB0, 0x08, DMD0)
                            If ((SECT & 0x02))
                            {
                                If (((SECT & 0x09) == 0x08))
                                {
                                    PMD0 = 0x08
                                }
                                Else
                                {
                                    PMD0 = 0x0A
                                    Local0 = ((SECT & 0x0300) >> 0x08)
                                    Local1 = ((SECT & 0x3000) >> 0x0C)
                                    Local2 = (Local0 + Local1)
                                    If ((0x03 == Local2))
                                    {
                                        PMD0 = 0x0B
                                    }

                                    If ((0x05 == Local2))
                                    {
                                        PMD0 = 0x0C
                                    }
                                }
                            }
                            Else
                            {
                                PMD0 = 0x01
                            }

                            If ((SDMA & 0x04))
                            {
                                DMD0 = (SDT2 | 0x40)
                                If ((ICR1 & 0x04))
                                {
                                    If ((ICR0 & 0x04))
                                    {
                                        DMD0 += 0x02
                                    }

                                    If ((ICR3 & 0x04))
                                    {
                                        DMD0 = 0x45
                                    }
                                }
                            }
                            Else
                            {
                                DMD0 = (((PMD0 & 0x07) - 0x02) | 0x20)
                            }

                            Return (SIB0) /* \_SB_.PCI0.IDE2.SECD.S_D0._GTF.SIB0 */
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (SIB1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (SIB1, 0x01, PMD1)
                            CreateByteField (SIB1, 0x08, DMD1)
                            If ((SECT & 0x20))
                            {
                                If (((SECT & 0x90) == 0x80))
                                {
                                    PMD1 = 0x08
                                }
                                Else
                                {
                                    Local0 = ((SSIT & 0x03) + ((SSIT & 0x0C) >> 0x02
                                        ))
                                    If ((0x05 == Local0))
                                    {
                                        PMD1 = 0x0C
                                    }
                                    ElseIf ((0x03 == Local0))
                                    {
                                        PMD1 = 0x0B
                                    }
                                    Else
                                    {
                                        PMD1 = 0x0A
                                    }
                                }
                            }
                            Else
                            {
                                PMD1 = 0x01
                            }

                            If ((SDMA & 0x08))
                            {
                                DMD1 = (SDT3 | 0x40)
                                If ((ICR1 & 0x08))
                                {
                                    If ((ICR0 & 0x08))
                                    {
                                        DMD1 += 0x02
                                    }

                                    If ((ICR3 & 0x08))
                                    {
                                        DMD1 = 0x45
                                    }
                                }
                            }
                            Else
                            {
                                DMD1 = (((PMD1 & 0x07) - 0x02) | 0x20)
                            }

                            Return (SIB1) /* \_SB_.PCI0.IDE2.SECD.S_D1._GTF.SIB1 */
                        }
                    }
                }
            }

            Device (THRM)
            {
                Name (_ADR, 0x001F0006)  // _ADR: Address
            }

            Device (IEIT)
            {
                Name (_HID, EisaId ("INT5400"))  // _HID: Hardware ID
                Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
                Name (_UID, 0x00)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x00)
                }

                Method (EITB, 0, Serialized)
                {
                    Return (0x00)
                }
            }

            Device (PWRB)
            {
                Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x1D, 
                    0x03
                })
            }
        }
    }

    Scope (_SI)
    {
        Method (_SST, 1, NotSerialized)  // _SST: System Status
        {
            If ((Arg0 == 0x03))
            {
                If ((OSYS == 0x07CE))
                {
                    \_SB.BCMD = (Arg0 | 0x80)
                    \_SB.SMIC = Zero
                }

                If ((OSYS == 0x07CF))
                {
                    \_SB.BCMD = (Arg0 | 0x80)
                    \_SB.SMIC = Zero
                }
                Else
                {
                }
            }
        }
    }

    Scope (\_SB)
    {
        OperationRegion (TCG1, SystemMemory, 0xCFF98D5D, 0x0007)
        Field (TCG1, AnyAcc, NoLock, Preserve)
        {
            PPRQ,   8, 
            PPLO,   8, 
            PPRP,   8, 
            PPOR,   8, 
            TPRS,   8, 
            TPMV,   8, 
            MOR,    8
        }

        Method (PHSR, 1, Serialized)
        {
            BCMD = Arg0
            DID = Zero
            SMIC = Zero
            If ((BCMD == Arg0)){}
            BCMD = Zero
            DID = Zero
            Return (0x00)
        }
    }

    Scope (\_SB.PCI0.LPC0)
    {
        Device (TPM)
        {
            OperationRegion (Z004, SystemMemory, 0xFFFFFF00, 0x60)
            Field (Z004, AnyAcc, NoLock, Preserve)
            {
                Offset (0x09), 
                    ,   7, 
                Z005,   1
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (Z005)
                {
                    Return (0x0F)
                }

                Return (0x00)
            }

            Name (_HID, EisaId ("WEC1000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
            })
            Method (UCMP, 2, NotSerialized)
            {
                If ((0x10 != SizeOf (Arg0)))
                {
                    Return (0x00)
                }

                If ((0x10 != SizeOf (Arg1)))
                {
                    Return (0x00)
                }

                Local0 = 0x00
                While ((Local0 < 0x10))
                {
                    If ((DerefOf (Arg0 [Local0]) != DerefOf (Arg1 [Local0]
                        )))
                    {
                        Return (0x00)
                    }

                    Local0++
                }

                Return (0x01)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((UCMP (Arg0, ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */) == 0x01))
                {
                    If ((Arg2 == 0x00))
                    {
                        Return (Buffer (0x01)
                        {
                             0x7F                                             // .
                        })
                    }

                    If ((Arg2 == 0x01))
                    {
                        Return (Buffer (0x04)
                        {
                            "1.0"
                        })
                    }

                    If ((Arg2 == 0x02))
                    {
                        If (TPRS)
                        {
                            If ((DerefOf (Arg3 [0x00]) == 0x00))
                            {
                                PPRQ = 0x00
                                Return (0x00)
                            }

                            If ((DerefOf (Arg3 [0x00]) == 0x01))
                            {
                                PPRQ = 0x01
                                Return (0x00)
                            }

                            If ((DerefOf (Arg3 [0x00]) == 0x02))
                            {
                                PPRQ = 0x02
                                Return (0x00)
                            }

                            If ((DerefOf (Arg3 [0x00]) == 0x03))
                            {
                                PPRQ = 0x03
                                Return (0x00)
                            }

                            If ((DerefOf (Arg3 [0x00]) == 0x04))
                            {
                                PPRQ = 0x04
                                Return (0x00)
                            }

                            If ((DerefOf (Arg3 [0x00]) == 0x05))
                            {
                                PPRQ = 0x05
                                Return (0x00)
                            }

                            If ((DerefOf (Arg3 [0x00]) == 0x06))
                            {
                                PPRQ = 0x06
                                Return (0x00)
                            }

                            If ((DerefOf (Arg3 [0x00]) == 0x07))
                            {
                                PPRQ = 0x07
                                Return (0x00)
                            }

                            If ((DerefOf (Arg3 [0x00]) == 0x08))
                            {
                                PPRQ = 0x08
                                Return (0x00)
                            }

                            If ((DerefOf (Arg3 [0x00]) == 0x09))
                            {
                                PPRQ = 0x09
                                Return (0x00)
                            }

                            If ((DerefOf (Arg3 [0x00]) == 0x0A))
                            {
                                PPRQ = 0x0A
                                Return (0x00)
                            }

                            If ((DerefOf (Arg3 [0x00]) == 0x0B))
                            {
                                PPRQ = 0x0B
                                Return (0x00)
                            }

                            If ((DerefOf (Arg3 [0x00]) == 0x0C))
                            {
                                PPRQ = 0x00
                                Return (0x01)
                            }

                            If ((DerefOf (Arg3 [0x00]) == 0x0D))
                            {
                                PPRQ = 0x00
                                Return (0x01)
                            }

                            If ((DerefOf (Arg3 [0x00]) == 0x0E))
                            {
                                PPRQ = 0x0E
                                Return (0x00)
                            }

                            Return (0x01)
                        }

                        Return (0x01)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Name (TMP1, Package (0x02)
                        {
                            0x00, 
                            0xFFFFFFFF
                        })
                        TMP1 [0x01] = \_SB.PPRQ
                        Return (TMP1) /* \_SB_.PCI0.LPC0.TPM_._DSM.TMP1 */
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (0x01)
                    }

                    If ((Arg2 == 0x05))
                    {
                        Name (TMP2, Package (0x03)
                        {
                            0x00, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP2 [0x01] = \_SB.PPLO
                        If ((((\_SB.PPLO > 0x0E) || (\_SB.PPLO == 0x0C)) || (\_SB.PPLO == 0x0D)))
                        {
                            TMP2 [0x02] = 0xFFFFFFF1
                            Return (TMP2) /* \_SB_.PCI0.LPC0.TPM_._DSM.TMP2 */
                        }

                        If ((PPRP == 0xFF))
                        {
                            TMP2 [0x02] = 0xFFFFFFF1
                            Return (TMP2) /* \_SB_.PCI0.LPC0.TPM_._DSM.TMP2 */
                        }

                        If (PPOR)
                        {
                            TMP2 [0x02] = 0xFFFFFFF0
                            Return (TMP2) /* \_SB_.PCI0.LPC0.TPM_._DSM.TMP2 */
                        }

                        TMP2 [0x02] = \_SB.PPRP
                        Return (TMP2) /* \_SB_.PCI0.LPC0.TPM_._DSM.TMP2 */
                    }

                    If ((Arg2 == 0x06))
                    {
                        CreateByteField (Arg3, 0x04, LAN0)
                        CreateByteField (Arg3, 0x05, LAN1)
                        If (((LAN0 == 0x65) || (LAN0 == 0x45)))
                        {
                            If (((LAN1 == 0x6E) || (LAN1 == 0x4E)))
                            {
                                Return (0x00)
                            }
                        }

                        Return (0x01)
                    }

                    Return (0x01)
                }

                If ((UCMP (Arg0, ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */) == 0x01))
                {
                    If ((Arg2 == 0x00))
                    {
                        Return (Buffer (0x01)
                        {
                             0x01                                             // .
                        })
                    }

                    If ((Arg2 == 0x01))
                    {
                        If ((DerefOf (Arg3 [0x00]) == 0x00))
                        {
                            \_SB.MOR = 0x00
                            Return (0x00)
                        }

                        If ((DerefOf (Arg3 [0x00]) == 0x01))
                        {
                            \_SB.MOR = 0x01
                            Return (0x00)
                        }
                    }

                    Return (0x01)
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_TZ)
    {
    }

    Name (_S0, Package (0x02)  // _S0_: S0 System State
    {
        0x00, 
        0x00
    })
    Name (_S3, Package (0x02)  // _S3_: S3 System State
    {
        0x05, 
        0x05
    })
    Name (_S4, Package (0x02)  // _S4_: S4 System State
    {
        0x06, 
        0x06
    })
    Name (_S5, Package (0x02)  // _S5_: S5 System State
    {
        0x07, 
        0x07
    })
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        \PICF = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        DEBG = Arg0
        If ((Arg0 == 0x05))
        {
            \_SB.PHSR (0x4B)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        If ((Arg0 == 0x03))
        {
            \SPN0 = 0x01
            \SPN1 = 0x01
            If (Z000)
            {
                Notify (\_SB.PCI0.PWRB, 0x02) // Device Wake
                Z000 = 0x00
            }
        }

        If ((Arg0 == 0x04))
        {
            \_SB.OSHT ()
        }

        DEBG = 0x00
        If ((OSYS == 0x07CE))
        {
            Notify (\_SB.PCI0.PWRB, 0x02) // Device Wake
        }
    }

    OperationRegion (DBG, SystemIO, 0x80, 0x01)
    Field (DBG, ByteAcc, NoLock, Preserve)
    {
        DEBG,   8
    }

    OperationRegion (RCRB, SystemMemory, 0xFED1C000, 0x00004000)
    Field (RCRB, DWordAcc, Lock, Preserve)
    {
        Offset (0x1000), 
        Offset (0x3000), 
        Offset (0x3404), 
        HPAS,   2, 
            ,   5, 
        HPAE,   1, 
        Offset (0x3418), 
            ,   1, 
        PATD,   1, 
        SATD,   1, 
        SMBD,   1, 
        AZAD,   1
    }

    Name (OSYS, 0x00)
    Name (PICF, 0x00)
    Name (SPN0, 0x00)
    Name (SPN1, 0x00)
    Scope (\_SB)
    {
        Name (OSTB, Ones)
        OperationRegion (OSTY, SystemMemory, 0xCFF9AE4C, 0x00000001)
        Field (OSTY, AnyAcc, NoLock, Preserve)
        {
            TPOS,   8
        }

        Method (OSTP, 0, NotSerialized)
        {
            If ((^OSTB == Ones))
            {
                If (CondRefOf (\_OSI, Local0))
                {
                    If (\_OSI ("Windows 2001.1"))
                    {
                        ^OSTB = 0x20
                        ^TPOS = 0x20
                    }
                    ElseIf (\_OSI ("Windows 2001 SP1"))
                    {
                        ^OSTB = 0x10
                        ^TPOS = 0x10
                    }
                    ElseIf (\_OSI ("Windows 2001"))
                    {
                        ^OSTB = 0x08
                        ^TPOS = 0x08
                    }
                    Else
                    {
                        ^OSTB = 0x00
                        ^TPOS = 0x00
                    }
                }
                ElseIf (CondRefOf (\_OS, Local0))
                {
                    If (^SEQL (\_OS, "Microsoft Windows"))
                    {
                        ^OSTB = 0x01
                        ^TPOS = 0x01
                    }
                    ElseIf (^SEQL (\_OS, "Microsoft WindowsME: Millennium Edition"))
                    {
                        ^OSTB = 0x02
                        ^TPOS = 0x02
                    }
                    ElseIf (^SEQL (\_OS, "Microsoft Windows NT"))
                    {
                        ^OSTB = 0x04
                        ^TPOS = 0x04
                    }
                    Else
                    {
                        ^OSTB = 0x00
                        ^TPOS = 0x00
                    }
                }
                Else
                {
                    ^OSTB = 0x00
                    ^TPOS = 0x00
                }
            }

            Return (^OSTB) /* \_SB_.OSTB */
        }

        Method (OSHT, 0, NotSerialized)
        {
            \_SB.OSTP ()
            \_SB.BCMD = 0x48
            \_SB.SMIC = Zero
        }

        Method (SEQL, 2, Serialized)
        {
            Local0 = SizeOf (Arg0)
            Local1 = SizeOf (Arg1)
            If ((Local0 != Local1))
            {
                Return (Zero)
            }

            Name (BUF0, Buffer (Local0){})
            BUF0 = Arg0
            Name (BUF1, Buffer (Local0){})
            BUF1 = Arg1
            Local2 = Zero
            While ((Local2 < Local0))
            {
                Local3 = DerefOf (BUF0 [Local2])
                Local4 = DerefOf (BUF1 [Local2])
                If ((Local3 != Local4))
                {
                    Return (Zero)
                }

                Local2++
            }

            Return (One)
        }
    }

    Name (FWSO, "FWSO")
    Name (_PSC, 0x00)  // _PSC: Power State Current
    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
    {
        Local0 = _PSC /* \_PSC */
        _PSC = 0x00
        If ((Local0 == 0x03))
        {
            \_SB.INF = 0x01
            While (\_SB.INF)
            {
                \_SB.BCMD = 0x20
                \_SB.SMIC = Zero
                If (((\_SB.INF == 0x01) && (\_SB.OSTB >= 0x04)))
                {
                    Sleep (0x01F4)
                }
            }
        }
    }

    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
    {
        _PSC = 0x03
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 000000F4
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 8C
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TC-5C   "
[018h 0024 004h]                Oem Revision : 0000012E
[01Ch 0028 004h]             Asl Compiler ID : "PTL "
[020h 0032 004h]       Asl Compiler Revision : 00000002

[024h 0036 004h]                FACS Address : CFFBBFC0
[028h 0040 004h]                DSDT Address : CFF8E3B2
[02Ch 0044 001h]                       Model : 01
[02Dh 0045 001h]                  PM Profile : 01 [Desktop]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : F0
[035h 0053 001h]          ACPI Disable Value : F1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 80
[038h 0056 004h]    PM1A Event Block Address : 00001000
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00001004
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00001050
[04Ch 0076 004h]      PM Timer Block Address : 00001008
[050h 0080 004h]          GPE0 Block Address : 00001020
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 10
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 0055
[064h 0100 002h]              CPU Cache Size : 0000
[066h 0102 002h]          Cache Flush Stride : 0000
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 000004A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120 008h]                     Address : 0000000000000CF9

[080h 0128 001h]        Value to cause reset : 06
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 00000000CFFBBFC0
[08Ch 0140 008h]                DSDT Address : 00000000CFF8E3B2
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152 008h]                     Address : 0000000000001000

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 00 [SystemMemory]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176 008h]                     Address : 0000000000001004

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 00 [SystemMemory]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200 008h]                     Address : 0000000000001050

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212 008h]                     Address : 0000000000001008

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 80
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224 008h]                     Address : 0000000000001020

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 00 [SystemMemory]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236 008h]                     Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 03 8C 4C 45 4E 4F 56 4F  // FACP......LENOVO
    0010: 54 43 2D 35 43 20 20 20 2E 01 00 00 50 54 4C 20  // TC-5C   ....PTL 
    0020: 02 00 00 00 C0 BF FB CF B2 E3 F8 CF 01 01 09 00  // ................
    0030: B2 00 00 00 F0 F1 00 80 00 10 00 00 00 00 00 00  // ................
    0040: 04 10 00 00 00 00 00 00 50 10 00 00 08 10 00 00  // ........P.......
    0050: 20 10 00 00 00 00 00 00 04 02 01 04 10 00 00 00  //  ...............
    0060: 65 00 55 00 00 00 00 00 01 03 0D 00 32 01 00 00  // e.U.........2...
    0070: A5 04 00 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 C0 BF FB CF 00 00 00 00 B2 E3 F8 CF  // ................
    0090: 00 00 00 00 01 20 00 00 00 10 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // ................
    00B0: 04 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 00 50 10 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 00 08 10 00 00 00 00 00 00 01 80 00 00  // . ..............
    00E0: 20 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 00000000
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 01
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 1D
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TC-5C   "
[018h 0024 004h]                Oem Revision : 0000012E
[01Ch 0028 004h]             Asl Compiler ID : " LTP"
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h]           Hardware Block ID : FFFFFFFF

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 00
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 0000
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 1D 4C 45 4E 4F 56 4F  // HPET8.....LENOVO
    0010: 54 43 2D 35 43 20 20 20 2E 01 00 00 20 4C 54 50  // TC-5C   .... LTP
    0020: 01 00 00 00 FF FF FF FF 00 00 00 00 00 00 D0 FE  // ................
    0030: 00 00 00 00 00 00 00 00                          // ........


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : F0
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TC-5C   "
[018h 0024 004h]                Oem Revision : 0000012E
[01Ch 0028 004h]             Asl Compiler ID : " LTP"
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000F8000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : 10
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 F0 4C 45 4E 4F 56 4F  // MCFG<.....LENOVO
    0010: 54 43 2D 35 43 20 20 20 2E 01 00 00 20 4C 54 50  // TC-5C   .... LTP
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 10 00 00 00 00              // ............


SLIC
----
[000h 0000 004h]                   Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004 004h]                Table Length : 00000176
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 8F
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TC-5C   "
[018h 0024 004h]                Oem Revision : 0000012E
[01Ch 0028 004h]             Asl Compiler ID : " LTP"
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 152h] Software Licensing Structure : 53 4C 49 43 76 01 00 00 01 8F 4C 45 4E 4F 56 4F /* SLICv.....LENOVO */\
/* 034h 0052  16 */                            54 43 2D 35 43 20 20 20 2E 01 00 00 20 4C 54 50 /* TC-5C   .... LTP */\
/* 044h 0068  16 */                            00 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00 /* ................ */\
/* 054h 0084  16 */                            00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 /* .$..RSA1........ */\
/* 064h 0100  16 */                            69 16 4A 9F B1 4B 3A FB 80 20 AA AF C4 F9 3E C1 /* i.J..K:.. ....>. */\
/* 074h 0116  16 */                            80 49 EE 6A 65 26 72 1E CD BF 5F 2F 96 D6 C0 0A /* .I.je&r..._/.... */\
/* 084h 0132  16 */                            92 F5 06 B5 00 B2 3B 29 02 E2 4C 8D C2 F2 BC 41 /* ......;)..L....A */\
/* 094h 0148  16 */                            77 9C 70 F0 F3 1B 09 D2 63 5A DC A8 83 F8 5E C9 /* w.p.....cZ....^. */\
/* 0A4h 0164  16 */                            15 95 F9 FA FD DC 05 B7 4D 67 7F 2D B3 84 33 20 /* ........Mg.-..3  */\
/* 0B4h 0180  16 */                            E1 D1 79 2A A7 6A 77 D1 B6 20 2A 76 42 C5 D5 E9 /* ..y*.jw.. *vB... */\
/* 0C4h 0196  16 */                            B6 43 40 55 44 C3 C9 37 99 5F 41 97 70 F3 D1 F6 /* .C@UD..7._A.p... */\
/* 0D4h 0212  16 */                            07 EC 7B 1A 29 A1 C1 F1 91 FD 48 86 6E 3E CE CB /* ..{.).....H.n>.. */\
/* 0E4h 0228  16 */                            01 00 00 00 B6 00 00 00 00 00 02 00 4C 45 4E 4F /* ............LENO */\
/* 0F4h 0244  16 */                            56 4F 54 43 2D 35 43 20 20 20 57 49 4E 44 4F 57 /* VOTC-5C   WINDOW */\
/* 104h 0260  16 */                            53 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* S .............. */\
/* 114h 0276  16 */                            00 00 00 00 00 00 59 47 21 23 EC 08 CB 3D B2 28 /* ......YG!#...=.( */\
/* 124h 0292  16 */                            B2 A9 A2 D7 EC 9F 2A 76 2B 04 BC 0E 51 87 3F BA /* ......*v+...Q.?. */\
/* 134h 0308  16 */                            61 7F 39 0E 95 AA 49 52 E5 A6 2B 2D 3E E4 FD 59 /* a.9...IR..+->..Y */\
/* 144h 0324  16 */                            AB C5 F7 28 43 1B DA CE B2 2E 39 5D 1D 7A 2A EC /* ...(C.....9].z*. */\
/* 154h 0340  16 */                            58 6F 94 F4 CE FC F6 B2 11 EC 9F CE 58 95 47 9D /* Xo..........X.G. */\
/* 164h 0356  16 */                            B9 BC EE 73 5E 0C DA EA A8 0E 59 75 20 9B 9D 44 /* ...s^.....Yu ..D */\
/* 174h 0372   2 */                            05 B1                                           /* .. */\

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 8F 4C 45 4E 4F 56 4F  // SLICv.....LENOVO
    0010: 54 43 2D 35 43 20 20 20 2E 01 00 00 20 4C 54 50  // TC-5C   .... LTP
    0020: 00 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 69 16 4A 9F B1 4B 3A FB 80 20 AA AF C4 F9 3E C1  // i.J..K:.. ....>.
    0050: 80 49 EE 6A 65 26 72 1E CD BF 5F 2F 96 D6 C0 0A  // .I.je&r..._/....
    0060: 92 F5 06 B5 00 B2 3B 29 02 E2 4C 8D C2 F2 BC 41  // ......;)..L....A
    0070: 77 9C 70 F0 F3 1B 09 D2 63 5A DC A8 83 F8 5E C9  // w.p.....cZ....^.
    0080: 15 95 F9 FA FD DC 05 B7 4D 67 7F 2D B3 84 33 20  // ........Mg.-..3 
    0090: E1 D1 79 2A A7 6A 77 D1 B6 20 2A 76 42 C5 D5 E9  // ..y*.jw.. *vB...
    00A0: B6 43 40 55 44 C3 C9 37 99 5F 41 97 70 F3 D1 F6  // .C@UD..7._A.p...
    00B0: 07 EC 7B 1A 29 A1 C1 F1 91 FD 48 86 6E 3E CE CB  // ..{.).....H.n>..
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 4C 45 4E 4F  // ............LENO
    00D0: 56 4F 54 43 2D 35 43 20 20 20 57 49 4E 44 4F 57  // VOTC-5C   WINDOW
    00E0: 53 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 59 47 21 23 EC 08 CB 3D B2 28  // ......YG!#...=.(
    0100: B2 A9 A2 D7 EC 9F 2A 76 2B 04 BC 0E 51 87 3F BA  // ......*v+...Q.?.
    0110: 61 7F 39 0E 95 AA 49 52 E5 A6 2B 2D 3E E4 FD 59  // a.9...IR..+->..Y
    0120: AB C5 F7 28 43 1B DA CE B2 2E 39 5D 1D 7A 2A EC  // ...(C.....9].z*.
    0130: 58 6F 94 F4 CE FC F6 B2 11 EC 9F CE 58 95 47 9D  // Xo..........X.G.
    0140: B9 BC EE 73 5E 0C DA EA A8 0E 59 75 20 9B 9D 44  // ...s^.....Yu ..D
    0150: 05 B1 37 60 99 18 3A 1E 72 A1 C0 EC 71 74 6D B2  // ..7`..:.r...qtm.
    0160: 9B D6 63 FB 1D 34 E4 7D A2 4F 55 97 7D 2D BA 38  // ..c..4.}.OU.}-.8
    0170: E1 37 1C 97 29 F2                                // .7..).


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TC-5C   ", 0x0000012E)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU5, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC5, UnknownObj)

    Scope (\_PR.CPU5)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC5 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x02, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x05, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TC-5C   ", 0x0000012E)
{
    External (_PR_.CPU0._PCT, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (NPSS, IntObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (XPSS, 0, NotSerialized)
        {
            If ((!(CFGD & 0x02000000) && (PDC1 & 0x01)))
            {
                Return (NPSS) /* External reference */
            }

            Return (SPSS) /* \_PR_.CPU1.SPSS */
        }

        Name (SPSS, Package (0x02)
        {
            Package (0x06)
            {
                0x00000C5F, 
                0x000088B8, 
                0x0000006E, 
                0x0000000A, 
                0x00000083, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00003E80, 
                0x0000006E, 
                0x0000000A, 
                0x00000183, 
                0x00000001
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C5F, 
                0x000088B8, 
                0x0000000A, 
                0x0000000A, 
                0x00004926, 
                0x00004926
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00003E80, 
                0x0000000A, 
                0x0000000A, 
                0x00000616, 
                0x00000616
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (((CFGD & 0x01000000) | (CFGD & 0x02000000)))
            {
                If ((PDC1 & 0x0800))
                {
                    Return (Package (0x01)
                    {
                        Package (0x05)
                        {
                            0x05, 
                            0x00, 
                            0x00, 
                            0xFE, 
                            0x02
                        }
                    })
                }

                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFC, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TC-5C   ", 0x0000012E)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (NPSS, IntObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (((CFGD & 0x01) && (PDC0 & 0x01)))
            {
                If (!(CFGD & 0x02000000))
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }
                    })
                }
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B2, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (XPSS, 0, NotSerialized)
        {
            If ((!(CFGD & 0x02000000) && (PDC0 & 0x01)))
            {
                Return (NPSS) /* External reference */
            }

            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x02)
        {
            Package (0x06)
            {
                0x00000C5F, 
                0x000088B8, 
                0x0000006E, 
                0x0000000A, 
                0x00000083, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00003E80, 
                0x0000006E, 
                0x0000000A, 
                0x00000183, 
                0x00000001
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C5F, 
                0x000088B8, 
                0x0000000A, 
                0x0000000A, 
                0x00004926, 
                0x00004926
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00003E80, 
                0x0000000A, 
                0x0000000A, 
                0x00000616, 
                0x00000616
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (((CFGD & 0x01000000) | (CFGD & 0x02000000)))
            {
                If ((PDC0 & 0x0800))
                {
                    Return (Package (0x01)
                    {
                        Package (0x05)
                        {
                            0x05, 
                            0x00, 
                            0x00, 
                            0xFE, 
                            0x02
                        }
                    })
                }

                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFC, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TC-5C   ", 0x0000012E)
{
    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x01000000) && !(PDC1 & 0x10)))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x9D, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TC-5C   ", 0x0000012E)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (CSTN, Package (0x02)
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x9D, 
                0x03E8
            }
        })
        Name (CST4, Package (0x04)
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x01, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001014, // Address
                        ,)
                }, 

                0x02, 
                0x01, 
                0x01F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001016, // Address
                        ,)
                }, 

                0x03, 
                0x23, 
                0x64
            }
        })
        Name (CST6, Package (0x04)
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x01, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001014, // Address
                        ,)
                }, 

                0x02, 
                0x01, 
                0x01F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001018, // Address
                        ,)
                }, 

                0x03, 
                0xA2, 
                0x64
            }
        })
        Name (CST3, Package (0x04)
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x01, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001014, // Address
                        ,)
                }, 

                0x02, 
                0x01, 
                0x01F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001015, // Address
                        ,)
                }, 

                0x03, 
                0x23, 
                0xFA
            }
        })
        Name (CST2, Package (0x03)
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x01, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001014, // Address
                        ,)
                }, 

                0x02, 
                0x01, 
                0x01F4
            }
        })
        Name (CST1, Package (0x02)
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x01, 
                0x03E8
            }
        })
        Name (C6ME, Package (0x04)
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x01, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000010, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x01, 
                0x01F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000050, // Address
                        0x03,               // Access Size
                        )
                }, 

                0x03, 
                0xA2, 
                0x64
            }
        })
        Name (C4ME, Package (0x04)
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x01, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000010, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x01, 
                0x01F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000030, // Address
                        0x03,               // Access Size
                        )
                }, 

                0x03, 
                0x39, 
                0x64
            }
        })
        Name (C3ME, Package (0x04)
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x01, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000010, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x01, 
                0x01F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000020, // Address
                        0x03,               // Access Size
                        )
                }, 

                0x03, 
                0x11, 
                0xFA
            }
        })
        Name (C2ME, Package (0x03)
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x01, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000010, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x01, 
                0x01F4
            }
        })
        Name (C1ME, Package (0x02)
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x01, 
                0x03E8
            }
        })
        Name (CT6M, Package (0x04)
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x01, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001014, // Address
                        ,)
                }, 

                0x02, 
                0x01, 
                0x01F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001018, // Address
                        ,)
                }, 

                0x03, 
                0xA2, 
                0x64
            }
        })
        Name (CT4M, Package (0x04)
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x01, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001014, // Address
                        ,)
                }, 

                0x02, 
                0x01, 
                0x01F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001016, // Address
                        ,)
                }, 

                0x03, 
                0x39, 
                0x64
            }
        })
        Name (CT3M, Package (0x04)
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x01, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001014, // Address
                        ,)
                }, 

                0x02, 
                0x01, 
                0x01F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001015, // Address
                        ,)
                }, 

                0x03, 
                0x11, 
                0xFA
            }
        })
        Name (CT2M, Package (0x03)
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x01, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001014, // Address
                        ,)
                }, 

                0x02, 
                0x01, 
                0x01F4
            }
        })
        Name (CT1M, Package (0x02)
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x01, 
                0x03E8
            }
        })
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x01000000) && !(PDC0 & 0x10)))
            {
                Return (CSTN) /* \_PR_.CPU0.CSTN */
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0200)))
            {
                If ((CFGD & 0x0200))
                {
                    Return (C6ME) /* \_PR_.CPU0.C6ME */
                }

                If ((CFGD & 0x80))
                {
                    Return (C4ME) /* \_PR_.CPU0.C4ME */
                }

                If ((!(CFGD & 0x80) && (CFGD & 0x40)))
                {
                    Return (C3ME) /* \_PR_.CPU0.C3ME */
                }

                If ((CFGD & 0x20))
                {
                    Return (C2ME) /* \_PR_.CPU0.C2ME */
                }

                Return (C1ME) /* \_PR_.CPU0.C1ME */
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0100)))
            {
                If ((CFGD & 0x0200))
                {
                    Return (CT6M) /* \_PR_.CPU0.CT6M */
                }

                If ((CFGD & 0x80))
                {
                    Return (CT4M) /* \_PR_.CPU0.CT4M */
                }

                If ((!(CFGD & 0x80) && (CFGD & 0x40)))
                {
                    Return (CT3M) /* \_PR_.CPU0.CT3M */
                }

                If ((CFGD & 0x20))
                {
                    Return (CT2M) /* \_PR_.CPU0.CT2M */
                }

                Return (CT1M) /* \_PR_.CPU0.CT1M */
            }

            If ((CFGD & 0x0200))
            {
                Return (CST6) /* \_PR_.CPU0.CST6 */
            }

            If ((CFGD & 0x80))
            {
                Return (CST4) /* \_PR_.CPU0.CST4 */
            }

            If ((CFGD & 0x40))
            {
                Return (CST3) /* \_PR_.CPU0.CST3 */
            }

            If ((CFGD & 0x20))
            {
                Return (CST2) /* \_PR_.CPU0.CST2 */
            }

            Return (CST1) /* \_PR_.CPU0.CST1 */
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TC-5C   ", 0x0000012E)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU7, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC7, UnknownObj)

    Scope (\_PR.CPU7)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC7 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x03, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x07, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TC-5C   ", 0x0000012E)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x30)
        {
            "CPU0IST ", 
            0xCFF8C85B, 
            0x000001DD, 
            "CPU1IST ", 
            0xCFF8CA38, 
            0x0000016E, 
            "CPU0CST ", 
            0xCFF8BE3B, 
            0x0000067D, 
            "CPU1CST ", 
            0xCFF8C4B8, 
            0x00000085, 
            "CPU2IST ", 
            0xCFF8CBA6, 
            0x00000402, 
            "CPU3IST ", 
            0xCFF8CFA8, 
            0x00000402, 
            "CPU2CST ", 
            0xCFF8C53D, 
            0x00000085, 
            "CPU3CST ", 
            0xCFF8C5C2, 
            0x00000085, 
            "CPU4IST ", 
            0xCFF8D3AA, 
            0x00000402, 
            "CPU5IST ", 
            0xCFF8D7AC, 
            0x00000402, 
            "CPU4CST ", 
            0xCFF8C647, 
            0x00000085, 
            "CPU5CST ", 
            0xCFF8C6CC, 
            0x00000085, 
            "CPU6IST ", 
            0xCFF8DBAE, 
            0x00000402, 
            "CPU7IST ", 
            0xCFF8DFB0, 
            0x00000402, 
            "CPU6CST ", 
            0xCFF8C751, 
            0x00000085, 
            "CPU7CST ", 
            0xCFF8C7D6, 
            0x00000085
        })
        Name (CFGD, 0x11236831)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\PDC4, 0x80000000)
        Name (\PDC5, 0x80000000)
        Name (\PDC6, 0x80000000)
        Name (\PDC7, 0x80000000)
        Name (\SDTL, 0x00)
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, 0x00)
        Name (HC0, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0._OSC.CAP0 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC0 & 0x09) == 0x09)) && !(SDTL & 0x01)))
                {
                    SDTL |= 0x01
                    OperationRegion (IST0, SystemMemory, DerefOf (SSDT [0x01]), DerefOf (SSDT [0x02]))
                    Load (IST0, HI0) /* \_PR_.CPU0.HI0_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If (((CFGD & 0x01000000) && (PDC0 & 0x10))){}
                If ((((CFGD & 0x01000000) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, 0x00)
        Name (HC1, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS1, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS1, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS1)
            CreateDWordField (Arg3, 0x04, CAP1)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS1 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS1 = 0x0A
                Return (Arg3)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1._OSC.CAP1 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC1 & 0x09) == 0x09)) && !(SDTL & 0x10)))
                {
                    SDTL |= 0x10
                    OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                    Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC1 & 0x18)) && !
                    (SDTL & 0x20)))
                {
                    SDTL |= 0x20
                    OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                    Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU2)
    {
        Name (HI2, 0x00)
        Name (HC2, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS2, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS2, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS2)
            CreateDWordField (Arg3, 0x04, CAP2)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS2 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS2 = 0x0A
                Return (Arg3)
            }

            PDC2 = ((PDC2 & 0x7FFFFFFF) | CAP2) /* \_PR_.CPU2._OSC.CAP2 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC2 & 0x09) == 0x09)) && !(SDTL & 0x04)))
                {
                    SDTL |= 0x04
                    OperationRegion (IST2, SystemMemory, DerefOf (SSDT [0x0D]), DerefOf (SSDT [0x0E]))
                    Load (IST2, HI2) /* \_PR_.CPU2.HI2_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC2 & 0x18)) && !
                    (SDTL & 0x08)))
                {
                    SDTL |= 0x08
                    OperationRegion (CST2, SystemMemory, DerefOf (SSDT [0x13]), DerefOf (SSDT [0x14]))
                    Load (CST2, HC2) /* \_PR_.CPU2.HC2_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU3)
    {
        Name (HI3, 0x00)
        Name (HC3, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS3, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS3, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS3)
            CreateDWordField (Arg3, 0x04, CAP3)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS3 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS3 = 0x0A
                Return (Arg3)
            }

            PDC3 = ((PDC3 & 0x7FFFFFFF) | CAP3) /* \_PR_.CPU3._OSC.CAP3 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC3 & 0x09) == 0x09)) && !(SDTL & 0x40)))
                {
                    SDTL |= 0x40
                    OperationRegion (IST3, SystemMemory, DerefOf (SSDT [0x10]), DerefOf (SSDT [0x11]))
                    Load (IST3, HI3) /* \_PR_.CPU3.HI3_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC3 & 0x18)) && !
                    (SDTL & 0x80)))
                {
                    SDTL |= 0x80
                    OperationRegion (CST3, SystemMemory, DerefOf (SSDT [0x16]), DerefOf (SSDT [0x17]))
                    Load (CST3, HC3) /* \_PR_.CPU3.HC3_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU4)
    {
        Name (HI4, 0x00)
        Name (HC4, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS4, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS4, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS4)
            CreateDWordField (Arg3, 0x04, CAP4)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS4 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS4 = 0x0A
                Return (Arg3)
            }

            PDC4 = ((PDC4 & 0x7FFFFFFF) | CAP4) /* \_PR_.CPU4._OSC.CAP4 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC4 & 0x09) == 0x09)) && !(SDTL & 0x0100)))
                {
                    SDTL |= 0x0100
                    OperationRegion (IST4, SystemMemory, DerefOf (SSDT [0x19]), DerefOf (SSDT [0x1A]))
                    Load (IST4, HI4) /* \_PR_.CPU4.HI4_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC4 & 0x18)) && !
                    (SDTL & 0x0200)))
                {
                    SDTL |= 0x0200
                    OperationRegion (CST4, SystemMemory, DerefOf (SSDT [0x1F]), DerefOf (SSDT [0x20]))
                    Load (CST4, HC4) /* \_PR_.CPU4.HC4_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU5)
    {
        Name (HI5, 0x00)
        Name (HC5, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS5, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS5, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS5)
            CreateDWordField (Arg3, 0x04, CAP5)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS5 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS5 = 0x0A
                Return (Arg3)
            }

            PDC5 = ((PDC5 & 0x7FFFFFFF) | CAP5) /* \_PR_.CPU5._OSC.CAP5 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC5 & 0x09) == 0x09)) && !(SDTL & 0x0400)))
                {
                    SDTL |= 0x0400
                    OperationRegion (IST5, SystemMemory, DerefOf (SSDT [0x1C]), DerefOf (SSDT [0x1D]))
                    Load (IST5, HI5) /* \_PR_.CPU5.HI5_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC5 & 0x18)) && !
                    (SDTL & 0x0800)))
                {
                    SDTL |= 0x0800
                    OperationRegion (CST5, SystemMemory, DerefOf (SSDT [0x22]), DerefOf (SSDT [0x23]))
                    Load (CST5, HC5) /* \_PR_.CPU5.HC5_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU6)
    {
        Name (HI6, 0x00)
        Name (HC6, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS6, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS6, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS6)
            CreateDWordField (Arg3, 0x04, CAP6)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS6 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS6 = 0x0A
                Return (Arg3)
            }

            PDC6 = ((PDC6 & 0x7FFFFFFF) | CAP6) /* \_PR_.CPU6._OSC.CAP6 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC6 & 0x09) == 0x09)) && !(SDTL & 0x1000)))
                {
                    SDTL |= 0x1000
                    OperationRegion (IST6, SystemMemory, DerefOf (SSDT [0x25]), DerefOf (SSDT [0x26]))
                    Load (IST6, HI6) /* \_PR_.CPU6.HI6_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC6 & 0x18)) && !
                    (SDTL & 0x2000)))
                {
                    SDTL |= 0x2000
                    OperationRegion (CST6, SystemMemory, DerefOf (SSDT [0x2B]), DerefOf (SSDT [0x2C]))
                    Load (CST6, HC6) /* \_PR_.CPU6.HC6_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU7)
    {
        Name (HI7, 0x00)
        Name (HC7, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS7, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS7, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS7)
            CreateDWordField (Arg3, 0x04, CAP7)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS7 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS7 = 0x0A
                Return (Arg3)
            }

            PDC7 = ((PDC7 & 0x7FFFFFFF) | CAP7) /* \_PR_.CPU7._OSC.CAP7 */
            If ((CFGD & 0x01))
            {
                If ((((((CFGD & 0x08000000) | (CFGD & 0x04000000
                    )) | ((CFGD & 0x01000000) | (CFGD & 0x02000000))) && 
                    ((PDC7 & 0x09) == 0x09)) && !(SDTL & 0x4000)))
                {
                    SDTL |= 0x4000
                    OperationRegion (IST7, SystemMemory, DerefOf (SSDT [0x28]), DerefOf (SSDT [0x29]))
                    Load (IST7, HI7) /* \_PR_.CPU7.HI7_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC7 & 0x18)) && !
                    (SDTL & 0x8000)))
                {
                    SDTL |= 0x8000
                    OperationRegion (CST7, SystemMemory, DerefOf (SSDT [0x2E]), DerefOf (SSDT [0x2F]))
                    Load (CST7, HC7) /* \_PR_.CPU7.HC7_ */
                }
            }

            Return (Arg3)
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TC-5C   ", 0x0000012E)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU2, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC2, UnknownObj)

    Scope (\_PR.CPU2)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC2 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x01, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x02, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TC-5C   ", 0x0000012E)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU4, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC4, UnknownObj)

    Scope (\_PR.CPU4)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC4 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x02, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x04, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TC-5C   ", 0x0000012E)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU6, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC6, UnknownObj)

    Scope (\_PR.CPU6)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC6 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x03, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x06, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TC-5C   ", 0x0000012E)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PSS, IntObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((PDC0 & 0x04))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x04,               // Bit Width
                        0x01,               // Bit Offset
                        0x0000000000001010, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x04,               // Bit Width
                        0x01,               // Bit Offset
                        0x0000000000001010, // Address
                        ,)
                }
            })
        }

        Name (TSSI, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                0x00, 
                0x00, 
                0x00
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                0x00, 
                0x0F, 
                0x00
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                0x00, 
                0x0E, 
                0x00
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                0x00, 
                0x0D, 
                0x00
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                0x00, 
                0x0C, 
                0x00
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                0x00, 
                0x0B, 
                0x00
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                0x00, 
                0x0A, 
                0x00
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                0x00, 
                0x09, 
                0x00
            }
        })
        Name (TSSM, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                0x00, 
                0x00, 
                0x00
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                0x00, 
                0x1E, 
                0x00
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                0x00, 
                0x1C, 
                0x00
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                0x00, 
                0x1A, 
                0x00
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                0x00, 
                0x18, 
                0x00
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                0x00, 
                0x16, 
                0x00
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                0x00, 
                0x14, 
                0x00
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                0x00, 
                0x12, 
                0x00
            }
        })
        Name (TSSF, 0x00)
        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((!TSSF && CondRefOf (_PSS)))
            {
                Local0 = _PSS /* External reference */
                Local1 = SizeOf (Local0)
                Local1--
                Local2 = DerefOf (DerefOf (Local0 [Local1]) [0x01])
                Local3 = 0x00
                While ((Local3 < SizeOf (TSSI)))
                {
                    Local4 = ((Local2 * (0x08 - Local3)) / 0x08)
                    DerefOf (TSSI [Local3]) [0x01] = Local4
                    DerefOf (TSSM [Local3]) [0x01] = Local4
                    Local3++
                }

                TSSF = Ones
            }

            If ((PDC0 & 0x04))
            {
                Return (TSSM) /* \_PR_.CPU0.TSSM */
            }

            Return (TSSI) /* \_PR_.CPU0.TSSI */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC0 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TC-5C   ", 0x0000012E)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC1 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TC-5C   ", 0x0000012E)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU3, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC3, UnknownObj)

    Scope (\_PR.CPU3)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC3 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x01, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x03, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



TCPA
----
[000h 0000 004h]                   Signature : "TCPA"    [Trusted Computing Platform Alliance Table]
[004h 0004 004h]                Table Length : 00000032
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : F5
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "TC-5C   "
[018h 0024 004h]                Oem Revision : 0000012E
[01Ch 0028 004h]             Asl Compiler ID : "PTL "
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 002h]              Platform Class : 0000
[026h 0038 004h]        Min Event Log Length : 00010000
[02Ah 0042 008h]           Event Log Address : 0000000000000000

Raw Table Data: Length 50 (0x32)

    0000: 54 43 50 41 32 00 00 00 02 F5 4C 45 4E 4F 56 4F  // TCPA2.....LENOVO
    0010: 54 43 2D 35 43 20 20 20 2E 01 00 00 50 54 4C 20  // TC-5C   ....PTL 
    0020: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    0030: 00 00                                            // ..


